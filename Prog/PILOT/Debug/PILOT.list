
PILOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .label        00000094  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00005560  08000154  08000154  00010154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000f8  080056b4  080056b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080057ac  080057ac  00020014  2**0
                  CONTENTS
  5 .ARM          00000000  080057ac  080057ac  00020014  2**0
                  CONTENTS
  6 .preinit_array 00000000  080057ac  080057ac  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  080057ac  080057ac  000157ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080057b4  080057b4  000157b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000014  20000000  080057b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000194  20000014  080057cc  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a8  080057cc  000201a8  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a678  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000020e0  00000000  00000000  0002a6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000ac8  00000000  00000000  0002c798  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009d0  00000000  00000000  0002d260  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00013255  00000000  00000000  0002dc30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000089a4  00000000  00000000  00040e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006a0a2  00000000  00000000  00049829  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000b38cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002740  00000000  00000000  000b3948  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000154 <__do_global_dtors_aux>:
 8000154:	b510      	push	{r4, lr}
 8000156:	4c06      	ldr	r4, [pc, #24]	; (8000170 <__do_global_dtors_aux+0x1c>)
 8000158:	7823      	ldrb	r3, [r4, #0]
 800015a:	2b00      	cmp	r3, #0
 800015c:	d107      	bne.n	800016e <__do_global_dtors_aux+0x1a>
 800015e:	4b05      	ldr	r3, [pc, #20]	; (8000174 <__do_global_dtors_aux+0x20>)
 8000160:	2b00      	cmp	r3, #0
 8000162:	d002      	beq.n	800016a <__do_global_dtors_aux+0x16>
 8000164:	4804      	ldr	r0, [pc, #16]	; (8000178 <__do_global_dtors_aux+0x24>)
 8000166:	e000      	b.n	800016a <__do_global_dtors_aux+0x16>
 8000168:	bf00      	nop
 800016a:	2301      	movs	r3, #1
 800016c:	7023      	strb	r3, [r4, #0]
 800016e:	bd10      	pop	{r4, pc}
 8000170:	20000014 	.word	0x20000014
 8000174:	00000000 	.word	0x00000000
 8000178:	0800569c 	.word	0x0800569c

0800017c <frame_dummy>:
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <frame_dummy+0x14>)
 800017e:	b510      	push	{r4, lr}
 8000180:	2b00      	cmp	r3, #0
 8000182:	d003      	beq.n	800018c <frame_dummy+0x10>
 8000184:	4903      	ldr	r1, [pc, #12]	; (8000194 <frame_dummy+0x18>)
 8000186:	4804      	ldr	r0, [pc, #16]	; (8000198 <frame_dummy+0x1c>)
 8000188:	e000      	b.n	800018c <frame_dummy+0x10>
 800018a:	bf00      	nop
 800018c:	bd10      	pop	{r4, pc}
 800018e:	46c0      	nop			; (mov r8, r8)
 8000190:	00000000 	.word	0x00000000
 8000194:	20000018 	.word	0x20000018
 8000198:	0800569c 	.word	0x0800569c

0800019c <__udivsi3>:
 800019c:	2200      	movs	r2, #0
 800019e:	0843      	lsrs	r3, r0, #1
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d374      	bcc.n	800028e <__udivsi3+0xf2>
 80001a4:	0903      	lsrs	r3, r0, #4
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d35f      	bcc.n	800026a <__udivsi3+0xce>
 80001aa:	0a03      	lsrs	r3, r0, #8
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d344      	bcc.n	800023a <__udivsi3+0x9e>
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d328      	bcc.n	8000208 <__udivsi3+0x6c>
 80001b6:	0c03      	lsrs	r3, r0, #16
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d30d      	bcc.n	80001d8 <__udivsi3+0x3c>
 80001bc:	22ff      	movs	r2, #255	; 0xff
 80001be:	0209      	lsls	r1, r1, #8
 80001c0:	ba12      	rev	r2, r2
 80001c2:	0c03      	lsrs	r3, r0, #16
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d302      	bcc.n	80001ce <__udivsi3+0x32>
 80001c8:	1212      	asrs	r2, r2, #8
 80001ca:	0209      	lsls	r1, r1, #8
 80001cc:	d065      	beq.n	800029a <__udivsi3+0xfe>
 80001ce:	0b03      	lsrs	r3, r0, #12
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d319      	bcc.n	8000208 <__udivsi3+0x6c>
 80001d4:	e000      	b.n	80001d8 <__udivsi3+0x3c>
 80001d6:	0a09      	lsrs	r1, r1, #8
 80001d8:	0bc3      	lsrs	r3, r0, #15
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x46>
 80001de:	03cb      	lsls	r3, r1, #15
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0b83      	lsrs	r3, r0, #14
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x52>
 80001ea:	038b      	lsls	r3, r1, #14
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0b43      	lsrs	r3, r0, #13
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__udivsi3+0x5e>
 80001f6:	034b      	lsls	r3, r1, #13
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	0b03      	lsrs	r3, r0, #12
 80001fe:	428b      	cmp	r3, r1
 8000200:	d301      	bcc.n	8000206 <__udivsi3+0x6a>
 8000202:	030b      	lsls	r3, r1, #12
 8000204:	1ac0      	subs	r0, r0, r3
 8000206:	4152      	adcs	r2, r2
 8000208:	0ac3      	lsrs	r3, r0, #11
 800020a:	428b      	cmp	r3, r1
 800020c:	d301      	bcc.n	8000212 <__udivsi3+0x76>
 800020e:	02cb      	lsls	r3, r1, #11
 8000210:	1ac0      	subs	r0, r0, r3
 8000212:	4152      	adcs	r2, r2
 8000214:	0a83      	lsrs	r3, r0, #10
 8000216:	428b      	cmp	r3, r1
 8000218:	d301      	bcc.n	800021e <__udivsi3+0x82>
 800021a:	028b      	lsls	r3, r1, #10
 800021c:	1ac0      	subs	r0, r0, r3
 800021e:	4152      	adcs	r2, r2
 8000220:	0a43      	lsrs	r3, r0, #9
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x8e>
 8000226:	024b      	lsls	r3, r1, #9
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d301      	bcc.n	8000236 <__udivsi3+0x9a>
 8000232:	020b      	lsls	r3, r1, #8
 8000234:	1ac0      	subs	r0, r0, r3
 8000236:	4152      	adcs	r2, r2
 8000238:	d2cd      	bcs.n	80001d6 <__udivsi3+0x3a>
 800023a:	09c3      	lsrs	r3, r0, #7
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xa8>
 8000240:	01cb      	lsls	r3, r1, #7
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	0983      	lsrs	r3, r0, #6
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__udivsi3+0xb4>
 800024c:	018b      	lsls	r3, r1, #6
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	0943      	lsrs	r3, r0, #5
 8000254:	428b      	cmp	r3, r1
 8000256:	d301      	bcc.n	800025c <__udivsi3+0xc0>
 8000258:	014b      	lsls	r3, r1, #5
 800025a:	1ac0      	subs	r0, r0, r3
 800025c:	4152      	adcs	r2, r2
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__udivsi3+0xcc>
 8000264:	010b      	lsls	r3, r1, #4
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	08c3      	lsrs	r3, r0, #3
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__udivsi3+0xd8>
 8000270:	00cb      	lsls	r3, r1, #3
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0883      	lsrs	r3, r0, #2
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__udivsi3+0xe4>
 800027c:	008b      	lsls	r3, r1, #2
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0843      	lsrs	r3, r0, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__udivsi3+0xf0>
 8000288:	004b      	lsls	r3, r1, #1
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	1a41      	subs	r1, r0, r1
 8000290:	d200      	bcs.n	8000294 <__udivsi3+0xf8>
 8000292:	4601      	mov	r1, r0
 8000294:	4152      	adcs	r2, r2
 8000296:	4610      	mov	r0, r2
 8000298:	4770      	bx	lr
 800029a:	e7ff      	b.n	800029c <__udivsi3+0x100>
 800029c:	b501      	push	{r0, lr}
 800029e:	2000      	movs	r0, #0
 80002a0:	f000 f806 	bl	80002b0 <__aeabi_idiv0>
 80002a4:	bd02      	pop	{r1, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_uidivmod>:
 80002a8:	2900      	cmp	r1, #0
 80002aa:	d0f7      	beq.n	800029c <__udivsi3+0x100>
 80002ac:	e776      	b.n	800019c <__udivsi3>
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_idiv0>:
 80002b0:	4770      	bx	lr
 80002b2:	46c0      	nop			; (mov r8, r8)

080002b4 <__aeabi_d2uiz>:
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	2200      	movs	r2, #0
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <__aeabi_d2uiz+0x38>)
 80002ba:	0004      	movs	r4, r0
 80002bc:	000d      	movs	r5, r1
 80002be:	f001 fa2d 	bl	800171c <__aeabi_dcmpge>
 80002c2:	2800      	cmp	r0, #0
 80002c4:	d104      	bne.n	80002d0 <__aeabi_d2uiz+0x1c>
 80002c6:	0020      	movs	r0, r4
 80002c8:	0029      	movs	r1, r5
 80002ca:	f001 f8cd 	bl	8001468 <__aeabi_d2iz>
 80002ce:	bd70      	pop	{r4, r5, r6, pc}
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <__aeabi_d2uiz+0x38>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	0020      	movs	r0, r4
 80002d6:	0029      	movs	r1, r5
 80002d8:	f000 fd7e 	bl	8000dd8 <__aeabi_dsub>
 80002dc:	f001 f8c4 	bl	8001468 <__aeabi_d2iz>
 80002e0:	2380      	movs	r3, #128	; 0x80
 80002e2:	061b      	lsls	r3, r3, #24
 80002e4:	469c      	mov	ip, r3
 80002e6:	4460      	add	r0, ip
 80002e8:	e7f1      	b.n	80002ce <__aeabi_d2uiz+0x1a>
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	41e00000 	.word	0x41e00000

080002f0 <__aeabi_ddiv>:
 80002f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f2:	4657      	mov	r7, sl
 80002f4:	46de      	mov	lr, fp
 80002f6:	464e      	mov	r6, r9
 80002f8:	4645      	mov	r5, r8
 80002fa:	b5e0      	push	{r5, r6, r7, lr}
 80002fc:	4683      	mov	fp, r0
 80002fe:	0007      	movs	r7, r0
 8000300:	030e      	lsls	r6, r1, #12
 8000302:	0048      	lsls	r0, r1, #1
 8000304:	b085      	sub	sp, #20
 8000306:	4692      	mov	sl, r2
 8000308:	001c      	movs	r4, r3
 800030a:	0b36      	lsrs	r6, r6, #12
 800030c:	0d40      	lsrs	r0, r0, #21
 800030e:	0fcd      	lsrs	r5, r1, #31
 8000310:	2800      	cmp	r0, #0
 8000312:	d100      	bne.n	8000316 <__aeabi_ddiv+0x26>
 8000314:	e09d      	b.n	8000452 <__aeabi_ddiv+0x162>
 8000316:	4b95      	ldr	r3, [pc, #596]	; (800056c <__aeabi_ddiv+0x27c>)
 8000318:	4298      	cmp	r0, r3
 800031a:	d039      	beq.n	8000390 <__aeabi_ddiv+0xa0>
 800031c:	2380      	movs	r3, #128	; 0x80
 800031e:	00f6      	lsls	r6, r6, #3
 8000320:	041b      	lsls	r3, r3, #16
 8000322:	431e      	orrs	r6, r3
 8000324:	4a92      	ldr	r2, [pc, #584]	; (8000570 <__aeabi_ddiv+0x280>)
 8000326:	0f7b      	lsrs	r3, r7, #29
 8000328:	4333      	orrs	r3, r6
 800032a:	4699      	mov	r9, r3
 800032c:	4694      	mov	ip, r2
 800032e:	0003      	movs	r3, r0
 8000330:	4463      	add	r3, ip
 8000332:	9300      	str	r3, [sp, #0]
 8000334:	2300      	movs	r3, #0
 8000336:	2600      	movs	r6, #0
 8000338:	00ff      	lsls	r7, r7, #3
 800033a:	9302      	str	r3, [sp, #8]
 800033c:	0323      	lsls	r3, r4, #12
 800033e:	0b1b      	lsrs	r3, r3, #12
 8000340:	4698      	mov	r8, r3
 8000342:	0063      	lsls	r3, r4, #1
 8000344:	0fe4      	lsrs	r4, r4, #31
 8000346:	4652      	mov	r2, sl
 8000348:	0d5b      	lsrs	r3, r3, #21
 800034a:	9401      	str	r4, [sp, #4]
 800034c:	d100      	bne.n	8000350 <__aeabi_ddiv+0x60>
 800034e:	e0b3      	b.n	80004b8 <__aeabi_ddiv+0x1c8>
 8000350:	4986      	ldr	r1, [pc, #536]	; (800056c <__aeabi_ddiv+0x27c>)
 8000352:	428b      	cmp	r3, r1
 8000354:	d100      	bne.n	8000358 <__aeabi_ddiv+0x68>
 8000356:	e09e      	b.n	8000496 <__aeabi_ddiv+0x1a6>
 8000358:	4642      	mov	r2, r8
 800035a:	00d1      	lsls	r1, r2, #3
 800035c:	2280      	movs	r2, #128	; 0x80
 800035e:	0412      	lsls	r2, r2, #16
 8000360:	430a      	orrs	r2, r1
 8000362:	4651      	mov	r1, sl
 8000364:	0f49      	lsrs	r1, r1, #29
 8000366:	4311      	orrs	r1, r2
 8000368:	468b      	mov	fp, r1
 800036a:	4981      	ldr	r1, [pc, #516]	; (8000570 <__aeabi_ddiv+0x280>)
 800036c:	4652      	mov	r2, sl
 800036e:	468c      	mov	ip, r1
 8000370:	9900      	ldr	r1, [sp, #0]
 8000372:	4463      	add	r3, ip
 8000374:	1acb      	subs	r3, r1, r3
 8000376:	2100      	movs	r1, #0
 8000378:	00d2      	lsls	r2, r2, #3
 800037a:	9300      	str	r3, [sp, #0]
 800037c:	002b      	movs	r3, r5
 800037e:	4063      	eors	r3, r4
 8000380:	469a      	mov	sl, r3
 8000382:	2e0f      	cmp	r6, #15
 8000384:	d900      	bls.n	8000388 <__aeabi_ddiv+0x98>
 8000386:	e105      	b.n	8000594 <__aeabi_ddiv+0x2a4>
 8000388:	4b7a      	ldr	r3, [pc, #488]	; (8000574 <__aeabi_ddiv+0x284>)
 800038a:	00b6      	lsls	r6, r6, #2
 800038c:	599b      	ldr	r3, [r3, r6]
 800038e:	469f      	mov	pc, r3
 8000390:	465b      	mov	r3, fp
 8000392:	4333      	orrs	r3, r6
 8000394:	4699      	mov	r9, r3
 8000396:	d000      	beq.n	800039a <__aeabi_ddiv+0xaa>
 8000398:	e0b8      	b.n	800050c <__aeabi_ddiv+0x21c>
 800039a:	2302      	movs	r3, #2
 800039c:	2608      	movs	r6, #8
 800039e:	2700      	movs	r7, #0
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9302      	str	r3, [sp, #8]
 80003a4:	e7ca      	b.n	800033c <__aeabi_ddiv+0x4c>
 80003a6:	46cb      	mov	fp, r9
 80003a8:	003a      	movs	r2, r7
 80003aa:	9902      	ldr	r1, [sp, #8]
 80003ac:	9501      	str	r5, [sp, #4]
 80003ae:	9b01      	ldr	r3, [sp, #4]
 80003b0:	469a      	mov	sl, r3
 80003b2:	2902      	cmp	r1, #2
 80003b4:	d027      	beq.n	8000406 <__aeabi_ddiv+0x116>
 80003b6:	2903      	cmp	r1, #3
 80003b8:	d100      	bne.n	80003bc <__aeabi_ddiv+0xcc>
 80003ba:	e280      	b.n	80008be <__aeabi_ddiv+0x5ce>
 80003bc:	2901      	cmp	r1, #1
 80003be:	d044      	beq.n	800044a <__aeabi_ddiv+0x15a>
 80003c0:	496d      	ldr	r1, [pc, #436]	; (8000578 <__aeabi_ddiv+0x288>)
 80003c2:	9b00      	ldr	r3, [sp, #0]
 80003c4:	468c      	mov	ip, r1
 80003c6:	4463      	add	r3, ip
 80003c8:	001c      	movs	r4, r3
 80003ca:	2c00      	cmp	r4, #0
 80003cc:	dd38      	ble.n	8000440 <__aeabi_ddiv+0x150>
 80003ce:	0753      	lsls	r3, r2, #29
 80003d0:	d000      	beq.n	80003d4 <__aeabi_ddiv+0xe4>
 80003d2:	e213      	b.n	80007fc <__aeabi_ddiv+0x50c>
 80003d4:	08d2      	lsrs	r2, r2, #3
 80003d6:	465b      	mov	r3, fp
 80003d8:	01db      	lsls	r3, r3, #7
 80003da:	d509      	bpl.n	80003f0 <__aeabi_ddiv+0x100>
 80003dc:	4659      	mov	r1, fp
 80003de:	4b67      	ldr	r3, [pc, #412]	; (800057c <__aeabi_ddiv+0x28c>)
 80003e0:	4019      	ands	r1, r3
 80003e2:	468b      	mov	fp, r1
 80003e4:	2180      	movs	r1, #128	; 0x80
 80003e6:	00c9      	lsls	r1, r1, #3
 80003e8:	468c      	mov	ip, r1
 80003ea:	9b00      	ldr	r3, [sp, #0]
 80003ec:	4463      	add	r3, ip
 80003ee:	001c      	movs	r4, r3
 80003f0:	4b63      	ldr	r3, [pc, #396]	; (8000580 <__aeabi_ddiv+0x290>)
 80003f2:	429c      	cmp	r4, r3
 80003f4:	dc07      	bgt.n	8000406 <__aeabi_ddiv+0x116>
 80003f6:	465b      	mov	r3, fp
 80003f8:	0564      	lsls	r4, r4, #21
 80003fa:	075f      	lsls	r7, r3, #29
 80003fc:	025b      	lsls	r3, r3, #9
 80003fe:	4317      	orrs	r7, r2
 8000400:	0b1b      	lsrs	r3, r3, #12
 8000402:	0d62      	lsrs	r2, r4, #21
 8000404:	e002      	b.n	800040c <__aeabi_ddiv+0x11c>
 8000406:	2300      	movs	r3, #0
 8000408:	2700      	movs	r7, #0
 800040a:	4a58      	ldr	r2, [pc, #352]	; (800056c <__aeabi_ddiv+0x27c>)
 800040c:	2100      	movs	r1, #0
 800040e:	031b      	lsls	r3, r3, #12
 8000410:	0b1c      	lsrs	r4, r3, #12
 8000412:	0d0b      	lsrs	r3, r1, #20
 8000414:	051b      	lsls	r3, r3, #20
 8000416:	4323      	orrs	r3, r4
 8000418:	0514      	lsls	r4, r2, #20
 800041a:	4a5a      	ldr	r2, [pc, #360]	; (8000584 <__aeabi_ddiv+0x294>)
 800041c:	0038      	movs	r0, r7
 800041e:	4013      	ands	r3, r2
 8000420:	431c      	orrs	r4, r3
 8000422:	4653      	mov	r3, sl
 8000424:	0064      	lsls	r4, r4, #1
 8000426:	07db      	lsls	r3, r3, #31
 8000428:	0864      	lsrs	r4, r4, #1
 800042a:	431c      	orrs	r4, r3
 800042c:	0021      	movs	r1, r4
 800042e:	b005      	add	sp, #20
 8000430:	bc3c      	pop	{r2, r3, r4, r5}
 8000432:	4690      	mov	r8, r2
 8000434:	4699      	mov	r9, r3
 8000436:	46a2      	mov	sl, r4
 8000438:	46ab      	mov	fp, r5
 800043a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800043c:	2201      	movs	r2, #1
 800043e:	4252      	negs	r2, r2
 8000440:	2301      	movs	r3, #1
 8000442:	1b1b      	subs	r3, r3, r4
 8000444:	2b38      	cmp	r3, #56	; 0x38
 8000446:	dc00      	bgt.n	800044a <__aeabi_ddiv+0x15a>
 8000448:	e1ad      	b.n	80007a6 <__aeabi_ddiv+0x4b6>
 800044a:	2200      	movs	r2, #0
 800044c:	2300      	movs	r3, #0
 800044e:	2700      	movs	r7, #0
 8000450:	e7dc      	b.n	800040c <__aeabi_ddiv+0x11c>
 8000452:	465b      	mov	r3, fp
 8000454:	4333      	orrs	r3, r6
 8000456:	4699      	mov	r9, r3
 8000458:	d05e      	beq.n	8000518 <__aeabi_ddiv+0x228>
 800045a:	2e00      	cmp	r6, #0
 800045c:	d100      	bne.n	8000460 <__aeabi_ddiv+0x170>
 800045e:	e18a      	b.n	8000776 <__aeabi_ddiv+0x486>
 8000460:	0030      	movs	r0, r6
 8000462:	f001 f965 	bl	8001730 <__clzsi2>
 8000466:	0003      	movs	r3, r0
 8000468:	3b0b      	subs	r3, #11
 800046a:	2b1c      	cmp	r3, #28
 800046c:	dd00      	ble.n	8000470 <__aeabi_ddiv+0x180>
 800046e:	e17b      	b.n	8000768 <__aeabi_ddiv+0x478>
 8000470:	221d      	movs	r2, #29
 8000472:	1ad3      	subs	r3, r2, r3
 8000474:	465a      	mov	r2, fp
 8000476:	0001      	movs	r1, r0
 8000478:	40da      	lsrs	r2, r3
 800047a:	3908      	subs	r1, #8
 800047c:	408e      	lsls	r6, r1
 800047e:	0013      	movs	r3, r2
 8000480:	465f      	mov	r7, fp
 8000482:	4333      	orrs	r3, r6
 8000484:	4699      	mov	r9, r3
 8000486:	408f      	lsls	r7, r1
 8000488:	4b3f      	ldr	r3, [pc, #252]	; (8000588 <__aeabi_ddiv+0x298>)
 800048a:	2600      	movs	r6, #0
 800048c:	1a1b      	subs	r3, r3, r0
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	2300      	movs	r3, #0
 8000492:	9302      	str	r3, [sp, #8]
 8000494:	e752      	b.n	800033c <__aeabi_ddiv+0x4c>
 8000496:	4641      	mov	r1, r8
 8000498:	4653      	mov	r3, sl
 800049a:	430b      	orrs	r3, r1
 800049c:	493b      	ldr	r1, [pc, #236]	; (800058c <__aeabi_ddiv+0x29c>)
 800049e:	469b      	mov	fp, r3
 80004a0:	468c      	mov	ip, r1
 80004a2:	9b00      	ldr	r3, [sp, #0]
 80004a4:	4463      	add	r3, ip
 80004a6:	9300      	str	r3, [sp, #0]
 80004a8:	465b      	mov	r3, fp
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d13b      	bne.n	8000526 <__aeabi_ddiv+0x236>
 80004ae:	2302      	movs	r3, #2
 80004b0:	2200      	movs	r2, #0
 80004b2:	431e      	orrs	r6, r3
 80004b4:	2102      	movs	r1, #2
 80004b6:	e761      	b.n	800037c <__aeabi_ddiv+0x8c>
 80004b8:	4643      	mov	r3, r8
 80004ba:	4313      	orrs	r3, r2
 80004bc:	469b      	mov	fp, r3
 80004be:	d037      	beq.n	8000530 <__aeabi_ddiv+0x240>
 80004c0:	4643      	mov	r3, r8
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d100      	bne.n	80004c8 <__aeabi_ddiv+0x1d8>
 80004c6:	e162      	b.n	800078e <__aeabi_ddiv+0x49e>
 80004c8:	4640      	mov	r0, r8
 80004ca:	f001 f931 	bl	8001730 <__clzsi2>
 80004ce:	0003      	movs	r3, r0
 80004d0:	3b0b      	subs	r3, #11
 80004d2:	2b1c      	cmp	r3, #28
 80004d4:	dd00      	ble.n	80004d8 <__aeabi_ddiv+0x1e8>
 80004d6:	e153      	b.n	8000780 <__aeabi_ddiv+0x490>
 80004d8:	0002      	movs	r2, r0
 80004da:	4641      	mov	r1, r8
 80004dc:	3a08      	subs	r2, #8
 80004de:	4091      	lsls	r1, r2
 80004e0:	4688      	mov	r8, r1
 80004e2:	211d      	movs	r1, #29
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	4651      	mov	r1, sl
 80004e8:	40d9      	lsrs	r1, r3
 80004ea:	000b      	movs	r3, r1
 80004ec:	4641      	mov	r1, r8
 80004ee:	430b      	orrs	r3, r1
 80004f0:	469b      	mov	fp, r3
 80004f2:	4653      	mov	r3, sl
 80004f4:	4093      	lsls	r3, r2
 80004f6:	001a      	movs	r2, r3
 80004f8:	9b00      	ldr	r3, [sp, #0]
 80004fa:	4925      	ldr	r1, [pc, #148]	; (8000590 <__aeabi_ddiv+0x2a0>)
 80004fc:	469c      	mov	ip, r3
 80004fe:	4460      	add	r0, ip
 8000500:	0003      	movs	r3, r0
 8000502:	468c      	mov	ip, r1
 8000504:	4463      	add	r3, ip
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	2100      	movs	r1, #0
 800050a:	e737      	b.n	800037c <__aeabi_ddiv+0x8c>
 800050c:	2303      	movs	r3, #3
 800050e:	46b1      	mov	r9, r6
 8000510:	9000      	str	r0, [sp, #0]
 8000512:	260c      	movs	r6, #12
 8000514:	9302      	str	r3, [sp, #8]
 8000516:	e711      	b.n	800033c <__aeabi_ddiv+0x4c>
 8000518:	2300      	movs	r3, #0
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	2604      	movs	r6, #4
 8000520:	2700      	movs	r7, #0
 8000522:	9302      	str	r3, [sp, #8]
 8000524:	e70a      	b.n	800033c <__aeabi_ddiv+0x4c>
 8000526:	2303      	movs	r3, #3
 8000528:	46c3      	mov	fp, r8
 800052a:	431e      	orrs	r6, r3
 800052c:	2103      	movs	r1, #3
 800052e:	e725      	b.n	800037c <__aeabi_ddiv+0x8c>
 8000530:	3301      	adds	r3, #1
 8000532:	431e      	orrs	r6, r3
 8000534:	2200      	movs	r2, #0
 8000536:	2101      	movs	r1, #1
 8000538:	e720      	b.n	800037c <__aeabi_ddiv+0x8c>
 800053a:	2300      	movs	r3, #0
 800053c:	469a      	mov	sl, r3
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	2700      	movs	r7, #0
 8000542:	031b      	lsls	r3, r3, #12
 8000544:	4a09      	ldr	r2, [pc, #36]	; (800056c <__aeabi_ddiv+0x27c>)
 8000546:	e761      	b.n	800040c <__aeabi_ddiv+0x11c>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	4649      	mov	r1, r9
 800054c:	031b      	lsls	r3, r3, #12
 800054e:	4219      	tst	r1, r3
 8000550:	d100      	bne.n	8000554 <__aeabi_ddiv+0x264>
 8000552:	e0e2      	b.n	800071a <__aeabi_ddiv+0x42a>
 8000554:	4659      	mov	r1, fp
 8000556:	4219      	tst	r1, r3
 8000558:	d000      	beq.n	800055c <__aeabi_ddiv+0x26c>
 800055a:	e0de      	b.n	800071a <__aeabi_ddiv+0x42a>
 800055c:	430b      	orrs	r3, r1
 800055e:	031b      	lsls	r3, r3, #12
 8000560:	0017      	movs	r7, r2
 8000562:	0b1b      	lsrs	r3, r3, #12
 8000564:	46a2      	mov	sl, r4
 8000566:	4a01      	ldr	r2, [pc, #4]	; (800056c <__aeabi_ddiv+0x27c>)
 8000568:	e750      	b.n	800040c <__aeabi_ddiv+0x11c>
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	000007ff 	.word	0x000007ff
 8000570:	fffffc01 	.word	0xfffffc01
 8000574:	080056d4 	.word	0x080056d4
 8000578:	000003ff 	.word	0x000003ff
 800057c:	feffffff 	.word	0xfeffffff
 8000580:	000007fe 	.word	0x000007fe
 8000584:	800fffff 	.word	0x800fffff
 8000588:	fffffc0d 	.word	0xfffffc0d
 800058c:	fffff801 	.word	0xfffff801
 8000590:	000003f3 	.word	0x000003f3
 8000594:	45d9      	cmp	r9, fp
 8000596:	d900      	bls.n	800059a <__aeabi_ddiv+0x2aa>
 8000598:	e0cb      	b.n	8000732 <__aeabi_ddiv+0x442>
 800059a:	d100      	bne.n	800059e <__aeabi_ddiv+0x2ae>
 800059c:	e0c6      	b.n	800072c <__aeabi_ddiv+0x43c>
 800059e:	003c      	movs	r4, r7
 80005a0:	4648      	mov	r0, r9
 80005a2:	2700      	movs	r7, #0
 80005a4:	9b00      	ldr	r3, [sp, #0]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	465b      	mov	r3, fp
 80005ac:	0e16      	lsrs	r6, r2, #24
 80005ae:	021b      	lsls	r3, r3, #8
 80005b0:	431e      	orrs	r6, r3
 80005b2:	0213      	lsls	r3, r2, #8
 80005b4:	4698      	mov	r8, r3
 80005b6:	0433      	lsls	r3, r6, #16
 80005b8:	0c1b      	lsrs	r3, r3, #16
 80005ba:	4699      	mov	r9, r3
 80005bc:	0c31      	lsrs	r1, r6, #16
 80005be:	9101      	str	r1, [sp, #4]
 80005c0:	f7ff fe72 	bl	80002a8 <__aeabi_uidivmod>
 80005c4:	464a      	mov	r2, r9
 80005c6:	4342      	muls	r2, r0
 80005c8:	040b      	lsls	r3, r1, #16
 80005ca:	0c21      	lsrs	r1, r4, #16
 80005cc:	0005      	movs	r5, r0
 80005ce:	4319      	orrs	r1, r3
 80005d0:	428a      	cmp	r2, r1
 80005d2:	d907      	bls.n	80005e4 <__aeabi_ddiv+0x2f4>
 80005d4:	1989      	adds	r1, r1, r6
 80005d6:	3d01      	subs	r5, #1
 80005d8:	428e      	cmp	r6, r1
 80005da:	d803      	bhi.n	80005e4 <__aeabi_ddiv+0x2f4>
 80005dc:	428a      	cmp	r2, r1
 80005de:	d901      	bls.n	80005e4 <__aeabi_ddiv+0x2f4>
 80005e0:	1e85      	subs	r5, r0, #2
 80005e2:	1989      	adds	r1, r1, r6
 80005e4:	1a88      	subs	r0, r1, r2
 80005e6:	9901      	ldr	r1, [sp, #4]
 80005e8:	f7ff fe5e 	bl	80002a8 <__aeabi_uidivmod>
 80005ec:	0409      	lsls	r1, r1, #16
 80005ee:	468c      	mov	ip, r1
 80005f0:	464a      	mov	r2, r9
 80005f2:	0421      	lsls	r1, r4, #16
 80005f4:	4664      	mov	r4, ip
 80005f6:	4342      	muls	r2, r0
 80005f8:	0c09      	lsrs	r1, r1, #16
 80005fa:	0003      	movs	r3, r0
 80005fc:	4321      	orrs	r1, r4
 80005fe:	428a      	cmp	r2, r1
 8000600:	d904      	bls.n	800060c <__aeabi_ddiv+0x31c>
 8000602:	1989      	adds	r1, r1, r6
 8000604:	3b01      	subs	r3, #1
 8000606:	428e      	cmp	r6, r1
 8000608:	d800      	bhi.n	800060c <__aeabi_ddiv+0x31c>
 800060a:	e0f1      	b.n	80007f0 <__aeabi_ddiv+0x500>
 800060c:	042d      	lsls	r5, r5, #16
 800060e:	431d      	orrs	r5, r3
 8000610:	46ab      	mov	fp, r5
 8000612:	4643      	mov	r3, r8
 8000614:	1a89      	subs	r1, r1, r2
 8000616:	4642      	mov	r2, r8
 8000618:	0c28      	lsrs	r0, r5, #16
 800061a:	0412      	lsls	r2, r2, #16
 800061c:	0c1d      	lsrs	r5, r3, #16
 800061e:	465b      	mov	r3, fp
 8000620:	0c14      	lsrs	r4, r2, #16
 8000622:	0022      	movs	r2, r4
 8000624:	041b      	lsls	r3, r3, #16
 8000626:	0c1b      	lsrs	r3, r3, #16
 8000628:	435a      	muls	r2, r3
 800062a:	9403      	str	r4, [sp, #12]
 800062c:	436b      	muls	r3, r5
 800062e:	4344      	muls	r4, r0
 8000630:	9502      	str	r5, [sp, #8]
 8000632:	4368      	muls	r0, r5
 8000634:	191b      	adds	r3, r3, r4
 8000636:	0c15      	lsrs	r5, r2, #16
 8000638:	18eb      	adds	r3, r5, r3
 800063a:	429c      	cmp	r4, r3
 800063c:	d903      	bls.n	8000646 <__aeabi_ddiv+0x356>
 800063e:	2480      	movs	r4, #128	; 0x80
 8000640:	0264      	lsls	r4, r4, #9
 8000642:	46a4      	mov	ip, r4
 8000644:	4460      	add	r0, ip
 8000646:	0c1c      	lsrs	r4, r3, #16
 8000648:	0415      	lsls	r5, r2, #16
 800064a:	041b      	lsls	r3, r3, #16
 800064c:	0c2d      	lsrs	r5, r5, #16
 800064e:	1820      	adds	r0, r4, r0
 8000650:	195d      	adds	r5, r3, r5
 8000652:	4281      	cmp	r1, r0
 8000654:	d377      	bcc.n	8000746 <__aeabi_ddiv+0x456>
 8000656:	d073      	beq.n	8000740 <__aeabi_ddiv+0x450>
 8000658:	1a0c      	subs	r4, r1, r0
 800065a:	4aa2      	ldr	r2, [pc, #648]	; (80008e4 <__aeabi_ddiv+0x5f4>)
 800065c:	1b7d      	subs	r5, r7, r5
 800065e:	42af      	cmp	r7, r5
 8000660:	41bf      	sbcs	r7, r7
 8000662:	4694      	mov	ip, r2
 8000664:	9b00      	ldr	r3, [sp, #0]
 8000666:	427f      	negs	r7, r7
 8000668:	4463      	add	r3, ip
 800066a:	1be0      	subs	r0, r4, r7
 800066c:	001c      	movs	r4, r3
 800066e:	4286      	cmp	r6, r0
 8000670:	d100      	bne.n	8000674 <__aeabi_ddiv+0x384>
 8000672:	e0db      	b.n	800082c <__aeabi_ddiv+0x53c>
 8000674:	9901      	ldr	r1, [sp, #4]
 8000676:	f7ff fe17 	bl	80002a8 <__aeabi_uidivmod>
 800067a:	464a      	mov	r2, r9
 800067c:	4342      	muls	r2, r0
 800067e:	040b      	lsls	r3, r1, #16
 8000680:	0c29      	lsrs	r1, r5, #16
 8000682:	0007      	movs	r7, r0
 8000684:	4319      	orrs	r1, r3
 8000686:	428a      	cmp	r2, r1
 8000688:	d907      	bls.n	800069a <__aeabi_ddiv+0x3aa>
 800068a:	1989      	adds	r1, r1, r6
 800068c:	3f01      	subs	r7, #1
 800068e:	428e      	cmp	r6, r1
 8000690:	d803      	bhi.n	800069a <__aeabi_ddiv+0x3aa>
 8000692:	428a      	cmp	r2, r1
 8000694:	d901      	bls.n	800069a <__aeabi_ddiv+0x3aa>
 8000696:	1e87      	subs	r7, r0, #2
 8000698:	1989      	adds	r1, r1, r6
 800069a:	1a88      	subs	r0, r1, r2
 800069c:	9901      	ldr	r1, [sp, #4]
 800069e:	f7ff fe03 	bl	80002a8 <__aeabi_uidivmod>
 80006a2:	0409      	lsls	r1, r1, #16
 80006a4:	464a      	mov	r2, r9
 80006a6:	4689      	mov	r9, r1
 80006a8:	0429      	lsls	r1, r5, #16
 80006aa:	464d      	mov	r5, r9
 80006ac:	4342      	muls	r2, r0
 80006ae:	0c09      	lsrs	r1, r1, #16
 80006b0:	0003      	movs	r3, r0
 80006b2:	4329      	orrs	r1, r5
 80006b4:	428a      	cmp	r2, r1
 80006b6:	d907      	bls.n	80006c8 <__aeabi_ddiv+0x3d8>
 80006b8:	1989      	adds	r1, r1, r6
 80006ba:	3b01      	subs	r3, #1
 80006bc:	428e      	cmp	r6, r1
 80006be:	d803      	bhi.n	80006c8 <__aeabi_ddiv+0x3d8>
 80006c0:	428a      	cmp	r2, r1
 80006c2:	d901      	bls.n	80006c8 <__aeabi_ddiv+0x3d8>
 80006c4:	1e83      	subs	r3, r0, #2
 80006c6:	1989      	adds	r1, r1, r6
 80006c8:	043f      	lsls	r7, r7, #16
 80006ca:	1a89      	subs	r1, r1, r2
 80006cc:	003a      	movs	r2, r7
 80006ce:	9f03      	ldr	r7, [sp, #12]
 80006d0:	431a      	orrs	r2, r3
 80006d2:	0038      	movs	r0, r7
 80006d4:	0413      	lsls	r3, r2, #16
 80006d6:	0c1b      	lsrs	r3, r3, #16
 80006d8:	4358      	muls	r0, r3
 80006da:	4681      	mov	r9, r0
 80006dc:	9802      	ldr	r0, [sp, #8]
 80006de:	0c15      	lsrs	r5, r2, #16
 80006e0:	436f      	muls	r7, r5
 80006e2:	4343      	muls	r3, r0
 80006e4:	4345      	muls	r5, r0
 80006e6:	4648      	mov	r0, r9
 80006e8:	0c00      	lsrs	r0, r0, #16
 80006ea:	4684      	mov	ip, r0
 80006ec:	19db      	adds	r3, r3, r7
 80006ee:	4463      	add	r3, ip
 80006f0:	429f      	cmp	r7, r3
 80006f2:	d903      	bls.n	80006fc <__aeabi_ddiv+0x40c>
 80006f4:	2080      	movs	r0, #128	; 0x80
 80006f6:	0240      	lsls	r0, r0, #9
 80006f8:	4684      	mov	ip, r0
 80006fa:	4465      	add	r5, ip
 80006fc:	4648      	mov	r0, r9
 80006fe:	0c1f      	lsrs	r7, r3, #16
 8000700:	0400      	lsls	r0, r0, #16
 8000702:	041b      	lsls	r3, r3, #16
 8000704:	0c00      	lsrs	r0, r0, #16
 8000706:	197d      	adds	r5, r7, r5
 8000708:	1818      	adds	r0, r3, r0
 800070a:	42a9      	cmp	r1, r5
 800070c:	d200      	bcs.n	8000710 <__aeabi_ddiv+0x420>
 800070e:	e084      	b.n	800081a <__aeabi_ddiv+0x52a>
 8000710:	d100      	bne.n	8000714 <__aeabi_ddiv+0x424>
 8000712:	e07f      	b.n	8000814 <__aeabi_ddiv+0x524>
 8000714:	2301      	movs	r3, #1
 8000716:	431a      	orrs	r2, r3
 8000718:	e657      	b.n	80003ca <__aeabi_ddiv+0xda>
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	464a      	mov	r2, r9
 800071e:	031b      	lsls	r3, r3, #12
 8000720:	4313      	orrs	r3, r2
 8000722:	031b      	lsls	r3, r3, #12
 8000724:	0b1b      	lsrs	r3, r3, #12
 8000726:	46aa      	mov	sl, r5
 8000728:	4a6f      	ldr	r2, [pc, #444]	; (80008e8 <__aeabi_ddiv+0x5f8>)
 800072a:	e66f      	b.n	800040c <__aeabi_ddiv+0x11c>
 800072c:	42ba      	cmp	r2, r7
 800072e:	d900      	bls.n	8000732 <__aeabi_ddiv+0x442>
 8000730:	e735      	b.n	800059e <__aeabi_ddiv+0x2ae>
 8000732:	464b      	mov	r3, r9
 8000734:	07dc      	lsls	r4, r3, #31
 8000736:	0858      	lsrs	r0, r3, #1
 8000738:	087b      	lsrs	r3, r7, #1
 800073a:	431c      	orrs	r4, r3
 800073c:	07ff      	lsls	r7, r7, #31
 800073e:	e734      	b.n	80005aa <__aeabi_ddiv+0x2ba>
 8000740:	2400      	movs	r4, #0
 8000742:	42af      	cmp	r7, r5
 8000744:	d289      	bcs.n	800065a <__aeabi_ddiv+0x36a>
 8000746:	4447      	add	r7, r8
 8000748:	4547      	cmp	r7, r8
 800074a:	41a4      	sbcs	r4, r4
 800074c:	465b      	mov	r3, fp
 800074e:	4264      	negs	r4, r4
 8000750:	19a4      	adds	r4, r4, r6
 8000752:	1864      	adds	r4, r4, r1
 8000754:	3b01      	subs	r3, #1
 8000756:	42a6      	cmp	r6, r4
 8000758:	d21e      	bcs.n	8000798 <__aeabi_ddiv+0x4a8>
 800075a:	42a0      	cmp	r0, r4
 800075c:	d86d      	bhi.n	800083a <__aeabi_ddiv+0x54a>
 800075e:	d100      	bne.n	8000762 <__aeabi_ddiv+0x472>
 8000760:	e0b6      	b.n	80008d0 <__aeabi_ddiv+0x5e0>
 8000762:	1a24      	subs	r4, r4, r0
 8000764:	469b      	mov	fp, r3
 8000766:	e778      	b.n	800065a <__aeabi_ddiv+0x36a>
 8000768:	0003      	movs	r3, r0
 800076a:	465a      	mov	r2, fp
 800076c:	3b28      	subs	r3, #40	; 0x28
 800076e:	409a      	lsls	r2, r3
 8000770:	2700      	movs	r7, #0
 8000772:	4691      	mov	r9, r2
 8000774:	e688      	b.n	8000488 <__aeabi_ddiv+0x198>
 8000776:	4658      	mov	r0, fp
 8000778:	f000 ffda 	bl	8001730 <__clzsi2>
 800077c:	3020      	adds	r0, #32
 800077e:	e672      	b.n	8000466 <__aeabi_ddiv+0x176>
 8000780:	0003      	movs	r3, r0
 8000782:	4652      	mov	r2, sl
 8000784:	3b28      	subs	r3, #40	; 0x28
 8000786:	409a      	lsls	r2, r3
 8000788:	4693      	mov	fp, r2
 800078a:	2200      	movs	r2, #0
 800078c:	e6b4      	b.n	80004f8 <__aeabi_ddiv+0x208>
 800078e:	4650      	mov	r0, sl
 8000790:	f000 ffce 	bl	8001730 <__clzsi2>
 8000794:	3020      	adds	r0, #32
 8000796:	e69a      	b.n	80004ce <__aeabi_ddiv+0x1de>
 8000798:	42a6      	cmp	r6, r4
 800079a:	d1e2      	bne.n	8000762 <__aeabi_ddiv+0x472>
 800079c:	45b8      	cmp	r8, r7
 800079e:	d9dc      	bls.n	800075a <__aeabi_ddiv+0x46a>
 80007a0:	1a34      	subs	r4, r6, r0
 80007a2:	469b      	mov	fp, r3
 80007a4:	e759      	b.n	800065a <__aeabi_ddiv+0x36a>
 80007a6:	2b1f      	cmp	r3, #31
 80007a8:	dc65      	bgt.n	8000876 <__aeabi_ddiv+0x586>
 80007aa:	4c50      	ldr	r4, [pc, #320]	; (80008ec <__aeabi_ddiv+0x5fc>)
 80007ac:	9900      	ldr	r1, [sp, #0]
 80007ae:	46a4      	mov	ip, r4
 80007b0:	465c      	mov	r4, fp
 80007b2:	4461      	add	r1, ip
 80007b4:	0008      	movs	r0, r1
 80007b6:	408c      	lsls	r4, r1
 80007b8:	0011      	movs	r1, r2
 80007ba:	4082      	lsls	r2, r0
 80007bc:	40d9      	lsrs	r1, r3
 80007be:	1e50      	subs	r0, r2, #1
 80007c0:	4182      	sbcs	r2, r0
 80007c2:	430c      	orrs	r4, r1
 80007c4:	4314      	orrs	r4, r2
 80007c6:	465a      	mov	r2, fp
 80007c8:	40da      	lsrs	r2, r3
 80007ca:	0013      	movs	r3, r2
 80007cc:	0762      	lsls	r2, r4, #29
 80007ce:	d009      	beq.n	80007e4 <__aeabi_ddiv+0x4f4>
 80007d0:	220f      	movs	r2, #15
 80007d2:	4022      	ands	r2, r4
 80007d4:	2a04      	cmp	r2, #4
 80007d6:	d005      	beq.n	80007e4 <__aeabi_ddiv+0x4f4>
 80007d8:	0022      	movs	r2, r4
 80007da:	1d14      	adds	r4, r2, #4
 80007dc:	4294      	cmp	r4, r2
 80007de:	4189      	sbcs	r1, r1
 80007e0:	4249      	negs	r1, r1
 80007e2:	185b      	adds	r3, r3, r1
 80007e4:	021a      	lsls	r2, r3, #8
 80007e6:	d562      	bpl.n	80008ae <__aeabi_ddiv+0x5be>
 80007e8:	2201      	movs	r2, #1
 80007ea:	2300      	movs	r3, #0
 80007ec:	2700      	movs	r7, #0
 80007ee:	e60d      	b.n	800040c <__aeabi_ddiv+0x11c>
 80007f0:	428a      	cmp	r2, r1
 80007f2:	d800      	bhi.n	80007f6 <__aeabi_ddiv+0x506>
 80007f4:	e70a      	b.n	800060c <__aeabi_ddiv+0x31c>
 80007f6:	1e83      	subs	r3, r0, #2
 80007f8:	1989      	adds	r1, r1, r6
 80007fa:	e707      	b.n	800060c <__aeabi_ddiv+0x31c>
 80007fc:	230f      	movs	r3, #15
 80007fe:	4013      	ands	r3, r2
 8000800:	2b04      	cmp	r3, #4
 8000802:	d100      	bne.n	8000806 <__aeabi_ddiv+0x516>
 8000804:	e5e6      	b.n	80003d4 <__aeabi_ddiv+0xe4>
 8000806:	1d17      	adds	r7, r2, #4
 8000808:	4297      	cmp	r7, r2
 800080a:	4192      	sbcs	r2, r2
 800080c:	4253      	negs	r3, r2
 800080e:	449b      	add	fp, r3
 8000810:	08fa      	lsrs	r2, r7, #3
 8000812:	e5e0      	b.n	80003d6 <__aeabi_ddiv+0xe6>
 8000814:	2800      	cmp	r0, #0
 8000816:	d100      	bne.n	800081a <__aeabi_ddiv+0x52a>
 8000818:	e5d7      	b.n	80003ca <__aeabi_ddiv+0xda>
 800081a:	1871      	adds	r1, r6, r1
 800081c:	1e53      	subs	r3, r2, #1
 800081e:	42b1      	cmp	r1, r6
 8000820:	d327      	bcc.n	8000872 <__aeabi_ddiv+0x582>
 8000822:	42a9      	cmp	r1, r5
 8000824:	d315      	bcc.n	8000852 <__aeabi_ddiv+0x562>
 8000826:	d058      	beq.n	80008da <__aeabi_ddiv+0x5ea>
 8000828:	001a      	movs	r2, r3
 800082a:	e773      	b.n	8000714 <__aeabi_ddiv+0x424>
 800082c:	2b00      	cmp	r3, #0
 800082e:	dc00      	bgt.n	8000832 <__aeabi_ddiv+0x542>
 8000830:	e604      	b.n	800043c <__aeabi_ddiv+0x14c>
 8000832:	2301      	movs	r3, #1
 8000834:	2200      	movs	r2, #0
 8000836:	449b      	add	fp, r3
 8000838:	e5cd      	b.n	80003d6 <__aeabi_ddiv+0xe6>
 800083a:	2302      	movs	r3, #2
 800083c:	4447      	add	r7, r8
 800083e:	4547      	cmp	r7, r8
 8000840:	4189      	sbcs	r1, r1
 8000842:	425b      	negs	r3, r3
 8000844:	469c      	mov	ip, r3
 8000846:	4249      	negs	r1, r1
 8000848:	1989      	adds	r1, r1, r6
 800084a:	190c      	adds	r4, r1, r4
 800084c:	44e3      	add	fp, ip
 800084e:	1a24      	subs	r4, r4, r0
 8000850:	e703      	b.n	800065a <__aeabi_ddiv+0x36a>
 8000852:	4643      	mov	r3, r8
 8000854:	005f      	lsls	r7, r3, #1
 8000856:	4547      	cmp	r7, r8
 8000858:	419b      	sbcs	r3, r3
 800085a:	46b8      	mov	r8, r7
 800085c:	425b      	negs	r3, r3
 800085e:	199e      	adds	r6, r3, r6
 8000860:	3a02      	subs	r2, #2
 8000862:	1989      	adds	r1, r1, r6
 8000864:	42a9      	cmp	r1, r5
 8000866:	d000      	beq.n	800086a <__aeabi_ddiv+0x57a>
 8000868:	e754      	b.n	8000714 <__aeabi_ddiv+0x424>
 800086a:	4540      	cmp	r0, r8
 800086c:	d000      	beq.n	8000870 <__aeabi_ddiv+0x580>
 800086e:	e751      	b.n	8000714 <__aeabi_ddiv+0x424>
 8000870:	e5ab      	b.n	80003ca <__aeabi_ddiv+0xda>
 8000872:	001a      	movs	r2, r3
 8000874:	e7f6      	b.n	8000864 <__aeabi_ddiv+0x574>
 8000876:	211f      	movs	r1, #31
 8000878:	465f      	mov	r7, fp
 800087a:	4249      	negs	r1, r1
 800087c:	1b0c      	subs	r4, r1, r4
 800087e:	40e7      	lsrs	r7, r4
 8000880:	2b20      	cmp	r3, #32
 8000882:	d007      	beq.n	8000894 <__aeabi_ddiv+0x5a4>
 8000884:	491a      	ldr	r1, [pc, #104]	; (80008f0 <__aeabi_ddiv+0x600>)
 8000886:	9b00      	ldr	r3, [sp, #0]
 8000888:	468c      	mov	ip, r1
 800088a:	4463      	add	r3, ip
 800088c:	0018      	movs	r0, r3
 800088e:	465b      	mov	r3, fp
 8000890:	4083      	lsls	r3, r0
 8000892:	431a      	orrs	r2, r3
 8000894:	1e50      	subs	r0, r2, #1
 8000896:	4182      	sbcs	r2, r0
 8000898:	433a      	orrs	r2, r7
 800089a:	2707      	movs	r7, #7
 800089c:	2300      	movs	r3, #0
 800089e:	4017      	ands	r7, r2
 80008a0:	d009      	beq.n	80008b6 <__aeabi_ddiv+0x5c6>
 80008a2:	210f      	movs	r1, #15
 80008a4:	2300      	movs	r3, #0
 80008a6:	4011      	ands	r1, r2
 80008a8:	0014      	movs	r4, r2
 80008aa:	2904      	cmp	r1, #4
 80008ac:	d195      	bne.n	80007da <__aeabi_ddiv+0x4ea>
 80008ae:	0022      	movs	r2, r4
 80008b0:	075f      	lsls	r7, r3, #29
 80008b2:	025b      	lsls	r3, r3, #9
 80008b4:	0b1b      	lsrs	r3, r3, #12
 80008b6:	08d2      	lsrs	r2, r2, #3
 80008b8:	4317      	orrs	r7, r2
 80008ba:	2200      	movs	r2, #0
 80008bc:	e5a6      	b.n	800040c <__aeabi_ddiv+0x11c>
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	4659      	mov	r1, fp
 80008c2:	031b      	lsls	r3, r3, #12
 80008c4:	430b      	orrs	r3, r1
 80008c6:	031b      	lsls	r3, r3, #12
 80008c8:	0017      	movs	r7, r2
 80008ca:	0b1b      	lsrs	r3, r3, #12
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <__aeabi_ddiv+0x5f8>)
 80008ce:	e59d      	b.n	800040c <__aeabi_ddiv+0x11c>
 80008d0:	42bd      	cmp	r5, r7
 80008d2:	d8b2      	bhi.n	800083a <__aeabi_ddiv+0x54a>
 80008d4:	469b      	mov	fp, r3
 80008d6:	2400      	movs	r4, #0
 80008d8:	e6bf      	b.n	800065a <__aeabi_ddiv+0x36a>
 80008da:	4580      	cmp	r8, r0
 80008dc:	d3b9      	bcc.n	8000852 <__aeabi_ddiv+0x562>
 80008de:	001a      	movs	r2, r3
 80008e0:	e7c3      	b.n	800086a <__aeabi_ddiv+0x57a>
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	000003ff 	.word	0x000003ff
 80008e8:	000007ff 	.word	0x000007ff
 80008ec:	0000041e 	.word	0x0000041e
 80008f0:	0000043e 	.word	0x0000043e

080008f4 <__aeabi_dmul>:
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	4657      	mov	r7, sl
 80008f8:	46de      	mov	lr, fp
 80008fa:	464e      	mov	r6, r9
 80008fc:	4645      	mov	r5, r8
 80008fe:	b5e0      	push	{r5, r6, r7, lr}
 8000900:	4683      	mov	fp, r0
 8000902:	0006      	movs	r6, r0
 8000904:	030f      	lsls	r7, r1, #12
 8000906:	0048      	lsls	r0, r1, #1
 8000908:	b087      	sub	sp, #28
 800090a:	4692      	mov	sl, r2
 800090c:	001d      	movs	r5, r3
 800090e:	0b3f      	lsrs	r7, r7, #12
 8000910:	0d40      	lsrs	r0, r0, #21
 8000912:	0fcc      	lsrs	r4, r1, #31
 8000914:	2800      	cmp	r0, #0
 8000916:	d100      	bne.n	800091a <__aeabi_dmul+0x26>
 8000918:	e06f      	b.n	80009fa <__aeabi_dmul+0x106>
 800091a:	4bde      	ldr	r3, [pc, #888]	; (8000c94 <__aeabi_dmul+0x3a0>)
 800091c:	4298      	cmp	r0, r3
 800091e:	d038      	beq.n	8000992 <__aeabi_dmul+0x9e>
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	00ff      	lsls	r7, r7, #3
 8000924:	041b      	lsls	r3, r3, #16
 8000926:	431f      	orrs	r7, r3
 8000928:	0f73      	lsrs	r3, r6, #29
 800092a:	433b      	orrs	r3, r7
 800092c:	9301      	str	r3, [sp, #4]
 800092e:	4bda      	ldr	r3, [pc, #872]	; (8000c98 <__aeabi_dmul+0x3a4>)
 8000930:	2700      	movs	r7, #0
 8000932:	4699      	mov	r9, r3
 8000934:	2300      	movs	r3, #0
 8000936:	469b      	mov	fp, r3
 8000938:	00f6      	lsls	r6, r6, #3
 800093a:	4481      	add	r9, r0
 800093c:	032b      	lsls	r3, r5, #12
 800093e:	0069      	lsls	r1, r5, #1
 8000940:	0b1b      	lsrs	r3, r3, #12
 8000942:	4652      	mov	r2, sl
 8000944:	4698      	mov	r8, r3
 8000946:	0d49      	lsrs	r1, r1, #21
 8000948:	0fed      	lsrs	r5, r5, #31
 800094a:	2900      	cmp	r1, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_dmul+0x5c>
 800094e:	e085      	b.n	8000a5c <__aeabi_dmul+0x168>
 8000950:	4bd0      	ldr	r3, [pc, #832]	; (8000c94 <__aeabi_dmul+0x3a0>)
 8000952:	4299      	cmp	r1, r3
 8000954:	d100      	bne.n	8000958 <__aeabi_dmul+0x64>
 8000956:	e073      	b.n	8000a40 <__aeabi_dmul+0x14c>
 8000958:	4643      	mov	r3, r8
 800095a:	00da      	lsls	r2, r3, #3
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	041b      	lsls	r3, r3, #16
 8000960:	4313      	orrs	r3, r2
 8000962:	4652      	mov	r2, sl
 8000964:	48cc      	ldr	r0, [pc, #816]	; (8000c98 <__aeabi_dmul+0x3a4>)
 8000966:	0f52      	lsrs	r2, r2, #29
 8000968:	4684      	mov	ip, r0
 800096a:	4313      	orrs	r3, r2
 800096c:	4652      	mov	r2, sl
 800096e:	2000      	movs	r0, #0
 8000970:	4461      	add	r1, ip
 8000972:	00d2      	lsls	r2, r2, #3
 8000974:	4489      	add	r9, r1
 8000976:	0021      	movs	r1, r4
 8000978:	4069      	eors	r1, r5
 800097a:	9100      	str	r1, [sp, #0]
 800097c:	468c      	mov	ip, r1
 800097e:	2101      	movs	r1, #1
 8000980:	4449      	add	r1, r9
 8000982:	468a      	mov	sl, r1
 8000984:	2f0f      	cmp	r7, #15
 8000986:	d900      	bls.n	800098a <__aeabi_dmul+0x96>
 8000988:	e090      	b.n	8000aac <__aeabi_dmul+0x1b8>
 800098a:	49c4      	ldr	r1, [pc, #784]	; (8000c9c <__aeabi_dmul+0x3a8>)
 800098c:	00bf      	lsls	r7, r7, #2
 800098e:	59cf      	ldr	r7, [r1, r7]
 8000990:	46bf      	mov	pc, r7
 8000992:	465b      	mov	r3, fp
 8000994:	433b      	orrs	r3, r7
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	d000      	beq.n	800099c <__aeabi_dmul+0xa8>
 800099a:	e16a      	b.n	8000c72 <__aeabi_dmul+0x37e>
 800099c:	2302      	movs	r3, #2
 800099e:	2708      	movs	r7, #8
 80009a0:	2600      	movs	r6, #0
 80009a2:	4681      	mov	r9, r0
 80009a4:	469b      	mov	fp, r3
 80009a6:	e7c9      	b.n	800093c <__aeabi_dmul+0x48>
 80009a8:	0032      	movs	r2, r6
 80009aa:	4658      	mov	r0, fp
 80009ac:	9b01      	ldr	r3, [sp, #4]
 80009ae:	4661      	mov	r1, ip
 80009b0:	9100      	str	r1, [sp, #0]
 80009b2:	2802      	cmp	r0, #2
 80009b4:	d100      	bne.n	80009b8 <__aeabi_dmul+0xc4>
 80009b6:	e075      	b.n	8000aa4 <__aeabi_dmul+0x1b0>
 80009b8:	2803      	cmp	r0, #3
 80009ba:	d100      	bne.n	80009be <__aeabi_dmul+0xca>
 80009bc:	e1fe      	b.n	8000dbc <__aeabi_dmul+0x4c8>
 80009be:	2801      	cmp	r0, #1
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dmul+0xd0>
 80009c2:	e12c      	b.n	8000c1e <__aeabi_dmul+0x32a>
 80009c4:	2300      	movs	r3, #0
 80009c6:	2700      	movs	r7, #0
 80009c8:	2600      	movs	r6, #0
 80009ca:	2500      	movs	r5, #0
 80009cc:	033f      	lsls	r7, r7, #12
 80009ce:	0d2a      	lsrs	r2, r5, #20
 80009d0:	0b3f      	lsrs	r7, r7, #12
 80009d2:	48b3      	ldr	r0, [pc, #716]	; (8000ca0 <__aeabi_dmul+0x3ac>)
 80009d4:	0512      	lsls	r2, r2, #20
 80009d6:	433a      	orrs	r2, r7
 80009d8:	4002      	ands	r2, r0
 80009da:	051b      	lsls	r3, r3, #20
 80009dc:	4313      	orrs	r3, r2
 80009de:	9a00      	ldr	r2, [sp, #0]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	07d1      	lsls	r1, r2, #31
 80009e4:	085b      	lsrs	r3, r3, #1
 80009e6:	430b      	orrs	r3, r1
 80009e8:	0030      	movs	r0, r6
 80009ea:	0019      	movs	r1, r3
 80009ec:	b007      	add	sp, #28
 80009ee:	bc3c      	pop	{r2, r3, r4, r5}
 80009f0:	4690      	mov	r8, r2
 80009f2:	4699      	mov	r9, r3
 80009f4:	46a2      	mov	sl, r4
 80009f6:	46ab      	mov	fp, r5
 80009f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009fa:	465b      	mov	r3, fp
 80009fc:	433b      	orrs	r3, r7
 80009fe:	9301      	str	r3, [sp, #4]
 8000a00:	d100      	bne.n	8000a04 <__aeabi_dmul+0x110>
 8000a02:	e12f      	b.n	8000c64 <__aeabi_dmul+0x370>
 8000a04:	2f00      	cmp	r7, #0
 8000a06:	d100      	bne.n	8000a0a <__aeabi_dmul+0x116>
 8000a08:	e1a5      	b.n	8000d56 <__aeabi_dmul+0x462>
 8000a0a:	0038      	movs	r0, r7
 8000a0c:	f000 fe90 	bl	8001730 <__clzsi2>
 8000a10:	0003      	movs	r3, r0
 8000a12:	3b0b      	subs	r3, #11
 8000a14:	2b1c      	cmp	r3, #28
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_dmul+0x126>
 8000a18:	e196      	b.n	8000d48 <__aeabi_dmul+0x454>
 8000a1a:	221d      	movs	r2, #29
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	465a      	mov	r2, fp
 8000a20:	0001      	movs	r1, r0
 8000a22:	40da      	lsrs	r2, r3
 8000a24:	465e      	mov	r6, fp
 8000a26:	3908      	subs	r1, #8
 8000a28:	408f      	lsls	r7, r1
 8000a2a:	0013      	movs	r3, r2
 8000a2c:	408e      	lsls	r6, r1
 8000a2e:	433b      	orrs	r3, r7
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	4b9c      	ldr	r3, [pc, #624]	; (8000ca4 <__aeabi_dmul+0x3b0>)
 8000a34:	2700      	movs	r7, #0
 8000a36:	1a1b      	subs	r3, r3, r0
 8000a38:	4699      	mov	r9, r3
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	469b      	mov	fp, r3
 8000a3e:	e77d      	b.n	800093c <__aeabi_dmul+0x48>
 8000a40:	4641      	mov	r1, r8
 8000a42:	4653      	mov	r3, sl
 8000a44:	430b      	orrs	r3, r1
 8000a46:	4993      	ldr	r1, [pc, #588]	; (8000c94 <__aeabi_dmul+0x3a0>)
 8000a48:	468c      	mov	ip, r1
 8000a4a:	44e1      	add	r9, ip
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_dmul+0x15e>
 8000a50:	e11a      	b.n	8000c88 <__aeabi_dmul+0x394>
 8000a52:	2202      	movs	r2, #2
 8000a54:	2002      	movs	r0, #2
 8000a56:	4317      	orrs	r7, r2
 8000a58:	2200      	movs	r2, #0
 8000a5a:	e78c      	b.n	8000976 <__aeabi_dmul+0x82>
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_dmul+0x16e>
 8000a60:	e10d      	b.n	8000c7e <__aeabi_dmul+0x38a>
 8000a62:	4643      	mov	r3, r8
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d100      	bne.n	8000a6a <__aeabi_dmul+0x176>
 8000a68:	e181      	b.n	8000d6e <__aeabi_dmul+0x47a>
 8000a6a:	4640      	mov	r0, r8
 8000a6c:	f000 fe60 	bl	8001730 <__clzsi2>
 8000a70:	0002      	movs	r2, r0
 8000a72:	3a0b      	subs	r2, #11
 8000a74:	2a1c      	cmp	r2, #28
 8000a76:	dd00      	ble.n	8000a7a <__aeabi_dmul+0x186>
 8000a78:	e172      	b.n	8000d60 <__aeabi_dmul+0x46c>
 8000a7a:	0001      	movs	r1, r0
 8000a7c:	4643      	mov	r3, r8
 8000a7e:	3908      	subs	r1, #8
 8000a80:	408b      	lsls	r3, r1
 8000a82:	4698      	mov	r8, r3
 8000a84:	231d      	movs	r3, #29
 8000a86:	1a9a      	subs	r2, r3, r2
 8000a88:	4653      	mov	r3, sl
 8000a8a:	40d3      	lsrs	r3, r2
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	4643      	mov	r3, r8
 8000a90:	4313      	orrs	r3, r2
 8000a92:	4652      	mov	r2, sl
 8000a94:	408a      	lsls	r2, r1
 8000a96:	4649      	mov	r1, r9
 8000a98:	1a08      	subs	r0, r1, r0
 8000a9a:	4982      	ldr	r1, [pc, #520]	; (8000ca4 <__aeabi_dmul+0x3b0>)
 8000a9c:	4689      	mov	r9, r1
 8000a9e:	4481      	add	r9, r0
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	e768      	b.n	8000976 <__aeabi_dmul+0x82>
 8000aa4:	4b7b      	ldr	r3, [pc, #492]	; (8000c94 <__aeabi_dmul+0x3a0>)
 8000aa6:	2700      	movs	r7, #0
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	e78e      	b.n	80009ca <__aeabi_dmul+0xd6>
 8000aac:	0c14      	lsrs	r4, r2, #16
 8000aae:	0412      	lsls	r2, r2, #16
 8000ab0:	0c12      	lsrs	r2, r2, #16
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	0c37      	lsrs	r7, r6, #16
 8000ab6:	0436      	lsls	r6, r6, #16
 8000ab8:	0c35      	lsrs	r5, r6, #16
 8000aba:	4379      	muls	r1, r7
 8000abc:	0028      	movs	r0, r5
 8000abe:	468c      	mov	ip, r1
 8000ac0:	002e      	movs	r6, r5
 8000ac2:	4360      	muls	r0, r4
 8000ac4:	4460      	add	r0, ip
 8000ac6:	4683      	mov	fp, r0
 8000ac8:	4356      	muls	r6, r2
 8000aca:	0021      	movs	r1, r4
 8000acc:	0c30      	lsrs	r0, r6, #16
 8000ace:	4680      	mov	r8, r0
 8000ad0:	4658      	mov	r0, fp
 8000ad2:	4379      	muls	r1, r7
 8000ad4:	4440      	add	r0, r8
 8000ad6:	9102      	str	r1, [sp, #8]
 8000ad8:	4584      	cmp	ip, r0
 8000ada:	d906      	bls.n	8000aea <__aeabi_dmul+0x1f6>
 8000adc:	4688      	mov	r8, r1
 8000ade:	2180      	movs	r1, #128	; 0x80
 8000ae0:	0249      	lsls	r1, r1, #9
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	44e0      	add	r8, ip
 8000ae6:	4641      	mov	r1, r8
 8000ae8:	9102      	str	r1, [sp, #8]
 8000aea:	0436      	lsls	r6, r6, #16
 8000aec:	0c01      	lsrs	r1, r0, #16
 8000aee:	0c36      	lsrs	r6, r6, #16
 8000af0:	0400      	lsls	r0, r0, #16
 8000af2:	468b      	mov	fp, r1
 8000af4:	1981      	adds	r1, r0, r6
 8000af6:	0c1e      	lsrs	r6, r3, #16
 8000af8:	041b      	lsls	r3, r3, #16
 8000afa:	0c1b      	lsrs	r3, r3, #16
 8000afc:	9103      	str	r1, [sp, #12]
 8000afe:	0019      	movs	r1, r3
 8000b00:	4379      	muls	r1, r7
 8000b02:	468c      	mov	ip, r1
 8000b04:	0028      	movs	r0, r5
 8000b06:	4375      	muls	r5, r6
 8000b08:	4465      	add	r5, ip
 8000b0a:	46a8      	mov	r8, r5
 8000b0c:	4358      	muls	r0, r3
 8000b0e:	0c05      	lsrs	r5, r0, #16
 8000b10:	4445      	add	r5, r8
 8000b12:	4377      	muls	r7, r6
 8000b14:	42a9      	cmp	r1, r5
 8000b16:	d903      	bls.n	8000b20 <__aeabi_dmul+0x22c>
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	0249      	lsls	r1, r1, #9
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	4467      	add	r7, ip
 8000b20:	0c29      	lsrs	r1, r5, #16
 8000b22:	468c      	mov	ip, r1
 8000b24:	0039      	movs	r1, r7
 8000b26:	0400      	lsls	r0, r0, #16
 8000b28:	0c00      	lsrs	r0, r0, #16
 8000b2a:	042d      	lsls	r5, r5, #16
 8000b2c:	182d      	adds	r5, r5, r0
 8000b2e:	4461      	add	r1, ip
 8000b30:	44ab      	add	fp, r5
 8000b32:	9105      	str	r1, [sp, #20]
 8000b34:	4659      	mov	r1, fp
 8000b36:	9104      	str	r1, [sp, #16]
 8000b38:	9901      	ldr	r1, [sp, #4]
 8000b3a:	040f      	lsls	r7, r1, #16
 8000b3c:	0c3f      	lsrs	r7, r7, #16
 8000b3e:	0c08      	lsrs	r0, r1, #16
 8000b40:	0039      	movs	r1, r7
 8000b42:	4351      	muls	r1, r2
 8000b44:	4342      	muls	r2, r0
 8000b46:	4690      	mov	r8, r2
 8000b48:	0002      	movs	r2, r0
 8000b4a:	468c      	mov	ip, r1
 8000b4c:	0c09      	lsrs	r1, r1, #16
 8000b4e:	468b      	mov	fp, r1
 8000b50:	4362      	muls	r2, r4
 8000b52:	437c      	muls	r4, r7
 8000b54:	4444      	add	r4, r8
 8000b56:	445c      	add	r4, fp
 8000b58:	45a0      	cmp	r8, r4
 8000b5a:	d903      	bls.n	8000b64 <__aeabi_dmul+0x270>
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	0249      	lsls	r1, r1, #9
 8000b60:	4688      	mov	r8, r1
 8000b62:	4442      	add	r2, r8
 8000b64:	0c21      	lsrs	r1, r4, #16
 8000b66:	4688      	mov	r8, r1
 8000b68:	4661      	mov	r1, ip
 8000b6a:	0409      	lsls	r1, r1, #16
 8000b6c:	0c09      	lsrs	r1, r1, #16
 8000b6e:	468c      	mov	ip, r1
 8000b70:	0039      	movs	r1, r7
 8000b72:	4359      	muls	r1, r3
 8000b74:	4343      	muls	r3, r0
 8000b76:	4370      	muls	r0, r6
 8000b78:	437e      	muls	r6, r7
 8000b7a:	0c0f      	lsrs	r7, r1, #16
 8000b7c:	18f6      	adds	r6, r6, r3
 8000b7e:	0424      	lsls	r4, r4, #16
 8000b80:	19be      	adds	r6, r7, r6
 8000b82:	4464      	add	r4, ip
 8000b84:	4442      	add	r2, r8
 8000b86:	468c      	mov	ip, r1
 8000b88:	42b3      	cmp	r3, r6
 8000b8a:	d903      	bls.n	8000b94 <__aeabi_dmul+0x2a0>
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	025b      	lsls	r3, r3, #9
 8000b90:	4698      	mov	r8, r3
 8000b92:	4440      	add	r0, r8
 8000b94:	9b02      	ldr	r3, [sp, #8]
 8000b96:	4661      	mov	r1, ip
 8000b98:	4698      	mov	r8, r3
 8000b9a:	9b04      	ldr	r3, [sp, #16]
 8000b9c:	0437      	lsls	r7, r6, #16
 8000b9e:	4443      	add	r3, r8
 8000ba0:	469b      	mov	fp, r3
 8000ba2:	45ab      	cmp	fp, r5
 8000ba4:	41ad      	sbcs	r5, r5
 8000ba6:	426b      	negs	r3, r5
 8000ba8:	040d      	lsls	r5, r1, #16
 8000baa:	9905      	ldr	r1, [sp, #20]
 8000bac:	0c2d      	lsrs	r5, r5, #16
 8000bae:	468c      	mov	ip, r1
 8000bb0:	197f      	adds	r7, r7, r5
 8000bb2:	4467      	add	r7, ip
 8000bb4:	18fd      	adds	r5, r7, r3
 8000bb6:	46a8      	mov	r8, r5
 8000bb8:	465d      	mov	r5, fp
 8000bba:	192d      	adds	r5, r5, r4
 8000bbc:	42a5      	cmp	r5, r4
 8000bbe:	41a4      	sbcs	r4, r4
 8000bc0:	4693      	mov	fp, r2
 8000bc2:	4264      	negs	r4, r4
 8000bc4:	46a4      	mov	ip, r4
 8000bc6:	44c3      	add	fp, r8
 8000bc8:	44dc      	add	ip, fp
 8000bca:	428f      	cmp	r7, r1
 8000bcc:	41bf      	sbcs	r7, r7
 8000bce:	4598      	cmp	r8, r3
 8000bd0:	419b      	sbcs	r3, r3
 8000bd2:	4593      	cmp	fp, r2
 8000bd4:	4192      	sbcs	r2, r2
 8000bd6:	45a4      	cmp	ip, r4
 8000bd8:	41a4      	sbcs	r4, r4
 8000bda:	425b      	negs	r3, r3
 8000bdc:	427f      	negs	r7, r7
 8000bde:	431f      	orrs	r7, r3
 8000be0:	0c36      	lsrs	r6, r6, #16
 8000be2:	4252      	negs	r2, r2
 8000be4:	4264      	negs	r4, r4
 8000be6:	19bf      	adds	r7, r7, r6
 8000be8:	4322      	orrs	r2, r4
 8000bea:	18bf      	adds	r7, r7, r2
 8000bec:	4662      	mov	r2, ip
 8000bee:	1838      	adds	r0, r7, r0
 8000bf0:	0243      	lsls	r3, r0, #9
 8000bf2:	0dd2      	lsrs	r2, r2, #23
 8000bf4:	9903      	ldr	r1, [sp, #12]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	026a      	lsls	r2, r5, #9
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	1e50      	subs	r0, r2, #1
 8000bfe:	4182      	sbcs	r2, r0
 8000c00:	4661      	mov	r1, ip
 8000c02:	0ded      	lsrs	r5, r5, #23
 8000c04:	432a      	orrs	r2, r5
 8000c06:	024e      	lsls	r6, r1, #9
 8000c08:	4332      	orrs	r2, r6
 8000c0a:	01d9      	lsls	r1, r3, #7
 8000c0c:	d400      	bmi.n	8000c10 <__aeabi_dmul+0x31c>
 8000c0e:	e0b3      	b.n	8000d78 <__aeabi_dmul+0x484>
 8000c10:	2601      	movs	r6, #1
 8000c12:	0850      	lsrs	r0, r2, #1
 8000c14:	4032      	ands	r2, r6
 8000c16:	4302      	orrs	r2, r0
 8000c18:	07de      	lsls	r6, r3, #31
 8000c1a:	4332      	orrs	r2, r6
 8000c1c:	085b      	lsrs	r3, r3, #1
 8000c1e:	4c22      	ldr	r4, [pc, #136]	; (8000ca8 <__aeabi_dmul+0x3b4>)
 8000c20:	4454      	add	r4, sl
 8000c22:	2c00      	cmp	r4, #0
 8000c24:	dd62      	ble.n	8000cec <__aeabi_dmul+0x3f8>
 8000c26:	0751      	lsls	r1, r2, #29
 8000c28:	d009      	beq.n	8000c3e <__aeabi_dmul+0x34a>
 8000c2a:	200f      	movs	r0, #15
 8000c2c:	4010      	ands	r0, r2
 8000c2e:	2804      	cmp	r0, #4
 8000c30:	d005      	beq.n	8000c3e <__aeabi_dmul+0x34a>
 8000c32:	1d10      	adds	r0, r2, #4
 8000c34:	4290      	cmp	r0, r2
 8000c36:	4192      	sbcs	r2, r2
 8000c38:	4252      	negs	r2, r2
 8000c3a:	189b      	adds	r3, r3, r2
 8000c3c:	0002      	movs	r2, r0
 8000c3e:	01d9      	lsls	r1, r3, #7
 8000c40:	d504      	bpl.n	8000c4c <__aeabi_dmul+0x358>
 8000c42:	2480      	movs	r4, #128	; 0x80
 8000c44:	4819      	ldr	r0, [pc, #100]	; (8000cac <__aeabi_dmul+0x3b8>)
 8000c46:	00e4      	lsls	r4, r4, #3
 8000c48:	4003      	ands	r3, r0
 8000c4a:	4454      	add	r4, sl
 8000c4c:	4818      	ldr	r0, [pc, #96]	; (8000cb0 <__aeabi_dmul+0x3bc>)
 8000c4e:	4284      	cmp	r4, r0
 8000c50:	dd00      	ble.n	8000c54 <__aeabi_dmul+0x360>
 8000c52:	e727      	b.n	8000aa4 <__aeabi_dmul+0x1b0>
 8000c54:	075e      	lsls	r6, r3, #29
 8000c56:	025b      	lsls	r3, r3, #9
 8000c58:	08d2      	lsrs	r2, r2, #3
 8000c5a:	0b1f      	lsrs	r7, r3, #12
 8000c5c:	0563      	lsls	r3, r4, #21
 8000c5e:	4316      	orrs	r6, r2
 8000c60:	0d5b      	lsrs	r3, r3, #21
 8000c62:	e6b2      	b.n	80009ca <__aeabi_dmul+0xd6>
 8000c64:	2300      	movs	r3, #0
 8000c66:	4699      	mov	r9, r3
 8000c68:	3301      	adds	r3, #1
 8000c6a:	2704      	movs	r7, #4
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	469b      	mov	fp, r3
 8000c70:	e664      	b.n	800093c <__aeabi_dmul+0x48>
 8000c72:	2303      	movs	r3, #3
 8000c74:	9701      	str	r7, [sp, #4]
 8000c76:	4681      	mov	r9, r0
 8000c78:	270c      	movs	r7, #12
 8000c7a:	469b      	mov	fp, r3
 8000c7c:	e65e      	b.n	800093c <__aeabi_dmul+0x48>
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2001      	movs	r0, #1
 8000c82:	4317      	orrs	r7, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e676      	b.n	8000976 <__aeabi_dmul+0x82>
 8000c88:	2303      	movs	r3, #3
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	431f      	orrs	r7, r3
 8000c8e:	4643      	mov	r3, r8
 8000c90:	e671      	b.n	8000976 <__aeabi_dmul+0x82>
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	000007ff 	.word	0x000007ff
 8000c98:	fffffc01 	.word	0xfffffc01
 8000c9c:	08005714 	.word	0x08005714
 8000ca0:	800fffff 	.word	0x800fffff
 8000ca4:	fffffc0d 	.word	0xfffffc0d
 8000ca8:	000003ff 	.word	0x000003ff
 8000cac:	feffffff 	.word	0xfeffffff
 8000cb0:	000007fe 	.word	0x000007fe
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	2780      	movs	r7, #128	; 0x80
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	033f      	lsls	r7, r7, #12
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	4b43      	ldr	r3, [pc, #268]	; (8000dcc <__aeabi_dmul+0x4d8>)
 8000cc0:	e683      	b.n	80009ca <__aeabi_dmul+0xd6>
 8000cc2:	9b01      	ldr	r3, [sp, #4]
 8000cc4:	0032      	movs	r2, r6
 8000cc6:	46a4      	mov	ip, r4
 8000cc8:	4658      	mov	r0, fp
 8000cca:	e670      	b.n	80009ae <__aeabi_dmul+0xba>
 8000ccc:	46ac      	mov	ip, r5
 8000cce:	e66e      	b.n	80009ae <__aeabi_dmul+0xba>
 8000cd0:	2780      	movs	r7, #128	; 0x80
 8000cd2:	9901      	ldr	r1, [sp, #4]
 8000cd4:	033f      	lsls	r7, r7, #12
 8000cd6:	4239      	tst	r1, r7
 8000cd8:	d02d      	beq.n	8000d36 <__aeabi_dmul+0x442>
 8000cda:	423b      	tst	r3, r7
 8000cdc:	d12b      	bne.n	8000d36 <__aeabi_dmul+0x442>
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	033f      	lsls	r7, r7, #12
 8000ce2:	0b3f      	lsrs	r7, r7, #12
 8000ce4:	9500      	str	r5, [sp, #0]
 8000ce6:	0016      	movs	r6, r2
 8000ce8:	4b38      	ldr	r3, [pc, #224]	; (8000dcc <__aeabi_dmul+0x4d8>)
 8000cea:	e66e      	b.n	80009ca <__aeabi_dmul+0xd6>
 8000cec:	2501      	movs	r5, #1
 8000cee:	1b2d      	subs	r5, r5, r4
 8000cf0:	2d38      	cmp	r5, #56	; 0x38
 8000cf2:	dd00      	ble.n	8000cf6 <__aeabi_dmul+0x402>
 8000cf4:	e666      	b.n	80009c4 <__aeabi_dmul+0xd0>
 8000cf6:	2d1f      	cmp	r5, #31
 8000cf8:	dc40      	bgt.n	8000d7c <__aeabi_dmul+0x488>
 8000cfa:	4835      	ldr	r0, [pc, #212]	; (8000dd0 <__aeabi_dmul+0x4dc>)
 8000cfc:	001c      	movs	r4, r3
 8000cfe:	4450      	add	r0, sl
 8000d00:	0016      	movs	r6, r2
 8000d02:	4082      	lsls	r2, r0
 8000d04:	4084      	lsls	r4, r0
 8000d06:	40ee      	lsrs	r6, r5
 8000d08:	1e50      	subs	r0, r2, #1
 8000d0a:	4182      	sbcs	r2, r0
 8000d0c:	4334      	orrs	r4, r6
 8000d0e:	4314      	orrs	r4, r2
 8000d10:	40eb      	lsrs	r3, r5
 8000d12:	0762      	lsls	r2, r4, #29
 8000d14:	d009      	beq.n	8000d2a <__aeabi_dmul+0x436>
 8000d16:	220f      	movs	r2, #15
 8000d18:	4022      	ands	r2, r4
 8000d1a:	2a04      	cmp	r2, #4
 8000d1c:	d005      	beq.n	8000d2a <__aeabi_dmul+0x436>
 8000d1e:	0022      	movs	r2, r4
 8000d20:	1d14      	adds	r4, r2, #4
 8000d22:	4294      	cmp	r4, r2
 8000d24:	4180      	sbcs	r0, r0
 8000d26:	4240      	negs	r0, r0
 8000d28:	181b      	adds	r3, r3, r0
 8000d2a:	021a      	lsls	r2, r3, #8
 8000d2c:	d53e      	bpl.n	8000dac <__aeabi_dmul+0x4b8>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	2700      	movs	r7, #0
 8000d32:	2600      	movs	r6, #0
 8000d34:	e649      	b.n	80009ca <__aeabi_dmul+0xd6>
 8000d36:	2780      	movs	r7, #128	; 0x80
 8000d38:	9b01      	ldr	r3, [sp, #4]
 8000d3a:	033f      	lsls	r7, r7, #12
 8000d3c:	431f      	orrs	r7, r3
 8000d3e:	033f      	lsls	r7, r7, #12
 8000d40:	0b3f      	lsrs	r7, r7, #12
 8000d42:	9400      	str	r4, [sp, #0]
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <__aeabi_dmul+0x4d8>)
 8000d46:	e640      	b.n	80009ca <__aeabi_dmul+0xd6>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	465a      	mov	r2, fp
 8000d4c:	3b28      	subs	r3, #40	; 0x28
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	2600      	movs	r6, #0
 8000d52:	9201      	str	r2, [sp, #4]
 8000d54:	e66d      	b.n	8000a32 <__aeabi_dmul+0x13e>
 8000d56:	4658      	mov	r0, fp
 8000d58:	f000 fcea 	bl	8001730 <__clzsi2>
 8000d5c:	3020      	adds	r0, #32
 8000d5e:	e657      	b.n	8000a10 <__aeabi_dmul+0x11c>
 8000d60:	0003      	movs	r3, r0
 8000d62:	4652      	mov	r2, sl
 8000d64:	3b28      	subs	r3, #40	; 0x28
 8000d66:	409a      	lsls	r2, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	e693      	b.n	8000a96 <__aeabi_dmul+0x1a2>
 8000d6e:	4650      	mov	r0, sl
 8000d70:	f000 fcde 	bl	8001730 <__clzsi2>
 8000d74:	3020      	adds	r0, #32
 8000d76:	e67b      	b.n	8000a70 <__aeabi_dmul+0x17c>
 8000d78:	46ca      	mov	sl, r9
 8000d7a:	e750      	b.n	8000c1e <__aeabi_dmul+0x32a>
 8000d7c:	201f      	movs	r0, #31
 8000d7e:	001e      	movs	r6, r3
 8000d80:	4240      	negs	r0, r0
 8000d82:	1b04      	subs	r4, r0, r4
 8000d84:	40e6      	lsrs	r6, r4
 8000d86:	2d20      	cmp	r5, #32
 8000d88:	d003      	beq.n	8000d92 <__aeabi_dmul+0x49e>
 8000d8a:	4c12      	ldr	r4, [pc, #72]	; (8000dd4 <__aeabi_dmul+0x4e0>)
 8000d8c:	4454      	add	r4, sl
 8000d8e:	40a3      	lsls	r3, r4
 8000d90:	431a      	orrs	r2, r3
 8000d92:	1e50      	subs	r0, r2, #1
 8000d94:	4182      	sbcs	r2, r0
 8000d96:	4332      	orrs	r2, r6
 8000d98:	2607      	movs	r6, #7
 8000d9a:	2700      	movs	r7, #0
 8000d9c:	4016      	ands	r6, r2
 8000d9e:	d009      	beq.n	8000db4 <__aeabi_dmul+0x4c0>
 8000da0:	200f      	movs	r0, #15
 8000da2:	2300      	movs	r3, #0
 8000da4:	4010      	ands	r0, r2
 8000da6:	0014      	movs	r4, r2
 8000da8:	2804      	cmp	r0, #4
 8000daa:	d1b9      	bne.n	8000d20 <__aeabi_dmul+0x42c>
 8000dac:	0022      	movs	r2, r4
 8000dae:	075e      	lsls	r6, r3, #29
 8000db0:	025b      	lsls	r3, r3, #9
 8000db2:	0b1f      	lsrs	r7, r3, #12
 8000db4:	08d2      	lsrs	r2, r2, #3
 8000db6:	4316      	orrs	r6, r2
 8000db8:	2300      	movs	r3, #0
 8000dba:	e606      	b.n	80009ca <__aeabi_dmul+0xd6>
 8000dbc:	2780      	movs	r7, #128	; 0x80
 8000dbe:	033f      	lsls	r7, r7, #12
 8000dc0:	431f      	orrs	r7, r3
 8000dc2:	033f      	lsls	r7, r7, #12
 8000dc4:	0b3f      	lsrs	r7, r7, #12
 8000dc6:	0016      	movs	r6, r2
 8000dc8:	4b00      	ldr	r3, [pc, #0]	; (8000dcc <__aeabi_dmul+0x4d8>)
 8000dca:	e5fe      	b.n	80009ca <__aeabi_dmul+0xd6>
 8000dcc:	000007ff 	.word	0x000007ff
 8000dd0:	0000041e 	.word	0x0000041e
 8000dd4:	0000043e 	.word	0x0000043e

08000dd8 <__aeabi_dsub>:
 8000dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dda:	4657      	mov	r7, sl
 8000ddc:	464e      	mov	r6, r9
 8000dde:	4645      	mov	r5, r8
 8000de0:	46de      	mov	lr, fp
 8000de2:	000c      	movs	r4, r1
 8000de4:	0309      	lsls	r1, r1, #12
 8000de6:	b5e0      	push	{r5, r6, r7, lr}
 8000de8:	0a49      	lsrs	r1, r1, #9
 8000dea:	0f46      	lsrs	r6, r0, #29
 8000dec:	005f      	lsls	r7, r3, #1
 8000dee:	4331      	orrs	r1, r6
 8000df0:	031e      	lsls	r6, r3, #12
 8000df2:	0fdb      	lsrs	r3, r3, #31
 8000df4:	0a76      	lsrs	r6, r6, #9
 8000df6:	469b      	mov	fp, r3
 8000df8:	0f53      	lsrs	r3, r2, #29
 8000dfa:	4333      	orrs	r3, r6
 8000dfc:	4ec8      	ldr	r6, [pc, #800]	; (8001120 <__aeabi_dsub+0x348>)
 8000dfe:	0065      	lsls	r5, r4, #1
 8000e00:	00c0      	lsls	r0, r0, #3
 8000e02:	0fe4      	lsrs	r4, r4, #31
 8000e04:	00d2      	lsls	r2, r2, #3
 8000e06:	0d6d      	lsrs	r5, r5, #21
 8000e08:	46a2      	mov	sl, r4
 8000e0a:	4681      	mov	r9, r0
 8000e0c:	0d7f      	lsrs	r7, r7, #21
 8000e0e:	469c      	mov	ip, r3
 8000e10:	4690      	mov	r8, r2
 8000e12:	42b7      	cmp	r7, r6
 8000e14:	d100      	bne.n	8000e18 <__aeabi_dsub+0x40>
 8000e16:	e0b9      	b.n	8000f8c <__aeabi_dsub+0x1b4>
 8000e18:	465b      	mov	r3, fp
 8000e1a:	2601      	movs	r6, #1
 8000e1c:	4073      	eors	r3, r6
 8000e1e:	469b      	mov	fp, r3
 8000e20:	1bee      	subs	r6, r5, r7
 8000e22:	45a3      	cmp	fp, r4
 8000e24:	d100      	bne.n	8000e28 <__aeabi_dsub+0x50>
 8000e26:	e083      	b.n	8000f30 <__aeabi_dsub+0x158>
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	dd63      	ble.n	8000ef4 <__aeabi_dsub+0x11c>
 8000e2c:	2f00      	cmp	r7, #0
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_dsub+0x5a>
 8000e30:	e0b1      	b.n	8000f96 <__aeabi_dsub+0x1be>
 8000e32:	4663      	mov	r3, ip
 8000e34:	4313      	orrs	r3, r2
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dsub+0x62>
 8000e38:	e123      	b.n	8001082 <__aeabi_dsub+0x2aa>
 8000e3a:	1e73      	subs	r3, r6, #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_dsub+0x6a>
 8000e40:	e1ba      	b.n	80011b8 <__aeabi_dsub+0x3e0>
 8000e42:	1a86      	subs	r6, r0, r2
 8000e44:	4663      	mov	r3, ip
 8000e46:	42b0      	cmp	r0, r6
 8000e48:	4180      	sbcs	r0, r0
 8000e4a:	2501      	movs	r5, #1
 8000e4c:	1ac9      	subs	r1, r1, r3
 8000e4e:	4240      	negs	r0, r0
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	020b      	lsls	r3, r1, #8
 8000e54:	d400      	bmi.n	8000e58 <__aeabi_dsub+0x80>
 8000e56:	e147      	b.n	80010e8 <__aeabi_dsub+0x310>
 8000e58:	0249      	lsls	r1, r1, #9
 8000e5a:	0a4b      	lsrs	r3, r1, #9
 8000e5c:	4698      	mov	r8, r3
 8000e5e:	4643      	mov	r3, r8
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d100      	bne.n	8000e66 <__aeabi_dsub+0x8e>
 8000e64:	e189      	b.n	800117a <__aeabi_dsub+0x3a2>
 8000e66:	4640      	mov	r0, r8
 8000e68:	f000 fc62 	bl	8001730 <__clzsi2>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	3b08      	subs	r3, #8
 8000e70:	2b1f      	cmp	r3, #31
 8000e72:	dd00      	ble.n	8000e76 <__aeabi_dsub+0x9e>
 8000e74:	e17c      	b.n	8001170 <__aeabi_dsub+0x398>
 8000e76:	2220      	movs	r2, #32
 8000e78:	0030      	movs	r0, r6
 8000e7a:	1ad2      	subs	r2, r2, r3
 8000e7c:	4641      	mov	r1, r8
 8000e7e:	40d0      	lsrs	r0, r2
 8000e80:	4099      	lsls	r1, r3
 8000e82:	0002      	movs	r2, r0
 8000e84:	409e      	lsls	r6, r3
 8000e86:	430a      	orrs	r2, r1
 8000e88:	429d      	cmp	r5, r3
 8000e8a:	dd00      	ble.n	8000e8e <__aeabi_dsub+0xb6>
 8000e8c:	e16a      	b.n	8001164 <__aeabi_dsub+0x38c>
 8000e8e:	1b5d      	subs	r5, r3, r5
 8000e90:	1c6b      	adds	r3, r5, #1
 8000e92:	2b1f      	cmp	r3, #31
 8000e94:	dd00      	ble.n	8000e98 <__aeabi_dsub+0xc0>
 8000e96:	e194      	b.n	80011c2 <__aeabi_dsub+0x3ea>
 8000e98:	2120      	movs	r1, #32
 8000e9a:	0010      	movs	r0, r2
 8000e9c:	0035      	movs	r5, r6
 8000e9e:	1ac9      	subs	r1, r1, r3
 8000ea0:	408e      	lsls	r6, r1
 8000ea2:	40da      	lsrs	r2, r3
 8000ea4:	4088      	lsls	r0, r1
 8000ea6:	40dd      	lsrs	r5, r3
 8000ea8:	1e71      	subs	r1, r6, #1
 8000eaa:	418e      	sbcs	r6, r1
 8000eac:	0011      	movs	r1, r2
 8000eae:	2207      	movs	r2, #7
 8000eb0:	4328      	orrs	r0, r5
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	4306      	orrs	r6, r0
 8000eb6:	4032      	ands	r2, r6
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d009      	beq.n	8000ed0 <__aeabi_dsub+0xf8>
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	4033      	ands	r3, r6
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d005      	beq.n	8000ed0 <__aeabi_dsub+0xf8>
 8000ec4:	1d33      	adds	r3, r6, #4
 8000ec6:	42b3      	cmp	r3, r6
 8000ec8:	41b6      	sbcs	r6, r6
 8000eca:	4276      	negs	r6, r6
 8000ecc:	1989      	adds	r1, r1, r6
 8000ece:	001e      	movs	r6, r3
 8000ed0:	020b      	lsls	r3, r1, #8
 8000ed2:	d400      	bmi.n	8000ed6 <__aeabi_dsub+0xfe>
 8000ed4:	e23d      	b.n	8001352 <__aeabi_dsub+0x57a>
 8000ed6:	1c6a      	adds	r2, r5, #1
 8000ed8:	4b91      	ldr	r3, [pc, #580]	; (8001120 <__aeabi_dsub+0x348>)
 8000eda:	0555      	lsls	r5, r2, #21
 8000edc:	0d6d      	lsrs	r5, r5, #21
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dsub+0x10c>
 8000ee2:	e119      	b.n	8001118 <__aeabi_dsub+0x340>
 8000ee4:	4a8f      	ldr	r2, [pc, #572]	; (8001124 <__aeabi_dsub+0x34c>)
 8000ee6:	08f6      	lsrs	r6, r6, #3
 8000ee8:	400a      	ands	r2, r1
 8000eea:	0757      	lsls	r7, r2, #29
 8000eec:	0252      	lsls	r2, r2, #9
 8000eee:	4337      	orrs	r7, r6
 8000ef0:	0b12      	lsrs	r2, r2, #12
 8000ef2:	e09b      	b.n	800102c <__aeabi_dsub+0x254>
 8000ef4:	2e00      	cmp	r6, #0
 8000ef6:	d000      	beq.n	8000efa <__aeabi_dsub+0x122>
 8000ef8:	e0c5      	b.n	8001086 <__aeabi_dsub+0x2ae>
 8000efa:	1c6e      	adds	r6, r5, #1
 8000efc:	0576      	lsls	r6, r6, #21
 8000efe:	0d76      	lsrs	r6, r6, #21
 8000f00:	2e01      	cmp	r6, #1
 8000f02:	dc00      	bgt.n	8000f06 <__aeabi_dsub+0x12e>
 8000f04:	e148      	b.n	8001198 <__aeabi_dsub+0x3c0>
 8000f06:	4667      	mov	r7, ip
 8000f08:	1a86      	subs	r6, r0, r2
 8000f0a:	1bcb      	subs	r3, r1, r7
 8000f0c:	42b0      	cmp	r0, r6
 8000f0e:	41bf      	sbcs	r7, r7
 8000f10:	427f      	negs	r7, r7
 8000f12:	46b8      	mov	r8, r7
 8000f14:	001f      	movs	r7, r3
 8000f16:	4643      	mov	r3, r8
 8000f18:	1aff      	subs	r7, r7, r3
 8000f1a:	003b      	movs	r3, r7
 8000f1c:	46b8      	mov	r8, r7
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	d500      	bpl.n	8000f24 <__aeabi_dsub+0x14c>
 8000f22:	e15f      	b.n	80011e4 <__aeabi_dsub+0x40c>
 8000f24:	4337      	orrs	r7, r6
 8000f26:	d19a      	bne.n	8000e5e <__aeabi_dsub+0x86>
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2400      	movs	r4, #0
 8000f2c:	2500      	movs	r5, #0
 8000f2e:	e079      	b.n	8001024 <__aeabi_dsub+0x24c>
 8000f30:	2e00      	cmp	r6, #0
 8000f32:	dc00      	bgt.n	8000f36 <__aeabi_dsub+0x15e>
 8000f34:	e0fa      	b.n	800112c <__aeabi_dsub+0x354>
 8000f36:	2f00      	cmp	r7, #0
 8000f38:	d100      	bne.n	8000f3c <__aeabi_dsub+0x164>
 8000f3a:	e08d      	b.n	8001058 <__aeabi_dsub+0x280>
 8000f3c:	4b78      	ldr	r3, [pc, #480]	; (8001120 <__aeabi_dsub+0x348>)
 8000f3e:	429d      	cmp	r5, r3
 8000f40:	d067      	beq.n	8001012 <__aeabi_dsub+0x23a>
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	4667      	mov	r7, ip
 8000f46:	041b      	lsls	r3, r3, #16
 8000f48:	431f      	orrs	r7, r3
 8000f4a:	46bc      	mov	ip, r7
 8000f4c:	2e38      	cmp	r6, #56	; 0x38
 8000f4e:	dc00      	bgt.n	8000f52 <__aeabi_dsub+0x17a>
 8000f50:	e152      	b.n	80011f8 <__aeabi_dsub+0x420>
 8000f52:	4663      	mov	r3, ip
 8000f54:	4313      	orrs	r3, r2
 8000f56:	1e5a      	subs	r2, r3, #1
 8000f58:	4193      	sbcs	r3, r2
 8000f5a:	181e      	adds	r6, r3, r0
 8000f5c:	4286      	cmp	r6, r0
 8000f5e:	4180      	sbcs	r0, r0
 8000f60:	4240      	negs	r0, r0
 8000f62:	1809      	adds	r1, r1, r0
 8000f64:	020b      	lsls	r3, r1, #8
 8000f66:	d400      	bmi.n	8000f6a <__aeabi_dsub+0x192>
 8000f68:	e0be      	b.n	80010e8 <__aeabi_dsub+0x310>
 8000f6a:	4b6d      	ldr	r3, [pc, #436]	; (8001120 <__aeabi_dsub+0x348>)
 8000f6c:	3501      	adds	r5, #1
 8000f6e:	429d      	cmp	r5, r3
 8000f70:	d100      	bne.n	8000f74 <__aeabi_dsub+0x19c>
 8000f72:	e0d2      	b.n	800111a <__aeabi_dsub+0x342>
 8000f74:	4a6b      	ldr	r2, [pc, #428]	; (8001124 <__aeabi_dsub+0x34c>)
 8000f76:	0873      	lsrs	r3, r6, #1
 8000f78:	400a      	ands	r2, r1
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	400e      	ands	r6, r1
 8000f7e:	431e      	orrs	r6, r3
 8000f80:	0851      	lsrs	r1, r2, #1
 8000f82:	07d3      	lsls	r3, r2, #31
 8000f84:	2207      	movs	r2, #7
 8000f86:	431e      	orrs	r6, r3
 8000f88:	4032      	ands	r2, r6
 8000f8a:	e795      	b.n	8000eb8 <__aeabi_dsub+0xe0>
 8000f8c:	001e      	movs	r6, r3
 8000f8e:	4316      	orrs	r6, r2
 8000f90:	d000      	beq.n	8000f94 <__aeabi_dsub+0x1bc>
 8000f92:	e745      	b.n	8000e20 <__aeabi_dsub+0x48>
 8000f94:	e740      	b.n	8000e18 <__aeabi_dsub+0x40>
 8000f96:	4b62      	ldr	r3, [pc, #392]	; (8001120 <__aeabi_dsub+0x348>)
 8000f98:	429d      	cmp	r5, r3
 8000f9a:	d03a      	beq.n	8001012 <__aeabi_dsub+0x23a>
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	4667      	mov	r7, ip
 8000fa0:	041b      	lsls	r3, r3, #16
 8000fa2:	431f      	orrs	r7, r3
 8000fa4:	46bc      	mov	ip, r7
 8000fa6:	2e38      	cmp	r6, #56	; 0x38
 8000fa8:	dd00      	ble.n	8000fac <__aeabi_dsub+0x1d4>
 8000faa:	e0eb      	b.n	8001184 <__aeabi_dsub+0x3ac>
 8000fac:	2e1f      	cmp	r6, #31
 8000fae:	dc00      	bgt.n	8000fb2 <__aeabi_dsub+0x1da>
 8000fb0:	e13a      	b.n	8001228 <__aeabi_dsub+0x450>
 8000fb2:	0033      	movs	r3, r6
 8000fb4:	4667      	mov	r7, ip
 8000fb6:	3b20      	subs	r3, #32
 8000fb8:	40df      	lsrs	r7, r3
 8000fba:	003b      	movs	r3, r7
 8000fbc:	2e20      	cmp	r6, #32
 8000fbe:	d005      	beq.n	8000fcc <__aeabi_dsub+0x1f4>
 8000fc0:	2740      	movs	r7, #64	; 0x40
 8000fc2:	1bbf      	subs	r7, r7, r6
 8000fc4:	4666      	mov	r6, ip
 8000fc6:	40be      	lsls	r6, r7
 8000fc8:	4332      	orrs	r2, r6
 8000fca:	4690      	mov	r8, r2
 8000fcc:	4646      	mov	r6, r8
 8000fce:	1e72      	subs	r2, r6, #1
 8000fd0:	4196      	sbcs	r6, r2
 8000fd2:	4333      	orrs	r3, r6
 8000fd4:	e0da      	b.n	800118c <__aeabi_dsub+0x3b4>
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_dsub+0x204>
 8000fda:	e214      	b.n	8001406 <__aeabi_dsub+0x62e>
 8000fdc:	4663      	mov	r3, ip
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_dsub+0x20c>
 8000fe2:	e168      	b.n	80012b6 <__aeabi_dsub+0x4de>
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	074e      	lsls	r6, r1, #29
 8000fe8:	08c0      	lsrs	r0, r0, #3
 8000fea:	08c9      	lsrs	r1, r1, #3
 8000fec:	031b      	lsls	r3, r3, #12
 8000fee:	4306      	orrs	r6, r0
 8000ff0:	4219      	tst	r1, r3
 8000ff2:	d008      	beq.n	8001006 <__aeabi_dsub+0x22e>
 8000ff4:	4660      	mov	r0, ip
 8000ff6:	08c0      	lsrs	r0, r0, #3
 8000ff8:	4218      	tst	r0, r3
 8000ffa:	d104      	bne.n	8001006 <__aeabi_dsub+0x22e>
 8000ffc:	4663      	mov	r3, ip
 8000ffe:	0001      	movs	r1, r0
 8001000:	08d2      	lsrs	r2, r2, #3
 8001002:	075e      	lsls	r6, r3, #29
 8001004:	4316      	orrs	r6, r2
 8001006:	00f3      	lsls	r3, r6, #3
 8001008:	4699      	mov	r9, r3
 800100a:	00c9      	lsls	r1, r1, #3
 800100c:	0f72      	lsrs	r2, r6, #29
 800100e:	4d44      	ldr	r5, [pc, #272]	; (8001120 <__aeabi_dsub+0x348>)
 8001010:	4311      	orrs	r1, r2
 8001012:	464b      	mov	r3, r9
 8001014:	08de      	lsrs	r6, r3, #3
 8001016:	4b42      	ldr	r3, [pc, #264]	; (8001120 <__aeabi_dsub+0x348>)
 8001018:	074f      	lsls	r7, r1, #29
 800101a:	4337      	orrs	r7, r6
 800101c:	08ca      	lsrs	r2, r1, #3
 800101e:	429d      	cmp	r5, r3
 8001020:	d100      	bne.n	8001024 <__aeabi_dsub+0x24c>
 8001022:	e06e      	b.n	8001102 <__aeabi_dsub+0x32a>
 8001024:	0312      	lsls	r2, r2, #12
 8001026:	056d      	lsls	r5, r5, #21
 8001028:	0b12      	lsrs	r2, r2, #12
 800102a:	0d6d      	lsrs	r5, r5, #21
 800102c:	2100      	movs	r1, #0
 800102e:	0312      	lsls	r2, r2, #12
 8001030:	0b13      	lsrs	r3, r2, #12
 8001032:	0d0a      	lsrs	r2, r1, #20
 8001034:	0512      	lsls	r2, r2, #20
 8001036:	431a      	orrs	r2, r3
 8001038:	4b3b      	ldr	r3, [pc, #236]	; (8001128 <__aeabi_dsub+0x350>)
 800103a:	052d      	lsls	r5, r5, #20
 800103c:	4013      	ands	r3, r2
 800103e:	432b      	orrs	r3, r5
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	07e4      	lsls	r4, r4, #31
 8001044:	085b      	lsrs	r3, r3, #1
 8001046:	4323      	orrs	r3, r4
 8001048:	0038      	movs	r0, r7
 800104a:	0019      	movs	r1, r3
 800104c:	bc3c      	pop	{r2, r3, r4, r5}
 800104e:	4690      	mov	r8, r2
 8001050:	4699      	mov	r9, r3
 8001052:	46a2      	mov	sl, r4
 8001054:	46ab      	mov	fp, r5
 8001056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001058:	4663      	mov	r3, ip
 800105a:	4313      	orrs	r3, r2
 800105c:	d011      	beq.n	8001082 <__aeabi_dsub+0x2aa>
 800105e:	1e73      	subs	r3, r6, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d000      	beq.n	8001066 <__aeabi_dsub+0x28e>
 8001064:	e107      	b.n	8001276 <__aeabi_dsub+0x49e>
 8001066:	1886      	adds	r6, r0, r2
 8001068:	4286      	cmp	r6, r0
 800106a:	4180      	sbcs	r0, r0
 800106c:	4461      	add	r1, ip
 800106e:	4240      	negs	r0, r0
 8001070:	1809      	adds	r1, r1, r0
 8001072:	2501      	movs	r5, #1
 8001074:	020b      	lsls	r3, r1, #8
 8001076:	d537      	bpl.n	80010e8 <__aeabi_dsub+0x310>
 8001078:	2502      	movs	r5, #2
 800107a:	e77b      	b.n	8000f74 <__aeabi_dsub+0x19c>
 800107c:	003e      	movs	r6, r7
 800107e:	4661      	mov	r1, ip
 8001080:	4691      	mov	r9, r2
 8001082:	0035      	movs	r5, r6
 8001084:	e7c5      	b.n	8001012 <__aeabi_dsub+0x23a>
 8001086:	465c      	mov	r4, fp
 8001088:	2d00      	cmp	r5, #0
 800108a:	d000      	beq.n	800108e <__aeabi_dsub+0x2b6>
 800108c:	e0e1      	b.n	8001252 <__aeabi_dsub+0x47a>
 800108e:	000b      	movs	r3, r1
 8001090:	4303      	orrs	r3, r0
 8001092:	d0f3      	beq.n	800107c <__aeabi_dsub+0x2a4>
 8001094:	1c73      	adds	r3, r6, #1
 8001096:	d100      	bne.n	800109a <__aeabi_dsub+0x2c2>
 8001098:	e1ac      	b.n	80013f4 <__aeabi_dsub+0x61c>
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <__aeabi_dsub+0x348>)
 800109c:	429f      	cmp	r7, r3
 800109e:	d100      	bne.n	80010a2 <__aeabi_dsub+0x2ca>
 80010a0:	e13a      	b.n	8001318 <__aeabi_dsub+0x540>
 80010a2:	43f3      	mvns	r3, r6
 80010a4:	2b38      	cmp	r3, #56	; 0x38
 80010a6:	dd00      	ble.n	80010aa <__aeabi_dsub+0x2d2>
 80010a8:	e16f      	b.n	800138a <__aeabi_dsub+0x5b2>
 80010aa:	2b1f      	cmp	r3, #31
 80010ac:	dd00      	ble.n	80010b0 <__aeabi_dsub+0x2d8>
 80010ae:	e18c      	b.n	80013ca <__aeabi_dsub+0x5f2>
 80010b0:	2520      	movs	r5, #32
 80010b2:	000e      	movs	r6, r1
 80010b4:	1aed      	subs	r5, r5, r3
 80010b6:	40ae      	lsls	r6, r5
 80010b8:	46b0      	mov	r8, r6
 80010ba:	0006      	movs	r6, r0
 80010bc:	46aa      	mov	sl, r5
 80010be:	40de      	lsrs	r6, r3
 80010c0:	4645      	mov	r5, r8
 80010c2:	4335      	orrs	r5, r6
 80010c4:	002e      	movs	r6, r5
 80010c6:	4655      	mov	r5, sl
 80010c8:	40d9      	lsrs	r1, r3
 80010ca:	40a8      	lsls	r0, r5
 80010cc:	4663      	mov	r3, ip
 80010ce:	1e45      	subs	r5, r0, #1
 80010d0:	41a8      	sbcs	r0, r5
 80010d2:	1a5b      	subs	r3, r3, r1
 80010d4:	469c      	mov	ip, r3
 80010d6:	4330      	orrs	r0, r6
 80010d8:	1a16      	subs	r6, r2, r0
 80010da:	42b2      	cmp	r2, r6
 80010dc:	4192      	sbcs	r2, r2
 80010de:	4663      	mov	r3, ip
 80010e0:	4252      	negs	r2, r2
 80010e2:	1a99      	subs	r1, r3, r2
 80010e4:	003d      	movs	r5, r7
 80010e6:	e6b4      	b.n	8000e52 <__aeabi_dsub+0x7a>
 80010e8:	2207      	movs	r2, #7
 80010ea:	4032      	ands	r2, r6
 80010ec:	2a00      	cmp	r2, #0
 80010ee:	d000      	beq.n	80010f2 <__aeabi_dsub+0x31a>
 80010f0:	e6e4      	b.n	8000ebc <__aeabi_dsub+0xe4>
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <__aeabi_dsub+0x348>)
 80010f4:	08f6      	lsrs	r6, r6, #3
 80010f6:	074f      	lsls	r7, r1, #29
 80010f8:	4337      	orrs	r7, r6
 80010fa:	08ca      	lsrs	r2, r1, #3
 80010fc:	429d      	cmp	r5, r3
 80010fe:	d000      	beq.n	8001102 <__aeabi_dsub+0x32a>
 8001100:	e790      	b.n	8001024 <__aeabi_dsub+0x24c>
 8001102:	003b      	movs	r3, r7
 8001104:	4313      	orrs	r3, r2
 8001106:	d100      	bne.n	800110a <__aeabi_dsub+0x332>
 8001108:	e1a6      	b.n	8001458 <__aeabi_dsub+0x680>
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	031b      	lsls	r3, r3, #12
 800110e:	431a      	orrs	r2, r3
 8001110:	0312      	lsls	r2, r2, #12
 8001112:	0b12      	lsrs	r2, r2, #12
 8001114:	4d02      	ldr	r5, [pc, #8]	; (8001120 <__aeabi_dsub+0x348>)
 8001116:	e789      	b.n	800102c <__aeabi_dsub+0x254>
 8001118:	0015      	movs	r5, r2
 800111a:	2200      	movs	r2, #0
 800111c:	2700      	movs	r7, #0
 800111e:	e785      	b.n	800102c <__aeabi_dsub+0x254>
 8001120:	000007ff 	.word	0x000007ff
 8001124:	ff7fffff 	.word	0xff7fffff
 8001128:	800fffff 	.word	0x800fffff
 800112c:	2e00      	cmp	r6, #0
 800112e:	d000      	beq.n	8001132 <__aeabi_dsub+0x35a>
 8001130:	e0c7      	b.n	80012c2 <__aeabi_dsub+0x4ea>
 8001132:	1c6b      	adds	r3, r5, #1
 8001134:	055e      	lsls	r6, r3, #21
 8001136:	0d76      	lsrs	r6, r6, #21
 8001138:	2e01      	cmp	r6, #1
 800113a:	dc00      	bgt.n	800113e <__aeabi_dsub+0x366>
 800113c:	e0f0      	b.n	8001320 <__aeabi_dsub+0x548>
 800113e:	4dc8      	ldr	r5, [pc, #800]	; (8001460 <__aeabi_dsub+0x688>)
 8001140:	42ab      	cmp	r3, r5
 8001142:	d100      	bne.n	8001146 <__aeabi_dsub+0x36e>
 8001144:	e0b9      	b.n	80012ba <__aeabi_dsub+0x4e2>
 8001146:	1885      	adds	r5, r0, r2
 8001148:	000a      	movs	r2, r1
 800114a:	4285      	cmp	r5, r0
 800114c:	4189      	sbcs	r1, r1
 800114e:	4462      	add	r2, ip
 8001150:	4249      	negs	r1, r1
 8001152:	1851      	adds	r1, r2, r1
 8001154:	2207      	movs	r2, #7
 8001156:	07ce      	lsls	r6, r1, #31
 8001158:	086d      	lsrs	r5, r5, #1
 800115a:	432e      	orrs	r6, r5
 800115c:	0849      	lsrs	r1, r1, #1
 800115e:	4032      	ands	r2, r6
 8001160:	001d      	movs	r5, r3
 8001162:	e6a9      	b.n	8000eb8 <__aeabi_dsub+0xe0>
 8001164:	49bf      	ldr	r1, [pc, #764]	; (8001464 <__aeabi_dsub+0x68c>)
 8001166:	1aed      	subs	r5, r5, r3
 8001168:	4011      	ands	r1, r2
 800116a:	2207      	movs	r2, #7
 800116c:	4032      	ands	r2, r6
 800116e:	e6a3      	b.n	8000eb8 <__aeabi_dsub+0xe0>
 8001170:	0032      	movs	r2, r6
 8001172:	3828      	subs	r0, #40	; 0x28
 8001174:	4082      	lsls	r2, r0
 8001176:	2600      	movs	r6, #0
 8001178:	e686      	b.n	8000e88 <__aeabi_dsub+0xb0>
 800117a:	0030      	movs	r0, r6
 800117c:	f000 fad8 	bl	8001730 <__clzsi2>
 8001180:	3020      	adds	r0, #32
 8001182:	e673      	b.n	8000e6c <__aeabi_dsub+0x94>
 8001184:	4663      	mov	r3, ip
 8001186:	4313      	orrs	r3, r2
 8001188:	1e5a      	subs	r2, r3, #1
 800118a:	4193      	sbcs	r3, r2
 800118c:	1ac6      	subs	r6, r0, r3
 800118e:	42b0      	cmp	r0, r6
 8001190:	4180      	sbcs	r0, r0
 8001192:	4240      	negs	r0, r0
 8001194:	1a09      	subs	r1, r1, r0
 8001196:	e65c      	b.n	8000e52 <__aeabi_dsub+0x7a>
 8001198:	000e      	movs	r6, r1
 800119a:	4667      	mov	r7, ip
 800119c:	4306      	orrs	r6, r0
 800119e:	4317      	orrs	r7, r2
 80011a0:	2d00      	cmp	r5, #0
 80011a2:	d15e      	bne.n	8001262 <__aeabi_dsub+0x48a>
 80011a4:	2e00      	cmp	r6, #0
 80011a6:	d000      	beq.n	80011aa <__aeabi_dsub+0x3d2>
 80011a8:	e0f3      	b.n	8001392 <__aeabi_dsub+0x5ba>
 80011aa:	2f00      	cmp	r7, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_dsub+0x3d8>
 80011ae:	e11e      	b.n	80013ee <__aeabi_dsub+0x616>
 80011b0:	465c      	mov	r4, fp
 80011b2:	4661      	mov	r1, ip
 80011b4:	4691      	mov	r9, r2
 80011b6:	e72c      	b.n	8001012 <__aeabi_dsub+0x23a>
 80011b8:	4fa9      	ldr	r7, [pc, #676]	; (8001460 <__aeabi_dsub+0x688>)
 80011ba:	42be      	cmp	r6, r7
 80011bc:	d07b      	beq.n	80012b6 <__aeabi_dsub+0x4de>
 80011be:	001e      	movs	r6, r3
 80011c0:	e6f1      	b.n	8000fa6 <__aeabi_dsub+0x1ce>
 80011c2:	0010      	movs	r0, r2
 80011c4:	3d1f      	subs	r5, #31
 80011c6:	40e8      	lsrs	r0, r5
 80011c8:	2b20      	cmp	r3, #32
 80011ca:	d003      	beq.n	80011d4 <__aeabi_dsub+0x3fc>
 80011cc:	2140      	movs	r1, #64	; 0x40
 80011ce:	1acb      	subs	r3, r1, r3
 80011d0:	409a      	lsls	r2, r3
 80011d2:	4316      	orrs	r6, r2
 80011d4:	1e73      	subs	r3, r6, #1
 80011d6:	419e      	sbcs	r6, r3
 80011d8:	2207      	movs	r2, #7
 80011da:	4306      	orrs	r6, r0
 80011dc:	4032      	ands	r2, r6
 80011de:	2100      	movs	r1, #0
 80011e0:	2500      	movs	r5, #0
 80011e2:	e783      	b.n	80010ec <__aeabi_dsub+0x314>
 80011e4:	1a16      	subs	r6, r2, r0
 80011e6:	4663      	mov	r3, ip
 80011e8:	42b2      	cmp	r2, r6
 80011ea:	4180      	sbcs	r0, r0
 80011ec:	1a59      	subs	r1, r3, r1
 80011ee:	4240      	negs	r0, r0
 80011f0:	1a0b      	subs	r3, r1, r0
 80011f2:	4698      	mov	r8, r3
 80011f4:	465c      	mov	r4, fp
 80011f6:	e632      	b.n	8000e5e <__aeabi_dsub+0x86>
 80011f8:	2e1f      	cmp	r6, #31
 80011fa:	dd00      	ble.n	80011fe <__aeabi_dsub+0x426>
 80011fc:	e0ab      	b.n	8001356 <__aeabi_dsub+0x57e>
 80011fe:	2720      	movs	r7, #32
 8001200:	1bbb      	subs	r3, r7, r6
 8001202:	469a      	mov	sl, r3
 8001204:	4663      	mov	r3, ip
 8001206:	4657      	mov	r7, sl
 8001208:	40bb      	lsls	r3, r7
 800120a:	4699      	mov	r9, r3
 800120c:	0013      	movs	r3, r2
 800120e:	464f      	mov	r7, r9
 8001210:	40f3      	lsrs	r3, r6
 8001212:	431f      	orrs	r7, r3
 8001214:	003b      	movs	r3, r7
 8001216:	4657      	mov	r7, sl
 8001218:	40ba      	lsls	r2, r7
 800121a:	1e57      	subs	r7, r2, #1
 800121c:	41ba      	sbcs	r2, r7
 800121e:	4313      	orrs	r3, r2
 8001220:	4662      	mov	r2, ip
 8001222:	40f2      	lsrs	r2, r6
 8001224:	1889      	adds	r1, r1, r2
 8001226:	e698      	b.n	8000f5a <__aeabi_dsub+0x182>
 8001228:	2720      	movs	r7, #32
 800122a:	1bbb      	subs	r3, r7, r6
 800122c:	469a      	mov	sl, r3
 800122e:	4663      	mov	r3, ip
 8001230:	4657      	mov	r7, sl
 8001232:	40bb      	lsls	r3, r7
 8001234:	4699      	mov	r9, r3
 8001236:	0013      	movs	r3, r2
 8001238:	464f      	mov	r7, r9
 800123a:	40f3      	lsrs	r3, r6
 800123c:	431f      	orrs	r7, r3
 800123e:	003b      	movs	r3, r7
 8001240:	4657      	mov	r7, sl
 8001242:	40ba      	lsls	r2, r7
 8001244:	1e57      	subs	r7, r2, #1
 8001246:	41ba      	sbcs	r2, r7
 8001248:	4313      	orrs	r3, r2
 800124a:	4662      	mov	r2, ip
 800124c:	40f2      	lsrs	r2, r6
 800124e:	1a89      	subs	r1, r1, r2
 8001250:	e79c      	b.n	800118c <__aeabi_dsub+0x3b4>
 8001252:	4b83      	ldr	r3, [pc, #524]	; (8001460 <__aeabi_dsub+0x688>)
 8001254:	429f      	cmp	r7, r3
 8001256:	d05f      	beq.n	8001318 <__aeabi_dsub+0x540>
 8001258:	2580      	movs	r5, #128	; 0x80
 800125a:	042d      	lsls	r5, r5, #16
 800125c:	4273      	negs	r3, r6
 800125e:	4329      	orrs	r1, r5
 8001260:	e720      	b.n	80010a4 <__aeabi_dsub+0x2cc>
 8001262:	2e00      	cmp	r6, #0
 8001264:	d10c      	bne.n	8001280 <__aeabi_dsub+0x4a8>
 8001266:	2f00      	cmp	r7, #0
 8001268:	d100      	bne.n	800126c <__aeabi_dsub+0x494>
 800126a:	e0d0      	b.n	800140e <__aeabi_dsub+0x636>
 800126c:	465c      	mov	r4, fp
 800126e:	4661      	mov	r1, ip
 8001270:	4691      	mov	r9, r2
 8001272:	4d7b      	ldr	r5, [pc, #492]	; (8001460 <__aeabi_dsub+0x688>)
 8001274:	e6cd      	b.n	8001012 <__aeabi_dsub+0x23a>
 8001276:	4f7a      	ldr	r7, [pc, #488]	; (8001460 <__aeabi_dsub+0x688>)
 8001278:	42be      	cmp	r6, r7
 800127a:	d01c      	beq.n	80012b6 <__aeabi_dsub+0x4de>
 800127c:	001e      	movs	r6, r3
 800127e:	e665      	b.n	8000f4c <__aeabi_dsub+0x174>
 8001280:	2f00      	cmp	r7, #0
 8001282:	d018      	beq.n	80012b6 <__aeabi_dsub+0x4de>
 8001284:	08c0      	lsrs	r0, r0, #3
 8001286:	074e      	lsls	r6, r1, #29
 8001288:	4306      	orrs	r6, r0
 800128a:	2080      	movs	r0, #128	; 0x80
 800128c:	08c9      	lsrs	r1, r1, #3
 800128e:	0300      	lsls	r0, r0, #12
 8001290:	4201      	tst	r1, r0
 8001292:	d008      	beq.n	80012a6 <__aeabi_dsub+0x4ce>
 8001294:	4663      	mov	r3, ip
 8001296:	08dc      	lsrs	r4, r3, #3
 8001298:	4204      	tst	r4, r0
 800129a:	d104      	bne.n	80012a6 <__aeabi_dsub+0x4ce>
 800129c:	0021      	movs	r1, r4
 800129e:	46da      	mov	sl, fp
 80012a0:	08d2      	lsrs	r2, r2, #3
 80012a2:	075e      	lsls	r6, r3, #29
 80012a4:	4316      	orrs	r6, r2
 80012a6:	00f3      	lsls	r3, r6, #3
 80012a8:	4699      	mov	r9, r3
 80012aa:	2401      	movs	r4, #1
 80012ac:	4653      	mov	r3, sl
 80012ae:	00c9      	lsls	r1, r1, #3
 80012b0:	0f72      	lsrs	r2, r6, #29
 80012b2:	4311      	orrs	r1, r2
 80012b4:	401c      	ands	r4, r3
 80012b6:	4d6a      	ldr	r5, [pc, #424]	; (8001460 <__aeabi_dsub+0x688>)
 80012b8:	e6ab      	b.n	8001012 <__aeabi_dsub+0x23a>
 80012ba:	001d      	movs	r5, r3
 80012bc:	2200      	movs	r2, #0
 80012be:	2700      	movs	r7, #0
 80012c0:	e6b4      	b.n	800102c <__aeabi_dsub+0x254>
 80012c2:	2d00      	cmp	r5, #0
 80012c4:	d159      	bne.n	800137a <__aeabi_dsub+0x5a2>
 80012c6:	000b      	movs	r3, r1
 80012c8:	4303      	orrs	r3, r0
 80012ca:	d100      	bne.n	80012ce <__aeabi_dsub+0x4f6>
 80012cc:	e6d6      	b.n	800107c <__aeabi_dsub+0x2a4>
 80012ce:	1c73      	adds	r3, r6, #1
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dsub+0x4fc>
 80012d2:	e0b2      	b.n	800143a <__aeabi_dsub+0x662>
 80012d4:	4b62      	ldr	r3, [pc, #392]	; (8001460 <__aeabi_dsub+0x688>)
 80012d6:	429f      	cmp	r7, r3
 80012d8:	d01e      	beq.n	8001318 <__aeabi_dsub+0x540>
 80012da:	43f3      	mvns	r3, r6
 80012dc:	2b38      	cmp	r3, #56	; 0x38
 80012de:	dc6f      	bgt.n	80013c0 <__aeabi_dsub+0x5e8>
 80012e0:	2b1f      	cmp	r3, #31
 80012e2:	dd00      	ble.n	80012e6 <__aeabi_dsub+0x50e>
 80012e4:	e097      	b.n	8001416 <__aeabi_dsub+0x63e>
 80012e6:	2520      	movs	r5, #32
 80012e8:	000e      	movs	r6, r1
 80012ea:	1aed      	subs	r5, r5, r3
 80012ec:	40ae      	lsls	r6, r5
 80012ee:	46b0      	mov	r8, r6
 80012f0:	0006      	movs	r6, r0
 80012f2:	46aa      	mov	sl, r5
 80012f4:	40de      	lsrs	r6, r3
 80012f6:	4645      	mov	r5, r8
 80012f8:	4335      	orrs	r5, r6
 80012fa:	002e      	movs	r6, r5
 80012fc:	4655      	mov	r5, sl
 80012fe:	40a8      	lsls	r0, r5
 8001300:	40d9      	lsrs	r1, r3
 8001302:	1e45      	subs	r5, r0, #1
 8001304:	41a8      	sbcs	r0, r5
 8001306:	448c      	add	ip, r1
 8001308:	4306      	orrs	r6, r0
 800130a:	18b6      	adds	r6, r6, r2
 800130c:	4296      	cmp	r6, r2
 800130e:	4192      	sbcs	r2, r2
 8001310:	4251      	negs	r1, r2
 8001312:	4461      	add	r1, ip
 8001314:	003d      	movs	r5, r7
 8001316:	e625      	b.n	8000f64 <__aeabi_dsub+0x18c>
 8001318:	003d      	movs	r5, r7
 800131a:	4661      	mov	r1, ip
 800131c:	4691      	mov	r9, r2
 800131e:	e678      	b.n	8001012 <__aeabi_dsub+0x23a>
 8001320:	000b      	movs	r3, r1
 8001322:	4303      	orrs	r3, r0
 8001324:	2d00      	cmp	r5, #0
 8001326:	d000      	beq.n	800132a <__aeabi_dsub+0x552>
 8001328:	e655      	b.n	8000fd6 <__aeabi_dsub+0x1fe>
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f5      	beq.n	800131a <__aeabi_dsub+0x542>
 800132e:	4663      	mov	r3, ip
 8001330:	4313      	orrs	r3, r2
 8001332:	d100      	bne.n	8001336 <__aeabi_dsub+0x55e>
 8001334:	e66d      	b.n	8001012 <__aeabi_dsub+0x23a>
 8001336:	1886      	adds	r6, r0, r2
 8001338:	4286      	cmp	r6, r0
 800133a:	4180      	sbcs	r0, r0
 800133c:	4461      	add	r1, ip
 800133e:	4240      	negs	r0, r0
 8001340:	1809      	adds	r1, r1, r0
 8001342:	2200      	movs	r2, #0
 8001344:	020b      	lsls	r3, r1, #8
 8001346:	d400      	bmi.n	800134a <__aeabi_dsub+0x572>
 8001348:	e6d0      	b.n	80010ec <__aeabi_dsub+0x314>
 800134a:	4b46      	ldr	r3, [pc, #280]	; (8001464 <__aeabi_dsub+0x68c>)
 800134c:	3501      	adds	r5, #1
 800134e:	4019      	ands	r1, r3
 8001350:	e5b2      	b.n	8000eb8 <__aeabi_dsub+0xe0>
 8001352:	46b1      	mov	r9, r6
 8001354:	e65d      	b.n	8001012 <__aeabi_dsub+0x23a>
 8001356:	0033      	movs	r3, r6
 8001358:	4667      	mov	r7, ip
 800135a:	3b20      	subs	r3, #32
 800135c:	40df      	lsrs	r7, r3
 800135e:	003b      	movs	r3, r7
 8001360:	2e20      	cmp	r6, #32
 8001362:	d005      	beq.n	8001370 <__aeabi_dsub+0x598>
 8001364:	2740      	movs	r7, #64	; 0x40
 8001366:	1bbf      	subs	r7, r7, r6
 8001368:	4666      	mov	r6, ip
 800136a:	40be      	lsls	r6, r7
 800136c:	4332      	orrs	r2, r6
 800136e:	4690      	mov	r8, r2
 8001370:	4646      	mov	r6, r8
 8001372:	1e72      	subs	r2, r6, #1
 8001374:	4196      	sbcs	r6, r2
 8001376:	4333      	orrs	r3, r6
 8001378:	e5ef      	b.n	8000f5a <__aeabi_dsub+0x182>
 800137a:	4b39      	ldr	r3, [pc, #228]	; (8001460 <__aeabi_dsub+0x688>)
 800137c:	429f      	cmp	r7, r3
 800137e:	d0cb      	beq.n	8001318 <__aeabi_dsub+0x540>
 8001380:	2580      	movs	r5, #128	; 0x80
 8001382:	042d      	lsls	r5, r5, #16
 8001384:	4273      	negs	r3, r6
 8001386:	4329      	orrs	r1, r5
 8001388:	e7a8      	b.n	80012dc <__aeabi_dsub+0x504>
 800138a:	4308      	orrs	r0, r1
 800138c:	1e41      	subs	r1, r0, #1
 800138e:	4188      	sbcs	r0, r1
 8001390:	e6a2      	b.n	80010d8 <__aeabi_dsub+0x300>
 8001392:	2f00      	cmp	r7, #0
 8001394:	d100      	bne.n	8001398 <__aeabi_dsub+0x5c0>
 8001396:	e63c      	b.n	8001012 <__aeabi_dsub+0x23a>
 8001398:	4663      	mov	r3, ip
 800139a:	1a86      	subs	r6, r0, r2
 800139c:	1acf      	subs	r7, r1, r3
 800139e:	42b0      	cmp	r0, r6
 80013a0:	419b      	sbcs	r3, r3
 80013a2:	425b      	negs	r3, r3
 80013a4:	1afb      	subs	r3, r7, r3
 80013a6:	4698      	mov	r8, r3
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	d54e      	bpl.n	800144a <__aeabi_dsub+0x672>
 80013ac:	1a16      	subs	r6, r2, r0
 80013ae:	4663      	mov	r3, ip
 80013b0:	42b2      	cmp	r2, r6
 80013b2:	4192      	sbcs	r2, r2
 80013b4:	1a59      	subs	r1, r3, r1
 80013b6:	4252      	negs	r2, r2
 80013b8:	1a89      	subs	r1, r1, r2
 80013ba:	465c      	mov	r4, fp
 80013bc:	2200      	movs	r2, #0
 80013be:	e57b      	b.n	8000eb8 <__aeabi_dsub+0xe0>
 80013c0:	4301      	orrs	r1, r0
 80013c2:	000e      	movs	r6, r1
 80013c4:	1e71      	subs	r1, r6, #1
 80013c6:	418e      	sbcs	r6, r1
 80013c8:	e79f      	b.n	800130a <__aeabi_dsub+0x532>
 80013ca:	001d      	movs	r5, r3
 80013cc:	000e      	movs	r6, r1
 80013ce:	3d20      	subs	r5, #32
 80013d0:	40ee      	lsrs	r6, r5
 80013d2:	46b0      	mov	r8, r6
 80013d4:	2b20      	cmp	r3, #32
 80013d6:	d004      	beq.n	80013e2 <__aeabi_dsub+0x60a>
 80013d8:	2540      	movs	r5, #64	; 0x40
 80013da:	1aeb      	subs	r3, r5, r3
 80013dc:	4099      	lsls	r1, r3
 80013de:	4308      	orrs	r0, r1
 80013e0:	4681      	mov	r9, r0
 80013e2:	4648      	mov	r0, r9
 80013e4:	4643      	mov	r3, r8
 80013e6:	1e41      	subs	r1, r0, #1
 80013e8:	4188      	sbcs	r0, r1
 80013ea:	4318      	orrs	r0, r3
 80013ec:	e674      	b.n	80010d8 <__aeabi_dsub+0x300>
 80013ee:	2200      	movs	r2, #0
 80013f0:	2400      	movs	r4, #0
 80013f2:	e617      	b.n	8001024 <__aeabi_dsub+0x24c>
 80013f4:	1a16      	subs	r6, r2, r0
 80013f6:	4663      	mov	r3, ip
 80013f8:	42b2      	cmp	r2, r6
 80013fa:	4192      	sbcs	r2, r2
 80013fc:	1a59      	subs	r1, r3, r1
 80013fe:	4252      	negs	r2, r2
 8001400:	1a89      	subs	r1, r1, r2
 8001402:	003d      	movs	r5, r7
 8001404:	e525      	b.n	8000e52 <__aeabi_dsub+0x7a>
 8001406:	4661      	mov	r1, ip
 8001408:	4691      	mov	r9, r2
 800140a:	4d15      	ldr	r5, [pc, #84]	; (8001460 <__aeabi_dsub+0x688>)
 800140c:	e601      	b.n	8001012 <__aeabi_dsub+0x23a>
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	2400      	movs	r4, #0
 8001412:	0312      	lsls	r2, r2, #12
 8001414:	e679      	b.n	800110a <__aeabi_dsub+0x332>
 8001416:	001d      	movs	r5, r3
 8001418:	000e      	movs	r6, r1
 800141a:	3d20      	subs	r5, #32
 800141c:	40ee      	lsrs	r6, r5
 800141e:	46b0      	mov	r8, r6
 8001420:	2b20      	cmp	r3, #32
 8001422:	d004      	beq.n	800142e <__aeabi_dsub+0x656>
 8001424:	2540      	movs	r5, #64	; 0x40
 8001426:	1aeb      	subs	r3, r5, r3
 8001428:	4099      	lsls	r1, r3
 800142a:	4308      	orrs	r0, r1
 800142c:	4681      	mov	r9, r0
 800142e:	464e      	mov	r6, r9
 8001430:	4643      	mov	r3, r8
 8001432:	1e71      	subs	r1, r6, #1
 8001434:	418e      	sbcs	r6, r1
 8001436:	431e      	orrs	r6, r3
 8001438:	e767      	b.n	800130a <__aeabi_dsub+0x532>
 800143a:	1886      	adds	r6, r0, r2
 800143c:	4296      	cmp	r6, r2
 800143e:	419b      	sbcs	r3, r3
 8001440:	4461      	add	r1, ip
 8001442:	425b      	negs	r3, r3
 8001444:	18c9      	adds	r1, r1, r3
 8001446:	003d      	movs	r5, r7
 8001448:	e58c      	b.n	8000f64 <__aeabi_dsub+0x18c>
 800144a:	4647      	mov	r7, r8
 800144c:	4337      	orrs	r7, r6
 800144e:	d0ce      	beq.n	80013ee <__aeabi_dsub+0x616>
 8001450:	2207      	movs	r2, #7
 8001452:	4641      	mov	r1, r8
 8001454:	4032      	ands	r2, r6
 8001456:	e649      	b.n	80010ec <__aeabi_dsub+0x314>
 8001458:	2700      	movs	r7, #0
 800145a:	003a      	movs	r2, r7
 800145c:	e5e6      	b.n	800102c <__aeabi_dsub+0x254>
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	000007ff 	.word	0x000007ff
 8001464:	ff7fffff 	.word	0xff7fffff

08001468 <__aeabi_d2iz>:
 8001468:	b530      	push	{r4, r5, lr}
 800146a:	4d14      	ldr	r5, [pc, #80]	; (80014bc <__aeabi_d2iz+0x54>)
 800146c:	030a      	lsls	r2, r1, #12
 800146e:	004b      	lsls	r3, r1, #1
 8001470:	0b12      	lsrs	r2, r2, #12
 8001472:	0d5b      	lsrs	r3, r3, #21
 8001474:	0fc9      	lsrs	r1, r1, #31
 8001476:	2400      	movs	r4, #0
 8001478:	42ab      	cmp	r3, r5
 800147a:	dd11      	ble.n	80014a0 <__aeabi_d2iz+0x38>
 800147c:	4c10      	ldr	r4, [pc, #64]	; (80014c0 <__aeabi_d2iz+0x58>)
 800147e:	42a3      	cmp	r3, r4
 8001480:	dc10      	bgt.n	80014a4 <__aeabi_d2iz+0x3c>
 8001482:	2480      	movs	r4, #128	; 0x80
 8001484:	0364      	lsls	r4, r4, #13
 8001486:	4322      	orrs	r2, r4
 8001488:	4c0e      	ldr	r4, [pc, #56]	; (80014c4 <__aeabi_d2iz+0x5c>)
 800148a:	1ae4      	subs	r4, r4, r3
 800148c:	2c1f      	cmp	r4, #31
 800148e:	dd0c      	ble.n	80014aa <__aeabi_d2iz+0x42>
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <__aeabi_d2iz+0x60>)
 8001492:	1ac3      	subs	r3, r0, r3
 8001494:	40da      	lsrs	r2, r3
 8001496:	0013      	movs	r3, r2
 8001498:	425c      	negs	r4, r3
 800149a:	2900      	cmp	r1, #0
 800149c:	d100      	bne.n	80014a0 <__aeabi_d2iz+0x38>
 800149e:	001c      	movs	r4, r3
 80014a0:	0020      	movs	r0, r4
 80014a2:	bd30      	pop	{r4, r5, pc}
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <__aeabi_d2iz+0x64>)
 80014a6:	18cc      	adds	r4, r1, r3
 80014a8:	e7fa      	b.n	80014a0 <__aeabi_d2iz+0x38>
 80014aa:	4d09      	ldr	r5, [pc, #36]	; (80014d0 <__aeabi_d2iz+0x68>)
 80014ac:	40e0      	lsrs	r0, r4
 80014ae:	46ac      	mov	ip, r5
 80014b0:	4463      	add	r3, ip
 80014b2:	409a      	lsls	r2, r3
 80014b4:	0013      	movs	r3, r2
 80014b6:	4303      	orrs	r3, r0
 80014b8:	e7ee      	b.n	8001498 <__aeabi_d2iz+0x30>
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	000003fe 	.word	0x000003fe
 80014c0:	0000041d 	.word	0x0000041d
 80014c4:	00000433 	.word	0x00000433
 80014c8:	00000413 	.word	0x00000413
 80014cc:	7fffffff 	.word	0x7fffffff
 80014d0:	fffffbed 	.word	0xfffffbed

080014d4 <__aeabi_i2d>:
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d02d      	beq.n	8001536 <__aeabi_i2d+0x62>
 80014da:	17c3      	asrs	r3, r0, #31
 80014dc:	18c5      	adds	r5, r0, r3
 80014de:	405d      	eors	r5, r3
 80014e0:	0fc4      	lsrs	r4, r0, #31
 80014e2:	0028      	movs	r0, r5
 80014e4:	f000 f924 	bl	8001730 <__clzsi2>
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <__aeabi_i2d+0x6c>)
 80014ea:	1a1b      	subs	r3, r3, r0
 80014ec:	055b      	lsls	r3, r3, #21
 80014ee:	0d5b      	lsrs	r3, r3, #21
 80014f0:	280a      	cmp	r0, #10
 80014f2:	dd15      	ble.n	8001520 <__aeabi_i2d+0x4c>
 80014f4:	380b      	subs	r0, #11
 80014f6:	4085      	lsls	r5, r0
 80014f8:	2200      	movs	r2, #0
 80014fa:	032d      	lsls	r5, r5, #12
 80014fc:	0b2d      	lsrs	r5, r5, #12
 80014fe:	2100      	movs	r1, #0
 8001500:	0010      	movs	r0, r2
 8001502:	032d      	lsls	r5, r5, #12
 8001504:	0d0a      	lsrs	r2, r1, #20
 8001506:	0b2d      	lsrs	r5, r5, #12
 8001508:	0512      	lsls	r2, r2, #20
 800150a:	432a      	orrs	r2, r5
 800150c:	4d0d      	ldr	r5, [pc, #52]	; (8001544 <__aeabi_i2d+0x70>)
 800150e:	051b      	lsls	r3, r3, #20
 8001510:	402a      	ands	r2, r5
 8001512:	4313      	orrs	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	07e4      	lsls	r4, r4, #31
 8001518:	085b      	lsrs	r3, r3, #1
 800151a:	4323      	orrs	r3, r4
 800151c:	0019      	movs	r1, r3
 800151e:	bd70      	pop	{r4, r5, r6, pc}
 8001520:	0002      	movs	r2, r0
 8001522:	0029      	movs	r1, r5
 8001524:	3215      	adds	r2, #21
 8001526:	4091      	lsls	r1, r2
 8001528:	000a      	movs	r2, r1
 800152a:	210b      	movs	r1, #11
 800152c:	1a08      	subs	r0, r1, r0
 800152e:	40c5      	lsrs	r5, r0
 8001530:	032d      	lsls	r5, r5, #12
 8001532:	0b2d      	lsrs	r5, r5, #12
 8001534:	e7e3      	b.n	80014fe <__aeabi_i2d+0x2a>
 8001536:	2400      	movs	r4, #0
 8001538:	2300      	movs	r3, #0
 800153a:	2500      	movs	r5, #0
 800153c:	2200      	movs	r2, #0
 800153e:	e7de      	b.n	80014fe <__aeabi_i2d+0x2a>
 8001540:	0000041e 	.word	0x0000041e
 8001544:	800fffff 	.word	0x800fffff

08001548 <__aeabi_ui2d>:
 8001548:	b510      	push	{r4, lr}
 800154a:	1e04      	subs	r4, r0, #0
 800154c:	d025      	beq.n	800159a <__aeabi_ui2d+0x52>
 800154e:	f000 f8ef 	bl	8001730 <__clzsi2>
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <__aeabi_ui2d+0x5c>)
 8001554:	1a1b      	subs	r3, r3, r0
 8001556:	055b      	lsls	r3, r3, #21
 8001558:	0d5b      	lsrs	r3, r3, #21
 800155a:	280a      	cmp	r0, #10
 800155c:	dd12      	ble.n	8001584 <__aeabi_ui2d+0x3c>
 800155e:	380b      	subs	r0, #11
 8001560:	4084      	lsls	r4, r0
 8001562:	2200      	movs	r2, #0
 8001564:	0324      	lsls	r4, r4, #12
 8001566:	0b24      	lsrs	r4, r4, #12
 8001568:	2100      	movs	r1, #0
 800156a:	0010      	movs	r0, r2
 800156c:	0324      	lsls	r4, r4, #12
 800156e:	0d0a      	lsrs	r2, r1, #20
 8001570:	0b24      	lsrs	r4, r4, #12
 8001572:	0512      	lsls	r2, r2, #20
 8001574:	4322      	orrs	r2, r4
 8001576:	4c0c      	ldr	r4, [pc, #48]	; (80015a8 <__aeabi_ui2d+0x60>)
 8001578:	051b      	lsls	r3, r3, #20
 800157a:	4022      	ands	r2, r4
 800157c:	4313      	orrs	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	0859      	lsrs	r1, r3, #1
 8001582:	bd10      	pop	{r4, pc}
 8001584:	0002      	movs	r2, r0
 8001586:	0021      	movs	r1, r4
 8001588:	3215      	adds	r2, #21
 800158a:	4091      	lsls	r1, r2
 800158c:	000a      	movs	r2, r1
 800158e:	210b      	movs	r1, #11
 8001590:	1a08      	subs	r0, r1, r0
 8001592:	40c4      	lsrs	r4, r0
 8001594:	0324      	lsls	r4, r4, #12
 8001596:	0b24      	lsrs	r4, r4, #12
 8001598:	e7e6      	b.n	8001568 <__aeabi_ui2d+0x20>
 800159a:	2300      	movs	r3, #0
 800159c:	2400      	movs	r4, #0
 800159e:	2200      	movs	r2, #0
 80015a0:	e7e2      	b.n	8001568 <__aeabi_ui2d+0x20>
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	0000041e 	.word	0x0000041e
 80015a8:	800fffff 	.word	0x800fffff

080015ac <__aeabi_d2f>:
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	004c      	lsls	r4, r1, #1
 80015b0:	0d64      	lsrs	r4, r4, #21
 80015b2:	030b      	lsls	r3, r1, #12
 80015b4:	1c62      	adds	r2, r4, #1
 80015b6:	0a5b      	lsrs	r3, r3, #9
 80015b8:	0f46      	lsrs	r6, r0, #29
 80015ba:	0552      	lsls	r2, r2, #21
 80015bc:	0fc9      	lsrs	r1, r1, #31
 80015be:	431e      	orrs	r6, r3
 80015c0:	00c5      	lsls	r5, r0, #3
 80015c2:	0d52      	lsrs	r2, r2, #21
 80015c4:	2a01      	cmp	r2, #1
 80015c6:	dd29      	ble.n	800161c <__aeabi_d2f+0x70>
 80015c8:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <__aeabi_d2f+0xfc>)
 80015ca:	18e7      	adds	r7, r4, r3
 80015cc:	2ffe      	cmp	r7, #254	; 0xfe
 80015ce:	dc1c      	bgt.n	800160a <__aeabi_d2f+0x5e>
 80015d0:	2f00      	cmp	r7, #0
 80015d2:	dd3b      	ble.n	800164c <__aeabi_d2f+0xa0>
 80015d4:	0180      	lsls	r0, r0, #6
 80015d6:	1e43      	subs	r3, r0, #1
 80015d8:	4198      	sbcs	r0, r3
 80015da:	2207      	movs	r2, #7
 80015dc:	00f3      	lsls	r3, r6, #3
 80015de:	0f6d      	lsrs	r5, r5, #29
 80015e0:	4303      	orrs	r3, r0
 80015e2:	432b      	orrs	r3, r5
 80015e4:	401a      	ands	r2, r3
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	d004      	beq.n	80015f4 <__aeabi_d2f+0x48>
 80015ea:	220f      	movs	r2, #15
 80015ec:	401a      	ands	r2, r3
 80015ee:	2a04      	cmp	r2, #4
 80015f0:	d000      	beq.n	80015f4 <__aeabi_d2f+0x48>
 80015f2:	3304      	adds	r3, #4
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	04d2      	lsls	r2, r2, #19
 80015f8:	401a      	ands	r2, r3
 80015fa:	d024      	beq.n	8001646 <__aeabi_d2f+0x9a>
 80015fc:	3701      	adds	r7, #1
 80015fe:	b2fa      	uxtb	r2, r7
 8001600:	2fff      	cmp	r7, #255	; 0xff
 8001602:	d002      	beq.n	800160a <__aeabi_d2f+0x5e>
 8001604:	019b      	lsls	r3, r3, #6
 8001606:	0a58      	lsrs	r0, r3, #9
 8001608:	e001      	b.n	800160e <__aeabi_d2f+0x62>
 800160a:	22ff      	movs	r2, #255	; 0xff
 800160c:	2000      	movs	r0, #0
 800160e:	0240      	lsls	r0, r0, #9
 8001610:	05d2      	lsls	r2, r2, #23
 8001612:	0a40      	lsrs	r0, r0, #9
 8001614:	07c9      	lsls	r1, r1, #31
 8001616:	4310      	orrs	r0, r2
 8001618:	4308      	orrs	r0, r1
 800161a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161c:	4335      	orrs	r5, r6
 800161e:	2c00      	cmp	r4, #0
 8001620:	d104      	bne.n	800162c <__aeabi_d2f+0x80>
 8001622:	2d00      	cmp	r5, #0
 8001624:	d10a      	bne.n	800163c <__aeabi_d2f+0x90>
 8001626:	2200      	movs	r2, #0
 8001628:	2000      	movs	r0, #0
 800162a:	e7f0      	b.n	800160e <__aeabi_d2f+0x62>
 800162c:	2d00      	cmp	r5, #0
 800162e:	d0ec      	beq.n	800160a <__aeabi_d2f+0x5e>
 8001630:	2080      	movs	r0, #128	; 0x80
 8001632:	03c0      	lsls	r0, r0, #15
 8001634:	4330      	orrs	r0, r6
 8001636:	22ff      	movs	r2, #255	; 0xff
 8001638:	e7e9      	b.n	800160e <__aeabi_d2f+0x62>
 800163a:	2400      	movs	r4, #0
 800163c:	2300      	movs	r3, #0
 800163e:	025b      	lsls	r3, r3, #9
 8001640:	0a58      	lsrs	r0, r3, #9
 8001642:	b2e2      	uxtb	r2, r4
 8001644:	e7e3      	b.n	800160e <__aeabi_d2f+0x62>
 8001646:	08db      	lsrs	r3, r3, #3
 8001648:	003c      	movs	r4, r7
 800164a:	e7f8      	b.n	800163e <__aeabi_d2f+0x92>
 800164c:	003b      	movs	r3, r7
 800164e:	3317      	adds	r3, #23
 8001650:	dbf3      	blt.n	800163a <__aeabi_d2f+0x8e>
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	041b      	lsls	r3, r3, #16
 8001656:	4333      	orrs	r3, r6
 8001658:	261e      	movs	r6, #30
 800165a:	1bf6      	subs	r6, r6, r7
 800165c:	2e1f      	cmp	r6, #31
 800165e:	dd14      	ble.n	800168a <__aeabi_d2f+0xde>
 8001660:	2202      	movs	r2, #2
 8001662:	4252      	negs	r2, r2
 8001664:	1bd7      	subs	r7, r2, r7
 8001666:	001a      	movs	r2, r3
 8001668:	40fa      	lsrs	r2, r7
 800166a:	0017      	movs	r7, r2
 800166c:	2e20      	cmp	r6, #32
 800166e:	d004      	beq.n	800167a <__aeabi_d2f+0xce>
 8001670:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <__aeabi_d2f+0x100>)
 8001672:	4694      	mov	ip, r2
 8001674:	4464      	add	r4, ip
 8001676:	40a3      	lsls	r3, r4
 8001678:	431d      	orrs	r5, r3
 800167a:	002b      	movs	r3, r5
 800167c:	1e5d      	subs	r5, r3, #1
 800167e:	41ab      	sbcs	r3, r5
 8001680:	2207      	movs	r2, #7
 8001682:	433b      	orrs	r3, r7
 8001684:	401a      	ands	r2, r3
 8001686:	2700      	movs	r7, #0
 8001688:	e7ad      	b.n	80015e6 <__aeabi_d2f+0x3a>
 800168a:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <__aeabi_d2f+0x104>)
 800168c:	0028      	movs	r0, r5
 800168e:	18a2      	adds	r2, r4, r2
 8001690:	4095      	lsls	r5, r2
 8001692:	4093      	lsls	r3, r2
 8001694:	1e6c      	subs	r4, r5, #1
 8001696:	41a5      	sbcs	r5, r4
 8001698:	40f0      	lsrs	r0, r6
 800169a:	2207      	movs	r2, #7
 800169c:	432b      	orrs	r3, r5
 800169e:	4303      	orrs	r3, r0
 80016a0:	401a      	ands	r2, r3
 80016a2:	2700      	movs	r7, #0
 80016a4:	e79f      	b.n	80015e6 <__aeabi_d2f+0x3a>
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	fffffc80 	.word	0xfffffc80
 80016ac:	fffffca2 	.word	0xfffffca2
 80016b0:	fffffc82 	.word	0xfffffc82

080016b4 <__aeabi_cdrcmple>:
 80016b4:	4684      	mov	ip, r0
 80016b6:	1c10      	adds	r0, r2, #0
 80016b8:	4662      	mov	r2, ip
 80016ba:	468c      	mov	ip, r1
 80016bc:	1c19      	adds	r1, r3, #0
 80016be:	4663      	mov	r3, ip
 80016c0:	e000      	b.n	80016c4 <__aeabi_cdcmpeq>
 80016c2:	46c0      	nop			; (mov r8, r8)

080016c4 <__aeabi_cdcmpeq>:
 80016c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80016c6:	f000 f8f1 	bl	80018ac <__ledf2>
 80016ca:	2800      	cmp	r0, #0
 80016cc:	d401      	bmi.n	80016d2 <__aeabi_cdcmpeq+0xe>
 80016ce:	2100      	movs	r1, #0
 80016d0:	42c8      	cmn	r0, r1
 80016d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080016d4 <__aeabi_dcmpeq>:
 80016d4:	b510      	push	{r4, lr}
 80016d6:	f000 f849 	bl	800176c <__eqdf2>
 80016da:	4240      	negs	r0, r0
 80016dc:	3001      	adds	r0, #1
 80016de:	bd10      	pop	{r4, pc}

080016e0 <__aeabi_dcmplt>:
 80016e0:	b510      	push	{r4, lr}
 80016e2:	f000 f8e3 	bl	80018ac <__ledf2>
 80016e6:	2800      	cmp	r0, #0
 80016e8:	db01      	blt.n	80016ee <__aeabi_dcmplt+0xe>
 80016ea:	2000      	movs	r0, #0
 80016ec:	bd10      	pop	{r4, pc}
 80016ee:	2001      	movs	r0, #1
 80016f0:	bd10      	pop	{r4, pc}
 80016f2:	46c0      	nop			; (mov r8, r8)

080016f4 <__aeabi_dcmple>:
 80016f4:	b510      	push	{r4, lr}
 80016f6:	f000 f8d9 	bl	80018ac <__ledf2>
 80016fa:	2800      	cmp	r0, #0
 80016fc:	dd01      	ble.n	8001702 <__aeabi_dcmple+0xe>
 80016fe:	2000      	movs	r0, #0
 8001700:	bd10      	pop	{r4, pc}
 8001702:	2001      	movs	r0, #1
 8001704:	bd10      	pop	{r4, pc}
 8001706:	46c0      	nop			; (mov r8, r8)

08001708 <__aeabi_dcmpgt>:
 8001708:	b510      	push	{r4, lr}
 800170a:	f000 f86b 	bl	80017e4 <__gedf2>
 800170e:	2800      	cmp	r0, #0
 8001710:	dc01      	bgt.n	8001716 <__aeabi_dcmpgt+0xe>
 8001712:	2000      	movs	r0, #0
 8001714:	bd10      	pop	{r4, pc}
 8001716:	2001      	movs	r0, #1
 8001718:	bd10      	pop	{r4, pc}
 800171a:	46c0      	nop			; (mov r8, r8)

0800171c <__aeabi_dcmpge>:
 800171c:	b510      	push	{r4, lr}
 800171e:	f000 f861 	bl	80017e4 <__gedf2>
 8001722:	2800      	cmp	r0, #0
 8001724:	da01      	bge.n	800172a <__aeabi_dcmpge+0xe>
 8001726:	2000      	movs	r0, #0
 8001728:	bd10      	pop	{r4, pc}
 800172a:	2001      	movs	r0, #1
 800172c:	bd10      	pop	{r4, pc}
 800172e:	46c0      	nop			; (mov r8, r8)

08001730 <__clzsi2>:
 8001730:	211c      	movs	r1, #28
 8001732:	2301      	movs	r3, #1
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	4298      	cmp	r0, r3
 8001738:	d301      	bcc.n	800173e <__clzsi2+0xe>
 800173a:	0c00      	lsrs	r0, r0, #16
 800173c:	3910      	subs	r1, #16
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	4298      	cmp	r0, r3
 8001742:	d301      	bcc.n	8001748 <__clzsi2+0x18>
 8001744:	0a00      	lsrs	r0, r0, #8
 8001746:	3908      	subs	r1, #8
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	4298      	cmp	r0, r3
 800174c:	d301      	bcc.n	8001752 <__clzsi2+0x22>
 800174e:	0900      	lsrs	r0, r0, #4
 8001750:	3904      	subs	r1, #4
 8001752:	a202      	add	r2, pc, #8	; (adr r2, 800175c <__clzsi2+0x2c>)
 8001754:	5c10      	ldrb	r0, [r2, r0]
 8001756:	1840      	adds	r0, r0, r1
 8001758:	4770      	bx	lr
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	02020304 	.word	0x02020304
 8001760:	01010101 	.word	0x01010101
	...

0800176c <__eqdf2>:
 800176c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176e:	464f      	mov	r7, r9
 8001770:	4646      	mov	r6, r8
 8001772:	46d6      	mov	lr, sl
 8001774:	4684      	mov	ip, r0
 8001776:	b5c0      	push	{r6, r7, lr}
 8001778:	4680      	mov	r8, r0
 800177a:	4e19      	ldr	r6, [pc, #100]	; (80017e0 <__eqdf2+0x74>)
 800177c:	0318      	lsls	r0, r3, #12
 800177e:	030f      	lsls	r7, r1, #12
 8001780:	004d      	lsls	r5, r1, #1
 8001782:	0b00      	lsrs	r0, r0, #12
 8001784:	005c      	lsls	r4, r3, #1
 8001786:	4682      	mov	sl, r0
 8001788:	0b3f      	lsrs	r7, r7, #12
 800178a:	0d6d      	lsrs	r5, r5, #21
 800178c:	0fc9      	lsrs	r1, r1, #31
 800178e:	4691      	mov	r9, r2
 8001790:	0d64      	lsrs	r4, r4, #21
 8001792:	0fdb      	lsrs	r3, r3, #31
 8001794:	2001      	movs	r0, #1
 8001796:	42b5      	cmp	r5, r6
 8001798:	d00a      	beq.n	80017b0 <__eqdf2+0x44>
 800179a:	42b4      	cmp	r4, r6
 800179c:	d003      	beq.n	80017a6 <__eqdf2+0x3a>
 800179e:	42a5      	cmp	r5, r4
 80017a0:	d101      	bne.n	80017a6 <__eqdf2+0x3a>
 80017a2:	4557      	cmp	r7, sl
 80017a4:	d00c      	beq.n	80017c0 <__eqdf2+0x54>
 80017a6:	bc1c      	pop	{r2, r3, r4}
 80017a8:	4690      	mov	r8, r2
 80017aa:	4699      	mov	r9, r3
 80017ac:	46a2      	mov	sl, r4
 80017ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b0:	4666      	mov	r6, ip
 80017b2:	433e      	orrs	r6, r7
 80017b4:	d1f7      	bne.n	80017a6 <__eqdf2+0x3a>
 80017b6:	42ac      	cmp	r4, r5
 80017b8:	d1f5      	bne.n	80017a6 <__eqdf2+0x3a>
 80017ba:	4654      	mov	r4, sl
 80017bc:	4314      	orrs	r4, r2
 80017be:	d1f2      	bne.n	80017a6 <__eqdf2+0x3a>
 80017c0:	2001      	movs	r0, #1
 80017c2:	45c8      	cmp	r8, r9
 80017c4:	d1ef      	bne.n	80017a6 <__eqdf2+0x3a>
 80017c6:	4299      	cmp	r1, r3
 80017c8:	d007      	beq.n	80017da <__eqdf2+0x6e>
 80017ca:	2d00      	cmp	r5, #0
 80017cc:	d1eb      	bne.n	80017a6 <__eqdf2+0x3a>
 80017ce:	4663      	mov	r3, ip
 80017d0:	431f      	orrs	r7, r3
 80017d2:	0038      	movs	r0, r7
 80017d4:	1e47      	subs	r7, r0, #1
 80017d6:	41b8      	sbcs	r0, r7
 80017d8:	e7e5      	b.n	80017a6 <__eqdf2+0x3a>
 80017da:	2000      	movs	r0, #0
 80017dc:	e7e3      	b.n	80017a6 <__eqdf2+0x3a>
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	000007ff 	.word	0x000007ff

080017e4 <__gedf2>:
 80017e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e6:	464f      	mov	r7, r9
 80017e8:	4646      	mov	r6, r8
 80017ea:	46d6      	mov	lr, sl
 80017ec:	004d      	lsls	r5, r1, #1
 80017ee:	b5c0      	push	{r6, r7, lr}
 80017f0:	030e      	lsls	r6, r1, #12
 80017f2:	0fc9      	lsrs	r1, r1, #31
 80017f4:	468a      	mov	sl, r1
 80017f6:	492c      	ldr	r1, [pc, #176]	; (80018a8 <__gedf2+0xc4>)
 80017f8:	031f      	lsls	r7, r3, #12
 80017fa:	005c      	lsls	r4, r3, #1
 80017fc:	4680      	mov	r8, r0
 80017fe:	0b36      	lsrs	r6, r6, #12
 8001800:	0d6d      	lsrs	r5, r5, #21
 8001802:	4691      	mov	r9, r2
 8001804:	0b3f      	lsrs	r7, r7, #12
 8001806:	0d64      	lsrs	r4, r4, #21
 8001808:	0fdb      	lsrs	r3, r3, #31
 800180a:	428d      	cmp	r5, r1
 800180c:	d01e      	beq.n	800184c <__gedf2+0x68>
 800180e:	428c      	cmp	r4, r1
 8001810:	d016      	beq.n	8001840 <__gedf2+0x5c>
 8001812:	2d00      	cmp	r5, #0
 8001814:	d11e      	bne.n	8001854 <__gedf2+0x70>
 8001816:	4330      	orrs	r0, r6
 8001818:	4684      	mov	ip, r0
 800181a:	2c00      	cmp	r4, #0
 800181c:	d101      	bne.n	8001822 <__gedf2+0x3e>
 800181e:	433a      	orrs	r2, r7
 8001820:	d023      	beq.n	800186a <__gedf2+0x86>
 8001822:	4662      	mov	r2, ip
 8001824:	2a00      	cmp	r2, #0
 8001826:	d01a      	beq.n	800185e <__gedf2+0x7a>
 8001828:	459a      	cmp	sl, r3
 800182a:	d029      	beq.n	8001880 <__gedf2+0x9c>
 800182c:	4651      	mov	r1, sl
 800182e:	2002      	movs	r0, #2
 8001830:	3901      	subs	r1, #1
 8001832:	4008      	ands	r0, r1
 8001834:	3801      	subs	r0, #1
 8001836:	bc1c      	pop	{r2, r3, r4}
 8001838:	4690      	mov	r8, r2
 800183a:	4699      	mov	r9, r3
 800183c:	46a2      	mov	sl, r4
 800183e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001840:	0039      	movs	r1, r7
 8001842:	4311      	orrs	r1, r2
 8001844:	d0e5      	beq.n	8001812 <__gedf2+0x2e>
 8001846:	2002      	movs	r0, #2
 8001848:	4240      	negs	r0, r0
 800184a:	e7f4      	b.n	8001836 <__gedf2+0x52>
 800184c:	4330      	orrs	r0, r6
 800184e:	d1fa      	bne.n	8001846 <__gedf2+0x62>
 8001850:	42ac      	cmp	r4, r5
 8001852:	d00f      	beq.n	8001874 <__gedf2+0x90>
 8001854:	2c00      	cmp	r4, #0
 8001856:	d10f      	bne.n	8001878 <__gedf2+0x94>
 8001858:	433a      	orrs	r2, r7
 800185a:	d0e7      	beq.n	800182c <__gedf2+0x48>
 800185c:	e00c      	b.n	8001878 <__gedf2+0x94>
 800185e:	2201      	movs	r2, #1
 8001860:	3b01      	subs	r3, #1
 8001862:	4393      	bics	r3, r2
 8001864:	0018      	movs	r0, r3
 8001866:	3001      	adds	r0, #1
 8001868:	e7e5      	b.n	8001836 <__gedf2+0x52>
 800186a:	4663      	mov	r3, ip
 800186c:	2000      	movs	r0, #0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0e1      	beq.n	8001836 <__gedf2+0x52>
 8001872:	e7db      	b.n	800182c <__gedf2+0x48>
 8001874:	433a      	orrs	r2, r7
 8001876:	d1e6      	bne.n	8001846 <__gedf2+0x62>
 8001878:	459a      	cmp	sl, r3
 800187a:	d1d7      	bne.n	800182c <__gedf2+0x48>
 800187c:	42a5      	cmp	r5, r4
 800187e:	dcd5      	bgt.n	800182c <__gedf2+0x48>
 8001880:	42a5      	cmp	r5, r4
 8001882:	db05      	blt.n	8001890 <__gedf2+0xac>
 8001884:	42be      	cmp	r6, r7
 8001886:	d8d1      	bhi.n	800182c <__gedf2+0x48>
 8001888:	d008      	beq.n	800189c <__gedf2+0xb8>
 800188a:	2000      	movs	r0, #0
 800188c:	42be      	cmp	r6, r7
 800188e:	d2d2      	bcs.n	8001836 <__gedf2+0x52>
 8001890:	4650      	mov	r0, sl
 8001892:	2301      	movs	r3, #1
 8001894:	3801      	subs	r0, #1
 8001896:	4398      	bics	r0, r3
 8001898:	3001      	adds	r0, #1
 800189a:	e7cc      	b.n	8001836 <__gedf2+0x52>
 800189c:	45c8      	cmp	r8, r9
 800189e:	d8c5      	bhi.n	800182c <__gedf2+0x48>
 80018a0:	2000      	movs	r0, #0
 80018a2:	45c8      	cmp	r8, r9
 80018a4:	d3f4      	bcc.n	8001890 <__gedf2+0xac>
 80018a6:	e7c6      	b.n	8001836 <__gedf2+0x52>
 80018a8:	000007ff 	.word	0x000007ff

080018ac <__ledf2>:
 80018ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ae:	464f      	mov	r7, r9
 80018b0:	4646      	mov	r6, r8
 80018b2:	46d6      	mov	lr, sl
 80018b4:	004d      	lsls	r5, r1, #1
 80018b6:	b5c0      	push	{r6, r7, lr}
 80018b8:	030e      	lsls	r6, r1, #12
 80018ba:	0fc9      	lsrs	r1, r1, #31
 80018bc:	468a      	mov	sl, r1
 80018be:	492e      	ldr	r1, [pc, #184]	; (8001978 <__ledf2+0xcc>)
 80018c0:	031f      	lsls	r7, r3, #12
 80018c2:	005c      	lsls	r4, r3, #1
 80018c4:	4680      	mov	r8, r0
 80018c6:	0b36      	lsrs	r6, r6, #12
 80018c8:	0d6d      	lsrs	r5, r5, #21
 80018ca:	4691      	mov	r9, r2
 80018cc:	0b3f      	lsrs	r7, r7, #12
 80018ce:	0d64      	lsrs	r4, r4, #21
 80018d0:	0fdb      	lsrs	r3, r3, #31
 80018d2:	428d      	cmp	r5, r1
 80018d4:	d018      	beq.n	8001908 <__ledf2+0x5c>
 80018d6:	428c      	cmp	r4, r1
 80018d8:	d011      	beq.n	80018fe <__ledf2+0x52>
 80018da:	2d00      	cmp	r5, #0
 80018dc:	d118      	bne.n	8001910 <__ledf2+0x64>
 80018de:	4330      	orrs	r0, r6
 80018e0:	4684      	mov	ip, r0
 80018e2:	2c00      	cmp	r4, #0
 80018e4:	d11e      	bne.n	8001924 <__ledf2+0x78>
 80018e6:	433a      	orrs	r2, r7
 80018e8:	d11c      	bne.n	8001924 <__ledf2+0x78>
 80018ea:	4663      	mov	r3, ip
 80018ec:	2000      	movs	r0, #0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d030      	beq.n	8001954 <__ledf2+0xa8>
 80018f2:	4651      	mov	r1, sl
 80018f4:	2002      	movs	r0, #2
 80018f6:	3901      	subs	r1, #1
 80018f8:	4008      	ands	r0, r1
 80018fa:	3801      	subs	r0, #1
 80018fc:	e02a      	b.n	8001954 <__ledf2+0xa8>
 80018fe:	0039      	movs	r1, r7
 8001900:	4311      	orrs	r1, r2
 8001902:	d0ea      	beq.n	80018da <__ledf2+0x2e>
 8001904:	2002      	movs	r0, #2
 8001906:	e025      	b.n	8001954 <__ledf2+0xa8>
 8001908:	4330      	orrs	r0, r6
 800190a:	d1fb      	bne.n	8001904 <__ledf2+0x58>
 800190c:	42ac      	cmp	r4, r5
 800190e:	d026      	beq.n	800195e <__ledf2+0xb2>
 8001910:	2c00      	cmp	r4, #0
 8001912:	d126      	bne.n	8001962 <__ledf2+0xb6>
 8001914:	433a      	orrs	r2, r7
 8001916:	d124      	bne.n	8001962 <__ledf2+0xb6>
 8001918:	4651      	mov	r1, sl
 800191a:	2002      	movs	r0, #2
 800191c:	3901      	subs	r1, #1
 800191e:	4008      	ands	r0, r1
 8001920:	3801      	subs	r0, #1
 8001922:	e017      	b.n	8001954 <__ledf2+0xa8>
 8001924:	4662      	mov	r2, ip
 8001926:	2a00      	cmp	r2, #0
 8001928:	d00f      	beq.n	800194a <__ledf2+0x9e>
 800192a:	459a      	cmp	sl, r3
 800192c:	d1e1      	bne.n	80018f2 <__ledf2+0x46>
 800192e:	42a5      	cmp	r5, r4
 8001930:	db05      	blt.n	800193e <__ledf2+0x92>
 8001932:	42be      	cmp	r6, r7
 8001934:	d8dd      	bhi.n	80018f2 <__ledf2+0x46>
 8001936:	d019      	beq.n	800196c <__ledf2+0xc0>
 8001938:	2000      	movs	r0, #0
 800193a:	42be      	cmp	r6, r7
 800193c:	d20a      	bcs.n	8001954 <__ledf2+0xa8>
 800193e:	4650      	mov	r0, sl
 8001940:	2301      	movs	r3, #1
 8001942:	3801      	subs	r0, #1
 8001944:	4398      	bics	r0, r3
 8001946:	3001      	adds	r0, #1
 8001948:	e004      	b.n	8001954 <__ledf2+0xa8>
 800194a:	2201      	movs	r2, #1
 800194c:	3b01      	subs	r3, #1
 800194e:	4393      	bics	r3, r2
 8001950:	0018      	movs	r0, r3
 8001952:	3001      	adds	r0, #1
 8001954:	bc1c      	pop	{r2, r3, r4}
 8001956:	4690      	mov	r8, r2
 8001958:	4699      	mov	r9, r3
 800195a:	46a2      	mov	sl, r4
 800195c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195e:	433a      	orrs	r2, r7
 8001960:	d1d0      	bne.n	8001904 <__ledf2+0x58>
 8001962:	459a      	cmp	sl, r3
 8001964:	d1c5      	bne.n	80018f2 <__ledf2+0x46>
 8001966:	42a5      	cmp	r5, r4
 8001968:	dcc3      	bgt.n	80018f2 <__ledf2+0x46>
 800196a:	e7e0      	b.n	800192e <__ledf2+0x82>
 800196c:	45c8      	cmp	r8, r9
 800196e:	d8c0      	bhi.n	80018f2 <__ledf2+0x46>
 8001970:	2000      	movs	r0, #0
 8001972:	45c8      	cmp	r8, r9
 8001974:	d3e3      	bcc.n	800193e <__ledf2+0x92>
 8001976:	e7ed      	b.n	8001954 <__ledf2+0xa8>
 8001978:	000007ff 	.word	0x000007ff

0800197c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001980:	f000 fa2a 	bl	8001dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001984:	f000 f808 	bl	8001998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001988:	f000 f89a 	bl	8001ac0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800198c:	f000 f860 	bl	8001a50 <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uMain();
 8001990:	f003 fdea 	bl	8005568 <uMain>

  while (1)
 8001994:	e7fe      	b.n	8001994 <main+0x18>
	...

08001998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b093      	sub	sp, #76	; 0x4c
 800199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	2414      	movs	r4, #20
 80019a0:	193b      	adds	r3, r7, r4
 80019a2:	0018      	movs	r0, r3
 80019a4:	2334      	movs	r3, #52	; 0x34
 80019a6:	001a      	movs	r2, r3
 80019a8:	2100      	movs	r1, #0
 80019aa:	f003 fe6f 	bl	800568c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ae:	003b      	movs	r3, r7
 80019b0:	0018      	movs	r0, r3
 80019b2:	2314      	movs	r3, #20
 80019b4:	001a      	movs	r2, r3
 80019b6:	2100      	movs	r1, #0
 80019b8:	f003 fe68 	bl	800568c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019bc:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <SystemClock_Config+0xb0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <SystemClock_Config+0xb4>)
 80019c2:	401a      	ands	r2, r3
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <SystemClock_Config+0xb0>)
 80019c6:	2180      	movs	r1, #128	; 0x80
 80019c8:	0109      	lsls	r1, r1, #4
 80019ca:	430a      	orrs	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019ce:	0021      	movs	r1, r4
 80019d0:	187b      	adds	r3, r7, r1
 80019d2:	2202      	movs	r2, #2
 80019d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	2201      	movs	r2, #1
 80019da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	2210      	movs	r2, #16
 80019e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	2202      	movs	r2, #2
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	2200      	movs	r2, #0
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	02d2      	lsls	r2, r2, #11
 80019f4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80019f6:	187b      	adds	r3, r7, r1
 80019f8:	2280      	movs	r2, #128	; 0x80
 80019fa:	03d2      	lsls	r2, r2, #15
 80019fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	0018      	movs	r0, r3
 8001a02:	f000 febf 	bl	8002784 <HAL_RCC_OscConfig>
 8001a06:	1e03      	subs	r3, r0, #0
 8001a08:	d001      	beq.n	8001a0e <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001a0a:	f000 f903 	bl	8001c14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0e:	003b      	movs	r3, r7
 8001a10:	220f      	movs	r2, #15
 8001a12:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a14:	003b      	movs	r3, r7
 8001a16:	2203      	movs	r2, #3
 8001a18:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1a:	003b      	movs	r3, r7
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a20:	003b      	movs	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a26:	003b      	movs	r3, r7
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a2c:	003b      	movs	r3, r7
 8001a2e:	2101      	movs	r1, #1
 8001a30:	0018      	movs	r0, r3
 8001a32:	f001 fa21 	bl	8002e78 <HAL_RCC_ClockConfig>
 8001a36:	1e03      	subs	r3, r0, #0
 8001a38:	d001      	beq.n	8001a3e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001a3a:	f000 f8eb 	bl	8001c14 <Error_Handler>
  }
}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b013      	add	sp, #76	; 0x4c
 8001a44:	bd90      	pop	{r4, r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	ffffe7ff 	.word	0xffffe7ff

08001a50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a56:	4a19      	ldr	r2, [pc, #100]	; (8001abc <MX_SPI1_Init+0x6c>)
 8001a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a5c:	2282      	movs	r2, #130	; 0x82
 8001a5e:	0052      	lsls	r2, r2, #1
 8001a60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	0092      	lsls	r2, r2, #2
 8001a80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <MX_SPI1_Init+0x68>)
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f001 fb96 	bl	80031d4 <HAL_SPI_Init>
 8001aa8:	1e03      	subs	r3, r0, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001aac:	f000 f8b2 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ab0:	46c0      	nop			; (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	20000134 	.word	0x20000134
 8001abc:	40013000 	.word	0x40013000

08001ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	240c      	movs	r4, #12
 8001ac8:	193b      	adds	r3, r7, r4
 8001aca:	0018      	movs	r0, r3
 8001acc:	2314      	movs	r3, #20
 8001ace:	001a      	movs	r2, r3
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	f003 fddb 	bl	800568c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	4b4a      	ldr	r3, [pc, #296]	; (8001c00 <MX_GPIO_Init+0x140>)
 8001ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ada:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <MX_GPIO_Init+0x140>)
 8001adc:	2101      	movs	r1, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ae2:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <MX_GPIO_Init+0x140>)
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	4b44      	ldr	r3, [pc, #272]	; (8001c00 <MX_GPIO_Init+0x140>)
 8001af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af2:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <MX_GPIO_Init+0x140>)
 8001af4:	2102      	movs	r1, #2
 8001af6:	430a      	orrs	r2, r1
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <MX_GPIO_Init+0x140>)
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	2202      	movs	r2, #2
 8001b00:	4013      	ands	r3, r2
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_RESET_Pin|COL5_Pin|COL4_Pin|COL3_Pin
 8001b06:	493f      	ldr	r1, [pc, #252]	; (8001c04 <MX_GPIO_Init+0x144>)
 8001b08:	23a0      	movs	r3, #160	; 0xa0
 8001b0a:	05db      	lsls	r3, r3, #23
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f000 fde2 	bl	80026d8 <HAL_GPIO_WritePin>
                          |COL2_Pin|COL1_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_CS_Pin|PIN_TX_Pin|PIN_RX_Pin, GPIO_PIN_RESET);
 8001b14:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	21c1      	movs	r1, #193	; 0xc1
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f000 fddc 	bl	80026d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin;
 8001b20:	193b      	adds	r3, r7, r4
 8001b22:	2205      	movs	r2, #5
 8001b24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_FALLING;
 8001b26:	193b      	adds	r3, r7, r4
 8001b28:	4a38      	ldr	r2, [pc, #224]	; (8001c0c <MX_GPIO_Init+0x14c>)
 8001b2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2c:	193b      	adds	r3, r7, r4
 8001b2e:	2201      	movs	r2, #1
 8001b30:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	193a      	adds	r2, r7, r4
 8001b34:	23a0      	movs	r3, #160	; 0xa0
 8001b36:	05db      	lsls	r3, r3, #23
 8001b38:	0011      	movs	r1, r2
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 fc5e 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pins : R_RESET_Pin LED1_Pin */
  GPIO_InitStruct.Pin = R_RESET_Pin|LED1_Pin;
 8001b40:	193b      	adds	r3, r7, r4
 8001b42:	4a33      	ldr	r2, [pc, #204]	; (8001c10 <MX_GPIO_Init+0x150>)
 8001b44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	193b      	adds	r3, r7, r4
 8001b48:	2201      	movs	r2, #1
 8001b4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	193b      	adds	r3, r7, r4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	193b      	adds	r3, r7, r4
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	193a      	adds	r2, r7, r4
 8001b5a:	23a0      	movs	r3, #160	; 0xa0
 8001b5c:	05db      	lsls	r3, r3, #23
 8001b5e:	0011      	movs	r1, r2
 8001b60:	0018      	movs	r0, r3
 8001b62:	f000 fc4b 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : R_INT_Pin */
  GPIO_InitStruct.Pin = R_INT_Pin;
 8001b66:	193b      	adds	r3, r7, r4
 8001b68:	2210      	movs	r2, #16
 8001b6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6c:	193b      	adds	r3, r7, r4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	193b      	adds	r3, r7, r4
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(R_INT_GPIO_Port, &GPIO_InitStruct);
 8001b78:	193a      	adds	r2, r7, r4
 8001b7a:	23a0      	movs	r3, #160	; 0xa0
 8001b7c:	05db      	lsls	r3, r3, #23
 8001b7e:	0011      	movs	r1, r2
 8001b80:	0018      	movs	r0, r3
 8001b82:	f000 fc3b 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pins : R_CS_Pin PIN_TX_Pin PIN_RX_Pin */
  GPIO_InitStruct.Pin = R_CS_Pin|PIN_TX_Pin|PIN_RX_Pin;
 8001b86:	0021      	movs	r1, r4
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	22c1      	movs	r2, #193	; 0xc1
 8001b8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	187b      	adds	r3, r7, r1
 8001b90:	2201      	movs	r2, #1
 8001b92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	187b      	adds	r3, r7, r1
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	187b      	adds	r3, r7, r1
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba0:	000c      	movs	r4, r1
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001ba6:	0019      	movs	r1, r3
 8001ba8:	0010      	movs	r0, r2
 8001baa:	f000 fc27 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pins : COL5_Pin COL4_Pin COL3_Pin COL2_Pin
                           COL1_Pin */
  GPIO_InitStruct.Pin = COL5_Pin|COL4_Pin|COL3_Pin|COL2_Pin
 8001bae:	0021      	movs	r1, r4
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	22f8      	movs	r2, #248	; 0xf8
 8001bb4:	0152      	lsls	r2, r2, #5
 8001bb6:	601a      	str	r2, [r3, #0]
                          |COL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	2211      	movs	r2, #17
 8001bbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	000c      	movs	r4, r1
 8001bcc:	187a      	adds	r2, r7, r1
 8001bce:	23a0      	movs	r3, #160	; 0xa0
 8001bd0:	05db      	lsls	r3, r3, #23
 8001bd2:	0011      	movs	r1, r2
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 fc11 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pins : GND1_Pin GND2_Pin */
  GPIO_InitStruct.Pin = GND1_Pin|GND2_Pin;
 8001bda:	193b      	adds	r3, r7, r4
 8001bdc:	2230      	movs	r2, #48	; 0x30
 8001bde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be0:	193b      	adds	r3, r7, r4
 8001be2:	2200      	movs	r2, #0
 8001be4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	193b      	adds	r3, r7, r4
 8001bee:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	0010      	movs	r0, r2
 8001bf4:	f000 fc02 	bl	80023fc <HAL_GPIO_Init>

}
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b009      	add	sp, #36	; 0x24
 8001bfe:	bd90      	pop	{r4, r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	00009f08 	.word	0x00009f08
 8001c08:	50000400 	.word	0x50000400
 8001c0c:	10220000 	.word	0x10220000
 8001c10:	00008008 	.word	0x00008008

08001c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c18:	46c0      	nop			; (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <HAL_MspInit+0x24>)
 8001c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_MspInit+0x24>)
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <HAL_MspInit+0x24>)
 8001c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_MspInit+0x24>)
 8001c36:	2180      	movs	r1, #128	; 0x80
 8001c38:	0549      	lsls	r1, r1, #21
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000

08001c48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	230c      	movs	r3, #12
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	0018      	movs	r0, r3
 8001c56:	2314      	movs	r3, #20
 8001c58:	001a      	movs	r2, r3
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	f003 fd16 	bl	800568c <memset>
  if(hspi->Instance==SPI1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a18      	ldr	r2, [pc, #96]	; (8001cc8 <HAL_SPI_MspInit+0x80>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d129      	bne.n	8001cbe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_SPI_MspInit+0x84>)
 8001c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_SPI_MspInit+0x84>)
 8001c70:	2180      	movs	r1, #128	; 0x80
 8001c72:	0149      	lsls	r1, r1, #5
 8001c74:	430a      	orrs	r2, r1
 8001c76:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <HAL_SPI_MspInit+0x84>)
 8001c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_SPI_MspInit+0x84>)
 8001c7e:	2101      	movs	r1, #1
 8001c80:	430a      	orrs	r2, r1
 8001c82:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_SPI_MspInit+0x84>)
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = R_SCK_Pin|R_MISO_Pin|R_MOSI_Pin;
 8001c90:	210c      	movs	r1, #12
 8001c92:	187b      	adds	r3, r7, r1
 8001c94:	22e0      	movs	r2, #224	; 0xe0
 8001c96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	187a      	adds	r2, r7, r1
 8001cb2:	23a0      	movs	r3, #160	; 0xa0
 8001cb4:	05db      	lsls	r3, r3, #23
 8001cb6:	0011      	movs	r1, r2
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 fb9f 	bl	80023fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b008      	add	sp, #32
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	40013000 	.word	0x40013000
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <HardFault_Handler+0x4>

08001ce0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf8:	f000 f8c2 	bl	8001e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  mySysTick_Handler();
 8001cfc:	f002 fec2 	bl	8004a84 <mySysTick_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001d00:	46c0      	nop			; (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001d0c:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <SystemInit+0x64>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <SystemInit+0x64>)
 8001d12:	2180      	movs	r1, #128	; 0x80
 8001d14:	0049      	lsls	r1, r1, #1
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <SystemInit+0x64>)
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <SystemInit+0x64>)
 8001d20:	4913      	ldr	r1, [pc, #76]	; (8001d70 <SystemInit+0x68>)
 8001d22:	400a      	ands	r2, r1
 8001d24:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <SystemInit+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <SystemInit+0x64>)
 8001d2c:	4911      	ldr	r1, [pc, #68]	; (8001d74 <SystemInit+0x6c>)
 8001d2e:	400a      	ands	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <SystemInit+0x64>)
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <SystemInit+0x64>)
 8001d38:	2101      	movs	r1, #1
 8001d3a:	438a      	bics	r2, r1
 8001d3c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <SystemInit+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <SystemInit+0x64>)
 8001d44:	490c      	ldr	r1, [pc, #48]	; (8001d78 <SystemInit+0x70>)
 8001d46:	400a      	ands	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <SystemInit+0x64>)
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <SystemInit+0x64>)
 8001d50:	490a      	ldr	r1, [pc, #40]	; (8001d7c <SystemInit+0x74>)
 8001d52:	400a      	ands	r2, r1
 8001d54:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <SystemInit+0x64>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <SystemInit+0x78>)
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	0512      	lsls	r2, r2, #20
 8001d62:	609a      	str	r2, [r3, #8]
#endif
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	88ff400c 	.word	0x88ff400c
 8001d74:	fef6fff6 	.word	0xfef6fff6
 8001d78:	fffbffff 	.word	0xfffbffff
 8001d7c:	ff02ffff 	.word	0xff02ffff
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001d84:	480d      	ldr	r0, [pc, #52]	; (8001dbc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001d86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001d88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d8a:	e003      	b.n	8001d94 <LoopCopyDataInit>

08001d8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001d8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d92:	3104      	adds	r1, #4

08001d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d94:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001d98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d9c:	d3f6      	bcc.n	8001d8c <CopyDataInit>
  ldr  r2, =_sbss
 8001d9e:	4a0b      	ldr	r2, [pc, #44]	; (8001dcc <LoopForever+0x12>)
  b  LoopFillZerobss
 8001da0:	e002      	b.n	8001da8 <LoopFillZerobss>

08001da2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001da2:	2300      	movs	r3, #0
  str  r3, [r2]
 8001da4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da6:	3204      	adds	r2, #4

08001da8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <LoopForever+0x16>)
  cmp  r2, r3
 8001daa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dac:	d3f9      	bcc.n	8001da2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001dae:	f7ff ffab 	bl	8001d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001db2:	f003 fc47 	bl	8005644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001db6:	f7ff fde1 	bl	800197c <main>

08001dba <LoopForever>:

LoopForever:
    b LoopForever
 8001dba:	e7fe      	b.n	8001dba <LoopForever>
   ldr   r0, =_estack
 8001dbc:	20001fc0 	.word	0x20001fc0
  ldr  r3, =_sidata
 8001dc0:	080057b8 	.word	0x080057b8
  ldr  r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dc8:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001dcc:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001dd0:	200001a8 	.word	0x200001a8

08001dd4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd4:	e7fe      	b.n	8001dd4 <ADC1_COMP_IRQHandler>
	...

08001dd8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_Init+0x3c>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_Init+0x3c>)
 8001dea:	2140      	movs	r1, #64	; 0x40
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df0:	2000      	movs	r0, #0
 8001df2:	f000 f811 	bl	8001e18 <HAL_InitTick>
 8001df6:	1e03      	subs	r3, r0, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001dfa:	1dfb      	adds	r3, r7, #7
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	e001      	b.n	8001e06 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e02:	f7ff ff0d 	bl	8001c20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e06:	1dfb      	adds	r3, r7, #7
 8001e08:	781b      	ldrb	r3, [r3, #0]
}
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b002      	add	sp, #8
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	40022000 	.word	0x40022000

08001e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <HAL_InitTick+0x5c>)
 8001e22:	681c      	ldr	r4, [r3, #0]
 8001e24:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <HAL_InitTick+0x60>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	0019      	movs	r1, r3
 8001e2a:	23fa      	movs	r3, #250	; 0xfa
 8001e2c:	0098      	lsls	r0, r3, #2
 8001e2e:	f7fe f9b5 	bl	800019c <__udivsi3>
 8001e32:	0003      	movs	r3, r0
 8001e34:	0019      	movs	r1, r3
 8001e36:	0020      	movs	r0, r4
 8001e38:	f7fe f9b0 	bl	800019c <__udivsi3>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 f921 	bl	8002086 <HAL_SYSTICK_Config>
 8001e44:	1e03      	subs	r3, r0, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e00f      	b.n	8001e6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d80b      	bhi.n	8001e6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	2301      	movs	r3, #1
 8001e56:	425b      	negs	r3, r3
 8001e58:	2200      	movs	r2, #0
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f000 f8fe 	bl	800205c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_InitTick+0x64>)
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e000      	b.n	8001e6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b003      	add	sp, #12
 8001e72:	bd90      	pop	{r4, r7, pc}
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000008 	.word	0x20000008
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_IncTick+0x1c>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	001a      	movs	r2, r3
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_IncTick+0x20>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	18d2      	adds	r2, r2, r3
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_IncTick+0x20>)
 8001e92:	601a      	str	r2, [r3, #0]
}
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	2000018c 	.word	0x2000018c

08001ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <HAL_GetTick+0x10>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	0018      	movs	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	2000018c 	.word	0x2000018c

08001eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec0:	f7ff fff0 	bl	8001ea4 <HAL_GetTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	d005      	beq.n	8001ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_Delay+0x40>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	001a      	movs	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	189b      	adds	r3, r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	f7ff ffe0 	bl	8001ea4 <HAL_GetTick>
 8001ee4:	0002      	movs	r2, r0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d8f7      	bhi.n	8001ee0 <HAL_Delay+0x28>
  {
  }
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b004      	add	sp, #16
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000008 	.word	0x20000008

08001efc <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8001f00:	4b02      	ldr	r3, [pc, #8]	; (8001f0c <HAL_GetUIDw0+0x10>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	1ff80050 	.word	0x1ff80050

08001f10 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8001f14:	4b02      	ldr	r3, [pc, #8]	; (8001f20 <HAL_GetUIDw1+0x10>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	1ff80054 	.word	0x1ff80054

08001f24 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8001f28:	4b02      	ldr	r3, [pc, #8]	; (8001f34 <HAL_GetUIDw2+0x10>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	1ff80064 	.word	0x1ff80064

08001f38 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	0002      	movs	r2, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	1dfb      	adds	r3, r7, #7
 8001f44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f4c:	d932      	bls.n	8001fb4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f4e:	4a2f      	ldr	r2, [pc, #188]	; (800200c <NVIC_SetPriority+0xd4>)
 8001f50:	1dfb      	adds	r3, r7, #7
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	0019      	movs	r1, r3
 8001f56:	230f      	movs	r3, #15
 8001f58:	400b      	ands	r3, r1
 8001f5a:	3b08      	subs	r3, #8
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3306      	adds	r3, #6
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	18d3      	adds	r3, r2, r3
 8001f64:	3304      	adds	r3, #4
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	1dfa      	adds	r2, r7, #7
 8001f6a:	7812      	ldrb	r2, [r2, #0]
 8001f6c:	0011      	movs	r1, r2
 8001f6e:	2203      	movs	r2, #3
 8001f70:	400a      	ands	r2, r1
 8001f72:	00d2      	lsls	r2, r2, #3
 8001f74:	21ff      	movs	r1, #255	; 0xff
 8001f76:	4091      	lsls	r1, r2
 8001f78:	000a      	movs	r2, r1
 8001f7a:	43d2      	mvns	r2, r2
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	019b      	lsls	r3, r3, #6
 8001f84:	22ff      	movs	r2, #255	; 0xff
 8001f86:	401a      	ands	r2, r3
 8001f88:	1dfb      	adds	r3, r7, #7
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	2303      	movs	r3, #3
 8001f90:	4003      	ands	r3, r0
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f96:	481d      	ldr	r0, [pc, #116]	; (800200c <NVIC_SetPriority+0xd4>)
 8001f98:	1dfb      	adds	r3, r7, #7
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	001c      	movs	r4, r3
 8001f9e:	230f      	movs	r3, #15
 8001fa0:	4023      	ands	r3, r4
 8001fa2:	3b08      	subs	r3, #8
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	3306      	adds	r3, #6
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	18c3      	adds	r3, r0, r3
 8001fae:	3304      	adds	r3, #4
 8001fb0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fb2:	e027      	b.n	8002004 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fb4:	4a16      	ldr	r2, [pc, #88]	; (8002010 <NVIC_SetPriority+0xd8>)
 8001fb6:	1dfb      	adds	r3, r7, #7
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b25b      	sxtb	r3, r3
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	33c0      	adds	r3, #192	; 0xc0
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	589b      	ldr	r3, [r3, r2]
 8001fc4:	1dfa      	adds	r2, r7, #7
 8001fc6:	7812      	ldrb	r2, [r2, #0]
 8001fc8:	0011      	movs	r1, r2
 8001fca:	2203      	movs	r2, #3
 8001fcc:	400a      	ands	r2, r1
 8001fce:	00d2      	lsls	r2, r2, #3
 8001fd0:	21ff      	movs	r1, #255	; 0xff
 8001fd2:	4091      	lsls	r1, r2
 8001fd4:	000a      	movs	r2, r1
 8001fd6:	43d2      	mvns	r2, r2
 8001fd8:	401a      	ands	r2, r3
 8001fda:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	019b      	lsls	r3, r3, #6
 8001fe0:	22ff      	movs	r2, #255	; 0xff
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	1dfb      	adds	r3, r7, #7
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	2303      	movs	r3, #3
 8001fec:	4003      	ands	r3, r0
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ff2:	4807      	ldr	r0, [pc, #28]	; (8002010 <NVIC_SetPriority+0xd8>)
 8001ff4:	1dfb      	adds	r3, r7, #7
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	33c0      	adds	r3, #192	; 0xc0
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	501a      	str	r2, [r3, r0]
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	b003      	add	sp, #12
 800200a:	bd90      	pop	{r4, r7, pc}
 800200c:	e000ed00 	.word	0xe000ed00
 8002010:	e000e100 	.word	0xe000e100

08002014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <SysTick_Config+0x40>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002026:	2301      	movs	r3, #1
 8002028:	e010      	b.n	800204c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <SysTick_Config+0x44>)
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	3a01      	subs	r2, #1
 8002030:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002032:	2301      	movs	r3, #1
 8002034:	425b      	negs	r3, r3
 8002036:	2103      	movs	r1, #3
 8002038:	0018      	movs	r0, r3
 800203a:	f7ff ff7d 	bl	8001f38 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <SysTick_Config+0x44>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x44>)
 8002046:	2207      	movs	r2, #7
 8002048:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204a:	2300      	movs	r3, #0
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b002      	add	sp, #8
 8002052:	bd80      	pop	{r7, pc}
 8002054:	00ffffff 	.word	0x00ffffff
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	210f      	movs	r1, #15
 8002068:	187b      	adds	r3, r7, r1
 800206a:	1c02      	adds	r2, r0, #0
 800206c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	187b      	adds	r3, r7, r1
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b25b      	sxtb	r3, r3
 8002076:	0011      	movs	r1, r2
 8002078:	0018      	movs	r0, r3
 800207a:	f7ff ff5d 	bl	8001f38 <NVIC_SetPriority>
}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	46bd      	mov	sp, r7
 8002082:	b004      	add	sp, #16
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	0018      	movs	r0, r3
 8002092:	f7ff ffbf 	bl	8002014 <SysTick_Config>
 8002096:	0003      	movs	r3, r0
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b002      	add	sp, #8
 800209e:	bd80      	pop	{r7, pc}

080020a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff fefc 	bl	8001ea4 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80020b0:	e00f      	b.n	80020d2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3301      	adds	r3, #1
 80020b6:	d00c      	beq.n	80020d2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <FLASH_WaitForLastOperation+0x2e>
 80020be:	f7ff fef1 	bl	8001ea4 <HAL_GetTick>
 80020c2:	0002      	movs	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d201      	bcs.n	80020d2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e052      	b.n	8002178 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80020d2:	4b2b      	ldr	r3, [pc, #172]	; (8002180 <FLASH_WaitForLastOperation+0xe0>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2201      	movs	r2, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d0e9      	beq.n	80020b2 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80020de:	4b28      	ldr	r3, [pc, #160]	; (8002180 <FLASH_WaitForLastOperation+0xe0>)
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2202      	movs	r2, #2
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d102      	bne.n	80020f0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <FLASH_WaitForLastOperation+0xe0>)
 80020ec:	2202      	movs	r2, #2
 80020ee:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80020f0:	4b23      	ldr	r3, [pc, #140]	; (8002180 <FLASH_WaitForLastOperation+0xe0>)
 80020f2:	699a      	ldr	r2, [r3, #24]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	401a      	ands	r2, r3
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	429a      	cmp	r2, r3
 8002100:	d035      	beq.n	800216e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8002102:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <FLASH_WaitForLastOperation+0xe0>)
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	429a      	cmp	r2, r3
 8002112:	d02c      	beq.n	800216e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <FLASH_WaitForLastOperation+0xe0>)
 8002116:	699a      	ldr	r2, [r3, #24]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	429a      	cmp	r2, r3
 8002124:	d023      	beq.n	800216e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <FLASH_WaitForLastOperation+0xe0>)
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	429a      	cmp	r2, r3
 8002136:	d01a      	beq.n	800216e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <FLASH_WaitForLastOperation+0xe0>)
 800213a:	699a      	ldr	r2, [r3, #24]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	019b      	lsls	r3, r3, #6
 8002140:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	429a      	cmp	r2, r3
 8002148:	d011      	beq.n	800216e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800214a:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <FLASH_WaitForLastOperation+0xe0>)
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	029b      	lsls	r3, r3, #10
 8002152:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	029b      	lsls	r3, r3, #10
 8002158:	429a      	cmp	r2, r3
 800215a:	d008      	beq.n	800216e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <FLASH_WaitForLastOperation+0xe0>)
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	025b      	lsls	r3, r3, #9
 8002164:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	025b      	lsls	r3, r3, #9
 800216a:	429a      	cmp	r2, r3
 800216c:	d103      	bne.n	8002176 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800216e:	f000 f809 	bl	8002184 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b004      	add	sp, #16
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40022000 	.word	0x40022000

08002184 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800218e:	4b49      	ldr	r3, [pc, #292]	; (80022b4 <FLASH_SetErrorCode+0x130>)
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	401a      	ands	r2, r3
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	429a      	cmp	r2, r3
 800219e:	d10a      	bne.n	80021b6 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80021a0:	4b45      	ldr	r3, [pc, #276]	; (80022b8 <FLASH_SetErrorCode+0x134>)
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	2202      	movs	r2, #2
 80021a6:	431a      	orrs	r2, r3
 80021a8:	4b43      	ldr	r3, [pc, #268]	; (80022b8 <FLASH_SetErrorCode+0x134>)
 80021aa:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2280      	movs	r2, #128	; 0x80
 80021b0:	0052      	lsls	r2, r2, #1
 80021b2:	4313      	orrs	r3, r2
 80021b4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80021b6:	4b3f      	ldr	r3, [pc, #252]	; (80022b4 <FLASH_SetErrorCode+0x130>)
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	401a      	ands	r2, r3
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d10a      	bne.n	80021de <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80021c8:	4b3b      	ldr	r3, [pc, #236]	; (80022b8 <FLASH_SetErrorCode+0x134>)
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	2201      	movs	r2, #1
 80021ce:	431a      	orrs	r2, r3
 80021d0:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <FLASH_SetErrorCode+0x134>)
 80021d2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	0092      	lsls	r2, r2, #2
 80021da:	4313      	orrs	r3, r2
 80021dc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80021de:	4b35      	ldr	r3, [pc, #212]	; (80022b4 <FLASH_SetErrorCode+0x130>)
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	401a      	ands	r2, r3
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d10a      	bne.n	8002206 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80021f0:	4b31      	ldr	r3, [pc, #196]	; (80022b8 <FLASH_SetErrorCode+0x134>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	2208      	movs	r2, #8
 80021f6:	431a      	orrs	r2, r3
 80021f8:	4b2f      	ldr	r3, [pc, #188]	; (80022b8 <FLASH_SetErrorCode+0x134>)
 80021fa:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	00d2      	lsls	r2, r2, #3
 8002202:	4313      	orrs	r3, r2
 8002204:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002206:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <FLASH_SetErrorCode+0x130>)
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	401a      	ands	r2, r3
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	429a      	cmp	r2, r3
 8002216:	d10a      	bne.n	800222e <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002218:	4b27      	ldr	r3, [pc, #156]	; (80022b8 <FLASH_SetErrorCode+0x134>)
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	2204      	movs	r2, #4
 800221e:	431a      	orrs	r2, r3
 8002220:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <FLASH_SetErrorCode+0x134>)
 8002222:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2280      	movs	r2, #128	; 0x80
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	4313      	orrs	r3, r2
 800222c:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800222e:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <FLASH_SetErrorCode+0x130>)
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	019b      	lsls	r3, r3, #6
 8002236:	401a      	ands	r2, r3
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	019b      	lsls	r3, r3, #6
 800223c:	429a      	cmp	r2, r3
 800223e:	d10a      	bne.n	8002256 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <FLASH_SetErrorCode+0x134>)
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	2210      	movs	r2, #16
 8002246:	431a      	orrs	r2, r3
 8002248:	4b1b      	ldr	r3, [pc, #108]	; (80022b8 <FLASH_SetErrorCode+0x134>)
 800224a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2280      	movs	r2, #128	; 0x80
 8002250:	0192      	lsls	r2, r2, #6
 8002252:	4313      	orrs	r3, r2
 8002254:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <FLASH_SetErrorCode+0x130>)
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	029b      	lsls	r3, r3, #10
 800225e:	401a      	ands	r2, r3
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	029b      	lsls	r3, r3, #10
 8002264:	429a      	cmp	r2, r3
 8002266:	d109      	bne.n	800227c <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <FLASH_SetErrorCode+0x134>)
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	2220      	movs	r2, #32
 800226e:	431a      	orrs	r2, r3
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <FLASH_SetErrorCode+0x134>)
 8002272:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	4313      	orrs	r3, r2
 800227a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <FLASH_SetErrorCode+0x130>)
 800227e:	699a      	ldr	r2, [r3, #24]
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	025b      	lsls	r3, r3, #9
 8002284:	401a      	ands	r2, r3
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	025b      	lsls	r3, r3, #9
 800228a:	429a      	cmp	r2, r3
 800228c:	d10a      	bne.n	80022a4 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <FLASH_SetErrorCode+0x134>)
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	2240      	movs	r2, #64	; 0x40
 8002294:	431a      	orrs	r2, r3
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <FLASH_SetErrorCode+0x134>)
 8002298:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2280      	movs	r2, #128	; 0x80
 800229e:	0252      	lsls	r2, r2, #9
 80022a0:	4313      	orrs	r3, r2
 80022a2:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80022a4:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <FLASH_SetErrorCode+0x130>)
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	619a      	str	r2, [r3, #24]
}  
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b002      	add	sp, #8
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	40022000 	.word	0x40022000
 80022b8:	20000190 	.word	0x20000190

080022bc <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4013      	ands	r3, r2
 80022ca:	d017      	beq.n	80022fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x40>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80022cc:	f3ef 8310 	mrs	r3, PRIMASK
 80022d0:	607b      	str	r3, [r7, #4]
  return(result);
 80022d2:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80022d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80022d6:	b672      	cpsid	i
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 80022da:	4a0c      	ldr	r2, [pc, #48]	; (800230c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80022dc:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 80022e0:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 80022e2:	60da      	str	r2, [r3, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f383 8810 	msr	PRIMASK, r3

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	4013      	ands	r3, r2
 80022f6:	d001      	beq.n	80022fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x40>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_FLASHEx_DATAEEPROM_Unlock+0x42>
    }
  }

  return HAL_OK;  
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	b004      	add	sp, #16
 8002304:	bd80      	pop	{r7, pc}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	40022000 	.word	0x40022000
 800230c:	89abcdef 	.word	0x89abcdef
 8002310:	02030405 	.word	0x02030405

08002314 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800231e:	2101      	movs	r1, #1
 8002320:	430a      	orrs	r2, r1
 8002322:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	0018      	movs	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40022000 	.word	0x40022000

08002330 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8002330:	b5b0      	push	{r4, r5, r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800233c:	2317      	movs	r3, #23
 800233e:	18fb      	adds	r3, r7, r3
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002344:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8002346:	7c1b      	ldrb	r3, [r3, #16]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800234c:	2302      	movs	r3, #2
 800234e:	e03f      	b.n	80023d0 <HAL_FLASHEx_DATAEEPROM_Program+0xa0>
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8002352:	2201      	movs	r2, #1
 8002354:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002356:	2517      	movs	r5, #23
 8002358:	197c      	adds	r4, r7, r5
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800235c:	0018      	movs	r0, r3
 800235e:	f7ff fe9f 	bl	80020a0 <FLASH_WaitForLastOperation>
 8002362:	0003      	movs	r3, r0
 8002364:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8002366:	197b      	adds	r3, r7, r5
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d12a      	bne.n	80023c4 <HAL_FLASHEx_DATAEEPROM_Program+0x94>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800236e:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8002370:	2200      	movs	r2, #0
 8002372:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d103      	bne.n	8002382 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	e013      	b.n	80023aa <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d104      	bne.n	8002392 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	b292      	uxth	r2, r2
 800238e:	801a      	strh	r2, [r3, #0]
 8002390:	e00b      	b.n	80023aa <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d104      	bne.n	80023a2 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	e003      	b.n	80023aa <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 80023a2:	2317      	movs	r3, #23
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
    }

    if (status != HAL_OK)
 80023aa:	2317      	movs	r3, #23
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <HAL_FLASHEx_DATAEEPROM_Program+0x94>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023b4:	2317      	movs	r3, #23
 80023b6:	18fc      	adds	r4, r7, r3
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80023ba:	0018      	movs	r0, r3
 80023bc:	f7ff fe70 	bl	80020a0 <FLASH_WaitForLastOperation>
 80023c0:	0003      	movs	r3, r0
 80023c2:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	741a      	strb	r2, [r3, #16]

  return status;
 80023ca:	2317      	movs	r3, #23
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	781b      	ldrb	r3, [r3, #0]
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b006      	add	sp, #24
 80023d6:	bdb0      	pop	{r4, r5, r7, pc}
 80023d8:	20000190 	.word	0x20000190
 80023dc:	0000c350 	.word	0x0000c350

080023e0 <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram>:
/**
  * @brief  Enable DATA EEPROM fixed Time programming (2*Tprog).
  * @retval None
  */
void HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_FIX);
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram+0x18>)
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram+0x18>)
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	0049      	lsls	r1, r1, #1
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]
}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40022000 	.word	0x40022000

080023fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002412:	e149      	b.n	80026a8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2101      	movs	r1, #1
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4091      	lsls	r1, r2
 800241e:	000a      	movs	r2, r1
 8002420:	4013      	ands	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d100      	bne.n	800242c <HAL_GPIO_Init+0x30>
 800242a:	e13a      	b.n	80026a2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d00b      	beq.n	800244c <HAL_GPIO_Init+0x50>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d007      	beq.n	800244c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002440:	2b11      	cmp	r3, #17
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b12      	cmp	r3, #18
 800244a:	d130      	bne.n	80024ae <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	409a      	lsls	r2, r3
 800245a:	0013      	movs	r3, r2
 800245c:	43da      	mvns	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	409a      	lsls	r2, r3
 800246e:	0013      	movs	r3, r2
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002482:	2201      	movs	r2, #1
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
 8002488:	0013      	movs	r3, r2
 800248a:	43da      	mvns	r2, r3
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	2201      	movs	r2, #1
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	409a      	lsls	r2, r3
 80024bc:	0013      	movs	r3, r2
 80024be:	43da      	mvns	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	409a      	lsls	r2, r3
 80024d0:	0013      	movs	r3, r2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0xf2>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b12      	cmp	r3, #18
 80024ec:	d123      	bne.n	8002536 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	08da      	lsrs	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3208      	adds	r2, #8
 80024f6:	0092      	lsls	r2, r2, #2
 80024f8:	58d3      	ldr	r3, [r2, r3]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2207      	movs	r2, #7
 8002500:	4013      	ands	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	220f      	movs	r2, #15
 8002506:	409a      	lsls	r2, r3
 8002508:	0013      	movs	r3, r2
 800250a:	43da      	mvns	r2, r3
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2107      	movs	r1, #7
 800251a:	400b      	ands	r3, r1
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	409a      	lsls	r2, r3
 8002520:	0013      	movs	r3, r2
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	08da      	lsrs	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3208      	adds	r2, #8
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	6939      	ldr	r1, [r7, #16]
 8002534:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	2203      	movs	r2, #3
 8002542:	409a      	lsls	r2, r3
 8002544:	0013      	movs	r3, r2
 8002546:	43da      	mvns	r2, r3
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2203      	movs	r2, #3
 8002554:	401a      	ands	r2, r3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	409a      	lsls	r2, r3
 800255c:	0013      	movs	r3, r2
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	055b      	lsls	r3, r3, #21
 8002572:	4013      	ands	r3, r2
 8002574:	d100      	bne.n	8002578 <HAL_GPIO_Init+0x17c>
 8002576:	e094      	b.n	80026a2 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002578:	4b51      	ldr	r3, [pc, #324]	; (80026c0 <HAL_GPIO_Init+0x2c4>)
 800257a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800257c:	4b50      	ldr	r3, [pc, #320]	; (80026c0 <HAL_GPIO_Init+0x2c4>)
 800257e:	2101      	movs	r1, #1
 8002580:	430a      	orrs	r2, r1
 8002582:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002584:	4a4f      	ldr	r2, [pc, #316]	; (80026c4 <HAL_GPIO_Init+0x2c8>)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	589b      	ldr	r3, [r3, r2]
 8002590:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2203      	movs	r2, #3
 8002596:	4013      	ands	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	220f      	movs	r2, #15
 800259c:	409a      	lsls	r2, r3
 800259e:	0013      	movs	r3, r2
 80025a0:	43da      	mvns	r2, r3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	23a0      	movs	r3, #160	; 0xa0
 80025ac:	05db      	lsls	r3, r3, #23
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d013      	beq.n	80025da <HAL_GPIO_Init+0x1de>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a44      	ldr	r2, [pc, #272]	; (80026c8 <HAL_GPIO_Init+0x2cc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00d      	beq.n	80025d6 <HAL_GPIO_Init+0x1da>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a43      	ldr	r2, [pc, #268]	; (80026cc <HAL_GPIO_Init+0x2d0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <HAL_GPIO_Init+0x1d6>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a42      	ldr	r2, [pc, #264]	; (80026d0 <HAL_GPIO_Init+0x2d4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d101      	bne.n	80025ce <HAL_GPIO_Init+0x1d2>
 80025ca:	2305      	movs	r3, #5
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x1e0>
 80025ce:	2306      	movs	r3, #6
 80025d0:	e004      	b.n	80025dc <HAL_GPIO_Init+0x1e0>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_Init+0x1e0>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_GPIO_Init+0x1e0>
 80025da:	2300      	movs	r3, #0
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	2103      	movs	r1, #3
 80025e0:	400a      	ands	r2, r1
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	4093      	lsls	r3, r2
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ec:	4935      	ldr	r1, [pc, #212]	; (80026c4 <HAL_GPIO_Init+0x2c8>)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025fa:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <HAL_GPIO_Init+0x2d8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43da      	mvns	r2, r3
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	025b      	lsls	r3, r3, #9
 8002612:	4013      	ands	r3, r2
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800261e:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <HAL_GPIO_Init+0x2d8>)
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002624:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_GPIO_Init+0x2d8>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43da      	mvns	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	029b      	lsls	r3, r3, #10
 800263c:	4013      	ands	r3, r2
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002648:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <HAL_GPIO_Init+0x2d8>)
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264e:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <HAL_GPIO_Init+0x2d8>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	43da      	mvns	r2, r3
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	2380      	movs	r3, #128	; 0x80
 8002664:	035b      	lsls	r3, r3, #13
 8002666:	4013      	ands	r3, r2
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <HAL_GPIO_Init+0x2d8>)
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002678:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <HAL_GPIO_Init+0x2d8>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	43da      	mvns	r2, r3
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	039b      	lsls	r3, r3, #14
 8002690:	4013      	ands	r3, r2
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <HAL_GPIO_Init+0x2d8>)
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	40da      	lsrs	r2, r3
 80026b0:	1e13      	subs	r3, r2, #0
 80026b2:	d000      	beq.n	80026b6 <HAL_GPIO_Init+0x2ba>
 80026b4:	e6ae      	b.n	8002414 <HAL_GPIO_Init+0x18>
  }
}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b006      	add	sp, #24
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40010000 	.word	0x40010000
 80026c8:	50000400 	.word	0x50000400
 80026cc:	50000800 	.word	0x50000800
 80026d0:	50001c00 	.word	0x50001c00
 80026d4:	40010400 	.word	0x40010400

080026d8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	0008      	movs	r0, r1
 80026e2:	0011      	movs	r1, r2
 80026e4:	1cbb      	adds	r3, r7, #2
 80026e6:	1c02      	adds	r2, r0, #0
 80026e8:	801a      	strh	r2, [r3, #0]
 80026ea:	1c7b      	adds	r3, r7, #1
 80026ec:	1c0a      	adds	r2, r1, #0
 80026ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026f0:	1c7b      	adds	r3, r7, #1
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d004      	beq.n	8002702 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026f8:	1cbb      	adds	r3, r7, #2
 80026fa:	881a      	ldrh	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002700:	e003      	b.n	800270a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002702:	1cbb      	adds	r3, r7, #2
 8002704:	881a      	ldrh	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	629a      	str	r2, [r3, #40]	; 0x28
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b002      	add	sp, #8
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3 for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <HAL_PWR_EnableWakeUpPin+0x1c>)
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	430a      	orrs	r2, r1
 8002726:	605a      	str	r2, [r3, #4]
}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b002      	add	sp, #8
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40007000 	.word	0x40007000

08002734 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2  
  *           @arg PWR_WAKEUP_PIN3  for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_PWR_DisableWakeUpPin+0x20>)
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	43d9      	mvns	r1, r3
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <HAL_PWR_DisableWakeUpPin+0x20>)
 8002746:	400a      	ands	r2, r1
 8002748:	605a      	str	r2, [r3, #4]
}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	46bd      	mov	sp, r7
 800274e:	b002      	add	sp, #8
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	40007000 	.word	0x40007000

08002758 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800275c:	4b07      	ldr	r3, [pc, #28]	; (800277c <HAL_PWR_EnterSTANDBYMode+0x24>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_PWR_EnterSTANDBYMode+0x24>)
 8002762:	2102      	movs	r1, #2
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800276e:	2104      	movs	r1, #4
 8002770:	430a      	orrs	r2, r1
 8002772:	611a      	str	r2, [r3, #16]
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8002774:	bf30      	wfi
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40007000 	.word	0x40007000
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b5b0      	push	{r4, r5, r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	f000 fb6a 	bl	8002e6c <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002798:	4bc7      	ldr	r3, [pc, #796]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	220c      	movs	r2, #12
 800279e:	4013      	ands	r3, r2
 80027a0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027a2:	4bc5      	ldr	r3, [pc, #788]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	025b      	lsls	r3, r3, #9
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2201      	movs	r2, #1
 80027b4:	4013      	ands	r3, r2
 80027b6:	d100      	bne.n	80027ba <HAL_RCC_OscConfig+0x36>
 80027b8:	e07d      	b.n	80028b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d007      	beq.n	80027d0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d112      	bne.n	80027ec <HAL_RCC_OscConfig+0x68>
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	025b      	lsls	r3, r3, #9
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d10d      	bne.n	80027ec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	4bb9      	ldr	r3, [pc, #740]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	029b      	lsls	r3, r3, #10
 80027d8:	4013      	ands	r3, r2
 80027da:	d100      	bne.n	80027de <HAL_RCC_OscConfig+0x5a>
 80027dc:	e06a      	b.n	80028b4 <HAL_RCC_OscConfig+0x130>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d166      	bne.n	80028b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f000 fb40 	bl	8002e6c <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	025b      	lsls	r3, r3, #9
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d107      	bne.n	8002808 <HAL_RCC_OscConfig+0x84>
 80027f8:	4baf      	ldr	r3, [pc, #700]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4bae      	ldr	r3, [pc, #696]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 80027fe:	2180      	movs	r1, #128	; 0x80
 8002800:	0249      	lsls	r1, r1, #9
 8002802:	430a      	orrs	r2, r1
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	e027      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	23a0      	movs	r3, #160	; 0xa0
 800280e:	02db      	lsls	r3, r3, #11
 8002810:	429a      	cmp	r2, r3
 8002812:	d10e      	bne.n	8002832 <HAL_RCC_OscConfig+0xae>
 8002814:	4ba8      	ldr	r3, [pc, #672]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4ba7      	ldr	r3, [pc, #668]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 800281a:	2180      	movs	r1, #128	; 0x80
 800281c:	02c9      	lsls	r1, r1, #11
 800281e:	430a      	orrs	r2, r1
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	4ba5      	ldr	r3, [pc, #660]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4ba4      	ldr	r3, [pc, #656]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002828:	2180      	movs	r1, #128	; 0x80
 800282a:	0249      	lsls	r1, r1, #9
 800282c:	430a      	orrs	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e012      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 8002832:	4ba1      	ldr	r3, [pc, #644]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	4ba0      	ldr	r3, [pc, #640]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002838:	49a0      	ldr	r1, [pc, #640]	; (8002abc <HAL_RCC_OscConfig+0x338>)
 800283a:	400a      	ands	r2, r1
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	4b9e      	ldr	r3, [pc, #632]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	025b      	lsls	r3, r3, #9
 8002846:	4013      	ands	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4b9a      	ldr	r3, [pc, #616]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b99      	ldr	r3, [pc, #612]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002852:	499b      	ldr	r1, [pc, #620]	; (8002ac0 <HAL_RCC_OscConfig+0x33c>)
 8002854:	400a      	ands	r2, r1
 8002856:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d014      	beq.n	800288a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7ff fb20 	bl	8001ea4 <HAL_GetTick>
 8002864:	0003      	movs	r3, r0
 8002866:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800286a:	f7ff fb1b 	bl	8001ea4 <HAL_GetTick>
 800286e:	0002      	movs	r2, r0
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b64      	cmp	r3, #100	; 0x64
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e2f7      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800287c:	4b8e      	ldr	r3, [pc, #568]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	029b      	lsls	r3, r3, #10
 8002884:	4013      	ands	r3, r2
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0xe6>
 8002888:	e015      	b.n	80028b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288a:	f7ff fb0b 	bl	8001ea4 <HAL_GetTick>
 800288e:	0003      	movs	r3, r0
 8002890:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002894:	f7ff fb06 	bl	8001ea4 <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e2e2      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028a6:	4b84      	ldr	r3, [pc, #528]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	029b      	lsls	r3, r3, #10
 80028ae:	4013      	ands	r3, r2
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x110>
 80028b2:	e000      	b.n	80028b6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2202      	movs	r2, #2
 80028bc:	4013      	ands	r3, r2
 80028be:	d100      	bne.n	80028c2 <HAL_RCC_OscConfig+0x13e>
 80028c0:	e098      	b.n	80029f4 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	2220      	movs	r2, #32
 80028cc:	4013      	ands	r3, r2
 80028ce:	d009      	beq.n	80028e4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80028d0:	4b79      	ldr	r3, [pc, #484]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b78      	ldr	r3, [pc, #480]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 80028d6:	2120      	movs	r1, #32
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	2220      	movs	r2, #32
 80028e0:	4393      	bics	r3, r2
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	2b0c      	cmp	r3, #12
 80028ee:	d13d      	bne.n	800296c <HAL_RCC_OscConfig+0x1e8>
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d13a      	bne.n	800296c <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80028f6:	4b70      	ldr	r3, [pc, #448]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2204      	movs	r2, #4
 80028fc:	4013      	ands	r3, r2
 80028fe:	d004      	beq.n	800290a <HAL_RCC_OscConfig+0x186>
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e2b0      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	4b6b      	ldr	r3, [pc, #428]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4a6d      	ldr	r2, [pc, #436]	; (8002ac4 <HAL_RCC_OscConfig+0x340>)
 8002910:	4013      	ands	r3, r2
 8002912:	0019      	movs	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	021a      	lsls	r2, r3, #8
 800291a:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 800291c:	430a      	orrs	r2, r1
 800291e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002920:	4b65      	ldr	r3, [pc, #404]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2209      	movs	r2, #9
 8002926:	4393      	bics	r3, r2
 8002928:	0019      	movs	r1, r3
 800292a:	4b63      	ldr	r3, [pc, #396]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 800292c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292e:	430a      	orrs	r2, r1
 8002930:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002932:	f000 fbcb 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8002936:	0001      	movs	r1, r0
 8002938:	4b5f      	ldr	r3, [pc, #380]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	220f      	movs	r2, #15
 8002940:	4013      	ands	r3, r2
 8002942:	4a61      	ldr	r2, [pc, #388]	; (8002ac8 <HAL_RCC_OscConfig+0x344>)
 8002944:	5cd3      	ldrb	r3, [r2, r3]
 8002946:	000a      	movs	r2, r1
 8002948:	40da      	lsrs	r2, r3
 800294a:	4b60      	ldr	r3, [pc, #384]	; (8002acc <HAL_RCC_OscConfig+0x348>)
 800294c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800294e:	2513      	movs	r5, #19
 8002950:	197c      	adds	r4, r7, r5
 8002952:	2000      	movs	r0, #0
 8002954:	f7ff fa60 	bl	8001e18 <HAL_InitTick>
 8002958:	0003      	movs	r3, r0
 800295a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800295c:	197b      	adds	r3, r7, r5
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d047      	beq.n	80029f4 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8002964:	2313      	movs	r3, #19
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	e27f      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d027      	beq.n	80029c2 <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002972:	4b51      	ldr	r3, [pc, #324]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2209      	movs	r2, #9
 8002978:	4393      	bics	r3, r2
 800297a:	0019      	movs	r1, r3
 800297c:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 800297e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7ff fa8e 	bl	8001ea4 <HAL_GetTick>
 8002988:	0003      	movs	r3, r0
 800298a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298e:	f7ff fa89 	bl	8001ea4 <HAL_GetTick>
 8002992:	0002      	movs	r2, r0
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e265      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029a0:	4b45      	ldr	r3, [pc, #276]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2204      	movs	r2, #4
 80029a6:	4013      	ands	r3, r2
 80029a8:	d0f1      	beq.n	800298e <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	4b43      	ldr	r3, [pc, #268]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4a45      	ldr	r2, [pc, #276]	; (8002ac4 <HAL_RCC_OscConfig+0x340>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	021a      	lsls	r2, r3, #8
 80029ba:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 80029bc:	430a      	orrs	r2, r1
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	e018      	b.n	80029f4 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c2:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4b3c      	ldr	r3, [pc, #240]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 80029c8:	2101      	movs	r1, #1
 80029ca:	438a      	bics	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7ff fa69 	bl	8001ea4 <HAL_GetTick>
 80029d2:	0003      	movs	r3, r0
 80029d4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d8:	f7ff fa64 	bl	8001ea4 <HAL_GetTick>
 80029dc:	0002      	movs	r2, r0
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e240      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029ea:	4b33      	ldr	r3, [pc, #204]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2204      	movs	r2, #4
 80029f0:	4013      	ands	r3, r2
 80029f2:	d1f1      	bne.n	80029d8 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2210      	movs	r2, #16
 80029fa:	4013      	ands	r3, r2
 80029fc:	d100      	bne.n	8002a00 <HAL_RCC_OscConfig+0x27c>
 80029fe:	e09e      	b.n	8002b3e <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d13f      	bne.n	8002a86 <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a06:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d005      	beq.n	8002a1e <HAL_RCC_OscConfig+0x29a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e226      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a1e:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4a2b      	ldr	r2, [pc, #172]	; (8002ad0 <HAL_RCC_OscConfig+0x34c>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1a      	ldr	r2, [r3, #32]
 8002a2c:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	0a19      	lsrs	r1, r3, #8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	061a      	lsls	r2, r3, #24
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	0b5b      	lsrs	r3, r3, #13
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	0212      	lsls	r2, r2, #8
 8002a52:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a54:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	210f      	movs	r1, #15
 8002a5c:	400b      	ands	r3, r1
 8002a5e:	491a      	ldr	r1, [pc, #104]	; (8002ac8 <HAL_RCC_OscConfig+0x344>)
 8002a60:	5ccb      	ldrb	r3, [r1, r3]
 8002a62:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_RCC_OscConfig+0x348>)
 8002a66:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002a68:	2513      	movs	r5, #19
 8002a6a:	197c      	adds	r4, r7, r5
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7ff f9d3 	bl	8001e18 <HAL_InitTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002a76:	197b      	adds	r3, r7, r5
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d05f      	beq.n	8002b3e <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8002a7e:	2313      	movs	r3, #19
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	e1f2      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d03d      	beq.n	8002b0a <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <HAL_RCC_OscConfig+0x334>)
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	0049      	lsls	r1, r1, #1
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fa02 	bl	8001ea4 <HAL_GetTick>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002aa4:	e016      	b.n	8002ad4 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa6:	f7ff f9fd 	bl	8001ea4 <HAL_GetTick>
 8002aaa:	0002      	movs	r2, r0
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d90f      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e1d9      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	fffeffff 	.word	0xfffeffff
 8002ac0:	fffbffff 	.word	0xfffbffff
 8002ac4:	ffffe0ff 	.word	0xffffe0ff
 8002ac8:	08005754 	.word	0x08005754
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ad4:	4bca      	ldr	r3, [pc, #808]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4013      	ands	r3, r2
 8002ade:	d0e2      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae0:	4bc7      	ldr	r3, [pc, #796]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4ac7      	ldr	r2, [pc, #796]	; (8002e04 <HAL_RCC_OscConfig+0x680>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	0019      	movs	r1, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1a      	ldr	r2, [r3, #32]
 8002aee:	4bc4      	ldr	r3, [pc, #784]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002af0:	430a      	orrs	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af4:	4bc2      	ldr	r3, [pc, #776]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	0a19      	lsrs	r1, r3, #8
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	061a      	lsls	r2, r3, #24
 8002b02:	4bbf      	ldr	r3, [pc, #764]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002b04:	430a      	orrs	r2, r1
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	e019      	b.n	8002b3e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b0a:	4bbd      	ldr	r3, [pc, #756]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4bbc      	ldr	r3, [pc, #752]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002b10:	49bd      	ldr	r1, [pc, #756]	; (8002e08 <HAL_RCC_OscConfig+0x684>)
 8002b12:	400a      	ands	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b16:	f7ff f9c5 	bl	8001ea4 <HAL_GetTick>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b20:	f7ff f9c0 	bl	8001ea4 <HAL_GetTick>
 8002b24:	0002      	movs	r2, r0
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e19c      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b32:	4bb3      	ldr	r3, [pc, #716]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2208      	movs	r2, #8
 8002b44:	4013      	ands	r3, r2
 8002b46:	d036      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d019      	beq.n	8002b84 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b50:	4bab      	ldr	r3, [pc, #684]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002b52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b54:	4baa      	ldr	r3, [pc, #680]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002b56:	2101      	movs	r1, #1
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5c:	f7ff f9a2 	bl	8001ea4 <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b66:	f7ff f99d 	bl	8001ea4 <HAL_GetTick>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e179      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b78:	4ba1      	ldr	r3, [pc, #644]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d0f1      	beq.n	8002b66 <HAL_RCC_OscConfig+0x3e2>
 8002b82:	e018      	b.n	8002bb6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b84:	4b9e      	ldr	r3, [pc, #632]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002b86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b88:	4b9d      	ldr	r3, [pc, #628]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	438a      	bics	r2, r1
 8002b8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b90:	f7ff f988 	bl	8001ea4 <HAL_GetTick>
 8002b94:	0003      	movs	r3, r0
 8002b96:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b9a:	f7ff f983 	bl	8001ea4 <HAL_GetTick>
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e15f      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bac:	4b94      	ldr	r3, [pc, #592]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d1f1      	bne.n	8002b9a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d100      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x43e>
 8002bc0:	e0af      	b.n	8002d22 <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc2:	2323      	movs	r3, #35	; 0x23
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bca:	4b8d      	ldr	r3, [pc, #564]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	055b      	lsls	r3, r3, #21
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d10a      	bne.n	8002bec <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	4b8a      	ldr	r3, [pc, #552]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bda:	4b89      	ldr	r3, [pc, #548]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	0549      	lsls	r1, r1, #21
 8002be0:	430a      	orrs	r2, r1
 8002be2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002be4:	2323      	movs	r3, #35	; 0x23
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	4b87      	ldr	r3, [pc, #540]	; (8002e0c <HAL_RCC_OscConfig+0x688>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d11a      	bne.n	8002c2e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf8:	4b84      	ldr	r3, [pc, #528]	; (8002e0c <HAL_RCC_OscConfig+0x688>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4b83      	ldr	r3, [pc, #524]	; (8002e0c <HAL_RCC_OscConfig+0x688>)
 8002bfe:	2180      	movs	r1, #128	; 0x80
 8002c00:	0049      	lsls	r1, r1, #1
 8002c02:	430a      	orrs	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c06:	f7ff f94d 	bl	8001ea4 <HAL_GetTick>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c10:	f7ff f948 	bl	8001ea4 <HAL_GetTick>
 8002c14:	0002      	movs	r2, r0
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e124      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c22:	4b7a      	ldr	r3, [pc, #488]	; (8002e0c <HAL_RCC_OscConfig+0x688>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_OscConfig+0x4c6>
 8002c3a:	4b71      	ldr	r3, [pc, #452]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002c3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c3e:	4b70      	ldr	r3, [pc, #448]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002c40:	2180      	movs	r1, #128	; 0x80
 8002c42:	0049      	lsls	r1, r1, #1
 8002c44:	430a      	orrs	r2, r1
 8002c46:	651a      	str	r2, [r3, #80]	; 0x50
 8002c48:	e031      	b.n	8002cae <HAL_RCC_OscConfig+0x52a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x4e8>
 8002c52:	4b6b      	ldr	r3, [pc, #428]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002c54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c56:	4b6a      	ldr	r3, [pc, #424]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002c58:	496b      	ldr	r1, [pc, #428]	; (8002e08 <HAL_RCC_OscConfig+0x684>)
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	651a      	str	r2, [r3, #80]	; 0x50
 8002c5e:	4b68      	ldr	r3, [pc, #416]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c62:	4b67      	ldr	r3, [pc, #412]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002c64:	496a      	ldr	r1, [pc, #424]	; (8002e10 <HAL_RCC_OscConfig+0x68c>)
 8002c66:	400a      	ands	r2, r1
 8002c68:	651a      	str	r2, [r3, #80]	; 0x50
 8002c6a:	e020      	b.n	8002cae <HAL_RCC_OscConfig+0x52a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	23a0      	movs	r3, #160	; 0xa0
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d10e      	bne.n	8002c96 <HAL_RCC_OscConfig+0x512>
 8002c78:	4b61      	ldr	r3, [pc, #388]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002c7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c7c:	4b60      	ldr	r3, [pc, #384]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	00c9      	lsls	r1, r1, #3
 8002c82:	430a      	orrs	r2, r1
 8002c84:	651a      	str	r2, [r3, #80]	; 0x50
 8002c86:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002c88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c8a:	4b5d      	ldr	r3, [pc, #372]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	0049      	lsls	r1, r1, #1
 8002c90:	430a      	orrs	r2, r1
 8002c92:	651a      	str	r2, [r3, #80]	; 0x50
 8002c94:	e00b      	b.n	8002cae <HAL_RCC_OscConfig+0x52a>
 8002c96:	4b5a      	ldr	r3, [pc, #360]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002c98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c9a:	4b59      	ldr	r3, [pc, #356]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002c9c:	495a      	ldr	r1, [pc, #360]	; (8002e08 <HAL_RCC_OscConfig+0x684>)
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ca2:	4b57      	ldr	r3, [pc, #348]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002ca4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ca6:	4b56      	ldr	r3, [pc, #344]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002ca8:	4959      	ldr	r1, [pc, #356]	; (8002e10 <HAL_RCC_OscConfig+0x68c>)
 8002caa:	400a      	ands	r2, r1
 8002cac:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d015      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb6:	f7ff f8f5 	bl	8001ea4 <HAL_GetTick>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cbe:	e009      	b.n	8002cd4 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7ff f8f0 	bl	8001ea4 <HAL_GetTick>
 8002cc4:	0002      	movs	r2, r0
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	4a52      	ldr	r2, [pc, #328]	; (8002e14 <HAL_RCC_OscConfig+0x690>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e0cb      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cd4:	4b4a      	ldr	r3, [pc, #296]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002cd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d0ef      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x53c>
 8002ce0:	e014      	b.n	8002d0c <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce2:	f7ff f8df 	bl	8001ea4 <HAL_GetTick>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cea:	e009      	b.n	8002d00 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cec:	f7ff f8da 	bl	8001ea4 <HAL_GetTick>
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	4a47      	ldr	r2, [pc, #284]	; (8002e14 <HAL_RCC_OscConfig+0x690>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0b5      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d00:	4b3f      	ldr	r3, [pc, #252]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002d02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d1ef      	bne.n	8002cec <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d0c:	2323      	movs	r3, #35	; 0x23
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d105      	bne.n	8002d22 <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d16:	4b3a      	ldr	r3, [pc, #232]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1a:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002d1c:	493e      	ldr	r1, [pc, #248]	; (8002e18 <HAL_RCC_OscConfig+0x694>)
 8002d1e:	400a      	ands	r2, r1
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d100      	bne.n	8002d2c <HAL_RCC_OscConfig+0x5a8>
 8002d2a:	e09e      	b.n	8002e6a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d100      	bne.n	8002d34 <HAL_RCC_OscConfig+0x5b0>
 8002d32:	e077      	b.n	8002e24 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d145      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3c:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002d42:	4936      	ldr	r1, [pc, #216]	; (8002e1c <HAL_RCC_OscConfig+0x698>)
 8002d44:	400a      	ands	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7ff f8ac 	bl	8001ea4 <HAL_GetTick>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d52:	f7ff f8a7 	bl	8001ea4 <HAL_GetTick>
 8002d56:	0002      	movs	r2, r0
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e083      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d64:	4b26      	ldr	r3, [pc, #152]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	049b      	lsls	r3, r3, #18
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d70:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a2a      	ldr	r2, [pc, #168]	; (8002e20 <HAL_RCC_OscConfig+0x69c>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d90:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002d96:	2180      	movs	r1, #128	; 0x80
 8002d98:	0449      	lsls	r1, r1, #17
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7ff f881 	bl	8001ea4 <HAL_GetTick>
 8002da2:	0003      	movs	r3, r0
 8002da4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da8:	f7ff f87c 	bl	8001ea4 <HAL_GetTick>
 8002dac:	0002      	movs	r2, r0
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e058      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	049b      	lsls	r3, r3, #18
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x624>
 8002dc6:	e050      	b.n	8002e6a <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc8:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002dce:	4913      	ldr	r1, [pc, #76]	; (8002e1c <HAL_RCC_OscConfig+0x698>)
 8002dd0:	400a      	ands	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7ff f866 	bl	8001ea4 <HAL_GetTick>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dde:	f7ff f861 	bl	8001ea4 <HAL_GetTick>
 8002de2:	0002      	movs	r2, r0
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e03d      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_RCC_OscConfig+0x67c>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	049b      	lsls	r3, r3, #18
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x65a>
 8002dfc:	e035      	b.n	8002e6a <HAL_RCC_OscConfig+0x6e6>
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	40021000 	.word	0x40021000
 8002e04:	ffff1fff 	.word	0xffff1fff
 8002e08:	fffffeff 	.word	0xfffffeff
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	fffffbff 	.word	0xfffffbff
 8002e14:	00001388 	.word	0x00001388
 8002e18:	efffffff 	.word	0xefffffff
 8002e1c:	feffffff 	.word	0xfeffffff
 8002e20:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e01d      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e30:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <HAL_RCC_OscConfig+0x6f0>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	025b      	lsls	r3, r3, #9
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d10f      	bne.n	8002e66 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	23f0      	movs	r3, #240	; 0xf0
 8002e4a:	039b      	lsls	r3, r3, #14
 8002e4c:	401a      	ands	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	23c0      	movs	r3, #192	; 0xc0
 8002e5a:	041b      	lsls	r3, r3, #16
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d001      	beq.n	8002e6a <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b00a      	add	sp, #40	; 0x28
 8002e72:	bdb0      	pop	{r4, r5, r7, pc}
 8002e74:	40021000 	.word	0x40021000

08002e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e78:	b5b0      	push	{r4, r5, r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e10d      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b88      	ldr	r3, [pc, #544]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2201      	movs	r2, #1
 8002e92:	4013      	ands	r3, r2
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d911      	bls.n	8002ebe <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b85      	ldr	r3, [pc, #532]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4393      	bics	r3, r2
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	4b82      	ldr	r3, [pc, #520]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eac:	4b80      	ldr	r3, [pc, #512]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e0f4      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d009      	beq.n	8002edc <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec8:	4b7a      	ldr	r3, [pc, #488]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	22f0      	movs	r2, #240	; 0xf0
 8002ece:	4393      	bics	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	4b77      	ldr	r3, [pc, #476]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d100      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x70>
 8002ee6:	e089      	b.n	8002ffc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ef0:	4b70      	ldr	r3, [pc, #448]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	029b      	lsls	r3, r3, #10
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d120      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0d3      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d107      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f08:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	049b      	lsls	r3, r3, #18
 8002f10:	4013      	ands	r3, r2
 8002f12:	d114      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0c7      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f20:	4b64      	ldr	r3, [pc, #400]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2204      	movs	r2, #4
 8002f26:	4013      	ands	r3, r2
 8002f28:	d109      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0bc      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f2e:	4b61      	ldr	r3, [pc, #388]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4013      	ands	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0b4      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3e:	4b5d      	ldr	r3, [pc, #372]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2203      	movs	r2, #3
 8002f44:	4393      	bics	r3, r2
 8002f46:	0019      	movs	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	4b59      	ldr	r3, [pc, #356]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f52:	f7fe ffa7 	bl	8001ea4 <HAL_GetTick>
 8002f56:	0003      	movs	r3, r0
 8002f58:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d111      	bne.n	8002f86 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f62:	e009      	b.n	8002f78 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f64:	f7fe ff9e 	bl	8001ea4 <HAL_GetTick>
 8002f68:	0002      	movs	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e097      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f78:	4b4e      	ldr	r3, [pc, #312]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	220c      	movs	r2, #12
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d1ef      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xec>
 8002f84:	e03a      	b.n	8002ffc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d111      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8e:	e009      	b.n	8002fa4 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f90:	f7fe ff88 	bl	8001ea4 <HAL_GetTick>
 8002f94:	0002      	movs	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	4a47      	ldr	r2, [pc, #284]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e081      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa4:	4b43      	ldr	r3, [pc, #268]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	220c      	movs	r2, #12
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	d1ef      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x118>
 8002fb0:	e024      	b.n	8002ffc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d11b      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fba:	e009      	b.n	8002fd0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbc:	f7fe ff72 	bl	8001ea4 <HAL_GetTick>
 8002fc0:	0002      	movs	r2, r0
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	4a3c      	ldr	r2, [pc, #240]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e06b      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fd0:	4b38      	ldr	r3, [pc, #224]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	220c      	movs	r2, #12
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d1ef      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x144>
 8002fdc:	e00e      	b.n	8002ffc <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fde:	f7fe ff61 	bl	8001ea4 <HAL_GetTick>
 8002fe2:	0002      	movs	r2, r0
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	4a33      	ldr	r2, [pc, #204]	; (80030b8 <HAL_RCC_ClockConfig+0x240>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e05a      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ff2:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	220c      	movs	r2, #12
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d1f0      	bne.n	8002fde <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2201      	movs	r2, #1
 8003002:	4013      	ands	r3, r2
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d211      	bcs.n	800302e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2201      	movs	r2, #1
 8003010:	4393      	bics	r3, r2
 8003012:	0019      	movs	r1, r3
 8003014:	4b26      	ldr	r3, [pc, #152]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301c:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <HAL_RCC_ClockConfig+0x238>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2201      	movs	r2, #1
 8003022:	4013      	ands	r3, r2
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d001      	beq.n	800302e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e03c      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2204      	movs	r2, #4
 8003034:	4013      	ands	r3, r2
 8003036:	d009      	beq.n	800304c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003038:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <HAL_RCC_ClockConfig+0x244>)
 800303e:	4013      	ands	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2208      	movs	r2, #8
 8003052:	4013      	ands	r3, r2
 8003054:	d00a      	beq.n	800306c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003056:	4b17      	ldr	r3, [pc, #92]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <HAL_RCC_ClockConfig+0x248>)
 800305c:	4013      	ands	r3, r2
 800305e:	0019      	movs	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	00da      	lsls	r2, r3, #3
 8003066:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8003068:	430a      	orrs	r2, r1
 800306a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800306c:	f000 f82e 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8003070:	0001      	movs	r1, r0
 8003072:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <HAL_RCC_ClockConfig+0x23c>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	220f      	movs	r2, #15
 800307a:	4013      	ands	r3, r2
 800307c:	4a11      	ldr	r2, [pc, #68]	; (80030c4 <HAL_RCC_ClockConfig+0x24c>)
 800307e:	5cd3      	ldrb	r3, [r2, r3]
 8003080:	000a      	movs	r2, r1
 8003082:	40da      	lsrs	r2, r3
 8003084:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <HAL_RCC_ClockConfig+0x250>)
 8003086:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8003088:	250b      	movs	r5, #11
 800308a:	197c      	adds	r4, r7, r5
 800308c:	2000      	movs	r0, #0
 800308e:	f7fe fec3 	bl	8001e18 <HAL_InitTick>
 8003092:	0003      	movs	r3, r0
 8003094:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003096:	197b      	adds	r3, r7, r5
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800309e:	230b      	movs	r3, #11
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	e000      	b.n	80030a8 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	0018      	movs	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b004      	add	sp, #16
 80030ae:	bdb0      	pop	{r4, r5, r7, pc}
 80030b0:	40022000 	.word	0x40022000
 80030b4:	40021000 	.word	0x40021000
 80030b8:	00001388 	.word	0x00001388
 80030bc:	fffff8ff 	.word	0xfffff8ff
 80030c0:	ffffc7ff 	.word	0xffffc7ff
 80030c4:	08005754 	.word	0x08005754
 80030c8:	20000000 	.word	0x20000000

080030cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80030d2:	4b3b      	ldr	r3, [pc, #236]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	220c      	movs	r2, #12
 80030dc:	4013      	ands	r3, r2
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d00e      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x34>
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d00f      	beq.n	8003106 <HAL_RCC_GetSysClockFreq+0x3a>
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d157      	bne.n	800319a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80030ea:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2210      	movs	r2, #16
 80030f0:	4013      	ands	r3, r2
 80030f2:	d002      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80030f4:	4b33      	ldr	r3, [pc, #204]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030f6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80030f8:	e05d      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80030fa:	4b33      	ldr	r3, [pc, #204]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030fc:	613b      	str	r3, [r7, #16]
      break;
 80030fe:	e05a      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003100:	4b32      	ldr	r3, [pc, #200]	; (80031cc <HAL_RCC_GetSysClockFreq+0x100>)
 8003102:	613b      	str	r3, [r7, #16]
      break;
 8003104:	e057      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	0c9b      	lsrs	r3, r3, #18
 800310a:	220f      	movs	r2, #15
 800310c:	4013      	ands	r3, r2
 800310e:	4a30      	ldr	r2, [pc, #192]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003110:	5cd3      	ldrb	r3, [r2, r3]
 8003112:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	0d9b      	lsrs	r3, r3, #22
 8003118:	2203      	movs	r2, #3
 800311a:	4013      	ands	r3, r2
 800311c:	3301      	adds	r3, #1
 800311e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	025b      	lsls	r3, r3, #9
 8003128:	4013      	ands	r3, r2
 800312a:	d00f      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	000a      	movs	r2, r1
 8003130:	0152      	lsls	r2, r2, #5
 8003132:	1a52      	subs	r2, r2, r1
 8003134:	0193      	lsls	r3, r2, #6
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	185b      	adds	r3, r3, r1
 800313c:	025b      	lsls	r3, r3, #9
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	0018      	movs	r0, r3
 8003142:	f7fd f82b 	bl	800019c <__udivsi3>
 8003146:	0003      	movs	r3, r0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	e023      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800314c:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2210      	movs	r2, #16
 8003152:	4013      	ands	r3, r2
 8003154:	d00f      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	000a      	movs	r2, r1
 800315a:	0152      	lsls	r2, r2, #5
 800315c:	1a52      	subs	r2, r2, r1
 800315e:	0193      	lsls	r3, r2, #6
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	185b      	adds	r3, r3, r1
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	0018      	movs	r0, r3
 800316c:	f7fd f816 	bl	800019c <__udivsi3>
 8003170:	0003      	movs	r3, r0
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	e00e      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	000a      	movs	r2, r1
 800317a:	0152      	lsls	r2, r2, #5
 800317c:	1a52      	subs	r2, r2, r1
 800317e:	0193      	lsls	r3, r2, #6
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	185b      	adds	r3, r3, r1
 8003186:	029b      	lsls	r3, r3, #10
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	0018      	movs	r0, r3
 800318c:	f7fd f806 	bl	800019c <__udivsi3>
 8003190:	0003      	movs	r3, r0
 8003192:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	613b      	str	r3, [r7, #16]
      break;
 8003198:	e00d      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	0b5b      	lsrs	r3, r3, #13
 80031a0:	2207      	movs	r2, #7
 80031a2:	4013      	ands	r3, r2
 80031a4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	2280      	movs	r2, #128	; 0x80
 80031ac:	0212      	lsls	r2, r2, #8
 80031ae:	409a      	lsls	r2, r3
 80031b0:	0013      	movs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
      break;
 80031b4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031b6:	693b      	ldr	r3, [r7, #16]
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b006      	add	sp, #24
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	003d0900 	.word	0x003d0900
 80031c8:	00f42400 	.word	0x00f42400
 80031cc:	007a1200 	.word	0x007a1200
 80031d0:	08005764 	.word	0x08005764

080031d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e051      	b.n	800328a <HAL_SPI_Init+0xb6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2251      	movs	r2, #81	; 0x51
 80031f0:	5c9b      	ldrb	r3, [r3, r2]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d107      	bne.n	8003208 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2250      	movs	r2, #80	; 0x50
 80031fc:	2100      	movs	r1, #0
 80031fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	0018      	movs	r0, r3
 8003204:	f7fe fd20 	bl	8001c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2251      	movs	r2, #81	; 0x51
 800320c:	2102      	movs	r1, #2
 800320e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2140      	movs	r1, #64	; 0x40
 800321c:	438a      	bics	r2, r1
 800321e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6999      	ldr	r1, [r3, #24]
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	400b      	ands	r3, r1
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	431a      	orrs	r2, r3
 8003254:	0011      	movs	r1, r2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	2204      	movs	r2, #4
 800326a:	4013      	ands	r3, r2
 800326c:	0019      	movs	r1, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2251      	movs	r2, #81	; 0x51
 8003284:	2101      	movs	r1, #1
 8003286:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	0018      	movs	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	b002      	add	sp, #8
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b08c      	sub	sp, #48	; 0x30
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	001a      	movs	r2, r3
 80032a0:	1cbb      	adds	r3, r7, #2
 80032a2:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032a4:	2301      	movs	r3, #1
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032a8:	232b      	movs	r3, #43	; 0x2b
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2250      	movs	r2, #80	; 0x50
 80032b4:	5c9b      	ldrb	r3, [r3, r2]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_SPI_TransmitReceive+0x2c>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e1a1      	b.n	8003602 <HAL_SPI_TransmitReceive+0x370>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2250      	movs	r2, #80	; 0x50
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032c6:	f7fe fded 	bl	8001ea4 <HAL_GetTick>
 80032ca:	0003      	movs	r3, r0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032ce:	2023      	movs	r0, #35	; 0x23
 80032d0:	183b      	adds	r3, r7, r0
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	2151      	movs	r1, #81	; 0x51
 80032d6:	5c52      	ldrb	r2, [r2, r1]
 80032d8:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80032e0:	231a      	movs	r3, #26
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	1cba      	adds	r2, r7, #2
 80032e6:	8812      	ldrh	r2, [r2, #0]
 80032e8:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032ea:	183b      	adds	r3, r7, r0
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d012      	beq.n	8003318 <HAL_SPI_TransmitReceive+0x86>
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	2382      	movs	r3, #130	; 0x82
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d108      	bne.n	800330e <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <HAL_SPI_TransmitReceive+0x7c>
 8003304:	2323      	movs	r3, #35	; 0x23
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b04      	cmp	r3, #4
 800330c:	d004      	beq.n	8003318 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800330e:	232b      	movs	r3, #43	; 0x2b
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	2202      	movs	r2, #2
 8003314:	701a      	strb	r2, [r3, #0]
    goto error;
 8003316:	e169      	b.n	80035ec <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d006      	beq.n	800332c <HAL_SPI_TransmitReceive+0x9a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_SPI_TransmitReceive+0x9a>
 8003324:	1cbb      	adds	r3, r7, #2
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d104      	bne.n	8003336 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800332c:	232b      	movs	r3, #43	; 0x2b
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]
    goto error;
 8003334:	e15a      	b.n	80035ec <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2251      	movs	r2, #81	; 0x51
 800333a:	5c9b      	ldrb	r3, [r3, r2]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b04      	cmp	r3, #4
 8003340:	d003      	beq.n	800334a <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2251      	movs	r2, #81	; 0x51
 8003346:	2105      	movs	r1, #5
 8003348:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1cba      	adds	r2, r7, #2
 800335a:	8812      	ldrh	r2, [r2, #0]
 800335c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1cba      	adds	r2, r7, #2
 8003362:	8812      	ldrh	r2, [r2, #0]
 8003364:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1cba      	adds	r2, r7, #2
 8003370:	8812      	ldrh	r2, [r2, #0]
 8003372:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1cba      	adds	r2, r7, #2
 8003378:	8812      	ldrh	r2, [r2, #0]
 800337a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2240      	movs	r2, #64	; 0x40
 8003390:	4013      	ands	r3, r2
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d007      	beq.n	80033a6 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2140      	movs	r1, #64	; 0x40
 80033a2:	430a      	orrs	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d000      	beq.n	80033b4 <HAL_SPI_TransmitReceive+0x122>
 80033b2:	e07a      	b.n	80034aa <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d004      	beq.n	80033c6 <HAL_SPI_TransmitReceive+0x134>
 80033bc:	231a      	movs	r3, #26
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d166      	bne.n	8003494 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	881a      	ldrh	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	1c9a      	adds	r2, r3, #2
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ea:	e053      	b.n	8003494 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2202      	movs	r2, #2
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d11b      	bne.n	8003432 <HAL_SPI_TransmitReceive+0x1a0>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fe:	b29b      	uxth	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d016      	beq.n	8003432 <HAL_SPI_TransmitReceive+0x1a0>
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d113      	bne.n	8003432 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	881a      	ldrh	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	1c9a      	adds	r2, r3, #2
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2201      	movs	r2, #1
 800343a:	4013      	ands	r3, r2
 800343c:	2b01      	cmp	r3, #1
 800343e:	d119      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x1e2>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d014      	beq.n	8003474 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	b292      	uxth	r2, r2
 8003456:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	1c9a      	adds	r2, r3, #2
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003470:	2301      	movs	r3, #1
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003474:	f7fe fd16 	bl	8001ea4 <HAL_GetTick>
 8003478:	0002      	movs	r2, r0
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003480:	429a      	cmp	r2, r3
 8003482:	d807      	bhi.n	8003494 <HAL_SPI_TransmitReceive+0x202>
 8003484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003486:	3301      	adds	r3, #1
 8003488:	d004      	beq.n	8003494 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 800348a:	232b      	movs	r3, #43	; 0x2b
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	2203      	movs	r2, #3
 8003490:	701a      	strb	r2, [r3, #0]
        goto error;
 8003492:	e0ab      	b.n	80035ec <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1a6      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x15a>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1a1      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x15a>
 80034a8:	e07f      	b.n	80035aa <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_SPI_TransmitReceive+0x22c>
 80034b2:	231a      	movs	r3, #26
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d000      	beq.n	80034be <HAL_SPI_TransmitReceive+0x22c>
 80034bc:	e06b      	b.n	8003596 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	330c      	adds	r3, #12
 80034c8:	7812      	ldrb	r2, [r2, #0]
 80034ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034e4:	e057      	b.n	8003596 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2202      	movs	r2, #2
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d11c      	bne.n	800352e <HAL_SPI_TransmitReceive+0x29c>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d017      	beq.n	800352e <HAL_SPI_TransmitReceive+0x29c>
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d114      	bne.n	800352e <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	330c      	adds	r3, #12
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2201      	movs	r2, #1
 8003536:	4013      	ands	r3, r2
 8003538:	2b01      	cmp	r3, #1
 800353a:	d119      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x2de>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d014      	beq.n	8003570 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800356c:	2301      	movs	r3, #1
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003570:	f7fe fc98 	bl	8001ea4 <HAL_GetTick>
 8003574:	0002      	movs	r2, r0
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800357c:	429a      	cmp	r2, r3
 800357e:	d802      	bhi.n	8003586 <HAL_SPI_TransmitReceive+0x2f4>
 8003580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003582:	3301      	adds	r3, #1
 8003584:	d102      	bne.n	800358c <HAL_SPI_TransmitReceive+0x2fa>
 8003586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003588:	2b00      	cmp	r3, #0
 800358a:	d104      	bne.n	8003596 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 800358c:	232b      	movs	r3, #43	; 0x2b
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	2203      	movs	r2, #3
 8003592:	701a      	strb	r2, [r3, #0]
        goto error;
 8003594:	e02a      	b.n	80035ec <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1a2      	bne.n	80034e6 <HAL_SPI_TransmitReceive+0x254>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d19d      	bne.n	80034e6 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 f89b 	bl	80036ec <SPI_EndRxTxTransaction>
 80035b6:	1e03      	subs	r3, r0, #0
 80035b8:	d007      	beq.n	80035ca <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 80035ba:	232b      	movs	r3, #43	; 0x2b
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	2201      	movs	r2, #1
 80035c0:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035c8:	e010      	b.n	80035ec <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10b      	bne.n	80035ea <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	e000      	b.n	80035ec <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 80035ea:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2251      	movs	r2, #81	; 0x51
 80035f0:	2101      	movs	r1, #1
 80035f2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2250      	movs	r2, #80	; 0x50
 80035f8:	2100      	movs	r1, #0
 80035fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80035fc:	232b      	movs	r3, #43	; 0x2b
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	781b      	ldrb	r3, [r3, #0]
}
 8003602:	0018      	movs	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	b00c      	add	sp, #48	; 0x30
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	1dfb      	adds	r3, r7, #7
 800361a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800361c:	e050      	b.n	80036c0 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	d04d      	beq.n	80036c0 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003624:	f7fe fc3e 	bl	8001ea4 <HAL_GetTick>
 8003628:	0002      	movs	r2, r0
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d902      	bls.n	800363a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d142      	bne.n	80036c0 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	21e0      	movs	r1, #224	; 0xe0
 8003646:	438a      	bics	r2, r1
 8003648:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	2382      	movs	r3, #130	; 0x82
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	429a      	cmp	r2, r3
 8003654:	d113      	bne.n	800367e <SPI_WaitFlagStateUntilTimeout+0x72>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	2380      	movs	r3, #128	; 0x80
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	429a      	cmp	r2, r3
 8003660:	d005      	beq.n	800366e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	429a      	cmp	r2, r3
 800366c:	d107      	bne.n	800367e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2140      	movs	r1, #64	; 0x40
 800367a:	438a      	bics	r2, r1
 800367c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	019b      	lsls	r3, r3, #6
 8003686:	429a      	cmp	r2, r3
 8003688:	d110      	bne.n	80036ac <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4914      	ldr	r1, [pc, #80]	; (80036e8 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8003696:	400a      	ands	r2, r1
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2180      	movs	r1, #128	; 0x80
 80036a6:	0189      	lsls	r1, r1, #6
 80036a8:	430a      	orrs	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2251      	movs	r2, #81	; 0x51
 80036b0:	2101      	movs	r1, #1
 80036b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2250      	movs	r2, #80	; 0x50
 80036b8:	2100      	movs	r1, #0
 80036ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e00f      	b.n	80036e0 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	4013      	ands	r3, r2
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	425a      	negs	r2, r3
 80036d0:	4153      	adcs	r3, r2
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	001a      	movs	r2, r3
 80036d6:	1dfb      	adds	r3, r7, #7
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d19f      	bne.n	800361e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b004      	add	sp, #16
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	ffffdfff 	.word	0xffffdfff

080036ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	2382      	movs	r3, #130	; 0x82
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	429a      	cmp	r2, r3
 8003702:	d112      	bne.n	800372a <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	0013      	movs	r3, r2
 800370e:	2200      	movs	r2, #0
 8003710:	2180      	movs	r1, #128	; 0x80
 8003712:	f7ff ff7b 	bl	800360c <SPI_WaitFlagStateUntilTimeout>
 8003716:	1e03      	subs	r3, r0, #0
 8003718:	d020      	beq.n	800375c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371e:	2220      	movs	r2, #32
 8003720:	431a      	orrs	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e019      	b.n	800375e <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2251      	movs	r2, #81	; 0x51
 800372e:	5c9b      	ldrb	r3, [r3, r2]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b05      	cmp	r3, #5
 8003734:	d112      	bne.n	800375c <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	0013      	movs	r3, r2
 8003740:	2200      	movs	r2, #0
 8003742:	2101      	movs	r1, #1
 8003744:	f7ff ff62 	bl	800360c <SPI_WaitFlagStateUntilTimeout>
 8003748:	1e03      	subs	r3, r0, #0
 800374a:	d007      	beq.n	800375c <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	2220      	movs	r2, #32
 8003752:	431a      	orrs	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e000      	b.n	800375e <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	0018      	movs	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	b004      	add	sp, #16
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <_ZN5SPI_14InitEv>:
//------------------------------------------------------------------------
// SPI_1
//------------------------------------------------------------------------
SPI_HandleTypeDef SPI_1::hspi;

void SPI_1::Init() {
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
	hspi.Instance = SPI1;
 800376c:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <_ZN5SPI_14InitEv+0x60>)
 800376e:	4a17      	ldr	r2, [pc, #92]	; (80037cc <_ZN5SPI_14InitEv+0x64>)
 8003770:	601a      	str	r2, [r3, #0]
	hspi.Init.Mode = SPI_MODE_MASTER;
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <_ZN5SPI_14InitEv+0x60>)
 8003774:	2282      	movs	r2, #130	; 0x82
 8003776:	0052      	lsls	r2, r2, #1
 8003778:	605a      	str	r2, [r3, #4]
	hspi.Init.Direction = SPI_DIRECTION_2LINES;
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <_ZN5SPI_14InitEv+0x60>)
 800377c:	2200      	movs	r2, #0
 800377e:	609a      	str	r2, [r3, #8]
	hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <_ZN5SPI_14InitEv+0x60>)
 8003782:	2200      	movs	r2, #0
 8003784:	60da      	str	r2, [r3, #12]
	hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <_ZN5SPI_14InitEv+0x60>)
 8003788:	2200      	movs	r2, #0
 800378a:	611a      	str	r2, [r3, #16]
	hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 800378c:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <_ZN5SPI_14InitEv+0x60>)
 800378e:	2200      	movs	r2, #0
 8003790:	615a      	str	r2, [r3, #20]
	hspi.Init.NSS = SPI_NSS_SOFT;
 8003792:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <_ZN5SPI_14InitEv+0x60>)
 8003794:	2280      	movs	r2, #128	; 0x80
 8003796:	0092      	lsls	r2, r2, #2
 8003798:	619a      	str	r2, [r3, #24]
	hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800379a:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <_ZN5SPI_14InitEv+0x60>)
 800379c:	2218      	movs	r2, #24
 800379e:	61da      	str	r2, [r3, #28]
	hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037a0:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <_ZN5SPI_14InitEv+0x60>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	621a      	str	r2, [r3, #32]
	hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 80037a6:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <_ZN5SPI_14InitEv+0x60>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24
	hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <_ZN5SPI_14InitEv+0x60>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi.Init.CRCPolynomial = 10;
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <_ZN5SPI_14InitEv+0x60>)
 80037b4:	220a      	movs	r2, #10
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(&hspi);
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <_ZN5SPI_14InitEv+0x60>)
 80037ba:	0018      	movs	r0, r3
 80037bc:	f7ff fd0a 	bl	80031d4 <HAL_SPI_Init>

}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	20000030 	.word	0x20000030
 80037cc:	40013000 	.word	0x40013000

080037d0 <_ZN5SPI_12RWEh>:

uint8_t SPI_1::RW(uint8_t reg) {
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	0002      	movs	r2, r0
 80037d8:	1dfb      	adds	r3, r7, #7
 80037da:	701a      	strb	r2, [r3, #0]
	uint8_t rec;
	HAL_SPI_TransmitReceive(&hspi, &reg, &rec, 1, 1000);
 80037dc:	240f      	movs	r4, #15
 80037de:	193a      	adds	r2, r7, r4
 80037e0:	1df9      	adds	r1, r7, #7
 80037e2:	4806      	ldr	r0, [pc, #24]	; (80037fc <_ZN5SPI_12RWEh+0x2c>)
 80037e4:	23fa      	movs	r3, #250	; 0xfa
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	2301      	movs	r3, #1
 80037ec:	f7ff fd51 	bl	8003292 <HAL_SPI_TransmitReceive>
	return rec;
 80037f0:	193b      	adds	r3, r7, r4
 80037f2:	781b      	ldrb	r3, [r3, #0]
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b005      	add	sp, #20
 80037fa:	bd90      	pop	{r4, r7, pc}
 80037fc:	20000030 	.word	0x20000030

08003800 <_ZN5RFM695CS_DNEv>:
char RFM69::txt[120];

#define MY_NETWORK_ID 0x47
//#define BAUDRATE  19200 // 4800, 19200, 38400, 300000

void RFM69::CS_DN() {
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_CS_GPIO_Port, R_CS_Pin, GPIO_PIN_RESET);
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <_ZN5RFM695CS_DNEv+0x18>)
 8003806:	2200      	movs	r2, #0
 8003808:	2101      	movs	r1, #1
 800380a:	0018      	movs	r0, r3
 800380c:	f7fe ff64 	bl	80026d8 <HAL_GPIO_WritePin>
}
 8003810:	46c0      	nop			; (mov r8, r8)
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	50000400 	.word	0x50000400

0800381c <_ZN5RFM695CS_UPEv>:
void RFM69::CS_UP() {
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_CS_GPIO_Port, R_CS_Pin, GPIO_PIN_SET);
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <_ZN5RFM695CS_UPEv+0x18>)
 8003822:	2201      	movs	r2, #1
 8003824:	2101      	movs	r1, #1
 8003826:	0018      	movs	r0, r3
 8003828:	f7fe ff56 	bl	80026d8 <HAL_GPIO_WritePin>
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	50000400 	.word	0x50000400

08003838 <_ZN5RFM698RESET_DNEv>:
void RFM69::RESET_DN() {
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_RESET_GPIO_Port, R_RESET_Pin, GPIO_PIN_RESET);
 800383c:	23a0      	movs	r3, #160	; 0xa0
 800383e:	05db      	lsls	r3, r3, #23
 8003840:	2200      	movs	r2, #0
 8003842:	2108      	movs	r1, #8
 8003844:	0018      	movs	r0, r3
 8003846:	f7fe ff47 	bl	80026d8 <HAL_GPIO_WritePin>
}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <_ZN5RFM698RESET_UPEv>:
void RFM69::RESET_UP() {
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_RESET_GPIO_Port, R_RESET_Pin, GPIO_PIN_SET);
 8003854:	23a0      	movs	r3, #160	; 0xa0
 8003856:	05db      	lsls	r3, r3, #23
 8003858:	2201      	movs	r2, #1
 800385a:	2108      	movs	r1, #8
 800385c:	0018      	movs	r0, r3
 800385e:	f7fe ff3b 	bl	80026d8 <HAL_GPIO_WritePin>
}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <_ZN5RFM696InitIOEv>:

bool RFM69::readINT() {
	return (HAL_GPIO_ReadPin(R_INT_GPIO_Port, R_INT_Pin) == GPIO_PIN_RESET);
}

void RFM69::InitIO() {
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = R_CS_Pin;
 800386e:	1d3b      	adds	r3, r7, #4
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003874:	1d3b      	adds	r3, r7, #4
 8003876:	2201      	movs	r2, #1
 8003878:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387a:	1d3b      	adds	r3, r7, #4
 800387c:	2200      	movs	r2, #0
 800387e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(R_CS_GPIO_Port, &GPIO_InitStruct);
 8003880:	1d3b      	adds	r3, r7, #4
 8003882:	4a17      	ldr	r2, [pc, #92]	; (80038e0 <_ZN5RFM696InitIOEv+0x78>)
 8003884:	0019      	movs	r1, r3
 8003886:	0010      	movs	r0, r2
 8003888:	f7fe fdb8 	bl	80023fc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = R_RESET_Pin;
 800388c:	1d3b      	adds	r3, r7, #4
 800388e:	2208      	movs	r2, #8
 8003890:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003892:	1d3b      	adds	r3, r7, #4
 8003894:	2201      	movs	r2, #1
 8003896:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003898:	1d3b      	adds	r3, r7, #4
 800389a:	2200      	movs	r2, #0
 800389c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(R_RESET_GPIO_Port, &GPIO_InitStruct);
 800389e:	1d3a      	adds	r2, r7, #4
 80038a0:	23a0      	movs	r3, #160	; 0xa0
 80038a2:	05db      	lsls	r3, r3, #23
 80038a4:	0011      	movs	r1, r2
 80038a6:	0018      	movs	r0, r3
 80038a8:	f7fe fda8 	bl	80023fc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = R_INT_Pin;
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	2210      	movs	r2, #16
 80038b0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038b2:	1d3b      	adds	r3, r7, #4
 80038b4:	2200      	movs	r2, #0
 80038b6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b8:	1d3b      	adds	r3, r7, #4
 80038ba:	2200      	movs	r2, #0
 80038bc:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(R_INT_GPIO_Port, &GPIO_InitStruct);
 80038be:	1d3a      	adds	r2, r7, #4
 80038c0:	23a0      	movs	r3, #160	; 0xa0
 80038c2:	05db      	lsls	r3, r3, #23
 80038c4:	0011      	movs	r1, r2
 80038c6:	0018      	movs	r0, r3
 80038c8:	f7fe fd98 	bl	80023fc <HAL_GPIO_Init>

	CS_UP();
 80038cc:	f7ff ffa6 	bl	800381c <_ZN5RFM695CS_UPEv>
	RESET_UP();
 80038d0:	f7ff ffbe 	bl	8003850 <_ZN5RFM698RESET_UPEv>
	SPI_1::Init();
 80038d4:	f7ff ff48 	bl	8003768 <_ZN5SPI_14InitEv>
}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b006      	add	sp, #24
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	50000400 	.word	0x50000400

080038e4 <_ZN5RFM6914getChannelFreqEi>:

#define SLINE_FREQ_BASE         868050000
#define SLINE_FREQ_CHANNEL_WIDE    100000

int RFM69::getChannelFreq(int channel) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	return SLINE_FREQ_BASE + channel * SLINE_FREQ_CHANNEL_WIDE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a04      	ldr	r2, [pc, #16]	; (8003900 <_ZN5RFM6914getChannelFreqEi+0x1c>)
 80038f0:	4353      	muls	r3, r2
 80038f2:	4a04      	ldr	r2, [pc, #16]	; (8003904 <_ZN5RFM6914getChannelFreqEi+0x20>)
 80038f4:	4694      	mov	ip, r2
 80038f6:	4463      	add	r3, ip
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b002      	add	sp, #8
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	000186a0 	.word	0x000186a0
 8003904:	33bd6450 	.word	0x33bd6450

08003908 <_ZN5RFM694InitEPK6RFMCfg>:

bool RFM69::Init(const RFMCfg *cfg) {
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b08d      	sub	sp, #52	; 0x34
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

	mNewframe = false;
 8003910:	4b8d      	ldr	r3, [pc, #564]	; (8003b48 <_ZN5RFM694InitEPK6RFMCfg+0x240>)
 8003912:	2200      	movs	r2, #0
 8003914:	701a      	strb	r2, [r3, #0]
	mShowRecFrame = false;
 8003916:	4b8d      	ldr	r3, [pc, #564]	; (8003b4c <_ZN5RFM694InitEPK6RFMCfg+0x244>)
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
	mPowerLevel = 31;
 800391c:	4b8c      	ldr	r3, [pc, #560]	; (8003b50 <_ZN5RFM694InitEPK6RFMCfg+0x248>)
 800391e:	221f      	movs	r2, #31
 8003920:	701a      	strb	r2, [r3, #0]
	mPA_Mode = paMode1;
 8003922:	4b8c      	ldr	r3, [pc, #560]	; (8003b54 <_ZN5RFM694InitEPK6RFMCfg+0x24c>)
 8003924:	2200      	movs	r2, #0
 8003926:	701a      	strb	r2, [r3, #0]
	mMode = modeSTANDBY;
 8003928:	4b8b      	ldr	r3, [pc, #556]	; (8003b58 <_ZN5RFM694InitEPK6RFMCfg+0x250>)
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]

	InitIO();
 800392e:	f7ff ff9b 	bl	8003868 <_ZN5RFM696InitIOEv>
	CS_UP();
 8003932:	f7ff ff73 	bl	800381c <_ZN5RFM695CS_UPEv>
	RESET_UP();
 8003936:	f7ff ff8b 	bl	8003850 <_ZN5RFM698RESET_UPEv>
	HAL_Delay(2);
 800393a:	2002      	movs	r0, #2
 800393c:	f7fe fabc 	bl	8001eb8 <HAL_Delay>
	RESET_DN();
 8003940:	f7ff ff7a 	bl	8003838 <_ZN5RFM698RESET_DNEv>
	HAL_Delay(10);
 8003944:	200a      	movs	r0, #10
 8003946:	f7fe fab7 	bl	8001eb8 <HAL_Delay>

	const uint8_t CONFIG[][2] = {
 800394a:	2308      	movs	r3, #8
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	4a83      	ldr	r2, [pc, #524]	; (8003b5c <_ZN5RFM694InitEPK6RFMCfg+0x254>)
 8003950:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003952:	c313      	stmia	r3!, {r0, r1, r4}
 8003954:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003956:	c313      	stmia	r3!, {r0, r1, r4}
 8003958:	6811      	ldr	r1, [r2, #0]
 800395a:	6019      	str	r1, [r3, #0]
 800395c:	8892      	ldrh	r2, [r2, #4]
 800395e:	809a      	strh	r2, [r3, #4]
			/* 0x3C */{ REG_FIFOTHRESH, RF_FIFOTHRESH_TXSTART_FIFONOTEMPTY | RF_FIFOTHRESH_VALUE }, // TX on FIFO not empty
			/* 0x6F */{ REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode for Fading Margin Improvement, recommended default for AfcLowBetaOn=0
			{ 255, 0 } };

	//sprawdzenie, odczekanie, czy uk�ad jest ju� obudzony
	uint32_t start = HAL_GetTick();
 8003960:	f7fe faa0 	bl	8001ea4 <HAL_GetTick>
 8003964:	0003      	movs	r3, r0
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t timeout = 50;
 8003968:	2327      	movs	r3, #39	; 0x27
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	2232      	movs	r2, #50	; 0x32
 800396e:	701a      	strb	r2, [r3, #0]
	while (HAL_GetTick() - start < timeout) {
 8003970:	f7fe fa98 	bl	8001ea4 <HAL_GetTick>
 8003974:	0002      	movs	r2, r0
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	1ad2      	subs	r2, r2, r3
 800397a:	2327      	movs	r3, #39	; 0x27
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	419b      	sbcs	r3, r3
 8003984:	425b      	negs	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00f      	beq.n	80039ac <_ZN5RFM694InitEPK6RFMCfg+0xa4>
		writeReg(REG_SYNCVALUE1, 0xAA);
 800398c:	21aa      	movs	r1, #170	; 0xaa
 800398e:	202f      	movs	r0, #47	; 0x2f
 8003990:	f000 f90a 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
		if (readReg(REG_SYNCVALUE1) == 0xAA)
 8003994:	202f      	movs	r0, #47	; 0x2f
 8003996:	f000 f8eb 	bl	8003b70 <_ZN5RFM697readRegEh>
 800399a:	0003      	movs	r3, r0
 800399c:	3baa      	subs	r3, #170	; 0xaa
 800399e:	425a      	negs	r2, r3
 80039a0:	4153      	adcs	r3, r2
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d100      	bne.n	80039aa <_ZN5RFM694InitEPK6RFMCfg+0xa2>
	while (HAL_GetTick() - start < timeout) {
 80039a8:	e7e2      	b.n	8003970 <_ZN5RFM694InitEPK6RFMCfg+0x68>
			break;
 80039aa:	46c0      	nop			; (mov r8, r8)
	};
	start = HAL_GetTick();
 80039ac:	f7fe fa7a 	bl	8001ea4 <HAL_GetTick>
 80039b0:	0003      	movs	r3, r0
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
	while (HAL_GetTick() - start < timeout) {
 80039b4:	f7fe fa76 	bl	8001ea4 <HAL_GetTick>
 80039b8:	0002      	movs	r2, r0
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	1ad2      	subs	r2, r2, r3
 80039be:	2327      	movs	r3, #39	; 0x27
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	419b      	sbcs	r3, r3
 80039c8:	425b      	negs	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00f      	beq.n	80039f0 <_ZN5RFM694InitEPK6RFMCfg+0xe8>
		writeReg(REG_SYNCVALUE1, 0x55);
 80039d0:	2155      	movs	r1, #85	; 0x55
 80039d2:	202f      	movs	r0, #47	; 0x2f
 80039d4:	f000 f8e8 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
		if (readReg(REG_SYNCVALUE1) == 0x55)
 80039d8:	202f      	movs	r0, #47	; 0x2f
 80039da:	f000 f8c9 	bl	8003b70 <_ZN5RFM697readRegEh>
 80039de:	0003      	movs	r3, r0
 80039e0:	3b55      	subs	r3, #85	; 0x55
 80039e2:	425a      	negs	r2, r3
 80039e4:	4153      	adcs	r3, r2
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d100      	bne.n	80039ee <_ZN5RFM694InitEPK6RFMCfg+0xe6>
	while (HAL_GetTick() - start < timeout) {
 80039ec:	e7e2      	b.n	80039b4 <_ZN5RFM694InitEPK6RFMCfg+0xac>
			break;
 80039ee:	46c0      	nop			; (mov r8, r8)
	};

	//wpisanie tablicy parametr�w
	for (int i = 0; CONFIG[i][0] != 255; i++)
 80039f0:	2300      	movs	r3, #0
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039f4:	2308      	movs	r3, #8
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039fa:	0052      	lsls	r2, r2, #1
 80039fc:	5cd3      	ldrb	r3, [r2, r3]
 80039fe:	2bff      	cmp	r3, #255	; 0xff
 8003a00:	d011      	beq.n	8003a26 <_ZN5RFM694InitEPK6RFMCfg+0x11e>
		writeReg(CONFIG[i][0], CONFIG[i][1]);
 8003a02:	2108      	movs	r1, #8
 8003a04:	187b      	adds	r3, r7, r1
 8003a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a08:	0052      	lsls	r2, r2, #1
 8003a0a:	5cd0      	ldrb	r0, [r2, r3]
 8003a0c:	187a      	adds	r2, r7, r1
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	18d3      	adds	r3, r2, r3
 8003a14:	3301      	adds	r3, #1
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	0019      	movs	r1, r3
 8003a1a:	f000 f8c5 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
	for (int i = 0; CONFIG[i][0] != 255; i++)
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	3301      	adds	r3, #1
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a24:	e7e6      	b.n	80039f4 <_ZN5RFM694InitEPK6RFMCfg+0xec>

	setFrequency(cfg->ChannelFreq);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f000 fa42 	bl	8003eb4 <_ZN5RFM6912setFrequencyEm>

	switch (cfg->BaudRate) {
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	791b      	ldrb	r3, [r3, #4]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d01a      	beq.n	8003a6e <_ZN5RFM694InitEPK6RFMCfg+0x166>
 8003a38:	dc02      	bgt.n	8003a40 <_ZN5RFM694InitEPK6RFMCfg+0x138>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <_ZN5RFM694InitEPK6RFMCfg+0x142>
 8003a3e:	e04f      	b.n	8003ae0 <_ZN5RFM694InitEPK6RFMCfg+0x1d8>
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d026      	beq.n	8003a92 <_ZN5RFM694InitEPK6RFMCfg+0x18a>
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d036      	beq.n	8003ab6 <_ZN5RFM694InitEPK6RFMCfg+0x1ae>
 8003a48:	e04a      	b.n	8003ae0 <_ZN5RFM694InitEPK6RFMCfg+0x1d8>
	case bd4800:
		setBitRate(4800);
 8003a4a:	2396      	movs	r3, #150	; 0x96
 8003a4c:	015b      	lsls	r3, r3, #5
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f000 fa7a 	bl	8003f48 <_ZN5RFM6910setBitRateEm>
		setDeviation(10000);
 8003a54:	4b42      	ldr	r3, [pc, #264]	; (8003b60 <_ZN5RFM694InitEPK6RFMCfg+0x258>)
 8003a56:	0018      	movs	r0, r3
 8003a58:	f000 faa0 	bl	8003f9c <_ZN5RFM6912setDeviationEm>
		// (BitRate < 2 * RxBw) -> 125kHz ????
		writeReg(REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_16 | RF_RXBW_EXP_2); // REG_RXBW: 125kHz
 8003a5c:	2142      	movs	r1, #66	; 0x42
 8003a5e:	2019      	movs	r0, #25
 8003a60:	f000 f8a2 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
		// RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
		writeReg(REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF);
 8003a64:	2112      	movs	r1, #18
 8003a66:	203d      	movs	r0, #61	; 0x3d
 8003a68:	f000 f89e 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
		break;
 8003a6c:	e038      	b.n	8003ae0 <_ZN5RFM694InitEPK6RFMCfg+0x1d8>

	case bd19200:
		setBitRate(19200);
 8003a6e:	2396      	movs	r3, #150	; 0x96
 8003a70:	01db      	lsls	r3, r3, #7
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 fa68 	bl	8003f48 <_ZN5RFM6910setBitRateEm>
		setDeviation(20000);
 8003a78:	4b3a      	ldr	r3, [pc, #232]	; (8003b64 <_ZN5RFM694InitEPK6RFMCfg+0x25c>)
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f000 fa8e 	bl	8003f9c <_ZN5RFM6912setDeviationEm>

		//writeReg(REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_24 | RF_RXBW_EXP_3 );  //  -> 41.7kHz
		writeReg(REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_16 | RF_RXBW_EXP_1); //  -> 250kHz
 8003a80:	2141      	movs	r1, #65	; 0x41
 8003a82:	2019      	movs	r0, #25
 8003a84:	f000 f890 	bl	8003ba8 <_ZN5RFM698writeRegEhh>

		// RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
		writeReg(REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF);
 8003a88:	21c2      	movs	r1, #194	; 0xc2
 8003a8a:	203d      	movs	r0, #61	; 0x3d
 8003a8c:	f000 f88c 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
		break;
 8003a90:	e026      	b.n	8003ae0 <_ZN5RFM694InitEPK6RFMCfg+0x1d8>
	case bd38400:

		setBitRate(38400);
 8003a92:	2396      	movs	r3, #150	; 0x96
 8003a94:	021b      	lsls	r3, r3, #8
 8003a96:	0018      	movs	r0, r3
 8003a98:	f000 fa56 	bl	8003f48 <_ZN5RFM6910setBitRateEm>
		setDeviation(40000);
 8003a9c:	4b32      	ldr	r3, [pc, #200]	; (8003b68 <_ZN5RFM694InitEPK6RFMCfg+0x260>)
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f000 fa7c 	bl	8003f9c <_ZN5RFM6912setDeviationEm>
		writeReg(REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_16 | RF_RXBW_EXP_1);  //  -> 250kHz
 8003aa4:	2141      	movs	r1, #65	; 0x41
 8003aa6:	2019      	movs	r0, #25
 8003aa8:	f000 f87e 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
		// RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
		writeReg(REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF);
 8003aac:	21c2      	movs	r1, #194	; 0xc2
 8003aae:	203d      	movs	r0, #61	; 0x3d
 8003ab0:	f000 f87a 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
		break;
 8003ab4:	e014      	b.n	8003ae0 <_ZN5RFM694InitEPK6RFMCfg+0x1d8>
	case bd300000:

		setDeviation(300000);
 8003ab6:	4b2d      	ldr	r3, [pc, #180]	; (8003b6c <_ZN5RFM694InitEPK6RFMCfg+0x264>)
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f000 fa6f 	bl	8003f9c <_ZN5RFM6912setDeviationEm>
		setBitRate(300000);
 8003abe:	4b2b      	ldr	r3, [pc, #172]	; (8003b6c <_ZN5RFM694InitEPK6RFMCfg+0x264>)
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f000 fa41 	bl	8003f48 <_ZN5RFM6910setBitRateEm>

		// Filter = 500kHz
		writeReg(REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_16 | RF_RXBW_EXP_0);  //REG_RXBW: 500kHz
 8003ac6:	2140      	movs	r1, #64	; 0x40
 8003ac8:	2019      	movs	r0, #25
 8003aca:	f000 f86d 	bl	8003ba8 <_ZN5RFM698writeRegEhh>

		writeReg(REG_AFCBW, RF_AFCBW_DCCFREQAFC_100 | RF_AFCBW_MANTAFC_16 | RF_AFCBW_EXPAFC_0);  //REG_AFCBW: 500kHz
 8003ace:	2180      	movs	r1, #128	; 0x80
 8003ad0:	201a      	movs	r0, #26
 8003ad2:	f000 f869 	bl	8003ba8 <_ZN5RFM698writeRegEhh>

		writeReg(REG_RSSITHRESH, 240);   //set REG_RSSITHRESH to -120dBm
 8003ad6:	21f0      	movs	r1, #240	; 0xf0
 8003ad8:	2029      	movs	r0, #41	; 0x29
 8003ada:	f000 f865 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
		break;
 8003ade:	46c0      	nop			; (mov r8, r8)
	}

	// Encryption is persistent between resets and can trip you up during debugging.
	// Disable it during initialization so we always start from a known state.
	encrypt(0);
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	f000 fa7f 	bl	8003fe4 <_ZN5RFM697encryptEPKc>

	setPAMode((PAMode) cfg->PAMode);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	799b      	ldrb	r3, [r3, #6]
 8003aea:	0018      	movs	r0, r3
 8003aec:	f000 f932 	bl	8003d54 <_ZN5RFM699setPAModeE6PAMode>
	setPowerLevel(cfg->TxPower);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	795b      	ldrb	r3, [r3, #5]
 8003af4:	0018      	movs	r0, r3
 8003af6:	f000 f8fb 	bl	8003cf0 <_ZN5RFM6913setPowerLevelEh>
	setMode(modeRX);
 8003afa:	2004      	movs	r0, #4
 8003afc:	f000 f97a 	bl	8003df4 <_ZN5RFM697setModeE11TRFM69_MODE>

	// wait for ModeReady
	start = HAL_GetTick();
 8003b00:	f7fe f9d0 	bl	8001ea4 <HAL_GetTick>
 8003b04:	0003      	movs	r3, r0
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00)) {
 8003b08:	2027      	movs	r0, #39	; 0x27
 8003b0a:	f000 f831 	bl	8003b70 <_ZN5RFM697readRegEh>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	b25b      	sxtb	r3, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	09db      	lsrs	r3, r3, #7
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00f      	beq.n	8003b3e <_ZN5RFM694InitEPK6RFMCfg+0x236>
		if (HAL_GetTick() - start > timeout) {
 8003b1e:	f7fe f9c1 	bl	8001ea4 <HAL_GetTick>
 8003b22:	0002      	movs	r2, r0
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2227      	movs	r2, #39	; 0x27
 8003b2a:	18ba      	adds	r2, r7, r2
 8003b2c:	7812      	ldrb	r2, [r2, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	419b      	sbcs	r3, r3
 8003b32:	425b      	negs	r3, r3
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0e6      	beq.n	8003b08 <_ZN5RFM694InitEPK6RFMCfg+0x200>
			return false;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e000      	b.n	8003b40 <_ZN5RFM694InitEPK6RFMCfg+0x238>
		}
	}

	return true;
 8003b3e:	2301      	movs	r3, #1
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b00d      	add	sp, #52	; 0x34
 8003b46:	bd90      	pop	{r4, r7, pc}
 8003b48:	200000dd 	.word	0x200000dd
 8003b4c:	200000de 	.word	0x200000de
 8003b50:	200000dc 	.word	0x200000dc
 8003b54:	20000089 	.word	0x20000089
 8003b58:	20000088 	.word	0x20000088
 8003b5c:	080056b4 	.word	0x080056b4
 8003b60:	00002710 	.word	0x00002710
 8003b64:	00004e20 	.word	0x00004e20
 8003b68:	00009c40 	.word	0x00009c40
 8003b6c:	000493e0 	.word	0x000493e0

08003b70 <_ZN5RFM697readRegEh>:

bool RFM69::readIrqPin() {
	return (HAL_GPIO_ReadPin(R_INT_GPIO_Port, R_INT_Pin) != 0);
}

uint8_t RFM69::readReg(uint8_t addr) {
 8003b70:	b5b0      	push	{r4, r5, r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	0002      	movs	r2, r0
 8003b78:	1dfb      	adds	r3, r7, #7
 8003b7a:	701a      	strb	r2, [r3, #0]
	CS_DN();
 8003b7c:	f7ff fe40 	bl	8003800 <_ZN5RFM695CS_DNEv>
	SPI_1::RW(addr); // Select register to read from..
 8003b80:	1dfb      	adds	r3, r7, #7
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	0018      	movs	r0, r3
 8003b86:	f7ff fe23 	bl	80037d0 <_ZN5SPI_12RWEh>
	uint8_t value = SPI_1::RW(0); // ..then read register value
 8003b8a:	250f      	movs	r5, #15
 8003b8c:	197c      	adds	r4, r7, r5
 8003b8e:	2000      	movs	r0, #0
 8003b90:	f7ff fe1e 	bl	80037d0 <_ZN5SPI_12RWEh>
 8003b94:	0003      	movs	r3, r0
 8003b96:	7023      	strb	r3, [r4, #0]
	CS_UP();
 8003b98:	f7ff fe40 	bl	800381c <_ZN5RFM695CS_UPEv>
	return value;
 8003b9c:	197b      	adds	r3, r7, r5
 8003b9e:	781b      	ldrb	r3, [r3, #0]
}
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b004      	add	sp, #16
 8003ba6:	bdb0      	pop	{r4, r5, r7, pc}

08003ba8 <_ZN5RFM698writeRegEhh>:

void RFM69::writeReg(uint8_t addr, uint8_t value) {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	0002      	movs	r2, r0
 8003bb0:	1dfb      	adds	r3, r7, #7
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	1dbb      	adds	r3, r7, #6
 8003bb6:	1c0a      	adds	r2, r1, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
	CS_DN();
 8003bba:	f7ff fe21 	bl	8003800 <_ZN5RFM695CS_DNEv>
	SPI_1::RW(addr | 0x80); // Select register to read from..
 8003bbe:	1dfb      	adds	r3, r7, #7
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	4252      	negs	r2, r2
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f7ff fe00 	bl	80037d0 <_ZN5SPI_12RWEh>
	SPI_1::RW(value); // ..then read register value
 8003bd0:	1dbb      	adds	r3, r7, #6
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f7ff fdfb 	bl	80037d0 <_ZN5SPI_12RWEh>
	CS_UP();
 8003bda:	f7ff fe1f 	bl	800381c <_ZN5RFM695CS_UPEv>
}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b002      	add	sp, #8
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <_ZN5RFM699writeMRegEhPKhi>:

void RFM69::writeMReg(uint8_t addr, const uint8_t *ptr, int cnt) {
 8003be6:	b590      	push	{r4, r7, lr}
 8003be8:	b087      	sub	sp, #28
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	240f      	movs	r4, #15
 8003bf2:	193b      	adds	r3, r7, r4
 8003bf4:	1c02      	adds	r2, r0, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
	CS_DN();
 8003bf8:	f7ff fe02 	bl	8003800 <_ZN5RFM695CS_DNEv>
	SPI_1::RW(addr | 0x80); // Select register to read from..
 8003bfc:	193b      	adds	r3, r7, r4
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2280      	movs	r2, #128	; 0x80
 8003c02:	4252      	negs	r2, r2
 8003c04:	4313      	orrs	r3, r2
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f7ff fde1 	bl	80037d0 <_ZN5SPI_12RWEh>
	for (int i = 0; i < cnt; i++) {
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	da0b      	bge.n	8003c32 <_ZN5RFM699writeMRegEhPKhi+0x4c>
		SPI_1::RW(*ptr); // ..then read register ptr
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f7ff fdd6 	bl	80037d0 <_ZN5SPI_12RWEh>
		ptr++;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	3301      	adds	r3, #1
 8003c28:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < cnt; i++) {
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	e7ef      	b.n	8003c12 <_ZN5RFM699writeMRegEhPKhi+0x2c>
	}
	CS_UP();
 8003c32:	f7ff fdf3 	bl	800381c <_ZN5RFM695CS_UPEv>
}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b007      	add	sp, #28
 8003c3c:	bd90      	pop	{r4, r7, pc}

08003c3e <_ZN5RFM699modifyRegEhhh>:

void RFM69::modifyReg(uint8_t addr, uint8_t mask, uint8_t value) {
 8003c3e:	b5b0      	push	{r4, r5, r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	0004      	movs	r4, r0
 8003c46:	0008      	movs	r0, r1
 8003c48:	0011      	movs	r1, r2
 8003c4a:	1dfb      	adds	r3, r7, #7
 8003c4c:	1c22      	adds	r2, r4, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	1dbb      	adds	r3, r7, #6
 8003c52:	1c02      	adds	r2, r0, #0
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	1d7b      	adds	r3, r7, #5
 8003c58:	1c0a      	adds	r2, r1, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
	uint8_t v = readReg(addr);
 8003c5c:	250f      	movs	r5, #15
 8003c5e:	197c      	adds	r4, r7, r5
 8003c60:	1dfb      	adds	r3, r7, #7
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7ff ff83 	bl	8003b70 <_ZN5RFM697readRegEh>
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	7023      	strb	r3, [r4, #0]
	v = v & ~mask;
 8003c6e:	1dbb      	adds	r3, r7, #6
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	b25b      	sxtb	r3, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	b25b      	sxtb	r3, r3
 8003c78:	0028      	movs	r0, r5
 8003c7a:	183a      	adds	r2, r7, r0
 8003c7c:	7812      	ldrb	r2, [r2, #0]
 8003c7e:	b252      	sxtb	r2, r2
 8003c80:	4013      	ands	r3, r2
 8003c82:	b25a      	sxtb	r2, r3
 8003c84:	183b      	adds	r3, r7, r0
 8003c86:	701a      	strb	r2, [r3, #0]
	v = v | value;
 8003c88:	183b      	adds	r3, r7, r0
 8003c8a:	1839      	adds	r1, r7, r0
 8003c8c:	1d7a      	adds	r2, r7, #5
 8003c8e:	7809      	ldrb	r1, [r1, #0]
 8003c90:	7812      	ldrb	r2, [r2, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	701a      	strb	r2, [r3, #0]
	writeReg(addr, v);
 8003c96:	183b      	adds	r3, r7, r0
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	1dfb      	adds	r3, r7, #7
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	0011      	movs	r1, r2
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f7ff ff81 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b004      	add	sp, #16
 8003cac:	bdb0      	pop	{r4, r5, r7, pc}

08003cae <_ZN5RFM6916setHighPowerRegsEb>:

// internal function
void RFM69::setHighPowerRegs(bool onOff) {
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	0002      	movs	r2, r0
 8003cb6:	1dfb      	adds	r3, r7, #7
 8003cb8:	701a      	strb	r2, [r3, #0]
	writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
 8003cba:	1dfb      	adds	r3, r7, #7
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <_ZN5RFM6916setHighPowerRegsEb+0x18>
 8003cc2:	235d      	movs	r3, #93	; 0x5d
 8003cc4:	e000      	b.n	8003cc8 <_ZN5RFM6916setHighPowerRegsEb+0x1a>
 8003cc6:	2355      	movs	r3, #85	; 0x55
 8003cc8:	0019      	movs	r1, r3
 8003cca:	205a      	movs	r0, #90	; 0x5a
 8003ccc:	f7ff ff6c 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
	writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
 8003cd0:	1dfb      	adds	r3, r7, #7
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <_ZN5RFM6916setHighPowerRegsEb+0x2e>
 8003cd8:	237c      	movs	r3, #124	; 0x7c
 8003cda:	e000      	b.n	8003cde <_ZN5RFM6916setHighPowerRegsEb+0x30>
 8003cdc:	2370      	movs	r3, #112	; 0x70
 8003cde:	0019      	movs	r1, r3
 8003ce0:	205c      	movs	r0, #92	; 0x5c
 8003ce2:	f7ff ff61 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b002      	add	sp, #8
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <_ZN5RFM6913setPowerLevelEh>:
// the power configurations are explained in the SX1231H datasheet (Table 10 on p21; RegPaLevel p66): http://www.semtech.com/images/datasheet/sx1231h.pdf
// valid powerLevel parameter values are 0-31 and result in a directly proportional effect on the output/transmission power
// this function implements 2 modes as follows:
//       - for RFM69W the range is from 0-31 [-18dBm to 13dBm] (PA0 only on RFIO pin)
//       - for RFM69HW the range is from 0-31 [5dBm to 20dBm]  (PA1 & PA2 on PA_BOOST pin & high Power PA settings - see section 3.3.7 in datasheet, p22)
void RFM69::setPowerLevel(uint8_t powerLevel) {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	1dfb      	adds	r3, r7, #7
 8003cfa:	701a      	strb	r2, [r3, #0]
	mPowerLevel = (powerLevel > 31 ? 31 : powerLevel);
 8003cfc:	1dfb      	adds	r3, r7, #7
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	2a1f      	cmp	r2, #31
 8003d04:	d900      	bls.n	8003d08 <_ZN5RFM6913setPowerLevelEh+0x18>
 8003d06:	231f      	movs	r3, #31
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <_ZN5RFM6913setPowerLevelEh+0x5c>)
 8003d0c:	701a      	strb	r2, [r3, #0]
	if (mPA_Mode == paMode4)
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <_ZN5RFM6913setPowerLevelEh+0x60>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d105      	bne.n	8003d22 <_ZN5RFM6913setPowerLevelEh+0x32>
		mPowerLevel /= 2;
 8003d16:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <_ZN5RFM6913setPowerLevelEh+0x5c>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <_ZN5RFM6913setPowerLevelEh+0x5c>)
 8003d20:	701a      	strb	r2, [r3, #0]
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | mPowerLevel);
 8003d22:	2011      	movs	r0, #17
 8003d24:	f7ff ff24 	bl	8003b70 <_ZN5RFM697readRegEh>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	001a      	movs	r2, r3
 8003d2c:	231f      	movs	r3, #31
 8003d2e:	439a      	bics	r2, r3
 8003d30:	0013      	movs	r3, r2
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <_ZN5RFM6913setPowerLevelEh+0x5c>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	0019      	movs	r1, r3
 8003d3e:	2011      	movs	r0, #17
 8003d40:	f7ff ff32 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	200000dc 	.word	0x200000dc
 8003d50:	20000089 	.word	0x20000089

08003d54 <_ZN5RFM699setPAModeE6PAMode>:

// for RFM69HW only: you must call setHighPower(true) after initialize() or else transmission won't work
void RFM69::setPAMode(PAMode mode) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	0002      	movs	r2, r0
 8003d5c:	1dfb      	adds	r3, r7, #7
 8003d5e:	701a      	strb	r2, [r3, #0]
	mPA_Mode = mode;
 8003d60:	4b23      	ldr	r3, [pc, #140]	; (8003df0 <_ZN5RFM699setPAModeE6PAMode+0x9c>)
 8003d62:	1dfa      	adds	r2, r7, #7
 8003d64:	7812      	ldrb	r2, [r2, #0]
 8003d66:	701a      	strb	r2, [r3, #0]
	writeReg(REG_OCP, (mPA_Mode == paMode4) ? RF_OCP_OFF : RF_OCP_ON);
 8003d68:	4b21      	ldr	r3, [pc, #132]	; (8003df0 <_ZN5RFM699setPAModeE6PAMode+0x9c>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d101      	bne.n	8003d74 <_ZN5RFM699setPAModeE6PAMode+0x20>
 8003d70:	230f      	movs	r3, #15
 8003d72:	e000      	b.n	8003d76 <_ZN5RFM699setPAModeE6PAMode+0x22>
 8003d74:	231a      	movs	r3, #26
 8003d76:	0019      	movs	r1, r3
 8003d78:	2013      	movs	r0, #19
 8003d7a:	f7ff ff15 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
	uint8_t val = readReg(REG_PALEVEL) & 0x1F;
 8003d7e:	2011      	movs	r0, #17
 8003d80:	f7ff fef6 	bl	8003b70 <_ZN5RFM697readRegEh>
 8003d84:	0003      	movs	r3, r0
 8003d86:	0019      	movs	r1, r3
 8003d88:	230f      	movs	r3, #15
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	221f      	movs	r2, #31
 8003d8e:	400a      	ands	r2, r1
 8003d90:	701a      	strb	r2, [r3, #0]
	switch (mPA_Mode) {
 8003d92:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <_ZN5RFM699setPAModeE6PAMode+0x9c>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d00f      	beq.n	8003dba <_ZN5RFM699setPAModeE6PAMode+0x66>
 8003d9a:	dc02      	bgt.n	8003da2 <_ZN5RFM699setPAModeE6PAMode+0x4e>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <_ZN5RFM699setPAModeE6PAMode+0x54>
 8003da0:	e01b      	b.n	8003dda <_ZN5RFM699setPAModeE6PAMode+0x86>
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	dc19      	bgt.n	8003dda <_ZN5RFM699setPAModeE6PAMode+0x86>
 8003da6:	e010      	b.n	8003dca <_ZN5RFM699setPAModeE6PAMode+0x76>
	case paMode1:
		val |= RF_PALEVEL_PA0_ON;
 8003da8:	220f      	movs	r2, #15
 8003daa:	18bb      	adds	r3, r7, r2
 8003dac:	18ba      	adds	r2, r7, r2
 8003dae:	7812      	ldrb	r2, [r2, #0]
 8003db0:	2180      	movs	r1, #128	; 0x80
 8003db2:	4249      	negs	r1, r1
 8003db4:	430a      	orrs	r2, r1
 8003db6:	701a      	strb	r2, [r3, #0]
		break;
 8003db8:	e00f      	b.n	8003dda <_ZN5RFM699setPAModeE6PAMode+0x86>
	case paMode2:
		val |= RF_PALEVEL_PA1_ON;
 8003dba:	220f      	movs	r2, #15
 8003dbc:	18bb      	adds	r3, r7, r2
 8003dbe:	18ba      	adds	r2, r7, r2
 8003dc0:	7812      	ldrb	r2, [r2, #0]
 8003dc2:	2140      	movs	r1, #64	; 0x40
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	701a      	strb	r2, [r3, #0]
		break;
 8003dc8:	e007      	b.n	8003dda <_ZN5RFM699setPAModeE6PAMode+0x86>
	case paMode3:
	case paMode4:
		val |= RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON;
 8003dca:	220f      	movs	r2, #15
 8003dcc:	18bb      	adds	r3, r7, r2
 8003dce:	18ba      	adds	r2, r7, r2
 8003dd0:	7812      	ldrb	r2, [r2, #0]
 8003dd2:	2160      	movs	r1, #96	; 0x60
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	701a      	strb	r2, [r3, #0]
		break;
 8003dd8:	46c0      	nop			; (mov r8, r8)
	}
	writeReg(REG_PALEVEL, val);
 8003dda:	230f      	movs	r3, #15
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	0019      	movs	r1, r3
 8003de2:	2011      	movs	r0, #17
 8003de4:	f7ff fee0 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
}
 8003de8:	46c0      	nop			; (mov r8, r8)
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b004      	add	sp, #16
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20000089 	.word	0x20000089

08003df4 <_ZN5RFM697setModeE11TRFM69_MODE>:

void RFM69::setMode(TRFM69_MODE newMode) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	1dfb      	adds	r3, r7, #7
 8003dfe:	701a      	strb	r2, [r3, #0]
	if (newMode == mMode)
 8003e00:	4b29      	ldr	r3, [pc, #164]	; (8003ea8 <_ZN5RFM697setModeE11TRFM69_MODE+0xb4>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	1dfa      	adds	r2, r7, #7
 8003e06:	7812      	ldrb	r2, [r2, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d047      	beq.n	8003e9c <_ZN5RFM697setModeE11TRFM69_MODE+0xa8>
		return;

	switch (newMode) {
 8003e0c:	1dfb      	adds	r3, r7, #7
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d845      	bhi.n	8003ea0 <_ZN5RFM697setModeE11TRFM69_MODE+0xac>
 8003e14:	009a      	lsls	r2, r3, #2
 8003e16:	4b25      	ldr	r3, [pc, #148]	; (8003eac <_ZN5RFM697setModeE11TRFM69_MODE+0xb8>)
 8003e18:	18d3      	adds	r3, r2, r3
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	469f      	mov	pc, r3
	case modeTX:
		modifyReg(REG_OPMODE, 0x1C, RF_OPMODE_TRANSMITTER);
 8003e1e:	220c      	movs	r2, #12
 8003e20:	211c      	movs	r1, #28
 8003e22:	2001      	movs	r0, #1
 8003e24:	f7ff ff0b 	bl	8003c3e <_ZN5RFM699modifyRegEhhh>
		setHighPowerRegs(mPA_Mode == paMode4);
 8003e28:	4b21      	ldr	r3, [pc, #132]	; (8003eb0 <_ZN5RFM697setModeE11TRFM69_MODE+0xbc>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	3b03      	subs	r3, #3
 8003e2e:	425a      	negs	r2, r3
 8003e30:	4153      	adcs	r3, r2
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	0018      	movs	r0, r3
 8003e36:	f7ff ff3a 	bl	8003cae <_ZN5RFM6916setHighPowerRegsEb>
		break;
 8003e3a:	e01a      	b.n	8003e72 <_ZN5RFM697setModeE11TRFM69_MODE+0x7e>
	case modeRX:
		modifyReg(REG_OPMODE, 0x1C, RF_OPMODE_RECEIVER);
 8003e3c:	2210      	movs	r2, #16
 8003e3e:	211c      	movs	r1, #28
 8003e40:	2001      	movs	r0, #1
 8003e42:	f7ff fefc 	bl	8003c3e <_ZN5RFM699modifyRegEhhh>
		setHighPowerRegs(false);
 8003e46:	2000      	movs	r0, #0
 8003e48:	f7ff ff31 	bl	8003cae <_ZN5RFM6916setHighPowerRegsEb>
		break;
 8003e4c:	e011      	b.n	8003e72 <_ZN5RFM697setModeE11TRFM69_MODE+0x7e>
	case modeSYNTH:
		modifyReg(REG_OPMODE, 0x1C, RF_OPMODE_SYNTHESIZER);
 8003e4e:	2208      	movs	r2, #8
 8003e50:	211c      	movs	r1, #28
 8003e52:	2001      	movs	r0, #1
 8003e54:	f7ff fef3 	bl	8003c3e <_ZN5RFM699modifyRegEhhh>
		break;
 8003e58:	e00b      	b.n	8003e72 <_ZN5RFM697setModeE11TRFM69_MODE+0x7e>
	case modeSTANDBY:
		modifyReg(REG_OPMODE, 0x1C, RF_OPMODE_STANDBY);
 8003e5a:	2204      	movs	r2, #4
 8003e5c:	211c      	movs	r1, #28
 8003e5e:	2001      	movs	r0, #1
 8003e60:	f7ff feed 	bl	8003c3e <_ZN5RFM699modifyRegEhhh>
		break;
 8003e64:	e005      	b.n	8003e72 <_ZN5RFM697setModeE11TRFM69_MODE+0x7e>
	case modeSLEEP:
		modifyReg(REG_OPMODE, 0x1C, RF_OPMODE_SLEEP);
 8003e66:	2200      	movs	r2, #0
 8003e68:	211c      	movs	r1, #28
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	f7ff fee7 	bl	8003c3e <_ZN5RFM699modifyRegEhhh>
		break;
 8003e70:	46c0      	nop			; (mov r8, r8)
		return;
	}

	// we are using packet mode, so this check is not really needed
	// but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
	if (mMode == modeSLEEP) {
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <_ZN5RFM697setModeE11TRFM69_MODE+0xb4>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10b      	bne.n	8003e92 <_ZN5RFM697setModeE11TRFM69_MODE+0x9e>
		while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) {
 8003e7a:	2027      	movs	r0, #39	; 0x27
 8003e7c:	f7ff fe78 	bl	8003b70 <_ZN5RFM697readRegEh>
 8003e80:	0003      	movs	r3, r0
 8003e82:	b25b      	sxtb	r3, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	09db      	lsrs	r3, r3, #7
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d000      	beq.n	8003e92 <_ZN5RFM697setModeE11TRFM69_MODE+0x9e>
 8003e90:	e7f3      	b.n	8003e7a <_ZN5RFM697setModeE11TRFM69_MODE+0x86>

		}; // wait for ModeReady
	}
	mMode = newMode;
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <_ZN5RFM697setModeE11TRFM69_MODE+0xb4>)
 8003e94:	1dfa      	adds	r2, r7, #7
 8003e96:	7812      	ldrb	r2, [r2, #0]
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	e002      	b.n	8003ea2 <_ZN5RFM697setModeE11TRFM69_MODE+0xae>
		return;
 8003e9c:	46c0      	nop			; (mov r8, r8)
 8003e9e:	e000      	b.n	8003ea2 <_ZN5RFM697setModeE11TRFM69_MODE+0xae>
		return;
 8003ea0:	46c0      	nop			; (mov r8, r8)
}
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b002      	add	sp, #8
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000088 	.word	0x20000088
 8003eac:	08005770 	.word	0x08005770
 8003eb0:	20000089 	.word	0x20000089

08003eb4 <_ZN5RFM6912setFrequencyEm>:
	uint32_t r3 = readReg(REG_FRFLSB);
	return (int) (RF69_FSTEP * ((r1 << 16) | (r2 << 8) | r3));
}

// set the frequency (in Hz)
void RFM69::setFrequency(uint32_t freqHz) {
 8003eb4:	b590      	push	{r4, r7, lr}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	TRFM69_MODE oldMode = mMode;
 8003ebc:	210f      	movs	r1, #15
 8003ebe:	187b      	adds	r3, r7, r1
 8003ec0:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <_ZN5RFM6912setFrequencyEm+0x8c>)
 8003ec2:	7812      	ldrb	r2, [r2, #0]
 8003ec4:	701a      	strb	r2, [r3, #0]
	if (oldMode == modeTX) {
 8003ec6:	187b      	adds	r3, r7, r1
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d102      	bne.n	8003ed4 <_ZN5RFM6912setFrequencyEm+0x20>
		setMode(modeRX);
 8003ece:	2004      	movs	r0, #4
 8003ed0:	f7ff ff90 	bl	8003df4 <_ZN5RFM697setModeE11TRFM69_MODE>
	}
	freqHz /= RF69_FSTEP; // divide down by FSTEP to get FRF
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7fd fb37 	bl	8001548 <__aeabi_ui2d>
 8003eda:	2200      	movs	r2, #0
 8003edc:	4b19      	ldr	r3, [pc, #100]	; (8003f44 <_ZN5RFM6912setFrequencyEm+0x90>)
 8003ede:	f7fc fa07 	bl	80002f0 <__aeabi_ddiv>
 8003ee2:	0003      	movs	r3, r0
 8003ee4:	000c      	movs	r4, r1
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	0021      	movs	r1, r4
 8003eea:	f7fc f9e3 	bl	80002b4 <__aeabi_d2uiz>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	607b      	str	r3, [r7, #4]
	writeReg(REG_FRFMSB, freqHz >> 16);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	0019      	movs	r1, r3
 8003efa:	2007      	movs	r0, #7
 8003efc:	f7ff fe54 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
	writeReg(REG_FRFMID, freqHz >> 8);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	0a1b      	lsrs	r3, r3, #8
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	0019      	movs	r1, r3
 8003f08:	2008      	movs	r0, #8
 8003f0a:	f7ff fe4d 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
	writeReg(REG_FRFLSB, freqHz);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	0019      	movs	r1, r3
 8003f14:	2009      	movs	r0, #9
 8003f16:	f7ff fe47 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
	if (oldMode == modeRX) {
 8003f1a:	230f      	movs	r3, #15
 8003f1c:	18fb      	adds	r3, r7, r3
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d102      	bne.n	8003f2a <_ZN5RFM6912setFrequencyEm+0x76>
		setMode(modeSYNTH);
 8003f24:	2002      	movs	r0, #2
 8003f26:	f7ff ff65 	bl	8003df4 <_ZN5RFM697setModeE11TRFM69_MODE>
	}
	setMode(oldMode);
 8003f2a:	230f      	movs	r3, #15
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	0018      	movs	r0, r3
 8003f32:	f7ff ff5f 	bl	8003df4 <_ZN5RFM697setModeE11TRFM69_MODE>
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b005      	add	sp, #20
 8003f3c:	bd90      	pop	{r4, r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	20000088 	.word	0x20000088
 8003f44:	404e8480 	.word	0x404e8480

08003f48 <_ZN5RFM6910setBitRateEm>:
	uint32_t r = ((r1 << 8) | r2);

	return FOSC / r;
}

void RFM69::setBitRate(uint32_t rate) {
 8003f48:	b590      	push	{r4, r7, lr}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
	uint32_t r = FOSC / rate;
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7fd faf9 	bl	8001548 <__aeabi_ui2d>
 8003f56:	0003      	movs	r3, r0
 8003f58:	000c      	movs	r4, r1
 8003f5a:	001a      	movs	r2, r3
 8003f5c:	0023      	movs	r3, r4
 8003f5e:	2000      	movs	r0, #0
 8003f60:	490d      	ldr	r1, [pc, #52]	; (8003f98 <_ZN5RFM6910setBitRateEm+0x50>)
 8003f62:	f7fc f9c5 	bl	80002f0 <__aeabi_ddiv>
 8003f66:	0003      	movs	r3, r0
 8003f68:	000c      	movs	r4, r1
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	0021      	movs	r1, r4
 8003f6e:	f7fc f9a1 	bl	80002b4 <__aeabi_d2uiz>
 8003f72:	0003      	movs	r3, r0
 8003f74:	60fb      	str	r3, [r7, #12]
	writeReg(REG_BITRATEMSB, r >> 8);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	0a1b      	lsrs	r3, r3, #8
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	2003      	movs	r0, #3
 8003f80:	f7ff fe12 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
	writeReg(REG_BITRATELSB, r & 0xff);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	0019      	movs	r1, r3
 8003f8a:	2004      	movs	r0, #4
 8003f8c:	f7ff fe0c 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b005      	add	sp, #20
 8003f96:	bd90      	pop	{r4, r7, pc}
 8003f98:	417e8480 	.word	0x417e8480

08003f9c <_ZN5RFM6912setDeviationEm>:
	uint32_t r2 = readReg(REG_FDEVLSB);
	uint32_t freqDev = ((r1 & 0x3f) << 8) | r2;
	return 61 * freqDev;
}

void RFM69::setDeviation(uint32_t dev) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	dev /= 61;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	213d      	movs	r1, #61	; 0x3d
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7fc f8f7 	bl	800019c <__udivsi3>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	607b      	str	r3, [r7, #4]
	if (dev > 0x3fff)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a0a      	ldr	r2, [pc, #40]	; (8003fe0 <_ZN5RFM6912setDeviationEm+0x44>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <_ZN5RFM6912setDeviationEm+0x22>
		dev = 0x3fff;
 8003fba:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <_ZN5RFM6912setDeviationEm+0x44>)
 8003fbc:	607b      	str	r3, [r7, #4]
	writeReg(REG_FDEVMSB, dev >> 8);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	0a1b      	lsrs	r3, r3, #8
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	0019      	movs	r1, r3
 8003fc6:	2005      	movs	r0, #5
 8003fc8:	f7ff fdee 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
	writeReg(REG_FDEVLSB, dev & 0xff);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	0019      	movs	r1, r3
 8003fd2:	2006      	movs	r0, #6
 8003fd4:	f7ff fde8 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
}
 8003fd8:	46c0      	nop			; (mov r8, r8)
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	00003fff 	.word	0x00003fff

08003fe4 <_ZN5RFM697encryptEPKc>:
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 uint8_ts !!!
void RFM69::encrypt(const char *key) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	setMode(modeSTANDBY);
 8003fec:	2001      	movs	r0, #1
 8003fee:	f7ff ff01 	bl	8003df4 <_ZN5RFM697setModeE11TRFM69_MODE>
	if (key != 0) {
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <_ZN5RFM697encryptEPKc+0x20>
		writeMReg(REG_AESKEY1, (const uint8_t*) key, 16);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2210      	movs	r2, #16
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	203e      	movs	r0, #62	; 0x3e
 8004000:	f7ff fdf1 	bl	8003be6 <_ZN5RFM699writeMRegEhPKhi>
	}
	modifyReg(REG_PACKETCONFIG2, 0x01, (key ? 1 : 0));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <_ZN5RFM697encryptEPKc+0x2a>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <_ZN5RFM697encryptEPKc+0x2c>
 800400e:	2300      	movs	r3, #0
 8004010:	001a      	movs	r2, r3
 8004012:	2101      	movs	r1, #1
 8004014:	203d      	movs	r0, #61	; 0x3d
 8004016:	f7ff fe12 	bl	8003c3e <_ZN5RFM699modifyRegEhhh>
}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	46bd      	mov	sp, r7
 800401e:	b002      	add	sp, #8
 8004020:	bd80      	pop	{r7, pc}

08004022 <_ZN5RFM6910sendPacketEhPKvh>:

// internal function
TRfmErrorDef RFM69::sendPacket(uint8_t myAddress, const void *buffer, uint8_t bufferSize) {
 8004022:	b590      	push	{r4, r7, lr}
 8004024:	b087      	sub	sp, #28
 8004026:	af00      	add	r7, sp, #0
 8004028:	6039      	str	r1, [r7, #0]
 800402a:	0011      	movs	r1, r2
 800402c:	1dfb      	adds	r3, r7, #7
 800402e:	1c02      	adds	r2, r0, #0
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	1dbb      	adds	r3, r7, #6
 8004034:	1c0a      	adds	r2, r1, #0
 8004036:	701a      	strb	r2, [r3, #0]
	modifyReg(REG_PACKETCONFIG2, 0x04, RF_PACKET2_RXRESTART); // avoid RX deadlocks
 8004038:	2204      	movs	r2, #4
 800403a:	2104      	movs	r1, #4
 800403c:	203d      	movs	r0, #61	; 0x3d
 800403e:	f7ff fdfe 	bl	8003c3e <_ZN5RFM699modifyRegEhhh>

	setMode(modeSTANDBY); // turn off receiver to prevent reception while filling fifo
 8004042:	2001      	movs	r0, #1
 8004044:	f7ff fed6 	bl	8003df4 <_ZN5RFM697setModeE11TRFM69_MODE>
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) {
 8004048:	2027      	movs	r0, #39	; 0x27
 800404a:	f7ff fd91 	bl	8003b70 <_ZN5RFM697readRegEh>
 800404e:	0003      	movs	r3, r0
 8004050:	b25b      	sxtb	r3, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	b2db      	uxtb	r3, r3
 8004056:	09db      	lsrs	r3, r3, #7
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d000      	beq.n	8004060 <_ZN5RFM6910sendPacketEhPKvh+0x3e>
 800405e:	e7f3      	b.n	8004048 <_ZN5RFM6910sendPacketEhPKvh+0x26>
		// wait for ModeReady
	}
	if (bufferSize > RF69_MAX_DATA_LEN)
 8004060:	1dbb      	adds	r3, r7, #6
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b41      	cmp	r3, #65	; 0x41
 8004066:	d902      	bls.n	800406e <_ZN5RFM6910sendPacketEhPKvh+0x4c>
		bufferSize = RF69_MAX_DATA_LEN;
 8004068:	1dbb      	adds	r3, r7, #6
 800406a:	2241      	movs	r2, #65	; 0x41
 800406c:	701a      	strb	r2, [r3, #0]

	// write to FIFO
	CS_DN();
 800406e:	f7ff fbc7 	bl	8003800 <_ZN5RFM695CS_DNEv>
	SPI_1::RW(REG_FIFO | 0x80);
 8004072:	2080      	movs	r0, #128	; 0x80
 8004074:	f7ff fbac 	bl	80037d0 <_ZN5SPI_12RWEh>
	SPI_1::RW(bufferSize + 1);
 8004078:	1dbb      	adds	r3, r7, #6
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	3301      	adds	r3, #1
 800407e:	b2db      	uxtb	r3, r3
 8004080:	0018      	movs	r0, r3
 8004082:	f7ff fba5 	bl	80037d0 <_ZN5SPI_12RWEh>
	SPI_1::RW(myAddress);
 8004086:	1dfb      	adds	r3, r7, #7
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	0018      	movs	r0, r3
 800408c:	f7ff fba0 	bl	80037d0 <_ZN5SPI_12RWEh>

	const uint8_t *pBuf = (const uint8_t*) buffer;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < bufferSize; i++)
 8004094:	2317      	movs	r3, #23
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	2200      	movs	r2, #0
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	2317      	movs	r3, #23
 800409e:	18fa      	adds	r2, r7, r3
 80040a0:	1dbb      	adds	r3, r7, #6
 80040a2:	7812      	ldrb	r2, [r2, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d20e      	bcs.n	80040c8 <_ZN5RFM6910sendPacketEhPKvh+0xa6>
		SPI_1::RW(pBuf[i]);
 80040aa:	2417      	movs	r4, #23
 80040ac:	193b      	adds	r3, r7, r4
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	18d3      	adds	r3, r2, r3
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7ff fb8a 	bl	80037d0 <_ZN5SPI_12RWEh>
	for (uint8_t i = 0; i < bufferSize; i++)
 80040bc:	193b      	adds	r3, r7, r4
 80040be:	781a      	ldrb	r2, [r3, #0]
 80040c0:	193b      	adds	r3, r7, r4
 80040c2:	3201      	adds	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
 80040c6:	e7e9      	b.n	800409c <_ZN5RFM6910sendPacketEhPKvh+0x7a>
	CS_UP();
 80040c8:	f7ff fba8 	bl	800381c <_ZN5RFM695CS_UPEv>

	// no need to wait for transmit mode to be ready since its handled by the radio
	setMode(modeTX);
 80040cc:	2003      	movs	r0, #3
 80040ce:	f7ff fe91 	bl	8003df4 <_ZN5RFM697setModeE11TRFM69_MODE>

	// wait for signalling transmission finish
	TRfmErrorDef st = stRFM_OK;
 80040d2:	2316      	movs	r3, #22
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]
	uint32_t txStart = HAL_GetTick();
 80040da:	f7fd fee3 	bl	8001ea4 <HAL_GetTick>
 80040de:	0003      	movs	r3, r0
 80040e0:	60fb      	str	r3, [r7, #12]
	while (true) {
		if (HAL_GetTick() - txStart > RF69_TX_LIMIT_MS) {
 80040e2:	f7fd fedf 	bl	8001ea4 <HAL_GetTick>
 80040e6:	0002      	movs	r2, r0
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	22fa      	movs	r2, #250	; 0xfa
 80040ee:	0092      	lsls	r2, r2, #2
 80040f0:	429a      	cmp	r2, r3
 80040f2:	419b      	sbcs	r3, r3
 80040f4:	425b      	negs	r3, r3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d004      	beq.n	8004106 <_ZN5RFM6910sendPacketEhPKvh+0xe4>
			st = stRFM_TXERROR;
 80040fc:	2316      	movs	r3, #22
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	2205      	movs	r2, #5
 8004102:	701a      	strb	r2, [r3, #0]
			break;
 8004104:	e00d      	b.n	8004122 <_ZN5RFM6910sendPacketEhPKvh+0x100>
		}
		if ((readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT) != 0) {
 8004106:	2028      	movs	r0, #40	; 0x28
 8004108:	f7ff fd32 	bl	8003b70 <_ZN5RFM697readRegEh>
 800410c:	0003      	movs	r3, r0
 800410e:	001a      	movs	r2, r3
 8004110:	2308      	movs	r3, #8
 8004112:	4013      	ands	r3, r2
 8004114:	1e5a      	subs	r2, r3, #1
 8004116:	4193      	sbcs	r3, r2
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d100      	bne.n	8004120 <_ZN5RFM6910sendPacketEhPKvh+0xfe>
		if (HAL_GetTick() - txStart > RF69_TX_LIMIT_MS) {
 800411e:	e7e0      	b.n	80040e2 <_ZN5RFM6910sendPacketEhPKvh+0xc0>
			break;
 8004120:	46c0      	nop			; (mov r8, r8)
		}
	}
	receiveBegin();
 8004122:	f000 f8e5 	bl	80042f0 <_ZN5RFM6912receiveBeginEv>
	return st;
 8004126:	2316      	movs	r3, #22
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	781b      	ldrb	r3, [r3, #0]
}
 800412c:	0018      	movs	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	b007      	add	sp, #28
 8004132:	bd90      	pop	{r4, r7, pc}

08004134 <_ZN5RFM6911readRSSI_hdEb>:

// get the received signal strength indicator (RSSI)
int RFM69::readRSSI_hd(bool forceTrigger) {
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	0002      	movs	r2, r0
 800413c:	1dfb      	adds	r3, r7, #7
 800413e:	701a      	strb	r2, [r3, #0]
	if (forceTrigger) {
 8004140:	1dfb      	adds	r3, r7, #7
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d010      	beq.n	800416a <_ZN5RFM6911readRSSI_hdEb+0x36>
		// RSSI trigger not needed if DAGC is in continuous mode
		writeReg(REG_RSSICONFIG, RF_RSSI_START);
 8004148:	2101      	movs	r1, #1
 800414a:	2023      	movs	r0, #35	; 0x23
 800414c:	f7ff fd2c 	bl	8003ba8 <_ZN5RFM698writeRegEhh>
		while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00) {
 8004150:	2023      	movs	r0, #35	; 0x23
 8004152:	f7ff fd0d 	bl	8003b70 <_ZN5RFM697readRegEh>
 8004156:	0003      	movs	r3, r0
 8004158:	001a      	movs	r2, r3
 800415a:	2302      	movs	r3, #2
 800415c:	4013      	ands	r3, r2
 800415e:	425a      	negs	r2, r3
 8004160:	4153      	adcs	r3, r2
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d000      	beq.n	800416a <_ZN5RFM6911readRSSI_hdEb+0x36>
 8004168:	e7f2      	b.n	8004150 <_ZN5RFM6911readRSSI_hdEb+0x1c>
			// wait for RSSI_Ready
		}
	}
	return readReg(REG_RSSIVALUE);
 800416a:	2024      	movs	r0, #36	; 0x24
 800416c:	f7ff fd00 	bl	8003b70 <_ZN5RFM697readRegEh>
 8004170:	0003      	movs	r3, r0
}
 8004172:	0018      	movs	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	b002      	add	sp, #8
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <_ZN5RFM698readRSSIEb>:

// get the received signal strength indicator (RSSI)
float RFM69::readRSSI(bool forceTrigger) {
 800417c:	b590      	push	{r4, r7, lr}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	0002      	movs	r2, r0
 8004184:	1dfb      	adds	r3, r7, #7
 8004186:	701a      	strb	r2, [r3, #0]
	return -0.5 * readRSSI_hd(forceTrigger);
 8004188:	1dfb      	adds	r3, r7, #7
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	0018      	movs	r0, r3
 800418e:	f7ff ffd1 	bl	8004134 <_ZN5RFM6911readRSSI_hdEb>
 8004192:	0003      	movs	r3, r0
 8004194:	0018      	movs	r0, r3
 8004196:	f7fd f99d 	bl	80014d4 <__aeabi_i2d>
 800419a:	2200      	movs	r2, #0
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <_ZN5RFM698readRSSIEb+0x3c>)
 800419e:	f7fc fba9 	bl	80008f4 <__aeabi_dmul>
 80041a2:	0003      	movs	r3, r0
 80041a4:	000c      	movs	r4, r1
 80041a6:	0018      	movs	r0, r3
 80041a8:	0021      	movs	r1, r4
 80041aa:	f7fd f9ff 	bl	80015ac <__aeabi_d2f>
 80041ae:	1c03      	adds	r3, r0, #0
}
 80041b0:	1c18      	adds	r0, r3, #0
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b003      	add	sp, #12
 80041b6:	bd90      	pop	{r4, r7, pc}
 80041b8:	bfe00000 	.word	0xbfe00000

080041bc <_ZN5RFM6910reciveTickEv>:
bool RFM69::canSend() {
	return (readRSSI() < CSMA_LIMIT);
}

// returns true if frame is recived
bool RFM69::reciveTick() {
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
	if (mMode == modeRX) {
 80041c2:	4b47      	ldr	r3, [pc, #284]	; (80042e0 <_ZN5RFM6910reciveTickEv+0x124>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d000      	beq.n	80041cc <_ZN5RFM6910reciveTickEv+0x10>
 80041ca:	e083      	b.n	80042d4 <_ZN5RFM6910reciveTickEv+0x118>
		if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY) {
 80041cc:	2028      	movs	r0, #40	; 0x28
 80041ce:	f7ff fccf 	bl	8003b70 <_ZN5RFM697readRegEh>
 80041d2:	0003      	movs	r3, r0
 80041d4:	001a      	movs	r2, r3
 80041d6:	2304      	movs	r3, #4
 80041d8:	4013      	ands	r3, r2
 80041da:	1e5a      	subs	r2, r3, #1
 80041dc:	4193      	sbcs	r3, r2
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d071      	beq.n	80042c8 <_ZN5RFM6910reciveTickEv+0x10c>

			setMode(modeSTANDBY);
 80041e4:	2001      	movs	r0, #1
 80041e6:	f7ff fe05 	bl	8003df4 <_ZN5RFM697setModeE11TRFM69_MODE>
			CS_DN();
 80041ea:	f7ff fb09 	bl	8003800 <_ZN5RFM695CS_DNEv>
			SPI_1::RW(REG_FIFO & 0x7F);
 80041ee:	2000      	movs	r0, #0
 80041f0:	f7ff faee 	bl	80037d0 <_ZN5SPI_12RWEh>
			int payloadLen = SPI_1::RW(0);
 80041f4:	2000      	movs	r0, #0
 80041f6:	f7ff faeb 	bl	80037d0 <_ZN5SPI_12RWEh>
 80041fa:	0003      	movs	r3, r0
 80041fc:	607b      	str	r3, [r7, #4]
			if (payloadLen > RF69_MAX_DATA_LEN)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b41      	cmp	r3, #65	; 0x41
 8004202:	dd01      	ble.n	8004208 <_ZN5RFM6910reciveTickEv+0x4c>
				payloadLen = RF69_MAX_DATA_LEN;
 8004204:	2341      	movs	r3, #65	; 0x41
 8004206:	607b      	str	r3, [r7, #4]

			recVar.DataLen = payloadLen - 1;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b2da      	uxtb	r2, r3
 8004210:	4b34      	ldr	r3, [pc, #208]	; (80042e4 <_ZN5RFM6910reciveTickEv+0x128>)
 8004212:	705a      	strb	r2, [r3, #1]

			recVar.SenderID = SPI_1::RW(0);
 8004214:	2000      	movs	r0, #0
 8004216:	f7ff fadb 	bl	80037d0 <_ZN5SPI_12RWEh>
 800421a:	0003      	movs	r3, r0
 800421c:	001a      	movs	r2, r3
 800421e:	4b31      	ldr	r3, [pc, #196]	; (80042e4 <_ZN5RFM6910reciveTickEv+0x128>)
 8004220:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < recVar.DataLen; i++) {
 8004222:	1cfb      	adds	r3, r7, #3
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]
 8004228:	4b2e      	ldr	r3, [pc, #184]	; (80042e4 <_ZN5RFM6910reciveTickEv+0x128>)
 800422a:	785b      	ldrb	r3, [r3, #1]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	1cfa      	adds	r2, r7, #3
 8004230:	7812      	ldrb	r2, [r2, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	419b      	sbcs	r3, r3
 8004236:	425b      	negs	r3, r3
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00f      	beq.n	800425e <_ZN5RFM6910reciveTickEv+0xa2>
				recVar.DataBuf[i] = SPI_1::RW(0);
 800423e:	1cfb      	adds	r3, r7, #3
 8004240:	781c      	ldrb	r4, [r3, #0]
 8004242:	2000      	movs	r0, #0
 8004244:	f7ff fac4 	bl	80037d0 <_ZN5SPI_12RWEh>
 8004248:	0003      	movs	r3, r0
 800424a:	001a      	movs	r2, r3
 800424c:	4b25      	ldr	r3, [pc, #148]	; (80042e4 <_ZN5RFM6910reciveTickEv+0x128>)
 800424e:	191b      	adds	r3, r3, r4
 8004250:	731a      	strb	r2, [r3, #12]
			for (uint8_t i = 0; i < recVar.DataLen; i++) {
 8004252:	1cfb      	adds	r3, r7, #3
 8004254:	781a      	ldrb	r2, [r3, #0]
 8004256:	1cfb      	adds	r3, r7, #3
 8004258:	3201      	adds	r2, #1
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	e7e4      	b.n	8004228 <_ZN5RFM6910reciveTickEv+0x6c>
			}
			if (recVar.DataLen < RF69_MAX_DATA_LEN)
 800425e:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <_ZN5RFM6910reciveTickEv+0x128>)
 8004260:	785b      	ldrb	r3, [r3, #1]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	2140      	movs	r1, #64	; 0x40
 8004266:	2300      	movs	r3, #0
 8004268:	4291      	cmp	r1, r2
 800426a:	415b      	adcs	r3, r3
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <_ZN5RFM6910reciveTickEv+0xc6>
				recVar.DataBuf[recVar.DataLen] = 0; // add null at end of string
 8004272:	4b1c      	ldr	r3, [pc, #112]	; (80042e4 <_ZN5RFM6910reciveTickEv+0x128>)
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	001a      	movs	r2, r3
 800427a:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <_ZN5RFM6910reciveTickEv+0x128>)
 800427c:	189b      	adds	r3, r3, r2
 800427e:	2200      	movs	r2, #0
 8004280:	731a      	strb	r2, [r3, #12]

			CS_UP();
 8004282:	f7ff facb 	bl	800381c <_ZN5RFM695CS_UPEv>
			setMode(modeRX);
 8004286:	2004      	movs	r0, #4
 8004288:	f7ff fdb4 	bl	8003df4 <_ZN5RFM697setModeE11TRFM69_MODE>
			recVar.RSSI_hd = readReg(REG_RSSIVALUE);
 800428c:	2024      	movs	r0, #36	; 0x24
 800428e:	f7ff fc6f 	bl	8003b70 <_ZN5RFM697readRegEh>
 8004292:	0003      	movs	r3, r0
 8004294:	001a      	movs	r2, r3
 8004296:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <_ZN5RFM6910reciveTickEv+0x128>)
 8004298:	609a      	str	r2, [r3, #8]
			recVar.RSSI = -0.5 * recVar.RSSI_hd;
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <_ZN5RFM6910reciveTickEv+0x128>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	0018      	movs	r0, r3
 80042a0:	f7fd f918 	bl	80014d4 <__aeabi_i2d>
 80042a4:	2200      	movs	r2, #0
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <_ZN5RFM6910reciveTickEv+0x12c>)
 80042a8:	f7fc fb24 	bl	80008f4 <__aeabi_dmul>
 80042ac:	0003      	movs	r3, r0
 80042ae:	000c      	movs	r4, r1
 80042b0:	0018      	movs	r0, r3
 80042b2:	0021      	movs	r1, r4
 80042b4:	f7fd f97a 	bl	80015ac <__aeabi_d2f>
 80042b8:	1c02      	adds	r2, r0, #0
 80042ba:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <_ZN5RFM6910reciveTickEv+0x128>)
 80042bc:	605a      	str	r2, [r3, #4]
			mNewframe = true;
 80042be:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <_ZN5RFM6910reciveTickEv+0x130>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
				printf(txt);

#endif
			}

			return true;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e006      	b.n	80042d6 <_ZN5RFM6910reciveTickEv+0x11a>
		} else
			recVar.RSSI = readRSSI();
 80042c8:	2000      	movs	r0, #0
 80042ca:	f7ff ff57 	bl	800417c <_ZN5RFM698readRSSIEb>
 80042ce:	1c02      	adds	r2, r0, #0
 80042d0:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <_ZN5RFM6910reciveTickEv+0x128>)
 80042d2:	605a      	str	r2, [r3, #4]
	}
	return false;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	0018      	movs	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	b003      	add	sp, #12
 80042dc:	bd90      	pop	{r4, r7, pc}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	20000088 	.word	0x20000088
 80042e4:	2000008c 	.word	0x2000008c
 80042e8:	bfe00000 	.word	0xbfe00000
 80042ec:	200000dd 	.word	0x200000dd

080042f0 <_ZN5RFM6912receiveBeginEv>:

void RFM69::receiveBegin() {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
	memset(&recVar, 0, sizeof(recVar));
 80042f4:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <_ZN5RFM6912receiveBeginEv+0x40>)
 80042f6:	2250      	movs	r2, #80	; 0x50
 80042f8:	2100      	movs	r1, #0
 80042fa:	0018      	movs	r0, r3
 80042fc:	f001 f9c6 	bl	800568c <memset>
	if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
 8004300:	2028      	movs	r0, #40	; 0x28
 8004302:	f7ff fc35 	bl	8003b70 <_ZN5RFM697readRegEh>
 8004306:	0003      	movs	r3, r0
 8004308:	001a      	movs	r2, r3
 800430a:	2304      	movs	r3, #4
 800430c:	4013      	ands	r3, r2
 800430e:	1e5a      	subs	r2, r3, #1
 8004310:	4193      	sbcs	r3, r2
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d004      	beq.n	8004322 <_ZN5RFM6912receiveBeginEv+0x32>
		modifyReg(REG_PACKETCONFIG2, 0x04, RF_PACKET2_RXRESTART); // avoid RX deadlocks
 8004318:	2204      	movs	r2, #4
 800431a:	2104      	movs	r1, #4
 800431c:	203d      	movs	r0, #61	; 0x3d
 800431e:	f7ff fc8e 	bl	8003c3e <_ZN5RFM699modifyRegEhhh>
	setMode(modeRX);
 8004322:	2004      	movs	r0, #4
 8004324:	f7ff fd66 	bl	8003df4 <_ZN5RFM697setModeE11TRFM69_MODE>
}
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	2000008c 	.word	0x2000008c

08004334 <_ZN5RFM6910isNewFrameEv>:
	writeReg(REG_SYNCVALUE1, 0);
	writeReg(REG_SYNCVALUE2, 0);
	return ((a1 == 0x11) && (a2 == 0x22));
}

bool RFM69::isNewFrame() {
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
	bool q = mNewframe;
 800433a:	1dfb      	adds	r3, r7, #7
 800433c:	4a05      	ldr	r2, [pc, #20]	; (8004354 <_ZN5RFM6910isNewFrameEv+0x20>)
 800433e:	7812      	ldrb	r2, [r2, #0]
 8004340:	701a      	strb	r2, [r3, #0]
	mNewframe = false;
 8004342:	4b04      	ldr	r3, [pc, #16]	; (8004354 <_ZN5RFM6910isNewFrameEv+0x20>)
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
	return q;
 8004348:	1dfb      	adds	r3, r7, #7
 800434a:	781b      	ldrb	r3, [r3, #0]
}
 800434c:	0018      	movs	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	b002      	add	sp, #8
 8004352:	bd80      	pop	{r7, pc}
 8004354:	200000dd 	.word	0x200000dd

08004358 <_ZN5RFM694tickEv>:

void RFM69::tick() {
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
	reciveTick();
 800435c:	f7ff ff2e 	bl	80041bc <_ZN5RFM6910reciveTickEv>
}
 8004360:	46c0      	nop			; (mov r8, r8)
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <pilotCheckFrame>:
 *      Author: Grzegorz
 */

#include "RadioTypes.h"

uint8_t pilotCheckFrame(void *p, int len) {
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
	Pilot_DataBegin *pDt = (Pilot_DataBegin*) p;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	613b      	str	r3, [r7, #16]
	if (pDt->Sign == PILOT_SIGN) {
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	781a      	ldrb	r2, [r3, #0]
 800437a:	7859      	ldrb	r1, [r3, #1]
 800437c:	0209      	lsls	r1, r1, #8
 800437e:	430a      	orrs	r2, r1
 8004380:	7899      	ldrb	r1, [r3, #2]
 8004382:	0409      	lsls	r1, r1, #16
 8004384:	430a      	orrs	r2, r1
 8004386:	78db      	ldrb	r3, [r3, #3]
 8004388:	061b      	lsls	r3, r3, #24
 800438a:	4313      	orrs	r3, r2
 800438c:	001a      	movs	r2, r3
 800438e:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <pilotCheckFrame+0x78>)
 8004390:	429a      	cmp	r2, r3
 8004392:	d11f      	bne.n	80043d4 <pilotCheckFrame+0x6c>
		uint32_t *pw = (uint32_t*) p;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	61fb      	str	r3, [r7, #28]
		int n = len / 4;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	da00      	bge.n	80043a0 <pilotCheckFrame+0x38>
 800439e:	3303      	adds	r3, #3
 80043a0:	109b      	asrs	r3, r3, #2
 80043a2:	60fb      	str	r3, [r7, #12]
		uint32_t xorW = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < n; i++) {
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	da0a      	bge.n	80043ca <pilotCheckFrame+0x62>
			xorW ^= *pw++;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	1d1a      	adds	r2, r3, #4
 80043b8:	61fa      	str	r2, [r7, #28]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4053      	eors	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < n; i++) {
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	3301      	adds	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	e7f0      	b.n	80043ac <pilotCheckFrame+0x44>
		}
		return (xorW == 0);
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	425a      	negs	r2, r3
 80043ce:	4153      	adcs	r3, r2
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	e000      	b.n	80043d6 <pilotCheckFrame+0x6e>
	}
	return 0;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	0018      	movs	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	b008      	add	sp, #32
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	5b07af12 	.word	0x5b07af12

080043e4 <_ZN5RFM6912setSleepModeEv>:
	static bool readINT();
	static int getChannelFreq(int channel);
	static bool identifyDev();
	static void setPAMode(PAMode mode);
	static bool isNewFrame();
	static void setSleepMode(){
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
		setMode(modeSLEEP);
 80043e8:	2000      	movs	r0, #0
 80043ea:	f7ff fd03 	bl	8003df4 <_ZN5RFM697setModeE11TRFM69_MODE>
	}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <_ZN5RFM6914setStandByModeEv>:
	static void setStandByMode(){
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
		setMode(modeSTANDBY);
 80043f8:	2001      	movs	r0, #1
 80043fa:	f7ff fcfb 	bl	8003df4 <_ZN5RFM697setModeE11TRFM69_MODE>
	}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <_ZL6getDecPKc>:
				"****************";
//-------------------------------------------------------------------------------------
// loadSoftVer
//-------------------------------------------------------------------------------------

static uint16_t getDec(const char *p) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	char ch = *p;
 800440c:	210f      	movs	r1, #15
 800440e:	187b      	adds	r3, r7, r1
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	7812      	ldrb	r2, [r2, #0]
 8004414:	701a      	strb	r2, [r3, #0]
	if (ch >= '0' || ch <= '9')
 8004416:	187b      	adds	r3, r7, r1
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b2f      	cmp	r3, #47	; 0x2f
 800441c:	d804      	bhi.n	8004428 <_ZL6getDecPKc+0x24>
 800441e:	230f      	movs	r3, #15
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b39      	cmp	r3, #57	; 0x39
 8004426:	d806      	bhi.n	8004436 <_ZL6getDecPKc+0x32>
		return ch - '0';
 8004428:	230f      	movs	r3, #15
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b30      	subs	r3, #48	; 0x30
 8004432:	b29b      	uxth	r3, r3
 8004434:	e000      	b.n	8004438 <_ZL6getDecPKc+0x34>
	else
		return 0;
 8004436:	2300      	movs	r3, #0
}
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	b004      	add	sp, #16
 800443e:	bd80      	pop	{r7, pc}

08004440 <_ZL7getInt3PKc>:

static uint16_t getInt3(const char *p) {
 8004440:	b590      	push	{r4, r7, lr}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	uint16_t w = getDec(p++) * 100;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	0018      	movs	r0, r3
 8004450:	f7ff ffd8 	bl	8004404 <_ZL6getDecPKc>
 8004454:	0003      	movs	r3, r0
 8004456:	0019      	movs	r1, r3
 8004458:	240e      	movs	r4, #14
 800445a:	193b      	adds	r3, r7, r4
 800445c:	2264      	movs	r2, #100	; 0x64
 800445e:	434a      	muls	r2, r1
 8004460:	801a      	strh	r2, [r3, #0]
	w += getDec(p++) * 10;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	0018      	movs	r0, r3
 800446a:	f7ff ffcb 	bl	8004404 <_ZL6getDecPKc>
 800446e:	0003      	movs	r3, r0
 8004470:	001a      	movs	r2, r3
 8004472:	0013      	movs	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	189b      	adds	r3, r3, r2
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	b299      	uxth	r1, r3
 800447c:	193b      	adds	r3, r7, r4
 800447e:	193a      	adds	r2, r7, r4
 8004480:	8812      	ldrh	r2, [r2, #0]
 8004482:	188a      	adds	r2, r1, r2
 8004484:	801a      	strh	r2, [r3, #0]
	w += getDec(p);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0018      	movs	r0, r3
 800448a:	f7ff ffbb 	bl	8004404 <_ZL6getDecPKc>
 800448e:	0003      	movs	r3, r0
 8004490:	0019      	movs	r1, r3
 8004492:	193b      	adds	r3, r7, r4
 8004494:	193a      	adds	r2, r7, r4
 8004496:	8812      	ldrh	r2, [r2, #0]
 8004498:	188a      	adds	r2, r1, r2
 800449a:	801a      	strh	r2, [r3, #0]
	return w;
 800449c:	193b      	adds	r3, r7, r4
 800449e:	881b      	ldrh	r3, [r3, #0]
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b005      	add	sp, #20
 80044a6:	bd90      	pop	{r4, r7, pc}

080044a8 <_ZL7getInt2PKc>:

static uint8_t getInt2(const char *p) {
 80044a8:	b590      	push	{r4, r7, lr}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	uint8_t w = getDec(p++) * 10;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	607a      	str	r2, [r7, #4]
 80044b6:	0018      	movs	r0, r3
 80044b8:	f7ff ffa4 	bl	8004404 <_ZL6getDecPKc>
 80044bc:	0003      	movs	r3, r0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	240f      	movs	r4, #15
 80044c2:	193a      	adds	r2, r7, r4
 80044c4:	1c19      	adds	r1, r3, #0
 80044c6:	0089      	lsls	r1, r1, #2
 80044c8:	18cb      	adds	r3, r1, r3
 80044ca:	18db      	adds	r3, r3, r3
 80044cc:	7013      	strb	r3, [r2, #0]
	w += getDec(p);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	0018      	movs	r0, r3
 80044d2:	f7ff ff97 	bl	8004404 <_ZL6getDecPKc>
 80044d6:	0003      	movs	r3, r0
 80044d8:	b2d9      	uxtb	r1, r3
 80044da:	193b      	adds	r3, r7, r4
 80044dc:	193a      	adds	r2, r7, r4
 80044de:	7812      	ldrb	r2, [r2, #0]
 80044e0:	188a      	adds	r2, r1, r2
 80044e2:	701a      	strb	r2, [r3, #0]
	return w;
 80044e4:	193b      	adds	r3, r7, r4
 80044e6:	781b      	ldrb	r3, [r3, #0]
}
 80044e8:	0018      	movs	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b005      	add	sp, #20
 80044ee:	bd90      	pop	{r4, r7, pc}

080044f0 <_Z7_strcmpPKcS0_>:
const char Tx1[] = "Date :";
const char Tx2[] = "Time :";
const char Tx3[] = "Ver.";
const char Tx4[] = "Rev.";

uint8_t _strcmp(const char *s1, const char *s2) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
	while (*s1 && *s2) {
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d012      	beq.n	8004528 <_Z7_strcmpPKcS0_+0x38>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00e      	beq.n	8004528 <_Z7_strcmpPKcS0_+0x38>
		if (*s1 != *s2)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	781a      	ldrb	r2, [r3, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d001      	beq.n	800451a <_Z7_strcmpPKcS0_+0x2a>
			return 0;
 8004516:	2300      	movs	r3, #0
 8004518:	e007      	b.n	800452a <_Z7_strcmpPKcS0_+0x3a>
		s1++;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3301      	adds	r3, #1
 800451e:	607b      	str	r3, [r7, #4]
		s2++;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	603b      	str	r3, [r7, #0]
	while (*s1 && *s2) {
 8004526:	e7e8      	b.n	80044fa <_Z7_strcmpPKcS0_+0xa>
	}
	return 1;
 8004528:	2301      	movs	r3, #1
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b002      	add	sp, #8
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <_Z11loadSoftVerP7VerInfoPKc>:

uint8_t loadSoftVer(VerInfo *ver, const char *mem) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
	if (_strcmp(Tx1, &mem[0]) && _strcmp(Tx2, &mem[16]) && _strcmp(Tx3, &mem[32]) && _strcmp(Tx4, &mem[40])) {
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	4b42      	ldr	r3, [pc, #264]	; (800464c <_Z11loadSoftVerP7VerInfoPKc+0x118>)
 8004542:	0011      	movs	r1, r2
 8004544:	0018      	movs	r0, r3
 8004546:	f7ff ffd3 	bl	80044f0 <_Z7_strcmpPKcS0_>
 800454a:	1e03      	subs	r3, r0, #0
 800454c:	d01f      	beq.n	800458e <_Z11loadSoftVerP7VerInfoPKc+0x5a>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	3310      	adds	r3, #16
 8004552:	001a      	movs	r2, r3
 8004554:	4b3e      	ldr	r3, [pc, #248]	; (8004650 <_Z11loadSoftVerP7VerInfoPKc+0x11c>)
 8004556:	0011      	movs	r1, r2
 8004558:	0018      	movs	r0, r3
 800455a:	f7ff ffc9 	bl	80044f0 <_Z7_strcmpPKcS0_>
 800455e:	1e03      	subs	r3, r0, #0
 8004560:	d015      	beq.n	800458e <_Z11loadSoftVerP7VerInfoPKc+0x5a>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	3320      	adds	r3, #32
 8004566:	001a      	movs	r2, r3
 8004568:	4b3a      	ldr	r3, [pc, #232]	; (8004654 <_Z11loadSoftVerP7VerInfoPKc+0x120>)
 800456a:	0011      	movs	r1, r2
 800456c:	0018      	movs	r0, r3
 800456e:	f7ff ffbf 	bl	80044f0 <_Z7_strcmpPKcS0_>
 8004572:	1e03      	subs	r3, r0, #0
 8004574:	d00b      	beq.n	800458e <_Z11loadSoftVerP7VerInfoPKc+0x5a>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	3328      	adds	r3, #40	; 0x28
 800457a:	001a      	movs	r2, r3
 800457c:	4b36      	ldr	r3, [pc, #216]	; (8004658 <_Z11loadSoftVerP7VerInfoPKc+0x124>)
 800457e:	0011      	movs	r1, r2
 8004580:	0018      	movs	r0, r3
 8004582:	f7ff ffb5 	bl	80044f0 <_Z7_strcmpPKcS0_>
 8004586:	1e03      	subs	r3, r0, #0
 8004588:	d001      	beq.n	800458e <_Z11loadSoftVerP7VerInfoPKc+0x5a>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <_Z11loadSoftVerP7VerInfoPKc+0x5c>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d04f      	beq.n	8004634 <_Z11loadSoftVerP7VerInfoPKc+0x100>
		ver->ver = getInt3(&mem[36]);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	3324      	adds	r3, #36	; 0x24
 8004598:	0018      	movs	r0, r3
 800459a:	f7ff ff51 	bl	8004440 <_ZL7getInt3PKc>
 800459e:	0003      	movs	r3, r0
 80045a0:	001a      	movs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	801a      	strh	r2, [r3, #0]
		ver->rev = getInt3(&mem[44]);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	332c      	adds	r3, #44	; 0x2c
 80045aa:	0018      	movs	r0, r3
 80045ac:	f7ff ff48 	bl	8004440 <_ZL7getInt3PKc>
 80045b0:	0003      	movs	r3, r0
 80045b2:	001a      	movs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	805a      	strh	r2, [r3, #2]
		ver->time.rk = getInt2(&mem[7]);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	3307      	adds	r3, #7
 80045bc:	0018      	movs	r0, r3
 80045be:	f7ff ff73 	bl	80044a8 <_ZL7getInt2PKc>
 80045c2:	0003      	movs	r3, r0
 80045c4:	001a      	movs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	711a      	strb	r2, [r3, #4]
		ver->time.ms = getInt2(&mem[10]);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	330a      	adds	r3, #10
 80045ce:	0018      	movs	r0, r3
 80045d0:	f7ff ff6a 	bl	80044a8 <_ZL7getInt2PKc>
 80045d4:	0003      	movs	r3, r0
 80045d6:	001a      	movs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	715a      	strb	r2, [r3, #5]
		ver->time.dz = getInt2(&mem[13]);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	330d      	adds	r3, #13
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7ff ff61 	bl	80044a8 <_ZL7getInt2PKc>
 80045e6:	0003      	movs	r3, r0
 80045e8:	001a      	movs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	719a      	strb	r2, [r3, #6]
		ver->time.gd = getInt2(&mem[16 + 7]);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	3317      	adds	r3, #23
 80045f2:	0018      	movs	r0, r3
 80045f4:	f7ff ff58 	bl	80044a8 <_ZL7getInt2PKc>
 80045f8:	0003      	movs	r3, r0
 80045fa:	001a      	movs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	71da      	strb	r2, [r3, #7]
		ver->time.mn = getInt2(&mem[16 + 10]);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	331a      	adds	r3, #26
 8004604:	0018      	movs	r0, r3
 8004606:	f7ff ff4f 	bl	80044a8 <_ZL7getInt2PKc>
 800460a:	0003      	movs	r3, r0
 800460c:	001a      	movs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	721a      	strb	r2, [r3, #8]
		ver->time.sc = getInt2(&mem[16 + 13]);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	331d      	adds	r3, #29
 8004616:	0018      	movs	r0, r3
 8004618:	f7ff ff46 	bl	80044a8 <_ZL7getInt2PKc>
 800461c:	0003      	movs	r3, r0
 800461e:	001a      	movs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	725a      	strb	r2, [r3, #9]
		ver->time.se = 0;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	729a      	strb	r2, [r3, #10]
		ver->time.timeSource = 0;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	72da      	strb	r2, [r3, #11]
		return 1;
 8004630:	2301      	movs	r3, #1
 8004632:	e006      	b.n	8004642 <_Z11loadSoftVerP7VerInfoPKc+0x10e>
	} else {
		memset(ver, 0, sizeof(VerInfo));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	220c      	movs	r2, #12
 8004638:	2100      	movs	r1, #0
 800463a:	0018      	movs	r0, r3
 800463c:	f001 f826 	bl	800568c <memset>
		return 0;
 8004640:	2300      	movs	r3, #0
	}
}
 8004642:	0018      	movs	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	b002      	add	sp, #8
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	08005784 	.word	0x08005784
 8004650:	0800578c 	.word	0x0800578c
 8004654:	08005794 	.word	0x08005794
 8004658:	0800579c 	.word	0x0800579c

0800465c <_Z7setLed1h>:

//-------------------------------------------------------------------------------------
// HDW
//-------------------------------------------------------------------------------------

void setLed1(uint8_t q) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	0002      	movs	r2, r0
 8004664:	1dfb      	adds	r3, r7, #7
 8004666:	701a      	strb	r2, [r3, #0]
	if (q)
 8004668:	1dfb      	adds	r3, r7, #7
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <_Z7setLed1h+0x26>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	0219      	lsls	r1, r3, #8
 8004674:	23a0      	movs	r3, #160	; 0xa0
 8004676:	05db      	lsls	r3, r3, #23
 8004678:	2200      	movs	r2, #0
 800467a:	0018      	movs	r0, r3
 800467c:	f7fe f82c 	bl	80026d8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
}
 8004680:	e007      	b.n	8004692 <_Z7setLed1h+0x36>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	0219      	lsls	r1, r3, #8
 8004686:	23a0      	movs	r3, #160	; 0xa0
 8004688:	05db      	lsls	r3, r3, #23
 800468a:	2201      	movs	r2, #1
 800468c:	0018      	movs	r0, r3
 800468e:	f7fe f823 	bl	80026d8 <HAL_GPIO_WritePin>
}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	46bd      	mov	sp, r7
 8004696:	b002      	add	sp, #8
 8004698:	bd80      	pop	{r7, pc}

0800469a <_Z6onCol1v>:
		HAL_GPIO_WritePin(PIN_TX_GPIO_Port, PIN_TX_Pin, GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(PIN_TX_GPIO_Port, PIN_TX_Pin, GPIO_PIN_RESET);
}

void onCol1() {
 800469a:	b580      	push	{r7, lr}
 800469c:	af00      	add	r7, sp, #0
	//ustawienie stanu niskiego
	COL1_GPIO_Port->BRR = COL1_Pin;
 800469e:	23a0      	movs	r3, #160	; 0xa0
 80046a0:	05db      	lsls	r3, r3, #23
 80046a2:	2280      	movs	r2, #128	; 0x80
 80046a4:	0152      	lsls	r2, r2, #5
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28

}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <_Z7offCol1v>:
void offCol1() {
 80046ae:	b580      	push	{r7, lr}
 80046b0:	af00      	add	r7, sp, #0
	//ustawienie stanu wysokiego
	COL1_GPIO_Port->BSRR = COL1_Pin;
 80046b2:	23a0      	movs	r3, #160	; 0xa0
 80046b4:	05db      	lsls	r3, r3, #23
 80046b6:	2280      	movs	r2, #128	; 0x80
 80046b8:	0152      	lsls	r2, r2, #5
 80046ba:	619a      	str	r2, [r3, #24]
}
 80046bc:	46c0      	nop			; (mov r8, r8)
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <_Z6onCol2v>:

void onCol2() {
 80046c2:	b580      	push	{r7, lr}
 80046c4:	af00      	add	r7, sp, #0
	//ustawienie stanu niskiego
	COL2_GPIO_Port->BRR = COL2_Pin;
 80046c6:	23a0      	movs	r3, #160	; 0xa0
 80046c8:	05db      	lsls	r3, r3, #23
 80046ca:	2280      	movs	r2, #128	; 0x80
 80046cc:	0112      	lsls	r2, r2, #4
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28

}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <_Z7offCol2v>:
void offCol2() {
 80046d6:	b580      	push	{r7, lr}
 80046d8:	af00      	add	r7, sp, #0
	//ustawienie stanu wysokiego
	COL2_GPIO_Port->BSRR = COL2_Pin;
 80046da:	23a0      	movs	r3, #160	; 0xa0
 80046dc:	05db      	lsls	r3, r3, #23
 80046de:	2280      	movs	r2, #128	; 0x80
 80046e0:	0112      	lsls	r2, r2, #4
 80046e2:	619a      	str	r2, [r3, #24]
}
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <_Z6onCol3v>:

void onCol3() {
 80046ea:	b580      	push	{r7, lr}
 80046ec:	af00      	add	r7, sp, #0
	//ustawienie stanu niskiego
	COL3_GPIO_Port->BRR = COL3_Pin;
 80046ee:	23a0      	movs	r3, #160	; 0xa0
 80046f0:	05db      	lsls	r3, r3, #23
 80046f2:	2280      	movs	r2, #128	; 0x80
 80046f4:	00d2      	lsls	r2, r2, #3
 80046f6:	629a      	str	r2, [r3, #40]	; 0x28

}
 80046f8:	46c0      	nop			; (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <_Z7offCol3v>:
void offCol3() {
 80046fe:	b580      	push	{r7, lr}
 8004700:	af00      	add	r7, sp, #0
	//ustawienie stanu wysokiego
	COL3_GPIO_Port->BSRR = COL3_Pin;
 8004702:	23a0      	movs	r3, #160	; 0xa0
 8004704:	05db      	lsls	r3, r3, #23
 8004706:	2280      	movs	r2, #128	; 0x80
 8004708:	00d2      	lsls	r2, r2, #3
 800470a:	619a      	str	r2, [r3, #24]
}
 800470c:	46c0      	nop			; (mov r8, r8)
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <_Z6onCol4v>:

void onCol4() {
 8004712:	b580      	push	{r7, lr}
 8004714:	af00      	add	r7, sp, #0
	//ustawienie stanu niskiego
	COL4_GPIO_Port->BRR = COL4_Pin;
 8004716:	23a0      	movs	r3, #160	; 0xa0
 8004718:	05db      	lsls	r3, r3, #23
 800471a:	2280      	movs	r2, #128	; 0x80
 800471c:	0092      	lsls	r2, r2, #2
 800471e:	629a      	str	r2, [r3, #40]	; 0x28

}
 8004720:	46c0      	nop			; (mov r8, r8)
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <_Z7offCol4v>:
void offCol4() {
 8004726:	b580      	push	{r7, lr}
 8004728:	af00      	add	r7, sp, #0
	//ustawienie stanu wysokiego
	COL4_GPIO_Port->BSRR = COL4_Pin;
 800472a:	23a0      	movs	r3, #160	; 0xa0
 800472c:	05db      	lsls	r3, r3, #23
 800472e:	2280      	movs	r2, #128	; 0x80
 8004730:	0092      	lsls	r2, r2, #2
 8004732:	619a      	str	r2, [r3, #24]
}
 8004734:	46c0      	nop			; (mov r8, r8)
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <_Z6onCol5v>:

void onCol5() {
 800473a:	b580      	push	{r7, lr}
 800473c:	af00      	add	r7, sp, #0
	//ustawienie stanu niskiego
	COL5_GPIO_Port->BRR = COL5_Pin;
 800473e:	23a0      	movs	r3, #160	; 0xa0
 8004740:	05db      	lsls	r3, r3, #23
 8004742:	2280      	movs	r2, #128	; 0x80
 8004744:	0052      	lsls	r2, r2, #1
 8004746:	629a      	str	r2, [r3, #40]	; 0x28

}
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <_Z7offCol5v>:
void offCol5() {
 800474e:	b580      	push	{r7, lr}
 8004750:	af00      	add	r7, sp, #0
	//ustawienie stanu wysokiego
	COL5_GPIO_Port->BSRR = COL5_Pin;
 8004752:	23a0      	movs	r3, #160	; 0xa0
 8004754:	05db      	lsls	r3, r3, #23
 8004756:	2280      	movs	r2, #128	; 0x80
 8004758:	0052      	lsls	r2, r2, #1
 800475a:	619a      	str	r2, [r3, #24]
}
 800475c:	46c0      	nop			; (mov r8, r8)
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <_Z9allColOffv>:

void allColOff() {
 8004762:	b580      	push	{r7, lr}
 8004764:	af00      	add	r7, sp, #0
	offCol1();
 8004766:	f7ff ffa2 	bl	80046ae <_Z7offCol1v>
	offCol2();
 800476a:	f7ff ffb4 	bl	80046d6 <_Z7offCol2v>
	offCol3();
 800476e:	f7ff ffc6 	bl	80046fe <_Z7offCol3v>
	offCol4();
 8004772:	f7ff ffd8 	bl	8004726 <_Z7offCol4v>
	offCol5();
 8004776:	f7ff ffea 	bl	800474e <_Z7offCol5v>
}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <_Z15ColsAsOpenDrianv>:
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void ColsAsOpenDrian() {
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004786:	1d3b      	adds	r3, r7, #4
 8004788:	0018      	movs	r0, r3
 800478a:	2314      	movs	r3, #20
 800478c:	001a      	movs	r2, r3
 800478e:	2100      	movs	r1, #0
 8004790:	f000 ff7c 	bl	800568c <memset>

	GPIO_InitStruct.Pin = COL5_Pin | COL4_Pin | COL3_Pin | COL2_Pin | COL1_Pin;
 8004794:	1d3b      	adds	r3, r7, #4
 8004796:	22f8      	movs	r2, #248	; 0xf8
 8004798:	0152      	lsls	r2, r2, #5
 800479a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800479c:	1d3b      	adds	r3, r7, #4
 800479e:	2211      	movs	r2, #17
 80047a0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a2:	1d3b      	adds	r3, r7, #4
 80047a4:	2200      	movs	r2, #0
 80047a6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a8:	1d3b      	adds	r3, r7, #4
 80047aa:	2200      	movs	r2, #0
 80047ac:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ae:	1d3a      	adds	r2, r7, #4
 80047b0:	23a0      	movs	r3, #160	; 0xa0
 80047b2:	05db      	lsls	r3, r3, #23
 80047b4:	0011      	movs	r1, r2
 80047b6:	0018      	movs	r0, r3
 80047b8:	f7fd fe20 	bl	80023fc <HAL_GPIO_Init>

}
 80047bc:	46c0      	nop			; (mov r8, r8)
 80047be:	46bd      	mov	sp, r7
 80047c0:	b006      	add	sp, #24
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <_Z9RowsAsInpv>:
	ColsAsPushPull();
	uint32_t pin = COL5_Pin | COL4_Pin | COL3_Pin | COL2_Pin | COL1_Pin;
	HAL_GPIO_WritePin(GPIOA, pin, GPIO_PIN_SET);
}

void RowsAsInp() {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80047ca:	1d3b      	adds	r3, r7, #4
 80047cc:	0018      	movs	r0, r3
 80047ce:	2314      	movs	r3, #20
 80047d0:	001a      	movs	r2, r3
 80047d2:	2100      	movs	r1, #0
 80047d4:	f000 ff5a 	bl	800568c <memset>
	GPIO_InitStruct.Pin = ROW1_Pin | ROW2_Pin;
 80047d8:	1d3b      	adds	r3, r7, #4
 80047da:	2205      	movs	r2, #5
 80047dc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047de:	1d3b      	adds	r3, r7, #4
 80047e0:	2200      	movs	r2, #0
 80047e2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047e4:	1d3b      	adds	r3, r7, #4
 80047e6:	2201      	movs	r2, #1
 80047e8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ea:	1d3a      	adds	r2, r7, #4
 80047ec:	23a0      	movs	r3, #160	; 0xa0
 80047ee:	05db      	lsls	r3, r3, #23
 80047f0:	0011      	movs	r1, r2
 80047f2:	0018      	movs	r0, r3
 80047f4:	f7fd fe02 	bl	80023fc <HAL_GPIO_Init>
}
 80047f8:	46c0      	nop			; (mov r8, r8)
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b006      	add	sp, #24
 80047fe:	bd80      	pop	{r7, pc}

08004800 <_Z6rdRowsv>:
		b |= 0x02;
	return b;
}

//ROW1->PA.0  ROW2->PA.2
uint8_t rdRows() {
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
	uint32_t w = GPIOA->IDR;
 8004806:	23a0      	movs	r3, #160	; 0xa0
 8004808:	05db      	lsls	r3, r3, #23
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	603b      	str	r3, [r7, #0]
	uint8_t b = (w & ROW1_Pin) ^ ROW1_Pin;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2201      	movs	r2, #1
 8004812:	4013      	ands	r3, r2
 8004814:	425a      	negs	r2, r3
 8004816:	4153      	adcs	r3, r2
 8004818:	b2da      	uxtb	r2, r3
 800481a:	1dfb      	adds	r3, r7, #7
 800481c:	701a      	strb	r2, [r3, #0]
	if ((w & ROW2_Pin) == 0)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2204      	movs	r2, #4
 8004822:	4013      	ands	r3, r2
 8004824:	d105      	bne.n	8004832 <_Z6rdRowsv+0x32>
		b |= 0x02;
 8004826:	1dfb      	adds	r3, r7, #7
 8004828:	1dfa      	adds	r2, r7, #7
 800482a:	7812      	ldrb	r2, [r2, #0]
 800482c:	2102      	movs	r1, #2
 800482e:	430a      	orrs	r2, r1
 8004830:	701a      	strb	r2, [r3, #0]
	return b;
 8004832:	1dfb      	adds	r3, r7, #7
 8004834:	781b      	ldrb	r3, [r3, #0]
}
 8004836:	0018      	movs	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	b002      	add	sp, #8
 800483c:	bd80      	pop	{r7, pc}

0800483e <_Z9hdReadKeyv>:

uint16_t hdReadKey() {
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
	onCol1();
 8004844:	f7ff ff29 	bl	800469a <_Z6onCol1v>
	uint16_t w = rdRows();
 8004848:	f7ff ffda 	bl	8004800 <_Z6rdRowsv>
 800484c:	0003      	movs	r3, r0
 800484e:	001a      	movs	r2, r3
 8004850:	1dbb      	adds	r3, r7, #6
 8004852:	801a      	strh	r2, [r3, #0]
	offCol1();
 8004854:	f7ff ff2b 	bl	80046ae <_Z7offCol1v>
	onCol2();
 8004858:	f7ff ff33 	bl	80046c2 <_Z6onCol2v>
	w |= (rdRows() << 2);
 800485c:	f7ff ffd0 	bl	8004800 <_Z6rdRowsv>
 8004860:	0003      	movs	r3, r0
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	b21a      	sxth	r2, r3
 8004866:	1dbb      	adds	r3, r7, #6
 8004868:	2100      	movs	r1, #0
 800486a:	5e5b      	ldrsh	r3, [r3, r1]
 800486c:	4313      	orrs	r3, r2
 800486e:	b21a      	sxth	r2, r3
 8004870:	1dbb      	adds	r3, r7, #6
 8004872:	801a      	strh	r2, [r3, #0]
	offCol2();
 8004874:	f7ff ff2f 	bl	80046d6 <_Z7offCol2v>
	onCol3();
 8004878:	f7ff ff37 	bl	80046ea <_Z6onCol3v>
	w |= (rdRows() << 4);
 800487c:	f7ff ffc0 	bl	8004800 <_Z6rdRowsv>
 8004880:	0003      	movs	r3, r0
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	b21a      	sxth	r2, r3
 8004886:	1dbb      	adds	r3, r7, #6
 8004888:	2100      	movs	r1, #0
 800488a:	5e5b      	ldrsh	r3, [r3, r1]
 800488c:	4313      	orrs	r3, r2
 800488e:	b21a      	sxth	r2, r3
 8004890:	1dbb      	adds	r3, r7, #6
 8004892:	801a      	strh	r2, [r3, #0]
	offCol3();
 8004894:	f7ff ff33 	bl	80046fe <_Z7offCol3v>
	onCol4();
 8004898:	f7ff ff3b 	bl	8004712 <_Z6onCol4v>
	w |= (rdRows() << 6);
 800489c:	f7ff ffb0 	bl	8004800 <_Z6rdRowsv>
 80048a0:	0003      	movs	r3, r0
 80048a2:	019b      	lsls	r3, r3, #6
 80048a4:	b21a      	sxth	r2, r3
 80048a6:	1dbb      	adds	r3, r7, #6
 80048a8:	2100      	movs	r1, #0
 80048aa:	5e5b      	ldrsh	r3, [r3, r1]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	b21a      	sxth	r2, r3
 80048b0:	1dbb      	adds	r3, r7, #6
 80048b2:	801a      	strh	r2, [r3, #0]
	offCol4();
 80048b4:	f7ff ff37 	bl	8004726 <_Z7offCol4v>
	onCol5();
 80048b8:	f7ff ff3f 	bl	800473a <_Z6onCol5v>
	w |= (rdRows() << 8);
 80048bc:	f7ff ffa0 	bl	8004800 <_Z6rdRowsv>
 80048c0:	0003      	movs	r3, r0
 80048c2:	021b      	lsls	r3, r3, #8
 80048c4:	b21a      	sxth	r2, r3
 80048c6:	1dbb      	adds	r3, r7, #6
 80048c8:	2100      	movs	r1, #0
 80048ca:	5e5b      	ldrsh	r3, [r3, r1]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	b21a      	sxth	r2, r3
 80048d0:	1dbb      	adds	r3, r7, #6
 80048d2:	801a      	strh	r2, [r3, #0]
	offCol5();
 80048d4:	f7ff ff3b 	bl	800474e <_Z7offCol5v>
	return w;
 80048d8:	1dbb      	adds	r3, r7, #6
 80048da:	881b      	ldrh	r3, [r3, #0]
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b002      	add	sp, #8
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <_Z12translateKeyt>:
#define KEY1  (1<<4)
#define KEY2  (1<<2)
#define KEY3  (1<<3)
#define KEY4  (1<<5)

uint16_t translateKey(uint16_t inp) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	0002      	movs	r2, r0
 80048ec:	1dbb      	adds	r3, r7, #6
 80048ee:	801a      	strh	r2, [r3, #0]
	uint16_t w = 0;
 80048f0:	230e      	movs	r3, #14
 80048f2:	18fb      	adds	r3, r7, r3
 80048f4:	2200      	movs	r2, #0
 80048f6:	801a      	strh	r2, [r3, #0]
	if (inp & KEY1)
 80048f8:	1dbb      	adds	r3, r7, #6
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	2210      	movs	r2, #16
 80048fe:	4013      	ands	r3, r2
 8004900:	d006      	beq.n	8004910 <_Z12translateKeyt+0x2c>
		w |= kyUP;
 8004902:	220e      	movs	r2, #14
 8004904:	18bb      	adds	r3, r7, r2
 8004906:	18ba      	adds	r2, r7, r2
 8004908:	8812      	ldrh	r2, [r2, #0]
 800490a:	2108      	movs	r1, #8
 800490c:	430a      	orrs	r2, r1
 800490e:	801a      	strh	r2, [r3, #0]
	if (inp & KEY2)
 8004910:	1dbb      	adds	r3, r7, #6
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	2204      	movs	r2, #4
 8004916:	4013      	ands	r3, r2
 8004918:	d006      	beq.n	8004928 <_Z12translateKeyt+0x44>
		w |= kyDN;
 800491a:	220e      	movs	r2, #14
 800491c:	18bb      	adds	r3, r7, r2
 800491e:	18ba      	adds	r2, r7, r2
 8004920:	8812      	ldrh	r2, [r2, #0]
 8004922:	2110      	movs	r1, #16
 8004924:	430a      	orrs	r2, r1
 8004926:	801a      	strh	r2, [r3, #0]
	if (inp & KEY3)
 8004928:	1dbb      	adds	r3, r7, #6
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	2208      	movs	r2, #8
 800492e:	4013      	ands	r3, r2
 8004930:	d006      	beq.n	8004940 <_Z12translateKeyt+0x5c>
		w |= kyLF;
 8004932:	220e      	movs	r2, #14
 8004934:	18bb      	adds	r3, r7, r2
 8004936:	18ba      	adds	r2, r7, r2
 8004938:	8812      	ldrh	r2, [r2, #0]
 800493a:	2120      	movs	r1, #32
 800493c:	430a      	orrs	r2, r1
 800493e:	801a      	strh	r2, [r3, #0]
	if (inp & KEY4)
 8004940:	1dbb      	adds	r3, r7, #6
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	2220      	movs	r2, #32
 8004946:	4013      	ands	r3, r2
 8004948:	d006      	beq.n	8004958 <_Z12translateKeyt+0x74>
		w |= kyRT;
 800494a:	220e      	movs	r2, #14
 800494c:	18bb      	adds	r3, r7, r2
 800494e:	18ba      	adds	r2, r7, r2
 8004950:	8812      	ldrh	r2, [r2, #0]
 8004952:	2140      	movs	r1, #64	; 0x40
 8004954:	430a      	orrs	r2, r1
 8004956:	801a      	strh	r2, [r3, #0]
	return w;
 8004958:	230e      	movs	r3, #14
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	881b      	ldrh	r3, [r3, #0]
}
 800495e:	0018      	movs	r0, r3
 8004960:	46bd      	mov	sp, r7
 8004962:	b004      	add	sp, #16
 8004964:	bd80      	pop	{r7, pc}

08004966 <_ZN4._85C1Ev>:

struct {
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	0018      	movs	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	b002      	add	sp, #8
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <_Z8checkKeyv>:

} keyRec;

const uint16_t tabRepTm[] = { 5, 500, 250 };

void checkKey() {
 8004980:	b590      	push	{r4, r7, lr}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
	uint16_t key = hdReadKey();
 8004986:	1dbc      	adds	r4, r7, #6
 8004988:	f7ff ff59 	bl	800483e <_Z9hdReadKeyv>
 800498c:	0003      	movs	r3, r0
 800498e:	8023      	strh	r3, [r4, #0]
	if (key != 0) {
 8004990:	1dbb      	adds	r3, r7, #6
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d044      	beq.n	8004a22 <_Z8checkKeyv+0xa2>
		if (++keyRec.counter > tabRepTm[keyRec.repPhase]) {
 8004998:	4b30      	ldr	r3, [pc, #192]	; (8004a5c <_Z8checkKeyv+0xdc>)
 800499a:	895b      	ldrh	r3, [r3, #10]
 800499c:	3301      	adds	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	4b2e      	ldr	r3, [pc, #184]	; (8004a5c <_Z8checkKeyv+0xdc>)
 80049a2:	815a      	strh	r2, [r3, #10]
 80049a4:	4b2d      	ldr	r3, [pc, #180]	; (8004a5c <_Z8checkKeyv+0xdc>)
 80049a6:	895b      	ldrh	r3, [r3, #10]
 80049a8:	4a2c      	ldr	r2, [pc, #176]	; (8004a5c <_Z8checkKeyv+0xdc>)
 80049aa:	7b12      	ldrb	r2, [r2, #12]
 80049ac:	0011      	movs	r1, r2
 80049ae:	4a2c      	ldr	r2, [pc, #176]	; (8004a60 <_Z8checkKeyv+0xe0>)
 80049b0:	0049      	lsls	r1, r1, #1
 80049b2:	5a8a      	ldrh	r2, [r1, r2]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	419b      	sbcs	r3, r3
 80049b8:	425b      	negs	r3, r3
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d02c      	beq.n	8004a1a <_Z8checkKeyv+0x9a>
			keyRec.counter = 0;
 80049c0:	4b26      	ldr	r3, [pc, #152]	; (8004a5c <_Z8checkKeyv+0xdc>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	815a      	strh	r2, [r3, #10]

			if (keyRec.repPhase < 2)
 80049c6:	4b25      	ldr	r3, [pc, #148]	; (8004a5c <_Z8checkKeyv+0xdc>)
 80049c8:	7b1b      	ldrb	r3, [r3, #12]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d805      	bhi.n	80049da <_Z8checkKeyv+0x5a>
				keyRec.repPhase++;
 80049ce:	4b23      	ldr	r3, [pc, #140]	; (8004a5c <_Z8checkKeyv+0xdc>)
 80049d0:	7b1b      	ldrb	r3, [r3, #12]
 80049d2:	3301      	adds	r3, #1
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	4b21      	ldr	r3, [pc, #132]	; (8004a5c <_Z8checkKeyv+0xdc>)
 80049d8:	731a      	strb	r2, [r3, #12]

			if (keyRec.repCnt < 15)
 80049da:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <_Z8checkKeyv+0xdc>)
 80049dc:	7b5b      	ldrb	r3, [r3, #13]
 80049de:	2b0e      	cmp	r3, #14
 80049e0:	d805      	bhi.n	80049ee <_Z8checkKeyv+0x6e>
				keyRec.repCnt++;
 80049e2:	4b1e      	ldr	r3, [pc, #120]	; (8004a5c <_Z8checkKeyv+0xdc>)
 80049e4:	7b5b      	ldrb	r3, [r3, #13]
 80049e6:	3301      	adds	r3, #1
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	4b1c      	ldr	r3, [pc, #112]	; (8004a5c <_Z8checkKeyv+0xdc>)
 80049ec:	735a      	strb	r2, [r3, #13]
			if (keyRec.code_hd != key) {
 80049ee:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <_Z8checkKeyv+0xdc>)
 80049f0:	88db      	ldrh	r3, [r3, #6]
 80049f2:	1dba      	adds	r2, r7, #6
 80049f4:	8812      	ldrh	r2, [r2, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d00c      	beq.n	8004a14 <_Z8checkKeyv+0x94>
				keyRec.code_hd = key;
 80049fa:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <_Z8checkKeyv+0xdc>)
 80049fc:	1dba      	adds	r2, r7, #6
 80049fe:	8812      	ldrh	r2, [r2, #0]
 8004a00:	80da      	strh	r2, [r3, #6]
				keyRec.code = translateKey(key);
 8004a02:	1dbb      	adds	r3, r7, #6
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	0018      	movs	r0, r3
 8004a08:	f7ff ff6c 	bl	80048e4 <_Z12translateKeyt>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	001a      	movs	r2, r3
 8004a10:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <_Z8checkKeyv+0xdc>)
 8004a12:	811a      	strh	r2, [r3, #8]
			}

			keyRec.flag = 1;
 8004a14:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <_Z8checkKeyv+0xdc>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	711a      	strb	r2, [r3, #4]
		}
		keyRec.keyUpCnt = 0;
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <_Z8checkKeyv+0xdc>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	739a      	strb	r2, [r3, #14]
			keyRec.counter = 0;
			keyRec.repPhase = 0;
			keyRec.repCnt = 0;
		}
	}
}
 8004a20:	e017      	b.n	8004a52 <_Z8checkKeyv+0xd2>
		if (++keyRec.keyUpCnt > 50) {
 8004a22:	4b0e      	ldr	r3, [pc, #56]	; (8004a5c <_Z8checkKeyv+0xdc>)
 8004a24:	7b9b      	ldrb	r3, [r3, #14]
 8004a26:	3301      	adds	r3, #1
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <_Z8checkKeyv+0xdc>)
 8004a2c:	739a      	strb	r2, [r3, #14]
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <_Z8checkKeyv+0xdc>)
 8004a30:	7b9b      	ldrb	r3, [r3, #14]
 8004a32:	2232      	movs	r2, #50	; 0x32
 8004a34:	429a      	cmp	r2, r3
 8004a36:	419b      	sbcs	r3, r3
 8004a38:	425b      	negs	r3, r3
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <_Z8checkKeyv+0xd2>
			keyRec.counter = 0;
 8004a40:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <_Z8checkKeyv+0xdc>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	815a      	strh	r2, [r3, #10]
			keyRec.repPhase = 0;
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <_Z8checkKeyv+0xdc>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	731a      	strb	r2, [r3, #12]
			keyRec.repCnt = 0;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <_Z8checkKeyv+0xdc>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	735a      	strb	r2, [r3, #13]
}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b003      	add	sp, #12
 8004a58:	bd90      	pop	{r4, r7, pc}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	200000ec 	.word	0x200000ec
 8004a60:	080057a4 	.word	0x080057a4

08004a64 <_Z10initKeyRecv>:

void initKeyRec() {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
	memset(&keyRec, 0, sizeof(keyRec));
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <_Z10initKeyRecv+0x1c>)
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f000 fe0c 	bl	800568c <memset>
	keyRec.devRdy = 1;
 8004a74:	4b02      	ldr	r3, [pc, #8]	; (8004a80 <_Z10initKeyRecv+0x1c>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	200000ec 	.word	0x200000ec

08004a84 <mySysTick_Handler>:

extern "C" void mySysTick_Handler() {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
	if (keyRec.devRdy) {
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <mySysTick_Handler+0x1c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	1e5a      	subs	r2, r3, #1
 8004a8e:	4193      	sbcs	r3, r2
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <mySysTick_Handler+0x16>
		checkKey();
 8004a96:	f7ff ff73 	bl	8004980 <_Z8checkKeyv>
	}

}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	200000ec 	.word	0x200000ec

08004aa4 <_Z9insertXorPvi>:

//-------------------------------------------------------------------------------
//Utils
//-------------------------------------------------------------------------------

void insertXor(void *ptr, int size) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
	uint32_t *pW = (uint32_t*) ptr;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	617b      	str	r3, [r7, #20]
	int n = (size - 4) / 4;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	3b04      	subs	r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	da00      	bge.n	8004abc <_Z9insertXorPvi+0x18>
 8004aba:	3303      	adds	r3, #3
 8004abc:	109b      	asrs	r3, r3, #2
 8004abe:	60bb      	str	r3, [r7, #8]
	uint32_t xorw = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < n; i++) {
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	da0b      	bge.n	8004ae8 <_Z9insertXorPvi+0x44>
		xorw ^= *pW;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4053      	eors	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
		pW++;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	3304      	adds	r3, #4
 8004ade:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < n; i++) {
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e7ef      	b.n	8004ac8 <_Z9insertXorPvi+0x24>
	}
	*pW = xorw;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	601a      	str	r2, [r3, #0]
}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b006      	add	sp, #24
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <_Z8checkXorPvi>:

bool checkXor(void *p, int len) {
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b086      	sub	sp, #24
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
	uint32_t *pw = (uint32_t*) p;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	617b      	str	r3, [r7, #20]
	int n = len / 4;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	da00      	bge.n	8004b0c <_Z8checkXorPvi+0x16>
 8004b0a:	3303      	adds	r3, #3
 8004b0c:	109b      	asrs	r3, r3, #2
 8004b0e:	60bb      	str	r3, [r7, #8]
	uint32_t xorW = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < n; i++) {
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	da0a      	bge.n	8004b36 <_Z8checkXorPvi+0x40>
		xorW ^= *pw++;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	1d1a      	adds	r2, r3, #4
 8004b24:	617a      	str	r2, [r7, #20]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4053      	eors	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < n; i++) {
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3301      	adds	r3, #1
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e7f0      	b.n	8004b18 <_Z8checkXorPvi+0x22>
	}
	return (xorW == 0);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	425a      	negs	r2, r3
 8004b3a:	4153      	adcs	r3, r2
 8004b3c:	b2db      	uxtb	r3, r3
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b006      	add	sp, #24
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <_Z11writeEEpromPKvPmi>:
const EepDataRob *eepDataDevRob = (EepDataRob*) (DATA_EEPROM_BASE + EEP_DATA2_OFS);

EepDataCfg eepCfg;
EepDataRob eepRob;

HAL_StatusTypeDef writeEEprom(const void *dst, uint32_t *srcPtr, int cnt) {
 8004b48:	b5b0      	push	{r4, r5, r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef st = HAL_DATA_EEPROMEx_Unlock();
 8004b54:	2517      	movs	r5, #23
 8004b56:	197c      	adds	r4, r7, r5
 8004b58:	f7fd fbb0 	bl	80022bc <HAL_FLASHEx_DATAEEPROM_Unlock>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	7023      	strb	r3, [r4, #0]
	if (st == HAL_OK) {
 8004b60:	197b      	adds	r3, r7, r5
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d126      	bne.n	8004bb6 <_Z11writeEEpromPKvPmi+0x6e>
		HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram();
 8004b68:	f7fd fc3a 	bl	80023e0 <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram>

		uint32_t dstAdr = (int) dst;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	613b      	str	r3, [r7, #16]

		while (cnt > 0) {
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	dd19      	ble.n	8004baa <_Z11writeEEpromPKvPmi+0x62>
			st = HAL_DATA_EEPROMEx_Program(FLASH_TYPEPROGRAMDATA_WORD, dstAdr, *srcPtr);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	2517      	movs	r5, #23
 8004b7c:	197c      	adds	r4, r7, r5
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	0019      	movs	r1, r3
 8004b82:	2002      	movs	r0, #2
 8004b84:	f7fd fbd4 	bl	8002330 <HAL_FLASHEx_DATAEEPROM_Program>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	7023      	strb	r3, [r4, #0]
			if (st != HAL_OK)
 8004b8c:	197b      	adds	r3, r7, r5
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d109      	bne.n	8004ba8 <_Z11writeEEpromPKvPmi+0x60>
				break;
			srcPtr++;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	3304      	adds	r3, #4
 8004b98:	60bb      	str	r3, [r7, #8]
			dstAdr += 4;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	613b      	str	r3, [r7, #16]
			cnt -= 4;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3b04      	subs	r3, #4
 8004ba4:	607b      	str	r3, [r7, #4]
		while (cnt > 0) {
 8004ba6:	e7e3      	b.n	8004b70 <_Z11writeEEpromPKvPmi+0x28>
				break;
 8004ba8:	46c0      	nop			; (mov r8, r8)
		}
		st = HAL_DATA_EEPROMEx_Lock();
 8004baa:	2317      	movs	r3, #23
 8004bac:	18fc      	adds	r4, r7, r3
 8004bae:	f7fd fbb1 	bl	8002314 <HAL_FLASHEx_DATAEEPROM_Lock>
 8004bb2:	0003      	movs	r3, r0
 8004bb4:	7023      	strb	r3, [r4, #0]
	}
	if (st != HAL_OK)
 8004bb6:	2317      	movs	r3, #23
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <_Z11writeEEpromPKvPmi+0x7e>
		mGlobError = 1;
 8004bc0:	4b04      	ldr	r3, [pc, #16]	; (8004bd4 <_Z11writeEEpromPKvPmi+0x8c>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]

	return st;
 8004bc6:	2317      	movs	r3, #23
 8004bc8:	18fb      	adds	r3, r7, r3
 8004bca:	781b      	ldrb	r3, [r3, #0]
}
 8004bcc:	0018      	movs	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b006      	add	sp, #24
 8004bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8004bd4:	200000df 	.word	0x200000df

08004bd8 <_Z11writeEepCfgv>:

HAL_StatusTypeDef writeEepCfg() {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
	eepCfg.Sign1 = EEP_SIGN1;
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <_Z11writeEepCfgv+0x30>)
 8004bde:	4a0b      	ldr	r2, [pc, #44]	; (8004c0c <_Z11writeEepCfgv+0x34>)
 8004be0:	601a      	str	r2, [r3, #0]
	eepCfg.Sign2 = EEP_SIGN2;
 8004be2:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <_Z11writeEepCfgv+0x30>)
 8004be4:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <_Z11writeEepCfgv+0x38>)
 8004be6:	609a      	str	r2, [r3, #8]
	insertXor(&eepCfg, sizeof(eepCfg));
 8004be8:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <_Z11writeEepCfgv+0x30>)
 8004bea:	2110      	movs	r1, #16
 8004bec:	0018      	movs	r0, r3
 8004bee:	f7ff ff59 	bl	8004aa4 <_Z9insertXorPvi>
	return writeEEprom(eepDataDevCfg, (uint32_t*) &eepCfg, sizeof(EepDataCfg));
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <_Z11writeEepCfgv+0x3c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4904      	ldr	r1, [pc, #16]	; (8004c08 <_Z11writeEepCfgv+0x30>)
 8004bf8:	2210      	movs	r2, #16
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f7ff ffa4 	bl	8004b48 <_Z11writeEEpromPKvPmi>
 8004c00:	0003      	movs	r3, r0
}
 8004c02:	0018      	movs	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	200000fc 	.word	0x200000fc
 8004c0c:	3456a031 	.word	0x3456a031
 8004c10:	345ee0cc 	.word	0x345ee0cc
 8004c14:	2000000c 	.word	0x2000000c

08004c18 <_Z11writeEepRobv>:

HAL_StatusTypeDef writeEepRob() {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
	eepRob.Sign1 = EEP_SIGN1;
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <_Z11writeEepRobv+0x30>)
 8004c1e:	4a0b      	ldr	r2, [pc, #44]	; (8004c4c <_Z11writeEepRobv+0x34>)
 8004c20:	601a      	str	r2, [r3, #0]
	eepRob.Sign2 = EEP_SIGN2;
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <_Z11writeEepRobv+0x30>)
 8004c24:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <_Z11writeEepRobv+0x38>)
 8004c26:	619a      	str	r2, [r3, #24]
	insertXor(&eepRob, sizeof(eepRob));
 8004c28:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <_Z11writeEepRobv+0x30>)
 8004c2a:	2120      	movs	r1, #32
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7ff ff39 	bl	8004aa4 <_Z9insertXorPvi>
	return writeEEprom(eepDataDevRob, (uint32_t*) &eepRob, sizeof(EepDataRob));
 8004c32:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <_Z11writeEepRobv+0x3c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4904      	ldr	r1, [pc, #16]	; (8004c48 <_Z11writeEepRobv+0x30>)
 8004c38:	2220      	movs	r2, #32
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f7ff ff84 	bl	8004b48 <_Z11writeEEpromPKvPmi>
 8004c40:	0003      	movs	r3, r0
}
 8004c42:	0018      	movs	r0, r3
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	2000010c 	.word	0x2000010c
 8004c4c:	3456a031 	.word	0x3456a031
 8004c50:	345ee0cc 	.word	0x345ee0cc
 8004c54:	20000010 	.word	0x20000010

08004c58 <_Z13checkRadioParhh>:

bool checkRadioPar(uint8_t channelNr, uint8_t txPower) {
 8004c58:	b590      	push	{r4, r7, lr}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	0002      	movs	r2, r0
 8004c60:	1dfb      	adds	r3, r7, #7
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	1dbb      	adds	r3, r7, #6
 8004c66:	1c0a      	adds	r2, r1, #0
 8004c68:	701a      	strb	r2, [r3, #0]
	bool q = true;
 8004c6a:	210f      	movs	r1, #15
 8004c6c:	187b      	adds	r3, r7, r1
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]
	q &= (eepCfg.channelNr >= 1 && eepCfg.channelNr <= 15);
 8004c72:	187b      	adds	r3, r7, r1
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	4a12      	ldr	r2, [pc, #72]	; (8004cc0 <_Z13checkRadioParhh+0x68>)
 8004c78:	7912      	ldrb	r2, [r2, #4]
 8004c7a:	2a00      	cmp	r2, #0
 8004c7c:	d005      	beq.n	8004c8a <_Z13checkRadioParhh+0x32>
 8004c7e:	4a10      	ldr	r2, [pc, #64]	; (8004cc0 <_Z13checkRadioParhh+0x68>)
 8004c80:	7912      	ldrb	r2, [r2, #4]
 8004c82:	2a0f      	cmp	r2, #15
 8004c84:	d801      	bhi.n	8004c8a <_Z13checkRadioParhh+0x32>
 8004c86:	2201      	movs	r2, #1
 8004c88:	e000      	b.n	8004c8c <_Z13checkRadioParhh+0x34>
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	401a      	ands	r2, r3
 8004c8e:	240f      	movs	r4, #15
 8004c90:	193b      	adds	r3, r7, r4
 8004c92:	1e51      	subs	r1, r2, #1
 8004c94:	418a      	sbcs	r2, r1
 8004c96:	701a      	strb	r2, [r3, #0]
	q &= (eepCfg.txPower <= 31);
 8004c98:	193b      	adds	r3, r7, r4
 8004c9a:	781a      	ldrb	r2, [r3, #0]
 8004c9c:	4b08      	ldr	r3, [pc, #32]	; (8004cc0 <_Z13checkRadioParhh+0x68>)
 8004c9e:	7959      	ldrb	r1, [r3, #5]
 8004ca0:	201f      	movs	r0, #31
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	4288      	cmp	r0, r1
 8004ca6:	415b      	adcs	r3, r3
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	401a      	ands	r2, r3
 8004cac:	193b      	adds	r3, r7, r4
 8004cae:	1e51      	subs	r1, r2, #1
 8004cb0:	418a      	sbcs	r2, r1
 8004cb2:	701a      	strb	r2, [r3, #0]
	return q;
 8004cb4:	193b      	adds	r3, r7, r4
 8004cb6:	781b      	ldrb	r3, [r3, #0]
}
 8004cb8:	0018      	movs	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	b005      	add	sp, #20
 8004cbe:	bd90      	pop	{r4, r7, pc}
 8004cc0:	200000fc 	.word	0x200000fc

08004cc4 <_Z10initEepCfgv>:

void initEepCfg() {
 8004cc4:	b590      	push	{r4, r7, lr}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
	eepCfg = *eepDataDevCfg;
 8004cca:	4b30      	ldr	r3, [pc, #192]	; (8004d8c <_Z10initEepCfgv+0xc8>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b30      	ldr	r3, [pc, #192]	; (8004d90 <_Z10initEepCfgv+0xcc>)
 8004cd0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004cd2:	c313      	stmia	r3!, {r0, r1, r4}
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	601a      	str	r2, [r3, #0]
	bool q = true;
 8004cd8:	1dfb      	adds	r3, r7, #7
 8004cda:	2201      	movs	r2, #1
 8004cdc:	701a      	strb	r2, [r3, #0]
	q &= (eepCfg.Sign1 == EEP_SIGN1);
 8004cde:	1dfb      	adds	r3, r7, #7
 8004ce0:	781a      	ldrb	r2, [r3, #0]
 8004ce2:	4b2b      	ldr	r3, [pc, #172]	; (8004d90 <_Z10initEepCfgv+0xcc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	492b      	ldr	r1, [pc, #172]	; (8004d94 <_Z10initEepCfgv+0xd0>)
 8004ce8:	468c      	mov	ip, r1
 8004cea:	4463      	add	r3, ip
 8004cec:	4259      	negs	r1, r3
 8004cee:	414b      	adcs	r3, r1
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	401a      	ands	r2, r3
 8004cf4:	1dfb      	adds	r3, r7, #7
 8004cf6:	1e51      	subs	r1, r2, #1
 8004cf8:	418a      	sbcs	r2, r1
 8004cfa:	701a      	strb	r2, [r3, #0]
	q &= (eepCfg.Sign2 == EEP_SIGN2);
 8004cfc:	1dfb      	adds	r3, r7, #7
 8004cfe:	781a      	ldrb	r2, [r3, #0]
 8004d00:	4b23      	ldr	r3, [pc, #140]	; (8004d90 <_Z10initEepCfgv+0xcc>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	4924      	ldr	r1, [pc, #144]	; (8004d98 <_Z10initEepCfgv+0xd4>)
 8004d06:	468c      	mov	ip, r1
 8004d08:	4463      	add	r3, ip
 8004d0a:	4259      	negs	r1, r3
 8004d0c:	414b      	adcs	r3, r1
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	401a      	ands	r2, r3
 8004d12:	1dfb      	adds	r3, r7, #7
 8004d14:	1e51      	subs	r1, r2, #1
 8004d16:	418a      	sbcs	r2, r1
 8004d18:	701a      	strb	r2, [r3, #0]
	q &= checkRadioPar(eepCfg.channelNr, eepCfg.txPower);
 8004d1a:	4b1d      	ldr	r3, [pc, #116]	; (8004d90 <_Z10initEepCfgv+0xcc>)
 8004d1c:	791a      	ldrb	r2, [r3, #4]
 8004d1e:	4b1c      	ldr	r3, [pc, #112]	; (8004d90 <_Z10initEepCfgv+0xcc>)
 8004d20:	795b      	ldrb	r3, [r3, #5]
 8004d22:	0019      	movs	r1, r3
 8004d24:	0010      	movs	r0, r2
 8004d26:	f7ff ff97 	bl	8004c58 <_Z13checkRadioParhh>
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	1dfb      	adds	r3, r7, #7
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	401a      	ands	r2, r3
 8004d34:	1dfb      	adds	r3, r7, #7
 8004d36:	1e51      	subs	r1, r2, #1
 8004d38:	418a      	sbcs	r2, r1
 8004d3a:	701a      	strb	r2, [r3, #0]
	q &= checkXor(&eepCfg, sizeof(eepCfg));
 8004d3c:	4b14      	ldr	r3, [pc, #80]	; (8004d90 <_Z10initEepCfgv+0xcc>)
 8004d3e:	2110      	movs	r1, #16
 8004d40:	0018      	movs	r0, r3
 8004d42:	f7ff fed8 	bl	8004af6 <_Z8checkXorPvi>
 8004d46:	0003      	movs	r3, r0
 8004d48:	001a      	movs	r2, r3
 8004d4a:	1dfb      	adds	r3, r7, #7
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	401a      	ands	r2, r3
 8004d50:	1dfb      	adds	r3, r7, #7
 8004d52:	1e51      	subs	r1, r2, #1
 8004d54:	418a      	sbcs	r2, r1
 8004d56:	701a      	strb	r2, [r3, #0]

	if (!q) {
 8004d58:	1dfb      	adds	r3, r7, #7
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	4053      	eors	r3, r2
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00d      	beq.n	8004d82 <_Z10initEepCfgv+0xbe>
		memset(&eepCfg, 0, sizeof(eepCfg));
 8004d66:	4b0a      	ldr	r3, [pc, #40]	; (8004d90 <_Z10initEepCfgv+0xcc>)
 8004d68:	2210      	movs	r2, #16
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f000 fc8d 	bl	800568c <memset>
		eepCfg.channelNr = 1;
 8004d72:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <_Z10initEepCfgv+0xcc>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	711a      	strb	r2, [r3, #4]
		eepCfg.txPower = 31;
 8004d78:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <_Z10initEepCfgv+0xcc>)
 8004d7a:	221f      	movs	r2, #31
 8004d7c:	715a      	strb	r2, [r3, #5]
		writeEepCfg();
 8004d7e:	f7ff ff2b 	bl	8004bd8 <_Z11writeEepCfgv>
	}
}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b003      	add	sp, #12
 8004d88:	bd90      	pop	{r4, r7, pc}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	2000000c 	.word	0x2000000c
 8004d90:	200000fc 	.word	0x200000fc
 8004d94:	cba95fcf 	.word	0xcba95fcf
 8004d98:	cba11f34 	.word	0xcba11f34

08004d9c <_Z10initEepRobv>:

void initEepRob() {
 8004d9c:	b590      	push	{r4, r7, lr}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
	eepRob = *eepDataDevRob;
 8004da2:	4b25      	ldr	r3, [pc, #148]	; (8004e38 <_Z10initEepRobv+0x9c>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4b25      	ldr	r3, [pc, #148]	; (8004e3c <_Z10initEepRobv+0xa0>)
 8004da8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004daa:	c313      	stmia	r3!, {r0, r1, r4}
 8004dac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004dae:	c313      	stmia	r3!, {r0, r1, r4}
 8004db0:	ca03      	ldmia	r2!, {r0, r1}
 8004db2:	c303      	stmia	r3!, {r0, r1}
	bool q = true;
 8004db4:	1dfb      	adds	r3, r7, #7
 8004db6:	2201      	movs	r2, #1
 8004db8:	701a      	strb	r2, [r3, #0]
	q &= (eepRob.Sign1 == EEP_SIGN1);
 8004dba:	1dfb      	adds	r3, r7, #7
 8004dbc:	781a      	ldrb	r2, [r3, #0]
 8004dbe:	4b1f      	ldr	r3, [pc, #124]	; (8004e3c <_Z10initEepRobv+0xa0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	491f      	ldr	r1, [pc, #124]	; (8004e40 <_Z10initEepRobv+0xa4>)
 8004dc4:	468c      	mov	ip, r1
 8004dc6:	4463      	add	r3, ip
 8004dc8:	4259      	negs	r1, r3
 8004dca:	414b      	adcs	r3, r1
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	401a      	ands	r2, r3
 8004dd0:	1dfb      	adds	r3, r7, #7
 8004dd2:	1e51      	subs	r1, r2, #1
 8004dd4:	418a      	sbcs	r2, r1
 8004dd6:	701a      	strb	r2, [r3, #0]
	q &= (eepRob.Sign2 == EEP_SIGN2);
 8004dd8:	1dfb      	adds	r3, r7, #7
 8004dda:	781a      	ldrb	r2, [r3, #0]
 8004ddc:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <_Z10initEepRobv+0xa0>)
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	4918      	ldr	r1, [pc, #96]	; (8004e44 <_Z10initEepRobv+0xa8>)
 8004de2:	468c      	mov	ip, r1
 8004de4:	4463      	add	r3, ip
 8004de6:	4259      	negs	r1, r3
 8004de8:	414b      	adcs	r3, r1
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	401a      	ands	r2, r3
 8004dee:	1dfb      	adds	r3, r7, #7
 8004df0:	1e51      	subs	r1, r2, #1
 8004df2:	418a      	sbcs	r2, r1
 8004df4:	701a      	strb	r2, [r3, #0]
	q &= checkXor(&eepRob, sizeof(eepRob));
 8004df6:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <_Z10initEepRobv+0xa0>)
 8004df8:	2120      	movs	r1, #32
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f7ff fe7b 	bl	8004af6 <_Z8checkXorPvi>
 8004e00:	0003      	movs	r3, r0
 8004e02:	001a      	movs	r2, r3
 8004e04:	1dfb      	adds	r3, r7, #7
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	401a      	ands	r2, r3
 8004e0a:	1dfb      	adds	r3, r7, #7
 8004e0c:	1e51      	subs	r1, r2, #1
 8004e0e:	418a      	sbcs	r2, r1
 8004e10:	701a      	strb	r2, [r3, #0]

	if (!q) {
 8004e12:	1dfb      	adds	r3, r7, #7
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2201      	movs	r2, #1
 8004e18:	4053      	eors	r3, r2
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <_Z10initEepRobv+0x94>
		memset(&eepRob, 0, sizeof(eepRob));
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <_Z10initEepRobv+0xa0>)
 8004e22:	2220      	movs	r2, #32
 8004e24:	2100      	movs	r1, #0
 8004e26:	0018      	movs	r0, r3
 8004e28:	f000 fc30 	bl	800568c <memset>
		writeEepRob();
 8004e2c:	f7ff fef4 	bl	8004c18 <_Z11writeEepRobv>
	}
}
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b003      	add	sp, #12
 8004e36:	bd90      	pop	{r4, r7, pc}
 8004e38:	20000010 	.word	0x20000010
 8004e3c:	2000010c 	.word	0x2000010c
 8004e40:	cba95fcf 	.word	0xcba95fcf
 8004e44:	cba11f34 	.word	0xcba11f34

08004e48 <_Z11initEepDatav>:

void initEepData() {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
	initEepCfg();
 8004e4c:	f7ff ff3a 	bl	8004cc4 <_Z10initEepCfgv>
	initEepRob();
 8004e50:	f7ff ffa4 	bl	8004d9c <_Z10initEepRobv>
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <_Z9initRadiov>:
//-------------------------------------------------------------------------------
bool mSetupMode = false;
bool mReciverOn = false;
bool mDoOff = false;

void initRadio() {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
	RFMCfg cfg;

	cfg.ChannelFreq = RFM69::getChannelFreq(eepCfg.channelNr);
 8004e62:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <_Z9initRadiov+0x4c>)
 8004e64:	791b      	ldrb	r3, [r3, #4]
 8004e66:	0018      	movs	r0, r3
 8004e68:	f7fe fd3c 	bl	80038e4 <_ZN5RFM6914getChannelFreqEi>
 8004e6c:	0002      	movs	r2, r0
 8004e6e:	003b      	movs	r3, r7
 8004e70:	601a      	str	r2, [r3, #0]
	cfg.BaudRate = bd19200;
 8004e72:	003b      	movs	r3, r7
 8004e74:	2201      	movs	r2, #1
 8004e76:	711a      	strb	r2, [r3, #4]
	cfg.TxPower = eepCfg.txPower;
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <_Z9initRadiov+0x4c>)
 8004e7a:	795a      	ldrb	r2, [r3, #5]
 8004e7c:	003b      	movs	r3, r7
 8004e7e:	715a      	strb	r2, [r3, #5]
	cfg.PAMode = paMode1;
 8004e80:	003b      	movs	r3, r7
 8004e82:	2200      	movs	r2, #0
 8004e84:	719a      	strb	r2, [r3, #6]

	RFM69::Init(&cfg);
 8004e86:	003b      	movs	r3, r7
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7fe fd3d 	bl	8003908 <_ZN5RFM694InitEPK6RFMCfg>
	if (!mReciverOn) {
 8004e8e:	4b07      	ldr	r3, [pc, #28]	; (8004eac <_Z9initRadiov+0x50>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2201      	movs	r2, #1
 8004e94:	4053      	eors	r3, r2
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <_Z9initRadiov+0x44>
		RFM69::setStandByMode();
 8004e9c:	f7ff faaa 	bl	80043f4 <_ZN5RFM6914setStandByModeEv>
	}
}
 8004ea0:	46c0      	nop			; (mov r8, r8)
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	b002      	add	sp, #8
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	200000fc 	.word	0x200000fc
 8004eac:	2000012d 	.word	0x2000012d

08004eb0 <_Z14initRadioSetupv>:

void initRadioSetup() {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
	RFMCfg cfg;

	cfg.ChannelFreq = RFM69::getChannelFreq(0);
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	f7fe fd14 	bl	80038e4 <_ZN5RFM6914getChannelFreqEi>
 8004ebc:	0002      	movs	r2, r0
 8004ebe:	003b      	movs	r3, r7
 8004ec0:	601a      	str	r2, [r3, #0]
	cfg.BaudRate = bd19200;
 8004ec2:	003b      	movs	r3, r7
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	711a      	strb	r2, [r3, #4]
	cfg.TxPower = 31;
 8004ec8:	003b      	movs	r3, r7
 8004eca:	221f      	movs	r2, #31
 8004ecc:	715a      	strb	r2, [r3, #5]
	cfg.PAMode = paMode1;
 8004ece:	003b      	movs	r3, r7
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	719a      	strb	r2, [r3, #6]

	RFM69::Init(&cfg);
 8004ed4:	003b      	movs	r3, r7
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f7fe fd16 	bl	8003908 <_ZN5RFM694InitEPK6RFMCfg>
}
 8004edc:	46c0      	nop			; (mov r8, r8)
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	b002      	add	sp, #8
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <_Z10sendPacketPvi>:

uint16_t keySendCnt = 0;

void sendPacket(void *ptr, int size) {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
	Pilot_DataBegin *pBg = (Pilot_DataBegin*) ptr;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	60fb      	str	r3, [r7, #12]
	pBg->Sign = PILOT_SIGN;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	781a      	ldrb	r2, [r3, #0]
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	400a      	ands	r2, r1
 8004efa:	1c11      	adds	r1, r2, #0
 8004efc:	2212      	movs	r2, #18
 8004efe:	430a      	orrs	r2, r1
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	785a      	ldrb	r2, [r3, #1]
 8004f04:	2100      	movs	r1, #0
 8004f06:	400a      	ands	r2, r1
 8004f08:	1c11      	adds	r1, r2, #0
 8004f0a:	2251      	movs	r2, #81	; 0x51
 8004f0c:	4252      	negs	r2, r2
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	705a      	strb	r2, [r3, #1]
 8004f12:	789a      	ldrb	r2, [r3, #2]
 8004f14:	2100      	movs	r1, #0
 8004f16:	400a      	ands	r2, r1
 8004f18:	1c11      	adds	r1, r2, #0
 8004f1a:	2207      	movs	r2, #7
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	709a      	strb	r2, [r3, #2]
 8004f20:	78da      	ldrb	r2, [r3, #3]
 8004f22:	2100      	movs	r1, #0
 8004f24:	400a      	ands	r2, r1
 8004f26:	1c11      	adds	r1, r2, #0
 8004f28:	225b      	movs	r2, #91	; 0x5b
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	70da      	strb	r2, [r3, #3]
	insertXor(ptr, size);
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	0011      	movs	r1, r2
 8004f34:	0018      	movs	r0, r3
 8004f36:	f7ff fdb5 	bl	8004aa4 <_Z9insertXorPvi>

	RFM69::sendPacket(PILOT_SRC_PILOT, ptr, size);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	0019      	movs	r1, r3
 8004f42:	2001      	movs	r0, #1
 8004f44:	f7ff f86d 	bl	8004022 <_ZN5RFM6910sendPacketEhPKvh>
	if (!mReciverOn) {
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <_Z10sendPacketPvi+0x94>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	4053      	eors	r3, r2
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <_Z10sendPacketPvi+0x76>
		RFM69::setStandByMode();
 8004f56:	f7ff fa4d 	bl	80043f4 <_ZN5RFM6914setStandByModeEv>
	}
	keySendCnt++;
 8004f5a:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <_Z10sendPacketPvi+0x98>)
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <_Z10sendPacketPvi+0x98>)
 8004f64:	801a      	strh	r2, [r3, #0]
	eepRob.keyGlobSendCnt++;
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <_Z10sendPacketPvi+0x9c>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <_Z10sendPacketPvi+0x9c>)
 8004f6e:	605a      	str	r2, [r3, #4]
}
 8004f70:	46c0      	nop			; (mov r8, r8)
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b004      	add	sp, #16
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	2000012d 	.word	0x2000012d
 8004f7c:	20000130 	.word	0x20000130
 8004f80:	2000010c 	.word	0x2000010c

08004f84 <_Z10sendKeyMsgth>:

void sendKeyMsg(uint16_t code, uint8_t repCnt) {
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	1dbb      	adds	r3, r7, #6
 8004f8e:	801a      	strh	r2, [r3, #0]
 8004f90:	1d7b      	adds	r3, r7, #5
 8004f92:	1c0a      	adds	r2, r1, #0
 8004f94:	701a      	strb	r2, [r3, #0]
	Pilot_DataStruct pkt;

	memset(&pkt, 0, sizeof(pkt));
 8004f96:	2108      	movs	r1, #8
 8004f98:	000c      	movs	r4, r1
 8004f9a:	187b      	adds	r3, r7, r1
 8004f9c:	2210      	movs	r2, #16
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f000 fb73 	bl	800568c <memset>
	pkt.cmd = plcmdDATA;
 8004fa6:	0021      	movs	r1, r4
 8004fa8:	187b      	adds	r3, r7, r1
 8004faa:	2201      	movs	r2, #1
 8004fac:	711a      	strb	r2, [r3, #4]
	pkt.key_code = code;
 8004fae:	187b      	adds	r3, r7, r1
 8004fb0:	1dba      	adds	r2, r7, #6
 8004fb2:	8812      	ldrh	r2, [r2, #0]
 8004fb4:	811a      	strh	r2, [r3, #8]
	pkt.n_key_code = ~code;
 8004fb6:	1dbb      	adds	r3, r7, #6
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	187b      	adds	r3, r7, r1
 8004fc0:	815a      	strh	r2, [r3, #10]
	pkt.repCnt = repCnt;
 8004fc2:	187b      	adds	r3, r7, r1
 8004fc4:	1d7a      	adds	r2, r7, #5
 8004fc6:	7812      	ldrb	r2, [r2, #0]
 8004fc8:	715a      	strb	r2, [r3, #5]
	pkt.keySendCnt = keySendCnt;
 8004fca:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <_Z10sendKeyMsgth+0x60>)
 8004fcc:	881a      	ldrh	r2, [r3, #0]
 8004fce:	187b      	adds	r3, r7, r1
 8004fd0:	80da      	strh	r2, [r3, #6]
	sendPacket(&pkt, sizeof(pkt));
 8004fd2:	187b      	adds	r3, r7, r1
 8004fd4:	2110      	movs	r1, #16
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f7ff ff84 	bl	8004ee4 <_Z10sendPacketPvi>
}
 8004fdc:	46c0      	nop			; (mov r8, r8)
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b007      	add	sp, #28
 8004fe2:	bd90      	pop	{r4, r7, pc}
 8004fe4:	20000130 	.word	0x20000130

08004fe8 <_Z11sendInfoMsgv>:

void sendInfoMsg() {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
	Pilot_InfoStruct pkt;
	memset(&pkt, 0, sizeof(pkt));
 8004fee:	1d3b      	adds	r3, r7, #4
 8004ff0:	221c      	movs	r2, #28
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f000 fb49 	bl	800568c <memset>
	pkt.cmd = plcmdINFO;
 8004ffa:	1d3b      	adds	r3, r7, #4
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	711a      	strb	r2, [r3, #4]
	pkt.firmVer = mSoftVer.ver;
 8005000:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <_Z11sendInfoMsgv+0x58>)
 8005002:	881a      	ldrh	r2, [r3, #0]
 8005004:	1d3b      	adds	r3, r7, #4
 8005006:	811a      	strh	r2, [r3, #8]
	pkt.firmRev = mSoftVer.rev;
 8005008:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <_Z11sendInfoMsgv+0x58>)
 800500a:	885a      	ldrh	r2, [r3, #2]
 800500c:	1d3b      	adds	r3, r7, #4
 800500e:	815a      	strh	r2, [r3, #10]
	pkt.startCnt = eepRob.startCnt;
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <_Z11sendInfoMsgv+0x5c>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	001a      	movs	r2, r3
 8005016:	1d3b      	adds	r3, r7, #4
 8005018:	60da      	str	r2, [r3, #12]
	pkt.keyGlobSendCnt = eepRob.keyGlobSendCnt;
 800501a:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <_Z11sendInfoMsgv+0x5c>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	001a      	movs	r2, r3
 8005020:	1d3b      	adds	r3, r7, #4
 8005022:	611a      	str	r2, [r3, #16]
	pkt.PackTime = eepRob.clearCntTime;
 8005024:	4b07      	ldr	r3, [pc, #28]	; (8005044 <_Z11sendInfoMsgv+0x5c>)
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	1d3b      	adds	r3, r7, #4
 800502a:	615a      	str	r2, [r3, #20]

	sendPacket(&pkt, sizeof(pkt));
 800502c:	1d3b      	adds	r3, r7, #4
 800502e:	211c      	movs	r1, #28
 8005030:	0018      	movs	r0, r3
 8005032:	f7ff ff57 	bl	8004ee4 <_Z10sendPacketPvi>
}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	46bd      	mov	sp, r7
 800503a:	b008      	add	sp, #32
 800503c:	bd80      	pop	{r7, pc}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	200000e0 	.word	0x200000e0
 8005044:	2000010c 	.word	0x2000010c

08005048 <_Z13sendChipIDMsgv>:

void sendChipIDMsg() {
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
	Pilot_ChipIDStruct pkt;
	memset(&pkt, 0, sizeof(pkt));
 800504e:	003b      	movs	r3, r7
 8005050:	2218      	movs	r2, #24
 8005052:	2100      	movs	r1, #0
 8005054:	0018      	movs	r0, r3
 8005056:	f000 fb19 	bl	800568c <memset>
	pkt.cmd = plcmdCHIP_SN;
 800505a:	003b      	movs	r3, r7
 800505c:	2208      	movs	r2, #8
 800505e:	711a      	strb	r2, [r3, #4]
	pkt.ChipID[0] = HAL_GetUIDw0();
 8005060:	f7fc ff4c 	bl	8001efc <HAL_GetUIDw0>
 8005064:	0002      	movs	r2, r0
 8005066:	003b      	movs	r3, r7
 8005068:	609a      	str	r2, [r3, #8]
	pkt.ChipID[1] = HAL_GetUIDw1();
 800506a:	f7fc ff51 	bl	8001f10 <HAL_GetUIDw1>
 800506e:	0002      	movs	r2, r0
 8005070:	003b      	movs	r3, r7
 8005072:	60da      	str	r2, [r3, #12]
	pkt.ChipID[2] = HAL_GetUIDw2();
 8005074:	f7fc ff56 	bl	8001f24 <HAL_GetUIDw2>
 8005078:	0002      	movs	r2, r0
 800507a:	003b      	movs	r3, r7
 800507c:	611a      	str	r2, [r3, #16]

	sendPacket(&pkt, sizeof(pkt));
 800507e:	003b      	movs	r3, r7
 8005080:	2118      	movs	r1, #24
 8005082:	0018      	movs	r0, r3
 8005084:	f7ff ff2e 	bl	8004ee4 <_Z10sendPacketPvi>
}
 8005088:	46c0      	nop			; (mov r8, r8)
 800508a:	46bd      	mov	sp, r7
 800508c:	b006      	add	sp, #24
 800508e:	bd80      	pop	{r7, pc}

08005090 <_Z11sendExitMsgv>:

void sendExitMsg() {
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
	Pilot_CmdStruct pkt;

	memset(&pkt, 0, sizeof(pkt));
 8005096:	003b      	movs	r3, r7
 8005098:	2210      	movs	r2, #16
 800509a:	2100      	movs	r1, #0
 800509c:	0018      	movs	r0, r3
 800509e:	f000 faf5 	bl	800568c <memset>
	pkt.cmd = plcmdEXIT_SETUP;
 80050a2:	003b      	movs	r3, r7
 80050a4:	2207      	movs	r2, #7
 80050a6:	711a      	strb	r2, [r3, #4]
	pkt.cmdNr = 1;
 80050a8:	003b      	movs	r3, r7
 80050aa:	2201      	movs	r2, #1
 80050ac:	715a      	strb	r2, [r3, #5]
	sendPacket(&pkt, sizeof(pkt));
 80050ae:	003b      	movs	r3, r7
 80050b0:	2110      	movs	r1, #16
 80050b2:	0018      	movs	r0, r3
 80050b4:	f7ff ff16 	bl	8004ee4 <_Z10sendPacketPvi>
}
 80050b8:	46c0      	nop			; (mov r8, r8)
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b004      	add	sp, #16
 80050be:	bd80      	pop	{r7, pc}

080050c0 <_Z10sendAckMsghhh>:

void sendAckMsg(uint8_t ackCmd, uint8_t ackCmdNr, uint8_t ackError) {
 80050c0:	b590      	push	{r4, r7, lr}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	0004      	movs	r4, r0
 80050c8:	0008      	movs	r0, r1
 80050ca:	0011      	movs	r1, r2
 80050cc:	1dfb      	adds	r3, r7, #7
 80050ce:	1c22      	adds	r2, r4, #0
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	1dbb      	adds	r3, r7, #6
 80050d4:	1c02      	adds	r2, r0, #0
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	1d7b      	adds	r3, r7, #5
 80050da:	1c0a      	adds	r2, r1, #0
 80050dc:	701a      	strb	r2, [r3, #0]
	Pilot_AckStruct pkt;
	memset(&pkt, 0, sizeof(pkt));
 80050de:	2108      	movs	r1, #8
 80050e0:	000c      	movs	r4, r1
 80050e2:	187b      	adds	r3, r7, r1
 80050e4:	2210      	movs	r2, #16
 80050e6:	2100      	movs	r1, #0
 80050e8:	0018      	movs	r0, r3
 80050ea:	f000 facf 	bl	800568c <memset>
	pkt.cmd = plcmdACK;
 80050ee:	0021      	movs	r1, r4
 80050f0:	187b      	adds	r3, r7, r1
 80050f2:	2203      	movs	r2, #3
 80050f4:	711a      	strb	r2, [r3, #4]
	pkt.ackCmd = ackCmd;
 80050f6:	187b      	adds	r3, r7, r1
 80050f8:	1dfa      	adds	r2, r7, #7
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	715a      	strb	r2, [r3, #5]
	pkt.ackCmdNr = ackCmdNr;
 80050fe:	187b      	adds	r3, r7, r1
 8005100:	1dba      	adds	r2, r7, #6
 8005102:	7812      	ldrb	r2, [r2, #0]
 8005104:	719a      	strb	r2, [r3, #6]
	pkt.ackError = ackError;
 8005106:	187b      	adds	r3, r7, r1
 8005108:	1d7a      	adds	r2, r7, #5
 800510a:	7812      	ldrb	r2, [r2, #0]
 800510c:	71da      	strb	r2, [r3, #7]

	sendPacket(&pkt, sizeof(pkt));
 800510e:	187b      	adds	r3, r7, r1
 8005110:	2110      	movs	r1, #16
 8005112:	0018      	movs	r0, r3
 8005114:	f7ff fee6 	bl	8004ee4 <_Z10sendPacketPvi>
}
 8005118:	46c0      	nop			; (mov r8, r8)
 800511a:	46bd      	mov	sp, r7
 800511c:	b007      	add	sp, #28
 800511e:	bd90      	pop	{r4, r7, pc}

08005120 <_Z17execNewRadioFramev>:

bool execNewRadioFrame() {
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
	if (pilotCheckFrame(RFM69::recVar.DataBuf, RFM69::recVar.DataLen)) {
 8005126:	4b5f      	ldr	r3, [pc, #380]	; (80052a4 <_Z17execNewRadioFramev+0x184>)
 8005128:	785b      	ldrb	r3, [r3, #1]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	001a      	movs	r2, r3
 800512e:	4b5e      	ldr	r3, [pc, #376]	; (80052a8 <_Z17execNewRadioFramev+0x188>)
 8005130:	0011      	movs	r1, r2
 8005132:	0018      	movs	r0, r3
 8005134:	f7ff f918 	bl	8004368 <pilotCheckFrame>
 8005138:	0003      	movs	r3, r0
 800513a:	1e5a      	subs	r2, r3, #1
 800513c:	4193      	sbcs	r3, r2
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d100      	bne.n	8005146 <_Z17execNewRadioFramev+0x26>
 8005144:	e0a9      	b.n	800529a <_Z17execNewRadioFramev+0x17a>
		Pilot_DataBegin *pBg = (Pilot_DataBegin*) RFM69::recVar.DataBuf;
 8005146:	4b58      	ldr	r3, [pc, #352]	; (80052a8 <_Z17execNewRadioFramev+0x188>)
 8005148:	613b      	str	r3, [r7, #16]
		switch (pBg->cmd) {
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	791b      	ldrb	r3, [r3, #4]
 800514e:	2b05      	cmp	r3, #5
 8005150:	d058      	beq.n	8005204 <_Z17execNewRadioFramev+0xe4>
 8005152:	dc02      	bgt.n	800515a <_Z17execNewRadioFramev+0x3a>
 8005154:	2b04      	cmp	r3, #4
 8005156:	d007      	beq.n	8005168 <_Z17execNewRadioFramev+0x48>
 8005158:	e09f      	b.n	800529a <_Z17execNewRadioFramev+0x17a>
 800515a:	2b06      	cmp	r3, #6
 800515c:	d100      	bne.n	8005160 <_Z17execNewRadioFramev+0x40>
 800515e:	e079      	b.n	8005254 <_Z17execNewRadioFramev+0x134>
 8005160:	2b09      	cmp	r3, #9
 8005162:	d100      	bne.n	8005166 <_Z17execNewRadioFramev+0x46>
 8005164:	e089      	b.n	800527a <_Z17execNewRadioFramev+0x15a>
 8005166:	e098      	b.n	800529a <_Z17execNewRadioFramev+0x17a>
		case plcmdSETUP: { // {-->P} ramka konfiguracyjna do pilota
			Pilot_SetupStruct *pSet = (Pilot_SetupStruct*) pBg;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	607b      	str	r3, [r7, #4]
			uint8_t err = plerrBAD_ARG;
 800516c:	2317      	movs	r3, #23
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	2201      	movs	r2, #1
 8005172:	701a      	strb	r2, [r3, #0]
			if ((pSet->channelNr ^ pSet->n_channelNr) == 0xFF) {
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	795a      	ldrb	r2, [r3, #5]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	799b      	ldrb	r3, [r3, #6]
 800517c:	4053      	eors	r3, r2
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2bff      	cmp	r3, #255	; 0xff
 8005182:	d121      	bne.n	80051c8 <_Z17execNewRadioFramev+0xa8>
				if (checkRadioPar(pSet->channelNr, pSet->txPower)) {
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	795a      	ldrb	r2, [r3, #5]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	79db      	ldrb	r3, [r3, #7]
 800518c:	0019      	movs	r1, r3
 800518e:	0010      	movs	r0, r2
 8005190:	f7ff fd62 	bl	8004c58 <_Z13checkRadioParhh>
 8005194:	1e03      	subs	r3, r0, #0
 8005196:	d017      	beq.n	80051c8 <_Z17execNewRadioFramev+0xa8>
					err = plerrOK;
 8005198:	2317      	movs	r3, #23
 800519a:	18fb      	adds	r3, r7, r3
 800519c:	2200      	movs	r2, #0
 800519e:	701a      	strb	r2, [r3, #0]
					eepCfg.channelNr = pSet->channelNr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	795a      	ldrb	r2, [r3, #5]
 80051a4:	4b41      	ldr	r3, [pc, #260]	; (80052ac <_Z17execNewRadioFramev+0x18c>)
 80051a6:	711a      	strb	r2, [r3, #4]
					eepCfg.txPower = pSet->txPower;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	79da      	ldrb	r2, [r3, #7]
 80051ac:	4b3f      	ldr	r3, [pc, #252]	; (80052ac <_Z17execNewRadioFramev+0x18c>)
 80051ae:	715a      	strb	r2, [r3, #5]

					if (writeEepCfg() != HAL_OK)
 80051b0:	f7ff fd12 	bl	8004bd8 <_Z11writeEepCfgv>
 80051b4:	0003      	movs	r3, r0
 80051b6:	1e5a      	subs	r2, r3, #1
 80051b8:	4193      	sbcs	r3, r2
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <_Z17execNewRadioFramev+0xa8>
						err = plerrFLASH_ERR;
 80051c0:	2317      	movs	r3, #23
 80051c2:	18fb      	adds	r3, r7, r3
 80051c4:	2202      	movs	r2, #2
 80051c6:	701a      	strb	r2, [r3, #0]
				}

			}
			sendAckMsg(plcmdSETUP, pSet->cmdNr, err);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	7a1a      	ldrb	r2, [r3, #8]
 80051cc:	7a59      	ldrb	r1, [r3, #9]
 80051ce:	0209      	lsls	r1, r1, #8
 80051d0:	430a      	orrs	r2, r1
 80051d2:	7a99      	ldrb	r1, [r3, #10]
 80051d4:	0409      	lsls	r1, r1, #16
 80051d6:	430a      	orrs	r2, r1
 80051d8:	7adb      	ldrb	r3, [r3, #11]
 80051da:	061b      	lsls	r3, r3, #24
 80051dc:	4313      	orrs	r3, r2
 80051de:	b2d9      	uxtb	r1, r3
 80051e0:	2417      	movs	r4, #23
 80051e2:	193b      	adds	r3, r7, r4
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	001a      	movs	r2, r3
 80051e8:	2004      	movs	r0, #4
 80051ea:	f7ff ff69 	bl	80050c0 <_Z10sendAckMsghhh>
			if (err == plerrOK) {
 80051ee:	193b      	adds	r3, r7, r4
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d150      	bne.n	8005298 <_Z17execNewRadioFramev+0x178>
				HAL_Delay(500);
 80051f6:	23fa      	movs	r3, #250	; 0xfa
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	0018      	movs	r0, r3
 80051fc:	f7fc fe5c 	bl	8001eb8 <HAL_Delay>
				return true;
 8005200:	2301      	movs	r3, #1
 8005202:	e04b      	b.n	800529c <_Z17execNewRadioFramev+0x17c>
			}
		}
			break;
		case plcmdCLR_CNT: { // {-->P} rozkaz kasowania liczników
			Pilot_CmdStruct *pCmd = (Pilot_CmdStruct*) pBg;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	60bb      	str	r3, [r7, #8]
			eepRob.clearCntTime = pCmd->PackTime;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	7a1a      	ldrb	r2, [r3, #8]
 800520c:	7a59      	ldrb	r1, [r3, #9]
 800520e:	0209      	lsls	r1, r1, #8
 8005210:	430a      	orrs	r2, r1
 8005212:	7a99      	ldrb	r1, [r3, #10]
 8005214:	0409      	lsls	r1, r1, #16
 8005216:	430a      	orrs	r2, r1
 8005218:	7adb      	ldrb	r3, [r3, #11]
 800521a:	061b      	lsls	r3, r3, #24
 800521c:	4313      	orrs	r3, r2
 800521e:	001a      	movs	r2, r3
 8005220:	4b23      	ldr	r3, [pc, #140]	; (80052b0 <_Z17execNewRadioFramev+0x190>)
 8005222:	60da      	str	r2, [r3, #12]
			eepRob.keyGlobSendCnt = 0;
 8005224:	4b22      	ldr	r3, [pc, #136]	; (80052b0 <_Z17execNewRadioFramev+0x190>)
 8005226:	2200      	movs	r2, #0
 8005228:	605a      	str	r2, [r3, #4]
			eepRob.startCnt = 0;
 800522a:	4b21      	ldr	r3, [pc, #132]	; (80052b0 <_Z17execNewRadioFramev+0x190>)
 800522c:	2200      	movs	r2, #0
 800522e:	609a      	str	r2, [r3, #8]
			setLed1(1);
 8005230:	2001      	movs	r0, #1
 8005232:	f7ff fa13 	bl	800465c <_Z7setLed1h>
			HAL_Delay(200);
 8005236:	20c8      	movs	r0, #200	; 0xc8
 8005238:	f7fc fe3e 	bl	8001eb8 <HAL_Delay>
			sendAckMsg(pCmd->cmd, pCmd->cmdNr, plerrOK);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	7918      	ldrb	r0, [r3, #4]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	795b      	ldrb	r3, [r3, #5]
 8005244:	2200      	movs	r2, #0
 8005246:	0019      	movs	r1, r3
 8005248:	f7ff ff3a 	bl	80050c0 <_Z10sendAckMsghhh>
			setLed1(0);
 800524c:	2000      	movs	r0, #0
 800524e:	f7ff fa05 	bl	800465c <_Z7setLed1h>
		}
			break;
 8005252:	e022      	b.n	800529a <_Z17execNewRadioFramev+0x17a>
		case plcmdGET_INFO: { // {-->P} wyślij info rekord
			setLed1(1);
 8005254:	2001      	movs	r0, #1
 8005256:	f7ff fa01 	bl	800465c <_Z7setLed1h>
			HAL_Delay(100);
 800525a:	2064      	movs	r0, #100	; 0x64
 800525c:	f7fc fe2c 	bl	8001eb8 <HAL_Delay>
			sendInfoMsg();
 8005260:	f7ff fec2 	bl	8004fe8 <_Z11sendInfoMsgv>
			HAL_Delay(300);
 8005264:	2396      	movs	r3, #150	; 0x96
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	0018      	movs	r0, r3
 800526a:	f7fc fe25 	bl	8001eb8 <HAL_Delay>
			sendChipIDMsg();
 800526e:	f7ff feeb 	bl	8005048 <_Z13sendChipIDMsgv>
			setLed1(0);
 8005272:	2000      	movs	r0, #0
 8005274:	f7ff f9f2 	bl	800465c <_Z7setLed1h>
			break;
 8005278:	e00f      	b.n	800529a <_Z17execNewRadioFramev+0x17a>
		}
			break;
		case plcmdGO_SLEEP: {
			Pilot_CmdStruct *pCmd = (Pilot_CmdStruct*) pBg;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	60fb      	str	r3, [r7, #12]
			sendAckMsg(pCmd->cmd, pCmd->cmdNr, plerrOK);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	7918      	ldrb	r0, [r3, #4]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	795b      	ldrb	r3, [r3, #5]
 8005286:	2200      	movs	r2, #0
 8005288:	0019      	movs	r1, r3
 800528a:	f7ff ff19 	bl	80050c0 <_Z10sendAckMsghhh>
			mDoOff = true;
 800528e:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <_Z17execNewRadioFramev+0x194>)
 8005290:	2201      	movs	r2, #1
 8005292:	701a      	strb	r2, [r3, #0]

		}
			return true;
 8005294:	2301      	movs	r3, #1
 8005296:	e001      	b.n	800529c <_Z17execNewRadioFramev+0x17c>
			break;
 8005298:	46c0      	nop			; (mov r8, r8)
		}
	}

	return false;
 800529a:	2300      	movs	r3, #0
}
 800529c:	0018      	movs	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	b007      	add	sp, #28
 80052a2:	bd90      	pop	{r4, r7, pc}
 80052a4:	2000008c 	.word	0x2000008c
 80052a8:	20000098 	.word	0x20000098
 80052ac:	200000fc 	.word	0x200000fc
 80052b0:	2000010c 	.word	0x2000010c
 80052b4:	2000012e 	.word	0x2000012e

080052b8 <_Z10showSelfNrv>:

#define ENTER_SERVICE_CODE (kyLF | kyRT)
#define EXIT_SERVICE_CODE kyUP
#define SHOW_NR_CODE (kyUP | kyDN)

void showSelfNr() {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
	HAL_Delay(1000); //sekunda przerwy już była
 80052be:	23fa      	movs	r3, #250	; 0xfa
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	0018      	movs	r0, r3
 80052c4:	f7fc fdf8 	bl	8001eb8 <HAL_Delay>
	setLed1(1);
 80052c8:	2001      	movs	r0, #1
 80052ca:	f7ff f9c7 	bl	800465c <_Z7setLed1h>
	HAL_Delay(1000);
 80052ce:	23fa      	movs	r3, #250	; 0xfa
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	0018      	movs	r0, r3
 80052d4:	f7fc fdf0 	bl	8001eb8 <HAL_Delay>
	setLed1(0);
 80052d8:	2000      	movs	r0, #0
 80052da:	f7ff f9bf 	bl	800465c <_Z7setLed1h>
	HAL_Delay(1000);
 80052de:	23fa      	movs	r3, #250	; 0xfa
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	0018      	movs	r0, r3
 80052e4:	f7fc fde8 	bl	8001eb8 <HAL_Delay>
	for (int i = 0; i < eepCfg.channelNr; i++) {
 80052e8:	2300      	movs	r3, #0
 80052ea:	607b      	str	r3, [r7, #4]
 80052ec:	4b0f      	ldr	r3, [pc, #60]	; (800532c <_Z10showSelfNrv+0x74>)
 80052ee:	791b      	ldrb	r3, [r3, #4]
 80052f0:	001a      	movs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4293      	cmp	r3, r2
 80052f6:	da11      	bge.n	800531c <_Z10showSelfNrv+0x64>
		setLed1(1);
 80052f8:	2001      	movs	r0, #1
 80052fa:	f7ff f9af 	bl	800465c <_Z7setLed1h>
		HAL_Delay(100);
 80052fe:	2064      	movs	r0, #100	; 0x64
 8005300:	f7fc fdda 	bl	8001eb8 <HAL_Delay>
		setLed1(0);
 8005304:	2000      	movs	r0, #0
 8005306:	f7ff f9a9 	bl	800465c <_Z7setLed1h>
		HAL_Delay(500);
 800530a:	23fa      	movs	r3, #250	; 0xfa
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	0018      	movs	r0, r3
 8005310:	f7fc fdd2 	bl	8001eb8 <HAL_Delay>
	for (int i = 0; i < eepCfg.channelNr; i++) {
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3301      	adds	r3, #1
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	e7e7      	b.n	80052ec <_Z10showSelfNrv+0x34>
	}
	HAL_Delay(1500);
 800531c:	4b04      	ldr	r3, [pc, #16]	; (8005330 <_Z10showSelfNrv+0x78>)
 800531e:	0018      	movs	r0, r3
 8005320:	f7fc fdca 	bl	8001eb8 <HAL_Delay>
}
 8005324:	46c0      	nop			; (mov r8, r8)
 8005326:	46bd      	mov	sp, r7
 8005328:	b002      	add	sp, #8
 800532a:	bd80      	pop	{r7, pc}
 800532c:	200000fc 	.word	0x200000fc
 8005330:	000005dc 	.word	0x000005dc

08005334 <_Z8workLoopv>:

void workLoop(void) {
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
	ColsAsOpenDrian();
 800533a:	f7ff fa21 	bl	8004780 <_Z15ColsAsOpenDrianv>
	allColOff();
 800533e:	f7ff fa10 	bl	8004762 <_Z9allColOffv>
	RowsAsInp();
 8005342:	f7ff fa3f 	bl	80047c4 <_Z9RowsAsInpv>

	initRadio();
 8005346:	f7ff fd89 	bl	8004e5c <_Z9initRadiov>

	int ledT = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]
	uint32_t exitTm = HAL_GetTick();
 800534e:	f7fc fda9 	bl	8001ea4 <HAL_GetTick>
 8005352:	0003      	movs	r3, r0
 8005354:	613b      	str	r3, [r7, #16]
	bool doRun = true;
 8005356:	230f      	movs	r3, #15
 8005358:	18fb      	adds	r3, r7, r3
 800535a:	2201      	movs	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
	mDoOff = false;
 800535e:	4b6b      	ldr	r3, [pc, #428]	; (800550c <_Z8workLoopv+0x1d8>)
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]

	while (doRun) {
 8005364:	230f      	movs	r3, #15
 8005366:	18fb      	adds	r3, r7, r3
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d100      	bne.n	8005370 <_Z8workLoopv+0x3c>
 800536e:	e0bd      	b.n	80054ec <_Z8workLoopv+0x1b8>
		int tt = HAL_GetTick();
 8005370:	f7fc fd98 	bl	8001ea4 <HAL_GetTick>
 8005374:	0003      	movs	r3, r0
 8005376:	607b      	str	r3, [r7, #4]

		//gaszenie LED
		if ((ledT != 0) && !mSetupMode) {
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d010      	beq.n	80053a0 <_Z8workLoopv+0x6c>
 800537e:	4b64      	ldr	r3, [pc, #400]	; (8005510 <_Z8workLoopv+0x1dc>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2201      	movs	r2, #1
 8005384:	4053      	eors	r3, r2
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d009      	beq.n	80053a0 <_Z8workLoopv+0x6c>
			if (tt - ledT > 100) {
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b64      	cmp	r3, #100	; 0x64
 8005394:	dd04      	ble.n	80053a0 <_Z8workLoopv+0x6c>
				ledT = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
				setLed1(0);
 800539a:	2000      	movs	r0, #0
 800539c:	f7ff f95e 	bl	800465c <_Z7setLed1h>
			}
		}
		if (keyRec.flag) {
 80053a0:	4b5c      	ldr	r3, [pc, #368]	; (8005514 <_Z8workLoopv+0x1e0>)
 80053a2:	791b      	ldrb	r3, [r3, #4]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	1e5a      	subs	r2, r3, #1
 80053a8:	4193      	sbcs	r3, r2
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d067      	beq.n	8005480 <_Z8workLoopv+0x14c>
			keyRec.flag = 0;
 80053b0:	4b58      	ldr	r3, [pc, #352]	; (8005514 <_Z8workLoopv+0x1e0>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	711a      	strb	r2, [r3, #4]
			setLed1(1);
 80053b6:	2001      	movs	r0, #1
 80053b8:	f7ff f950 	bl	800465c <_Z7setLed1h>
			ledT = tt;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	617b      	str	r3, [r7, #20]

			sendKeyMsg(keyRec.code, keyRec.repCnt);
 80053c0:	4b54      	ldr	r3, [pc, #336]	; (8005514 <_Z8workLoopv+0x1e0>)
 80053c2:	891b      	ldrh	r3, [r3, #8]
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	4b53      	ldr	r3, [pc, #332]	; (8005514 <_Z8workLoopv+0x1e0>)
 80053c8:	7b5b      	ldrb	r3, [r3, #13]
 80053ca:	0019      	movs	r1, r3
 80053cc:	0010      	movs	r0, r2
 80053ce:	f7ff fdd9 	bl	8004f84 <_Z10sendKeyMsgth>

			if (!mSetupMode) {
 80053d2:	4b4f      	ldr	r3, [pc, #316]	; (8005510 <_Z8workLoopv+0x1dc>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2201      	movs	r2, #1
 80053d8:	4053      	eors	r3, r2
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d036      	beq.n	800544e <_Z8workLoopv+0x11a>
				if (keyRec.repCnt == 5) {
 80053e0:	4b4c      	ldr	r3, [pc, #304]	; (8005514 <_Z8workLoopv+0x1e0>)
 80053e2:	7b5b      	ldrb	r3, [r3, #13]
 80053e4:	2b05      	cmp	r3, #5
 80053e6:	d132      	bne.n	800544e <_Z8workLoopv+0x11a>
					if (keyRec.code == ENTER_SERVICE_CODE) {
 80053e8:	4b4a      	ldr	r3, [pc, #296]	; (8005514 <_Z8workLoopv+0x1e0>)
 80053ea:	891b      	ldrh	r3, [r3, #8]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b60      	subs	r3, #96	; 0x60
 80053f0:	425a      	negs	r2, r3
 80053f2:	4153      	adcs	r3, r2
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00f      	beq.n	800541a <_Z8workLoopv+0xe6>
						mSetupMode = true;
 80053fa:	4b45      	ldr	r3, [pc, #276]	; (8005510 <_Z8workLoopv+0x1dc>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	701a      	strb	r2, [r3, #0]
						mReciverOn = true;
 8005400:	4b45      	ldr	r3, [pc, #276]	; (8005518 <_Z8workLoopv+0x1e4>)
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]

						initRadioSetup();
 8005406:	f7ff fd53 	bl	8004eb0 <_Z14initRadioSetupv>
						setLed1(1);
 800540a:	2001      	movs	r0, #1
 800540c:	f7ff f926 	bl	800465c <_Z7setLed1h>
						keyRec.flag = 0;
 8005410:	4b40      	ldr	r3, [pc, #256]	; (8005514 <_Z8workLoopv+0x1e0>)
 8005412:	2200      	movs	r2, #0
 8005414:	711a      	strb	r2, [r3, #4]
						ledT = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]
					}
					if (keyRec.code == SHOW_NR_CODE) {
 800541a:	4b3e      	ldr	r3, [pc, #248]	; (8005514 <_Z8workLoopv+0x1e0>)
 800541c:	891b      	ldrh	r3, [r3, #8]
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b18      	subs	r3, #24
 8005422:	425a      	negs	r2, r3
 8005424:	4153      	adcs	r3, r2
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d010      	beq.n	800544e <_Z8workLoopv+0x11a>
						mReciverOn = true;
 800542c:	4b3a      	ldr	r3, [pc, #232]	; (8005518 <_Z8workLoopv+0x1e4>)
 800542e:	2201      	movs	r2, #1
 8005430:	701a      	strb	r2, [r3, #0]
						HAL_Delay(1000);
 8005432:	23fa      	movs	r3, #250	; 0xfa
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	0018      	movs	r0, r3
 8005438:	f7fc fd3e 	bl	8001eb8 <HAL_Delay>
						sendInfoMsg();
 800543c:	f7ff fdd4 	bl	8004fe8 <_Z11sendInfoMsgv>
						showSelfNr();
 8005440:	f7ff ff3a 	bl	80052b8 <_Z10showSelfNrv>
						keyRec.flag = 0;
 8005444:	4b33      	ldr	r3, [pc, #204]	; (8005514 <_Z8workLoopv+0x1e0>)
 8005446:	2200      	movs	r2, #0
 8005448:	711a      	strb	r2, [r3, #4]
						ledT = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
					}

				}
			}

			if (mSetupMode) {
 800544e:	4b30      	ldr	r3, [pc, #192]	; (8005510 <_Z8workLoopv+0x1dc>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d010      	beq.n	8005478 <_Z8workLoopv+0x144>
				if (keyRec.code == EXIT_SERVICE_CODE) {
 8005456:	4b2f      	ldr	r3, [pc, #188]	; (8005514 <_Z8workLoopv+0x1e0>)
 8005458:	891b      	ldrh	r3, [r3, #8]
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b08      	subs	r3, #8
 800545e:	425a      	negs	r2, r3
 8005460:	4153      	adcs	r3, r2
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <_Z8workLoopv+0x144>
					mSetupMode = false;
 8005468:	4b29      	ldr	r3, [pc, #164]	; (8005510 <_Z8workLoopv+0x1dc>)
 800546a:	2200      	movs	r2, #0
 800546c:	701a      	strb	r2, [r3, #0]
					mReciverOn = false;
 800546e:	4b2a      	ldr	r3, [pc, #168]	; (8005518 <_Z8workLoopv+0x1e4>)
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]
					initRadio();
 8005474:	f7ff fcf2 	bl	8004e5c <_Z9initRadiov>
				}
			}
			exitTm = HAL_GetTick();
 8005478:	f7fc fd14 	bl	8001ea4 <HAL_GetTick>
 800547c:	0003      	movs	r3, r0
 800547e:	613b      	str	r3, [r7, #16]

		}
		RFM69::tick();
 8005480:	f7fe ff6a 	bl	8004358 <_ZN5RFM694tickEv>
		if (RFM69::isNewFrame()) {
 8005484:	f7fe ff56 	bl	8004334 <_ZN5RFM6910isNewFrameEv>
 8005488:	1e03      	subs	r3, r0, #0
 800548a:	d00b      	beq.n	80054a4 <_Z8workLoopv+0x170>
			if (execNewRadioFrame()) {
 800548c:	f7ff fe48 	bl	8005120 <_Z17execNewRadioFramev>
 8005490:	1e03      	subs	r3, r0, #0
 8005492:	d003      	beq.n	800549c <_Z8workLoopv+0x168>
				doRun = false;
 8005494:	230f      	movs	r3, #15
 8005496:	18fb      	adds	r3, r7, r3
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
			}
			exitTm = HAL_GetTick();
 800549c:	f7fc fd02 	bl	8001ea4 <HAL_GetTick>
 80054a0:	0003      	movs	r3, r0
 80054a2:	613b      	str	r3, [r7, #16]
		}
		uint32_t tm = 5000;
 80054a4:	4b1d      	ldr	r3, [pc, #116]	; (800551c <_Z8workLoopv+0x1e8>)
 80054a6:	60bb      	str	r3, [r7, #8]
		if (mSetupMode | mReciverOn)
 80054a8:	4b19      	ldr	r3, [pc, #100]	; (8005510 <_Z8workLoopv+0x1dc>)
 80054aa:	781a      	ldrb	r2, [r3, #0]
 80054ac:	4b1a      	ldr	r3, [pc, #104]	; (8005518 <_Z8workLoopv+0x1e4>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <_Z8workLoopv+0x188>
			tm = 60000;
 80054b8:	4b19      	ldr	r3, [pc, #100]	; (8005520 <_Z8workLoopv+0x1ec>)
 80054ba:	60bb      	str	r3, [r7, #8]
		if (mDoOff)
 80054bc:	4b13      	ldr	r3, [pc, #76]	; (800550c <_Z8workLoopv+0x1d8>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <_Z8workLoopv+0x194>
			tm = 200;
 80054c4:	23c8      	movs	r3, #200	; 0xc8
 80054c6:	60bb      	str	r3, [r7, #8]
		if (HAL_GetTick() - exitTm > tm) {
 80054c8:	f7fc fcec 	bl	8001ea4 <HAL_GetTick>
 80054cc:	0002      	movs	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	419b      	sbcs	r3, r3
 80054d8:	425b      	negs	r3, r3
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <_Z8workLoopv+0x1b4>
			doRun = false;
 80054e0:	230f      	movs	r3, #15
 80054e2:	18fb      	adds	r3, r7, r3
 80054e4:	2200      	movs	r2, #0
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	bf30      	wfi
	while (doRun) {
 80054ea:	e73b      	b.n	8005364 <_Z8workLoopv+0x30>
		}
		__WFI();
	}
	if (mSetupMode | mReciverOn) {
 80054ec:	4b08      	ldr	r3, [pc, #32]	; (8005510 <_Z8workLoopv+0x1dc>)
 80054ee:	781a      	ldrb	r2, [r3, #0]
 80054f0:	4b09      	ldr	r3, [pc, #36]	; (8005518 <_Z8workLoopv+0x1e4>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <_Z8workLoopv+0x1cc>
		sendExitMsg();
 80054fc:	f7ff fdc8 	bl	8005090 <_Z11sendExitMsgv>
	}
	writeEepRob();
 8005500:	f7ff fb8a 	bl	8004c18 <_Z11writeEepRobv>
}
 8005504:	46c0      	nop			; (mov r8, r8)
 8005506:	46bd      	mov	sp, r7
 8005508:	b006      	add	sp, #24
 800550a:	bd80      	pop	{r7, pc}
 800550c:	2000012e 	.word	0x2000012e
 8005510:	2000012c 	.word	0x2000012c
 8005514:	200000ec 	.word	0x200000ec
 8005518:	2000012d 	.word	0x2000012d
 800551c:	00001388 	.word	0x00001388
 8005520:	0000ea60 	.word	0x0000ea60

08005524 <_Z10goStopModev>:

void goStopMode() {
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
	RFM69::setSleepMode();
 8005528:	f7fe ff5c 	bl	80043e4 <_ZN5RFM6912setSleepModeEv>

	HAL_PWR_EnableWakeUpPin (PWR_WAKEUP_PIN1);
 800552c:	2380      	movs	r3, #128	; 0x80
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	0018      	movs	r0, r3
 8005532:	f7fd f8ef 	bl	8002714 <HAL_PWR_EnableWakeUpPin>
#if defined(STM32L031xx)
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN3);
 8005536:	2380      	movs	r3, #128	; 0x80
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	0018      	movs	r0, r3
 800553c:	f7fd f8ea 	bl	8002714 <HAL_PWR_EnableWakeUpPin>
#endif
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8005540:	4b08      	ldr	r3, [pc, #32]	; (8005564 <_Z10goStopModev+0x40>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4b07      	ldr	r3, [pc, #28]	; (8005564 <_Z10goStopModev+0x40>)
 8005546:	2104      	movs	r1, #4
 8005548:	430a      	orrs	r2, r1
 800554a:	601a      	str	r2, [r3, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 800554c:	4b05      	ldr	r3, [pc, #20]	; (8005564 <_Z10goStopModev+0x40>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	4b04      	ldr	r3, [pc, #16]	; (8005564 <_Z10goStopModev+0x40>)
 8005552:	2108      	movs	r1, #8
 8005554:	430a      	orrs	r2, r1
 8005556:	601a      	str	r2, [r3, #0]
	HAL_PWR_EnterSTANDBYMode();
 8005558:	f7fd f8fe 	bl	8002758 <HAL_PWR_EnterSTANDBYMode>
}
 800555c:	46c0      	nop			; (mov r8, r8)
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	40007000 	.word	0x40007000

08005568 <uMain>:

#define NIR_SIGN1 0x12345678
#define NIR_SIGN2 0xABCDABCD
#define NIR_SIGN3 0x77777777

extern "C" void uMain(void) {
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0

	HAL_PWR_DisableWakeUpPin (PWR_WAKEUP_PIN1);
 800556c:	2380      	movs	r3, #128	; 0x80
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	0018      	movs	r0, r3
 8005572:	f7fd f8df 	bl	8002734 <HAL_PWR_DisableWakeUpPin>
#if defined(STM32L031xx)
	HAL_PWR_DisableWakeUpPin (PWR_WAKEUP_PIN3);
 8005576:	2380      	movs	r3, #128	; 0x80
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	0018      	movs	r0, r3
 800557c:	f7fd f8da 	bl	8002734 <HAL_PWR_DisableWakeUpPin>
#endif
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8005580:	4b18      	ldr	r3, [pc, #96]	; (80055e4 <uMain+0x7c>)
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	4b17      	ldr	r3, [pc, #92]	; (80055e4 <uMain+0x7c>)
 8005586:	2104      	movs	r1, #4
 8005588:	430a      	orrs	r2, r1
 800558a:	601a      	str	r2, [r3, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 800558c:	4b15      	ldr	r3, [pc, #84]	; (80055e4 <uMain+0x7c>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4b14      	ldr	r3, [pc, #80]	; (80055e4 <uMain+0x7c>)
 8005592:	2108      	movs	r1, #8
 8005594:	430a      	orrs	r2, r1
 8005596:	601a      	str	r2, [r3, #0]

	initEepData();
 8005598:	f7ff fc56 	bl	8004e48 <_Z11initEepDatav>
	eepRob.startCnt++;
 800559c:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <uMain+0x80>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <uMain+0x80>)
 80055a4:	609a      	str	r2, [r3, #8]

	keySendCnt = 0;
 80055a6:	4b11      	ldr	r3, [pc, #68]	; (80055ec <uMain+0x84>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	801a      	strh	r2, [r3, #0]

	if (!loadSoftVer(&mSoftVer, &DevLabel[16])) {
 80055ac:	4a10      	ldr	r2, [pc, #64]	; (80055f0 <uMain+0x88>)
 80055ae:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <uMain+0x8c>)
 80055b0:	0011      	movs	r1, r2
 80055b2:	0018      	movs	r0, r3
 80055b4:	f7fe ffbe 	bl	8004534 <_Z11loadSoftVerP7VerInfoPKc>
 80055b8:	0003      	movs	r3, r0
 80055ba:	425a      	negs	r2, r3
 80055bc:	4153      	adcs	r3, r2
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <uMain+0x68>
		mSoftVer.ver = 1;
 80055c4:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <uMain+0x8c>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	801a      	strh	r2, [r3, #0]
		mSoftVer.rev = 777;
 80055ca:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <uMain+0x8c>)
 80055cc:	4a0a      	ldr	r2, [pc, #40]	; (80055f8 <uMain+0x90>)
 80055ce:	805a      	strh	r2, [r3, #2]
	}

	initKeyRec();
 80055d0:	f7ff fa48 	bl	8004a64 <_Z10initKeyRecv>

	workLoop();
 80055d4:	f7ff feae 	bl	8005334 <_Z8workLoopv>
	goStopMode();
 80055d8:	f7ff ffa4 	bl	8005524 <_Z10goStopModev>

}
 80055dc:	46c0      	nop			; (mov r8, r8)
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	40007000 	.word	0x40007000
 80055e8:	2000010c 	.word	0x2000010c
 80055ec:	20000130 	.word	0x20000130
 80055f0:	080000d0 	.word	0x080000d0
 80055f4:	200000e0 	.word	0x200000e0
 80055f8:	00000309 	.word	0x00000309

080055fc <_Z41__static_initialization_and_destruction_0ii>:
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d107      	bne.n	800561c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	4a05      	ldr	r2, [pc, #20]	; (8005624 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d103      	bne.n	800561c <_Z41__static_initialization_and_destruction_0ii+0x20>
} keyRec;
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8005616:	0018      	movs	r0, r3
 8005618:	f7ff f9a5 	bl	8004966 <_ZN4._85C1Ev>
}
 800561c:	46c0      	nop			; (mov r8, r8)
 800561e:	46bd      	mov	sp, r7
 8005620:	b002      	add	sp, #8
 8005622:	bd80      	pop	{r7, pc}
 8005624:	0000ffff 	.word	0x0000ffff
 8005628:	200000ec 	.word	0x200000ec

0800562c <_GLOBAL__sub_I_mGlobError>:
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <_GLOBAL__sub_I_mGlobError+0x14>)
 8005632:	0019      	movs	r1, r3
 8005634:	2001      	movs	r0, #1
 8005636:	f7ff ffe1 	bl	80055fc <_Z41__static_initialization_and_destruction_0ii>
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	0000ffff 	.word	0x0000ffff

08005644 <__libc_init_array>:
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	2600      	movs	r6, #0
 8005648:	4d0c      	ldr	r5, [pc, #48]	; (800567c <__libc_init_array+0x38>)
 800564a:	4c0d      	ldr	r4, [pc, #52]	; (8005680 <__libc_init_array+0x3c>)
 800564c:	1b64      	subs	r4, r4, r5
 800564e:	10a4      	asrs	r4, r4, #2
 8005650:	42a6      	cmp	r6, r4
 8005652:	d109      	bne.n	8005668 <__libc_init_array+0x24>
 8005654:	2600      	movs	r6, #0
 8005656:	f000 f821 	bl	800569c <_init>
 800565a:	4d0a      	ldr	r5, [pc, #40]	; (8005684 <__libc_init_array+0x40>)
 800565c:	4c0a      	ldr	r4, [pc, #40]	; (8005688 <__libc_init_array+0x44>)
 800565e:	1b64      	subs	r4, r4, r5
 8005660:	10a4      	asrs	r4, r4, #2
 8005662:	42a6      	cmp	r6, r4
 8005664:	d105      	bne.n	8005672 <__libc_init_array+0x2e>
 8005666:	bd70      	pop	{r4, r5, r6, pc}
 8005668:	00b3      	lsls	r3, r6, #2
 800566a:	58eb      	ldr	r3, [r5, r3]
 800566c:	4798      	blx	r3
 800566e:	3601      	adds	r6, #1
 8005670:	e7ee      	b.n	8005650 <__libc_init_array+0xc>
 8005672:	00b3      	lsls	r3, r6, #2
 8005674:	58eb      	ldr	r3, [r5, r3]
 8005676:	4798      	blx	r3
 8005678:	3601      	adds	r6, #1
 800567a:	e7f2      	b.n	8005662 <__libc_init_array+0x1e>
 800567c:	080057ac 	.word	0x080057ac
 8005680:	080057ac 	.word	0x080057ac
 8005684:	080057ac 	.word	0x080057ac
 8005688:	080057b4 	.word	0x080057b4

0800568c <memset>:
 800568c:	0003      	movs	r3, r0
 800568e:	1812      	adds	r2, r2, r0
 8005690:	4293      	cmp	r3, r2
 8005692:	d100      	bne.n	8005696 <memset+0xa>
 8005694:	4770      	bx	lr
 8005696:	7019      	strb	r1, [r3, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	e7f9      	b.n	8005690 <memset+0x4>

0800569c <_init>:
 800569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a2:	bc08      	pop	{r3}
 80056a4:	469e      	mov	lr, r3
 80056a6:	4770      	bx	lr

080056a8 <_fini>:
 80056a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ae:	bc08      	pop	{r3}
 80056b0:	469e      	mov	lr, r3
 80056b2:	4770      	bx	lr
