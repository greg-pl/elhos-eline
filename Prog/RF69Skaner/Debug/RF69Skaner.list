
RF69Skaner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .label        00000098  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         0000c710  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ab8  0800c8b8  0800c8b8  0001c8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800d370  0800d370  000201e8  2**0
                  CONTENTS
  5 .ARM          00000000  0800d370  0800d370  000201e8  2**0
                  CONTENTS
  6 .preinit_array 00000000  0800d370  0800d370  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800d370  0800d370  0001d370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800d374  0800d374  0001d374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001e8  20000000  0800d378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00003390  200001e8  0800d560  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003578  0800d560  00023578  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d29f  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000045f2  00000000  00000000  0003d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001370  00000000  00000000  00041aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001198  00000000  00000000  00042e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001feef  00000000  00000000  00043fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00013216  00000000  00000000  00063e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00092d04  00000000  00000000  000770b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00109db9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059d4  00000000  00000000  00109e34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800c8a0 	.word	0x0800c8a0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	200001ec 	.word	0x200001ec
 80001e4:	0800c8a0 	.word	0x0800c8a0

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2iz>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d215      	bcs.n	80009ba <__aeabi_d2iz+0x36>
 800098e:	d511      	bpl.n	80009b4 <__aeabi_d2iz+0x30>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d912      	bls.n	80009c0 <__aeabi_d2iz+0x3c>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009aa:	fa23 f002 	lsr.w	r0, r3, r2
 80009ae:	bf18      	it	ne
 80009b0:	4240      	negne	r0, r0
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d105      	bne.n	80009cc <__aeabi_d2iz+0x48>
 80009c0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009c4:	bf08      	it	eq
 80009c6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <__aeabi_d2uiz>:
 80009d4:	004a      	lsls	r2, r1, #1
 80009d6:	d211      	bcs.n	80009fc <__aeabi_d2uiz+0x28>
 80009d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009dc:	d211      	bcs.n	8000a02 <__aeabi_d2uiz+0x2e>
 80009de:	d50d      	bpl.n	80009fc <__aeabi_d2uiz+0x28>
 80009e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e8:	d40e      	bmi.n	8000a08 <__aeabi_d2uiz+0x34>
 80009ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009f6:	fa23 f002 	lsr.w	r0, r3, r2
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a06:	d102      	bne.n	8000a0e <__aeabi_d2uiz+0x3a>
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	4770      	bx	lr
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	4770      	bx	lr

08000a14 <__aeabi_d2f>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a1c:	bf24      	itt	cs
 8000a1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a26:	d90d      	bls.n	8000a44 <__aeabi_d2f+0x30>
 8000a28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a48:	d121      	bne.n	8000a8e <__aeabi_d2f+0x7a>
 8000a4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a4e:	bfbc      	itt	lt
 8000a50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	4770      	bxlt	lr
 8000a56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a5e:	f1c2 0218 	rsb	r2, r2, #24
 8000a62:	f1c2 0c20 	rsb	ip, r2, #32
 8000a66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a6e:	bf18      	it	ne
 8000a70:	f040 0001 	orrne.w	r0, r0, #1
 8000a74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a80:	ea40 000c 	orr.w	r0, r0, ip
 8000a84:	fa23 f302 	lsr.w	r3, r3, r2
 8000a88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a8c:	e7cc      	b.n	8000a28 <__aeabi_d2f+0x14>
 8000a8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a92:	d107      	bne.n	8000aa4 <__aeabi_d2f+0x90>
 8000a94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a98:	bf1e      	ittt	ne
 8000a9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aa2:	4770      	bxne	lr
 8000aa4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_f2uiz>:
 8000ab4:	0042      	lsls	r2, r0, #1
 8000ab6:	d20e      	bcs.n	8000ad6 <__aeabi_f2uiz+0x22>
 8000ab8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000abc:	d30b      	bcc.n	8000ad6 <__aeabi_f2uiz+0x22>
 8000abe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ac2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ac6:	d409      	bmi.n	8000adc <__aeabi_f2uiz+0x28>
 8000ac8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000acc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr
 8000adc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ae0:	d101      	bne.n	8000ae6 <__aeabi_f2uiz+0x32>
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	d102      	bne.n	8000aec <__aeabi_f2uiz+0x38>
 8000ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af8:	f000 fb62 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afc:	f000 f80b 	bl	8000b16 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b00:	f000 f8c4 	bl	8000c8c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b04:	f000 f862 	bl	8000bcc <MX_SPI1_Init>
 // MX_USART1_UART_Init();
  MX_USART3_UART_Init();
 8000b08:	f000 f896 	bl	8000c38 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000b0c:	f008 fbb2 	bl	8009274 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uMain();
 8000b10:	f00a f826 	bl	800ab60 <uMain>

  while (1)
 8000b14:	e7fe      	b.n	8000b14 <main+0x20>

08000b16 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b094      	sub	sp, #80	; 0x50
 8000b1a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b20:	2228      	movs	r2, #40	; 0x28
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f00a fc92 	bl	800b44e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b46:	2301      	movs	r3, #1
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b62:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 fa45 	bl	8002ffc <HAL_RCC_OscConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b78:	f000 f922 	bl	8000dc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2102      	movs	r1, #2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f002 fcaf 	bl	80034fc <HAL_RCC_ClockConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ba4:	f000 f90c 	bl	8000dc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ba8:	2310      	movs	r3, #16
 8000baa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000bac:	2300      	movs	r3, #0
 8000bae:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 fe3e 	bl	8003834 <HAL_RCCEx_PeriphCLKConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000bbe:	f000 f8ff 	bl	8000dc0 <Error_Handler>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3750      	adds	r7, #80	; 0x50
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_SPI1_Init+0x64>)
 8000bd2:	4a18      	ldr	r2, [pc, #96]	; (8000c34 <MX_SPI1_Init+0x68>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_SPI1_Init+0x64>)
 8000bd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_SPI1_Init+0x64>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MX_SPI1_Init+0x64>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_SPI1_Init+0x64>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <MX_SPI1_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_SPI1_Init+0x64>)
 8000bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bfc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_SPI1_Init+0x64>)
 8000c00:	2218      	movs	r2, #24
 8000c02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <MX_SPI1_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_SPI1_Init+0x64>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <MX_SPI1_Init+0x64>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_SPI1_Init+0x64>)
 8000c18:	220a      	movs	r2, #10
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <MX_SPI1_Init+0x64>)
 8000c1e:	f002 febf 	bl	80039a0 <HAL_SPI_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c28:	f000 f8ca 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20002598 	.word	0x20002598
 8000c34:	40013000 	.word	0x40013000

08000c38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <MX_USART3_UART_Init+0x50>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_USART3_UART_Init+0x4c>)
 8000c70:	f003 f962 	bl	8003f38 <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c7a:	f000 f8a1 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200024c0 	.word	0x200024c0
 8000c88:	40004800 	.word	0x40004800

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca0:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <MX_GPIO_Init+0x124>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a42      	ldr	r2, [pc, #264]	; (8000db0 <MX_GPIO_Init+0x124>)
 8000ca6:	f043 0320 	orr.w	r3, r3, #32
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b40      	ldr	r3, [pc, #256]	; (8000db0 <MX_GPIO_Init+0x124>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0320 	and.w	r3, r3, #32
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b3d      	ldr	r3, [pc, #244]	; (8000db0 <MX_GPIO_Init+0x124>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a3c      	ldr	r2, [pc, #240]	; (8000db0 <MX_GPIO_Init+0x124>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b3a      	ldr	r3, [pc, #232]	; (8000db0 <MX_GPIO_Init+0x124>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd0:	4b37      	ldr	r3, [pc, #220]	; (8000db0 <MX_GPIO_Init+0x124>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a36      	ldr	r2, [pc, #216]	; (8000db0 <MX_GPIO_Init+0x124>)
 8000cd6:	f043 0310 	orr.w	r3, r3, #16
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <MX_GPIO_Init+0x124>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0310 	and.w	r3, r3, #16
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <MX_GPIO_Init+0x124>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a30      	ldr	r2, [pc, #192]	; (8000db0 <MX_GPIO_Init+0x124>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <MX_GPIO_Init+0x124>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0308 	and.w	r3, r3, #8
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_F_Pin|CS_F_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2106      	movs	r1, #6
 8000d04:	482b      	ldr	r0, [pc, #172]	; (8000db4 <MX_GPIO_Init+0x128>)
 8000d06:	f000 fddd 	bl	80018c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ES_RST_Pin|ES_GP0_Pin|TEST2_Pin|TEST1_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000d10:	4829      	ldr	r0, [pc, #164]	; (8000db8 <MX_GPIO_Init+0x12c>)
 8000d12:	f000 fdd7 	bl	80018c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ES_PD_Pin|ES_GP2_Pin|R_CS_Pin|R_RESET_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	21c3      	movs	r1, #195	; 0xc3
 8000d1a:	4828      	ldr	r0, [pc, #160]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d1c:	f000 fdd2 	bl	80018c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USB_ON_Pin|L_CPU4_Pin|L_CPU3_Pin|L_CPU2_Pin, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d26:	4825      	ldr	r0, [pc, #148]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d28:	f000 fdcc 	bl	80018c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_CPU1_Pin|L_PC_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 6164 	mov.w	r1, #3648	; 0xe40
 8000d32:	4821      	ldr	r0, [pc, #132]	; (8000db8 <MX_GPIO_Init+0x12c>)
 8000d34:	f000 fdc6 	bl	80018c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_F_Pin CS_F_Pin */
  GPIO_InitStruct.Pin = RST_F_Pin|CS_F_Pin;
 8000d38:	2306      	movs	r3, #6
 8000d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4819      	ldr	r0, [pc, #100]	; (8000db4 <MX_GPIO_Init+0x128>)
 8000d50:	f000 fc5e 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : ES_RST_Pin ES_GP0_Pin L_CPU1_Pin TEST2_Pin
                           TEST1_Pin L_PC_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = ES_RST_Pin|ES_GP0_Pin|L_CPU1_Pin|TEST2_Pin
 8000d54:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8000d58:	613b      	str	r3, [r7, #16]
                          |TEST1_Pin|L_PC_Pin|LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4812      	ldr	r0, [pc, #72]	; (8000db8 <MX_GPIO_Init+0x12c>)
 8000d6e:	f000 fc4f 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : ES_PD_Pin ES_GP2_Pin USB_ON_Pin L_CPU4_Pin
                           L_CPU3_Pin L_CPU2_Pin R_CS_Pin R_RESET_Pin */
  GPIO_InitStruct.Pin = ES_PD_Pin|ES_GP2_Pin|USB_ON_Pin|L_CPU4_Pin
 8000d72:	f24f 03c3 	movw	r3, #61635	; 0xf0c3
 8000d76:	613b      	str	r3, [r7, #16]
                          |L_CPU3_Pin|L_CPU2_Pin|R_CS_Pin|R_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480c      	ldr	r0, [pc, #48]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000d8c:	f000 fc40 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : R_INT_Pin */
  GPIO_InitStruct.Pin = R_INT_Pin;
 8000d90:	2320      	movs	r3, #32
 8000d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(R_INT_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_GPIO_Init+0x130>)
 8000da4:	f000 fc34 	bl	8001610 <HAL_GPIO_Init>

}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010800 	.word	0x40010800
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	40010c00 	.word	0x40010c00

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_MspInit+0x5c>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <HAL_MspInit+0x5c>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6193      	str	r3, [r2, #24]
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_MspInit+0x5c>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_MspInit+0x5c>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_MspInit+0x5c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	61d3      	str	r3, [r2, #28]
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_MspInit+0x5c>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_MspInit+0x60>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_MspInit+0x60>)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010000 	.word	0x40010000

08000e30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <HAL_SPI_MspInit+0x88>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d12f      	bne.n	8000eb0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_SPI_MspInit+0x8c>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_SPI_MspInit+0x8c>)
 8000e56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_SPI_MspInit+0x8c>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_SPI_MspInit+0x8c>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <HAL_SPI_MspInit+0x8c>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_SPI_MspInit+0x8c>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e80:	23a0      	movs	r3, #160	; 0xa0
 8000e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <HAL_SPI_MspInit+0x90>)
 8000e94:	f000 fbbc 	bl	8001610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e98:	2340      	movs	r3, #64	; 0x40
 8000e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_SPI_MspInit+0x90>)
 8000eac:	f000 fbb0 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40013000 	.word	0x40013000
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010800 	.word	0x40010800

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0318 	add.w	r3, r7, #24
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a3c      	ldr	r2, [pc, #240]	; (8000fd0 <HAL_UART_MspInit+0x10c>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d13a      	bne.n	8000f5a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ee4:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <HAL_UART_MspInit+0x110>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a3a      	ldr	r2, [pc, #232]	; (8000fd4 <HAL_UART_MspInit+0x110>)
 8000eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <HAL_UART_MspInit+0x110>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <HAL_UART_MspInit+0x110>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a34      	ldr	r2, [pc, #208]	; (8000fd4 <HAL_UART_MspInit+0x110>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b32      	ldr	r3, [pc, #200]	; (8000fd4 <HAL_UART_MspInit+0x110>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TXD0_Pin;
 8000f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TXD0_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 0318 	add.w	r3, r7, #24
 8000f26:	4619      	mov	r1, r3
 8000f28:	482b      	ldr	r0, [pc, #172]	; (8000fd8 <HAL_UART_MspInit+0x114>)
 8000f2a:	f000 fb71 	bl	8001610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RXD0_Pin;
 8000f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RXD0_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	4619      	mov	r1, r3
 8000f42:	4825      	ldr	r0, [pc, #148]	; (8000fd8 <HAL_UART_MspInit+0x114>)
 8000f44:	f000 fb64 	bl	8001610 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	2025      	movs	r0, #37	; 0x25
 8000f4e:	f000 fa92 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f52:	2025      	movs	r0, #37	; 0x25
 8000f54:	f000 faab 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f58:	e036      	b.n	8000fc8 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <HAL_UART_MspInit+0x118>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d131      	bne.n	8000fc8 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_UART_MspInit+0x110>)
 8000f66:	69db      	ldr	r3, [r3, #28]
 8000f68:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <HAL_UART_MspInit+0x110>)
 8000f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6e:	61d3      	str	r3, [r2, #28]
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_UART_MspInit+0x110>)
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_UART_MspInit+0x110>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <HAL_UART_MspInit+0x110>)
 8000f82:	f043 0308 	orr.w	r3, r3, #8
 8000f86:	6193      	str	r3, [r2, #24]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_UART_MspInit+0x110>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f003 0308 	and.w	r3, r3, #8
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ES_RXD_Pin;
 8000f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ES_RXD_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0318 	add.w	r3, r7, #24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <HAL_UART_MspInit+0x11c>)
 8000faa:	f000 fb31 	bl	8001610 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ES_TXD_Pin;
 8000fae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ES_TXD_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 0318 	add.w	r3, r7, #24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <HAL_UART_MspInit+0x11c>)
 8000fc4:	f000 fb24 	bl	8001610 <HAL_GPIO_Init>
}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	; 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40013800 	.word	0x40013800
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010800 	.word	0x40010800
 8000fdc:	40004800 	.word	0x40004800
 8000fe0:	40010c00 	.word	0x40010c00

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <HardFault_Handler+0x4>

08000ff6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <MemManage_Handler+0x4>

08000ffc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <BusFault_Handler+0x4>

08001002 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <UsageFault_Handler+0x4>

08001008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f90c 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800103e:	f000 fd8a 	bl	8001b56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20003288 	.word	0x20003288

0800104c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <USART1_IRQHandler+0x10>)
 8001052:	f003 f90b 	bl	800426c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000252c 	.word	0x2000252c

08001060 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e00a      	b.n	8001088 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001072:	f3af 8000 	nop.w
 8001076:	4601      	mov	r1, r0
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	60ba      	str	r2, [r7, #8]
 800107e:	b2ca      	uxtb	r2, r1
 8001080:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	dbf0      	blt.n	8001072 <_read+0x12>
	}

return len;
 8001090:	687b      	ldr	r3, [r7, #4]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <_close>:
	}
	return len;
}

int _close(int file)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
	return -1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010c0:	605a      	str	r2, [r3, #4]
	return 0;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr

080010ce <_isatty>:

int _isatty(int file)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
	return 1;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b085      	sub	sp, #20
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
	return 0;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
	...

080010fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001104:	4a14      	ldr	r2, [pc, #80]	; (8001158 <_sbrk+0x5c>)
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <_sbrk+0x60>)
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <_sbrk+0x64>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <_sbrk+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	429a      	cmp	r2, r3
 800112a:	d207      	bcs.n	800113c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800112c:	f00a f95a 	bl	800b3e4 <__errno>
 8001130:	4602      	mov	r2, r0
 8001132:	230c      	movs	r3, #12
 8001134:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e009      	b.n	8001150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <_sbrk+0x64>)
 800114c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20004fc0 	.word	0x20004fc0
 800115c:	00000400 	.word	0x00000400
 8001160:	20000204 	.word	0x20000204
 8001164:	20003578 	.word	0x20003578

08001168 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
movs r1, #0
 8001174:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001176:	e003      	b.n	8001180 <LoopCopyDataInit>

08001178 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800117a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800117c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800117e:	3104      	adds	r1, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001180:	480a      	ldr	r0, [pc, #40]	; (80011ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001184:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001186:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001188:	d3f6      	bcc.n	8001178 <CopyDataInit>
  ldr r2, =_sbss
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800118c:	e002      	b.n	8001194 <LoopFillZerobss>

0800118e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001190:	f842 3b04 	str.w	r3, [r2], #4

08001194 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001196:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001198:	d3f9      	bcc.n	800118e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800119a:	f7ff ffe5 	bl	8001168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119e:	f00a f927 	bl	800b3f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011a2:	f7ff fca7 	bl	8000af4 <main>
  bx lr
 80011a6:	4770      	bx	lr
  ldr r3, =_sidata
 80011a8:	0800d378 	.word	0x0800d378
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011b0:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 80011b4:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 80011b8:	20003578 	.word	0x20003578

080011bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC1_2_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_Init+0x28>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_Init+0x28>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f000 f945 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f000 f808 	bl	80011ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011dc:	f7ff fdf6 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40022000 	.word	0x40022000

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x54>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f95d 	bl	80014ca <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 f925 	bl	8001476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <HAL_InitTick+0x5c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000000 	.word	0x20000000
 8001244:	20000008 	.word	0x20000008
 8001248:	20000004 	.word	0x20000004

0800124c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x1c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x20>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a03      	ldr	r2, [pc, #12]	; (800126c <HAL_IncTick+0x20>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000008 	.word	0x20000008
 800126c:	200025f0 	.word	0x200025f0

08001270 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b02      	ldr	r3, [pc, #8]	; (8001280 <HAL_GetTick+0x10>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	200025f0 	.word	0x200025f0

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff fff0 	bl	8001270 <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_Delay+0x40>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffe0 	bl	8001270 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000008 	.word	0x20000008

080012c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4906      	ldr	r1, [pc, #24]	; (8001360 <__NVIC_EnableIRQ+0x34>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff90 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff2d 	bl	80012c8 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff42 	bl	8001310 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff90 	bl	80013b8 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5f 	bl	8001364 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff35 	bl	800132c <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa2 	bl	800141c <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d005      	beq.n	8001506 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e051      	b.n	80015aa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 020e 	bic.w	r2, r2, #14
 8001514:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0201 	bic.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a22      	ldr	r2, [pc, #136]	; (80015b4 <HAL_DMA_Abort_IT+0xd0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d029      	beq.n	8001584 <HAL_DMA_Abort_IT+0xa0>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <HAL_DMA_Abort_IT+0xd4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d022      	beq.n	8001580 <HAL_DMA_Abort_IT+0x9c>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a1f      	ldr	r2, [pc, #124]	; (80015bc <HAL_DMA_Abort_IT+0xd8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d01a      	beq.n	800157a <HAL_DMA_Abort_IT+0x96>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_DMA_Abort_IT+0xdc>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d012      	beq.n	8001574 <HAL_DMA_Abort_IT+0x90>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a1c      	ldr	r2, [pc, #112]	; (80015c4 <HAL_DMA_Abort_IT+0xe0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d00a      	beq.n	800156e <HAL_DMA_Abort_IT+0x8a>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a1a      	ldr	r2, [pc, #104]	; (80015c8 <HAL_DMA_Abort_IT+0xe4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d102      	bne.n	8001568 <HAL_DMA_Abort_IT+0x84>
 8001562:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001566:	e00e      	b.n	8001586 <HAL_DMA_Abort_IT+0xa2>
 8001568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800156c:	e00b      	b.n	8001586 <HAL_DMA_Abort_IT+0xa2>
 800156e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001572:	e008      	b.n	8001586 <HAL_DMA_Abort_IT+0xa2>
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	e005      	b.n	8001586 <HAL_DMA_Abort_IT+0xa2>
 800157a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157e:	e002      	b.n	8001586 <HAL_DMA_Abort_IT+0xa2>
 8001580:	2310      	movs	r3, #16
 8001582:	e000      	b.n	8001586 <HAL_DMA_Abort_IT+0xa2>
 8001584:	2301      	movs	r3, #1
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <HAL_DMA_Abort_IT+0xe8>)
 8001588:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	4798      	blx	r3
    } 
  }
  return status;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40020008 	.word	0x40020008
 80015b8:	4002001c 	.word	0x4002001c
 80015bc:	40020030 	.word	0x40020030
 80015c0:	40020044 	.word	0x40020044
 80015c4:	40020058 	.word	0x40020058
 80015c8:	4002006c 	.word	0x4002006c
 80015cc:	40020000 	.word	0x40020000

080015d0 <HAL_FLASHEx_OBGetUserData>:
  *            @arg @ref OB_DATA_ADDRESS_DATA0
  *            @arg @ref OB_DATA_ADDRESS_DATA1
  * @retval Value programmed in USER data
  */
uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t value = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  
  if (DATAAdress == OB_DATA_ADDRESS_DATA0)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <HAL_FLASHEx_OBGetUserData+0x38>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d105      	bne.n	80015f0 <HAL_FLASHEx_OBGetUserData+0x20>
  {
    /* Get value programmed in OB USER Data0 */
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_FLASHEx_OBGetUserData+0x3c>)
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	0a9b      	lsrs	r3, r3, #10
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	e004      	b.n	80015fa <HAL_FLASHEx_OBGetUserData+0x2a>
  }
  else
  {
    /* Get value programmed in OB USER Data1 */
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_FLASHEx_OBGetUserData+0x3c>)
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	0c9b      	lsrs	r3, r3, #18
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	60fb      	str	r3, [r7, #12]
  }
  
  return value;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	1ffff804 	.word	0x1ffff804
 800160c:	40022000 	.word	0x40022000

08001610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	b480      	push	{r7}
 8001612:	b08b      	sub	sp, #44	; 0x2c
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001622:	e127      	b.n	8001874 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001624:	2201      	movs	r2, #1
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	429a      	cmp	r2, r3
 800163e:	f040 8116 	bne.w	800186e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b12      	cmp	r3, #18
 8001648:	d034      	beq.n	80016b4 <HAL_GPIO_Init+0xa4>
 800164a:	2b12      	cmp	r3, #18
 800164c:	d80d      	bhi.n	800166a <HAL_GPIO_Init+0x5a>
 800164e:	2b02      	cmp	r3, #2
 8001650:	d02b      	beq.n	80016aa <HAL_GPIO_Init+0x9a>
 8001652:	2b02      	cmp	r3, #2
 8001654:	d804      	bhi.n	8001660 <HAL_GPIO_Init+0x50>
 8001656:	2b00      	cmp	r3, #0
 8001658:	d031      	beq.n	80016be <HAL_GPIO_Init+0xae>
 800165a:	2b01      	cmp	r3, #1
 800165c:	d01c      	beq.n	8001698 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800165e:	e048      	b.n	80016f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001660:	2b03      	cmp	r3, #3
 8001662:	d043      	beq.n	80016ec <HAL_GPIO_Init+0xdc>
 8001664:	2b11      	cmp	r3, #17
 8001666:	d01b      	beq.n	80016a0 <HAL_GPIO_Init+0x90>
          break;
 8001668:	e043      	b.n	80016f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800166a:	4a89      	ldr	r2, [pc, #548]	; (8001890 <HAL_GPIO_Init+0x280>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d026      	beq.n	80016be <HAL_GPIO_Init+0xae>
 8001670:	4a87      	ldr	r2, [pc, #540]	; (8001890 <HAL_GPIO_Init+0x280>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d806      	bhi.n	8001684 <HAL_GPIO_Init+0x74>
 8001676:	4a87      	ldr	r2, [pc, #540]	; (8001894 <HAL_GPIO_Init+0x284>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d020      	beq.n	80016be <HAL_GPIO_Init+0xae>
 800167c:	4a86      	ldr	r2, [pc, #536]	; (8001898 <HAL_GPIO_Init+0x288>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d01d      	beq.n	80016be <HAL_GPIO_Init+0xae>
          break;
 8001682:	e036      	b.n	80016f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001684:	4a85      	ldr	r2, [pc, #532]	; (800189c <HAL_GPIO_Init+0x28c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d019      	beq.n	80016be <HAL_GPIO_Init+0xae>
 800168a:	4a85      	ldr	r2, [pc, #532]	; (80018a0 <HAL_GPIO_Init+0x290>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d016      	beq.n	80016be <HAL_GPIO_Init+0xae>
 8001690:	4a84      	ldr	r2, [pc, #528]	; (80018a4 <HAL_GPIO_Init+0x294>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0xae>
          break;
 8001696:	e02c      	b.n	80016f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	623b      	str	r3, [r7, #32]
          break;
 800169e:	e028      	b.n	80016f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	3304      	adds	r3, #4
 80016a6:	623b      	str	r3, [r7, #32]
          break;
 80016a8:	e023      	b.n	80016f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	3308      	adds	r3, #8
 80016b0:	623b      	str	r3, [r7, #32]
          break;
 80016b2:	e01e      	b.n	80016f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	330c      	adds	r3, #12
 80016ba:	623b      	str	r3, [r7, #32]
          break;
 80016bc:	e019      	b.n	80016f2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016c6:	2304      	movs	r3, #4
 80016c8:	623b      	str	r3, [r7, #32]
          break;
 80016ca:	e012      	b.n	80016f2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d4:	2308      	movs	r3, #8
 80016d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	611a      	str	r2, [r3, #16]
          break;
 80016de:	e008      	b.n	80016f2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e0:	2308      	movs	r3, #8
 80016e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	615a      	str	r2, [r3, #20]
          break;
 80016ea:	e002      	b.n	80016f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
          break;
 80016f0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	2bff      	cmp	r3, #255	; 0xff
 80016f6:	d801      	bhi.n	80016fc <HAL_GPIO_Init+0xec>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	e001      	b.n	8001700 <HAL_GPIO_Init+0xf0>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3304      	adds	r3, #4
 8001700:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2bff      	cmp	r3, #255	; 0xff
 8001706:	d802      	bhi.n	800170e <HAL_GPIO_Init+0xfe>
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	e002      	b.n	8001714 <HAL_GPIO_Init+0x104>
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	3b08      	subs	r3, #8
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	210f      	movs	r1, #15
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	401a      	ands	r2, r3
 8001726:	6a39      	ldr	r1, [r7, #32]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	431a      	orrs	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 8096 	beq.w	800186e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001742:	4b59      	ldr	r3, [pc, #356]	; (80018a8 <HAL_GPIO_Init+0x298>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	4a58      	ldr	r2, [pc, #352]	; (80018a8 <HAL_GPIO_Init+0x298>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6193      	str	r3, [r2, #24]
 800174e:	4b56      	ldr	r3, [pc, #344]	; (80018a8 <HAL_GPIO_Init+0x298>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800175a:	4a54      	ldr	r2, [pc, #336]	; (80018ac <HAL_GPIO_Init+0x29c>)
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	3302      	adds	r3, #2
 8001762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001766:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	220f      	movs	r2, #15
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	4013      	ands	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4b      	ldr	r2, [pc, #300]	; (80018b0 <HAL_GPIO_Init+0x2a0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d013      	beq.n	80017ae <HAL_GPIO_Init+0x19e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4a      	ldr	r2, [pc, #296]	; (80018b4 <HAL_GPIO_Init+0x2a4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00d      	beq.n	80017aa <HAL_GPIO_Init+0x19a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a49      	ldr	r2, [pc, #292]	; (80018b8 <HAL_GPIO_Init+0x2a8>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d007      	beq.n	80017a6 <HAL_GPIO_Init+0x196>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a48      	ldr	r2, [pc, #288]	; (80018bc <HAL_GPIO_Init+0x2ac>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_GPIO_Init+0x192>
 800179e:	2303      	movs	r3, #3
 80017a0:	e006      	b.n	80017b0 <HAL_GPIO_Init+0x1a0>
 80017a2:	2304      	movs	r3, #4
 80017a4:	e004      	b.n	80017b0 <HAL_GPIO_Init+0x1a0>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e002      	b.n	80017b0 <HAL_GPIO_Init+0x1a0>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <HAL_GPIO_Init+0x1a0>
 80017ae:	2300      	movs	r3, #0
 80017b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b2:	f002 0203 	and.w	r2, r2, #3
 80017b6:	0092      	lsls	r2, r2, #2
 80017b8:	4093      	lsls	r3, r2
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4313      	orrs	r3, r2
 80017be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017c0:	493a      	ldr	r1, [pc, #232]	; (80018ac <HAL_GPIO_Init+0x29c>)
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	3302      	adds	r3, #2
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d006      	beq.n	80017e8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017da:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4938      	ldr	r1, [pc, #224]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
 80017e6:	e006      	b.n	80017f6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017e8:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	4933      	ldr	r1, [pc, #204]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d006      	beq.n	8001810 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001802:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	492e      	ldr	r1, [pc, #184]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
 800180e:	e006      	b.n	800181e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	43db      	mvns	r3, r3
 8001818:	4929      	ldr	r1, [pc, #164]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 800181a:	4013      	ands	r3, r2
 800181c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800182a:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	4924      	ldr	r1, [pc, #144]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
 8001836:	e006      	b.n	8001846 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	43db      	mvns	r3, r3
 8001840:	491f      	ldr	r1, [pc, #124]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 8001842:	4013      	ands	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	491a      	ldr	r1, [pc, #104]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	60cb      	str	r3, [r1, #12]
 800185e:	e006      	b.n	800186e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001860:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	43db      	mvns	r3, r3
 8001868:	4915      	ldr	r1, [pc, #84]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 800186a:	4013      	ands	r3, r2
 800186c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	3301      	adds	r3, #1
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	fa22 f303 	lsr.w	r3, r2, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	f47f aed0 	bne.w	8001624 <HAL_GPIO_Init+0x14>
  }
}
 8001884:	bf00      	nop
 8001886:	372c      	adds	r7, #44	; 0x2c
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	10210000 	.word	0x10210000
 8001894:	10110000 	.word	0x10110000
 8001898:	10120000 	.word	0x10120000
 800189c:	10310000 	.word	0x10310000
 80018a0:	10320000 	.word	0x10320000
 80018a4:	10220000 	.word	0x10220000
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010000 	.word	0x40010000
 80018b0:	40010800 	.word	0x40010800
 80018b4:	40010c00 	.word	0x40010c00
 80018b8:	40011000 	.word	0x40011000
 80018bc:	40011400 	.word	0x40011400
 80018c0:	40010400 	.word	0x40010400

080018c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
 80018d0:	4613      	mov	r3, r2
 80018d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d4:	787b      	ldrb	r3, [r7, #1]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018e0:	e003      	b.n	80018ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	041a      	lsls	r2, r3, #16
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	611a      	str	r2, [r3, #16]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f6:	b08b      	sub	sp, #44	; 0x2c
 80018f8:	af06      	add	r7, sp, #24
 80018fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0fd      	b.n	8001b02 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f007 fed0 	bl	80096c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2203      	movs	r2, #3
 8001924:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f002 ffeb 	bl	8004908 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	687e      	ldr	r6, [r7, #4]
 800193a:	466d      	mov	r5, sp
 800193c:	f106 0410 	add.w	r4, r6, #16
 8001940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	602b      	str	r3, [r5, #0]
 8001948:	1d33      	adds	r3, r6, #4
 800194a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800194c:	6838      	ldr	r0, [r7, #0]
 800194e:	f002 ffb5 	bl	80048bc <USB_CoreInit>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0ce      	b.n	8001b02 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2100      	movs	r1, #0
 800196a:	4618      	mov	r0, r3
 800196c:	f002 ffe6 	bl	800493c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	e04c      	b.n	8001a10 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	3301      	adds	r3, #1
 8001988:	2201      	movs	r2, #1
 800198a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	440b      	add	r3, r1
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019a0:	7bfa      	ldrb	r2, [r7, #15]
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	b298      	uxth	r0, r3
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	3336      	adds	r3, #54	; 0x36
 80019b4:	4602      	mov	r2, r0
 80019b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	3303      	adds	r3, #3
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	3338      	adds	r3, #56	; 0x38
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019e2:	7bfa      	ldrb	r2, [r7, #15]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	440b      	add	r3, r1
 80019f0:	333c      	adds	r3, #60	; 0x3c
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	3340      	adds	r3, #64	; 0x40
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d3ad      	bcc.n	8001976 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]
 8001a1e:	e044      	b.n	8001aaa <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a20:	7bfa      	ldrb	r2, [r7, #15]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	440b      	add	r3, r1
 8001a2e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a36:	7bfa      	ldrb	r2, [r7, #15]
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	440b      	add	r3, r1
 8001a44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	440b      	add	r3, r1
 8001a5a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	440b      	add	r3, r1
 8001a86:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	7bfa      	ldrb	r2, [r7, #15]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d3b5      	bcc.n	8001a20 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	687e      	ldr	r6, [r7, #4]
 8001abc:	466d      	mov	r5, sp
 8001abe:	f106 0410 	add.w	r4, r6, #16
 8001ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	602b      	str	r3, [r5, #0]
 8001aca:	1d33      	adds	r3, r6, #4
 8001acc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ace:	6838      	ldr	r0, [r7, #0]
 8001ad0:	f002 ff40 	bl	8004954 <USB_DevInit>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2202      	movs	r2, #2
 8001ade:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00d      	b.n	8001b02 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f004 feda 	bl	80068b4 <USB_DevDisconnect>

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_PCD_Start+0x16>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e016      	b.n	8001b4e <HAL_PCD_Start+0x44>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 fed5 	bl	80048dc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b32:	2101      	movs	r1, #1
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f008 f836 	bl	8009ba6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 feae 	bl	80068a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b088      	sub	sp, #32
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f004 feb0 	bl	80068c8 <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b72:	d102      	bne.n	8001b7a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fb61 	bl	800223c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f004 fea2 	bl	80068c8 <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b8e:	d112      	bne.n	8001bb6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ba2:	b292      	uxth	r2, r2
 8001ba4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f007 fe04 	bl	80097b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f925 	bl	8001e00 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f004 fe84 	bl	80068c8 <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bca:	d10b      	bne.n	8001be4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bde:	b292      	uxth	r2, r2
 8001be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f004 fe6d 	bl	80068c8 <USB_ReadInterrupts>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bf8:	d10b      	bne.n	8001c12 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c0c:	b292      	uxth	r2, r2
 8001c0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f004 fe56 	bl	80068c8 <USB_ReadInterrupts>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c26:	d126      	bne.n	8001c76 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0204 	bic.w	r2, r2, #4
 8001c3a:	b292      	uxth	r2, r2
 8001c3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0208 	bic.w	r2, r2, #8
 8001c52:	b292      	uxth	r2, r2
 8001c54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f007 fde5 	bl	8009828 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c70:	b292      	uxth	r2, r2
 8001c72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f004 fe24 	bl	80068c8 <USB_ReadInterrupts>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c8a:	f040 8084 	bne.w	8001d96 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	77fb      	strb	r3, [r7, #31]
 8001c92:	e011      	b.n	8001cb8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	7ffb      	ldrb	r3, [r7, #31]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	441a      	add	r2, r3
 8001ca0:	7ffb      	ldrb	r3, [r7, #31]
 8001ca2:	8812      	ldrh	r2, [r2, #0]
 8001ca4:	b292      	uxth	r2, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	f107 0120 	add.w	r1, r7, #32
 8001cac:	440b      	add	r3, r1
 8001cae:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001cb2:	7ffb      	ldrb	r3, [r7, #31]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	77fb      	strb	r3, [r7, #31]
 8001cb8:	7ffb      	ldrb	r3, [r7, #31]
 8001cba:	2b07      	cmp	r3, #7
 8001cbc:	d9ea      	bls.n	8001c94 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	b292      	uxth	r2, r2
 8001cea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001cee:	bf00      	nop
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f6      	beq.n	8001cf0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d14:	b292      	uxth	r2, r2
 8001d16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	77fb      	strb	r3, [r7, #31]
 8001d1e:	e010      	b.n	8001d42 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d20:	7ffb      	ldrb	r3, [r7, #31]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	4611      	mov	r1, r2
 8001d28:	7ffa      	ldrb	r2, [r7, #31]
 8001d2a:	0092      	lsls	r2, r2, #2
 8001d2c:	440a      	add	r2, r1
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	f107 0120 	add.w	r1, r7, #32
 8001d34:	440b      	add	r3, r1
 8001d36:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d3a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d3c:	7ffb      	ldrb	r3, [r7, #31]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	77fb      	strb	r3, [r7, #31]
 8001d42:	7ffb      	ldrb	r3, [r7, #31]
 8001d44:	2b07      	cmp	r3, #7
 8001d46:	d9eb      	bls.n	8001d20 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0208 	orr.w	r2, r2, #8
 8001d5a:	b292      	uxth	r2, r2
 8001d5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d72:	b292      	uxth	r2, r2
 8001d74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0204 	orr.w	r2, r2, #4
 8001d8a:	b292      	uxth	r2, r2
 8001d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f007 fd2f 	bl	80097f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f004 fd94 	bl	80068c8 <USB_ReadInterrupts>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001daa:	d10e      	bne.n	8001dca <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f007 fce8 	bl	800979a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 fd7a 	bl	80068c8 <USB_ReadInterrupts>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dde:	d10b      	bne.n	8001df8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df2:	b292      	uxth	r2, r2
 8001df4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001df8:	bf00      	nop
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_PCD_SetAddress+0x1a>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e013      	b.n	8001e42 <HAL_PCD_SetAddress+0x42>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	78fa      	ldrb	r2, [r7, #3]
 8001e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f004 fd21 	bl	800687a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	4608      	mov	r0, r1
 8001e54:	4611      	mov	r1, r2
 8001e56:	461a      	mov	r2, r3
 8001e58:	4603      	mov	r3, r0
 8001e5a:	70fb      	strb	r3, [r7, #3]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	803b      	strh	r3, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	da0e      	bge.n	8001e8e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	705a      	strb	r2, [r3, #1]
 8001e8c:	e00e      	b.n	8001eac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	f003 0207 	and.w	r2, r3, #7
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001eb8:	883a      	ldrh	r2, [r7, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	78ba      	ldrb	r2, [r7, #2]
 8001ec2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	785b      	ldrb	r3, [r3, #1]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d004      	beq.n	8001ed6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ed6:	78bb      	ldrb	r3, [r7, #2]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d102      	bne.n	8001ee2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_PCD_EP_Open+0xa6>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e00e      	b.n	8001f0e <HAL_PCD_EP_Open+0xc4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68f9      	ldr	r1, [r7, #12]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f002 fd48 	bl	8004994 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f0c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b084      	sub	sp, #16
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	da0e      	bge.n	8001f48 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	705a      	strb	r2, [r3, #1]
 8001f46:	e00e      	b.n	8001f66 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	f003 0207 	and.w	r2, r3, #7
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_PCD_EP_Close+0x6a>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e00e      	b.n	8001f9e <HAL_PCD_EP_Close+0x88>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68f9      	ldr	r1, [r7, #12]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 f86a 	bl	8005068 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb6:	7afb      	ldrb	r3, [r7, #11]
 8001fb8:	f003 0207 	and.w	r2, r3, #7
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe6:	7afb      	ldrb	r3, [r7, #11]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ff2:	7afb      	ldrb	r3, [r7, #11]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d106      	bne.n	800200a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6979      	ldr	r1, [r7, #20]
 8002002:	4618      	mov	r0, r3
 8002004:	f003 fa1c 	bl	8005440 <USB_EPStartXfer>
 8002008:	e005      	b.n	8002016 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6979      	ldr	r1, [r7, #20]
 8002010:	4618      	mov	r0, r3
 8002012:	f003 fa15 	bl	8005440 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 0207 	and.w	r2, r3, #7
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	440b      	add	r3, r1
 800203e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	460b      	mov	r3, r1
 800205c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800205e:	7afb      	ldrb	r3, [r7, #11]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4413      	add	r3, r2
 8002072:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2200      	movs	r2, #0
 8002092:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2201      	movs	r2, #1
 8002098:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800209a:	7afb      	ldrb	r3, [r7, #11]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020a6:	7afb      	ldrb	r3, [r7, #11]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d106      	bne.n	80020be <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6979      	ldr	r1, [r7, #20]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 f9c2 	bl	8005440 <USB_EPStartXfer>
 80020bc:	e005      	b.n	80020ca <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6979      	ldr	r1, [r7, #20]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 f9bb 	bl	8005440 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	f003 0207 	and.w	r2, r3, #7
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d901      	bls.n	80020f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e04c      	b.n	800218c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da0e      	bge.n	8002118 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	705a      	strb	r2, [r3, #1]
 8002116:	e00c      	b.n	8002132 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	b2da      	uxtb	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_PCD_EP_SetStall+0x7e>
 800214e:	2302      	movs	r3, #2
 8002150:	e01c      	b.n	800218c <HAL_PCD_EP_SetStall+0xb8>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68f9      	ldr	r1, [r7, #12]
 8002160:	4618      	mov	r0, r3
 8002162:	f004 fa8d 	bl	8006680 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	2b00      	cmp	r3, #0
 800216e:	d108      	bne.n	8002182 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800217a:	4619      	mov	r1, r3
 800217c:	4610      	mov	r0, r2
 800217e:	f004 fbb2 	bl	80068e6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	f003 020f 	and.w	r2, r3, #15
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d901      	bls.n	80021b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e040      	b.n	8002234 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	da0e      	bge.n	80021d8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	705a      	strb	r2, [r3, #1]
 80021d6:	e00e      	b.n	80021f6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	f003 0207 	and.w	r2, r3, #7
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	b2da      	uxtb	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_PCD_EP_ClrStall+0x82>
 8002212:	2302      	movs	r3, #2
 8002214:	e00e      	b.n	8002234 <HAL_PCD_EP_ClrStall+0xa0>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68f9      	ldr	r1, [r7, #12]
 8002224:	4618      	mov	r0, r3
 8002226:	f004 fa7b 	bl	8006720 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08e      	sub	sp, #56	; 0x38
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002244:	e2df      	b.n	8002806 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800224e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002250:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800225c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002260:	2b00      	cmp	r3, #0
 8002262:	f040 8158 	bne.w	8002516 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002266:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	d152      	bne.n	8002316 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800227c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002280:	81fb      	strh	r3, [r7, #14]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	89fb      	ldrh	r3, [r7, #14]
 8002288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800228c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002290:	b29b      	uxth	r3, r3
 8002292:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3328      	adds	r3, #40	; 0x28
 8002298:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	3302      	adds	r3, #2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	441a      	add	r2, r3
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022d4:	2100      	movs	r1, #0
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f007 fa45 	bl	8009766 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 828e 	beq.w	8002806 <PCD_EP_ISR_Handler+0x5ca>
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 8289 	bne.w	8002806 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002300:	b2da      	uxtb	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	b292      	uxth	r2, r2
 8002308:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002314:	e277      	b.n	8002806 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002326:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800232c:	2b00      	cmp	r3, #0
 800232e:	d034      	beq.n	800239a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002338:	b29b      	uxth	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4413      	add	r3, r2
 8002344:	3306      	adds	r3, #6
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	4413      	add	r3, r2
 800234e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800236e:	b29b      	uxth	r3, r3
 8002370:	f004 fb08 	bl	8006984 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	b29a      	uxth	r2, r3
 800237c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002380:	4013      	ands	r3, r2
 8002382:	823b      	strh	r3, [r7, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	8a3a      	ldrh	r2, [r7, #16]
 800238a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800238e:	b292      	uxth	r2, r2
 8002390:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f007 f9ba 	bl	800970c <HAL_PCD_SetupStageCallback>
 8002398:	e235      	b.n	8002806 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800239a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f280 8231 	bge.w	8002806 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023b0:	4013      	ands	r3, r2
 80023b2:	83bb      	strh	r3, [r7, #28]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	8bba      	ldrh	r2, [r7, #28]
 80023ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023be:	b292      	uxth	r2, r2
 80023c0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	3306      	adds	r3, #6
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d019      	beq.n	800242a <PCD_EP_ISR_Handler+0x1ee>
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d015      	beq.n	800242a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	6959      	ldr	r1, [r3, #20]
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800240e:	b29b      	uxth	r3, r3
 8002410:	f004 fab8 	bl	8006984 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	441a      	add	r2, r3
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002422:	2100      	movs	r1, #0
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f007 f983 	bl	8009730 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002438:	b29b      	uxth	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	4413      	add	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d112      	bne.n	8002478 <PCD_EP_ISR_Handler+0x23c>
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800245c:	b29a      	uxth	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	801a      	strh	r2, [r3, #0]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800246c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002470:	b29a      	uxth	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	801a      	strh	r2, [r3, #0]
 8002476:	e02f      	b.n	80024d8 <PCD_EP_ISR_Handler+0x29c>
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	2b3e      	cmp	r3, #62	; 0x3e
 800247e:	d813      	bhi.n	80024a8 <PCD_EP_ISR_Handler+0x26c>
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	085b      	lsrs	r3, r3, #1
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <PCD_EP_ISR_Handler+0x25e>
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	3301      	adds	r3, #1
 8002498:	633b      	str	r3, [r7, #48]	; 0x30
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	b29b      	uxth	r3, r3
 800249e:	029b      	lsls	r3, r3, #10
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	801a      	strh	r2, [r3, #0]
 80024a6:	e017      	b.n	80024d8 <PCD_EP_ISR_Handler+0x29c>
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <PCD_EP_ISR_Handler+0x286>
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	3b01      	subs	r3, #1
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	029b      	lsls	r3, r3, #10
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e8:	827b      	strh	r3, [r7, #18]
 80024ea:	8a7b      	ldrh	r3, [r7, #18]
 80024ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80024f0:	827b      	strh	r3, [r7, #18]
 80024f2:	8a7b      	ldrh	r3, [r7, #18]
 80024f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024f8:	827b      	strh	r3, [r7, #18]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	8a7b      	ldrh	r3, [r7, #18]
 8002500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002510:	b29b      	uxth	r3, r3
 8002512:	8013      	strh	r3, [r2, #0]
 8002514:	e177      	b.n	8002806 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002528:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800252c:	2b00      	cmp	r3, #0
 800252e:	f280 80ea 	bge.w	8002706 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29a      	uxth	r2, r3
 8002544:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002548:	4013      	ands	r3, r2
 800254a:	853b      	strh	r3, [r7, #40]	; 0x28
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800255c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002560:	b292      	uxth	r2, r2
 8002562:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002564:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	4413      	add	r3, r2
 8002578:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	7b1b      	ldrb	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d122      	bne.n	80025c8 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	3306      	adds	r3, #6
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025aa:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80025ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8087 	beq.w	80026c2 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	6959      	ldr	r1, [r3, #20]
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	88da      	ldrh	r2, [r3, #6]
 80025c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c2:	f004 f9df 	bl	8006984 <USB_ReadPMA>
 80025c6:	e07c      	b.n	80026c2 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	78db      	ldrb	r3, [r3, #3]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d108      	bne.n	80025e2 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025d2:	461a      	mov	r2, r3
 80025d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f923 	bl	8002822 <HAL_PCD_EP_DB_Receive>
 80025dc:	4603      	mov	r3, r0
 80025de:	86fb      	strh	r3, [r7, #54]	; 0x36
 80025e0:	e06f      	b.n	80026c2 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fc:	847b      	strh	r3, [r7, #34]	; 0x22
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	441a      	add	r2, r3
 800260c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800260e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800261e:	b29b      	uxth	r3, r3
 8002620:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	b29b      	uxth	r3, r3
 8002634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d021      	beq.n	8002680 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002644:	b29b      	uxth	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	3302      	adds	r3, #2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	4413      	add	r3, r2
 800265a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002664:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002666:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02a      	beq.n	80026c2 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	6959      	ldr	r1, [r3, #20]
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	891a      	ldrh	r2, [r3, #8]
 8002678:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800267a:	f004 f983 	bl	8006984 <USB_ReadPMA>
 800267e:	e020      	b.n	80026c2 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	3306      	adds	r3, #6
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	6959      	ldr	r1, [r3, #20]
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	895a      	ldrh	r2, [r3, #10]
 80026bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026be:	f004 f961 	bl	8006984 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026c8:	441a      	add	r2, r3
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026d4:	441a      	add	r2, r3
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d004      	beq.n	80026ec <PCD_EP_ISR_Handler+0x4b0>
 80026e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d206      	bcs.n	80026fa <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f007 f81c 	bl	8009730 <HAL_PCD_DataOutStageCallback>
 80026f8:	e005      	b.n	8002706 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002700:	4618      	mov	r0, r3
 8002702:	f002 fe9d 	bl	8005440 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002706:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270c:	2b00      	cmp	r3, #0
 800270e:	d07a      	beq.n	8002806 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002710:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273e:	843b      	strh	r3, [r7, #32]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	441a      	add	r2, r3
 800274e:	8c3b      	ldrh	r3, [r7, #32]
 8002750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002758:	b29b      	uxth	r3, r3
 800275a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	78db      	ldrb	r3, [r3, #3]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d108      	bne.n	8002776 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002768:	2b02      	cmp	r3, #2
 800276a:	d146      	bne.n	80027fa <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800276c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d141      	bne.n	80027fa <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800277e:	b29b      	uxth	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	3302      	adds	r3, #2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800279e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	699a      	ldr	r2, [r3, #24]
 80027a4:	8bfb      	ldrh	r3, [r7, #30]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d906      	bls.n	80027b8 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	8bfb      	ldrh	r3, [r7, #30]
 80027b0:	1ad2      	subs	r2, r2, r3
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	619a      	str	r2, [r3, #24]
 80027b6:	e002      	b.n	80027be <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	2200      	movs	r2, #0
 80027bc:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	4619      	mov	r1, r3
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f006 ffca 	bl	8009766 <HAL_PCD_DataInStageCallback>
 80027d2:	e018      	b.n	8002806 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	695a      	ldr	r2, [r3, #20]
 80027d8:	8bfb      	ldrh	r3, [r7, #30]
 80027da:	441a      	add	r2, r3
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	69da      	ldr	r2, [r3, #28]
 80027e4:	8bfb      	ldrh	r3, [r7, #30]
 80027e6:	441a      	add	r2, r3
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f2:	4618      	mov	r0, r3
 80027f4:	f002 fe24 	bl	8005440 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80027f8:	e005      	b.n	8002806 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80027fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027fc:	461a      	mov	r2, r3
 80027fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f91b 	bl	8002a3c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800280e:	b29b      	uxth	r3, r3
 8002810:	b21b      	sxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	f6ff ad17 	blt.w	8002246 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3738      	adds	r7, #56	; 0x38
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b088      	sub	sp, #32
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	4613      	mov	r3, r2
 800282e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d07e      	beq.n	8002938 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4413      	add	r3, r2
 800284e:	3302      	adds	r3, #2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	6812      	ldr	r2, [r2, #0]
 8002856:	4413      	add	r3, r2
 8002858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002862:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	8b7b      	ldrh	r3, [r7, #26]
 800286a:	429a      	cmp	r2, r3
 800286c:	d306      	bcc.n	800287c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	699a      	ldr	r2, [r3, #24]
 8002872:	8b7b      	ldrh	r3, [r7, #26]
 8002874:	1ad2      	subs	r2, r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	619a      	str	r2, [r3, #24]
 800287a:	e002      	b.n	8002882 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2200      	movs	r2, #0
 8002880:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d123      	bne.n	80028d2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a4:	833b      	strh	r3, [r7, #24]
 80028a6:	8b3b      	ldrh	r3, [r7, #24]
 80028a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028ac:	833b      	strh	r3, [r7, #24]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	441a      	add	r2, r3
 80028bc:	8b3b      	ldrh	r3, [r7, #24]
 80028be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01f      	beq.n	800291c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f6:	82fb      	strh	r3, [r7, #22]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	441a      	add	r2, r3
 8002906:	8afb      	ldrh	r3, [r7, #22]
 8002908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800290c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002914:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002918:	b29b      	uxth	r3, r3
 800291a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800291c:	8b7b      	ldrh	r3, [r7, #26]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8087 	beq.w	8002a32 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6959      	ldr	r1, [r3, #20]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	891a      	ldrh	r2, [r3, #8]
 8002930:	8b7b      	ldrh	r3, [r7, #26]
 8002932:	f004 f827 	bl	8006984 <USB_ReadPMA>
 8002936:	e07c      	b.n	8002a32 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002940:	b29b      	uxth	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4413      	add	r3, r2
 800294c:	3306      	adds	r3, #6
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	4413      	add	r3, r2
 8002956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002960:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	8b7b      	ldrh	r3, [r7, #26]
 8002968:	429a      	cmp	r2, r3
 800296a:	d306      	bcc.n	800297a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	699a      	ldr	r2, [r3, #24]
 8002970:	8b7b      	ldrh	r3, [r7, #26]
 8002972:	1ad2      	subs	r2, r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	619a      	str	r2, [r3, #24]
 8002978:	e002      	b.n	8002980 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d123      	bne.n	80029d0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a2:	83fb      	strh	r3, [r7, #30]
 80029a4:	8bfb      	ldrh	r3, [r7, #30]
 80029a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029aa:	83fb      	strh	r3, [r7, #30]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	441a      	add	r2, r3
 80029ba:	8bfb      	ldrh	r3, [r7, #30]
 80029bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d11f      	bne.n	8002a1a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f4:	83bb      	strh	r3, [r7, #28]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	441a      	add	r2, r3
 8002a04:	8bbb      	ldrh	r3, [r7, #28]
 8002a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a1a:	8b7b      	ldrh	r3, [r7, #26]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	6959      	ldr	r1, [r3, #20]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	895a      	ldrh	r2, [r3, #10]
 8002a2c:	8b7b      	ldrh	r3, [r7, #26]
 8002a2e:	f003 ffa9 	bl	8006984 <USB_ReadPMA>
    }
  }

  return count;
 8002a32:	8b7b      	ldrh	r3, [r7, #26]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3720      	adds	r7, #32
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b092      	sub	sp, #72	; 0x48
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	4613      	mov	r3, r2
 8002a48:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8132 	beq.w	8002cba <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d906      	bls.n	8002a98 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a90:	1ad2      	subs	r2, r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	619a      	str	r2, [r3, #24]
 8002a96:	e002      	b.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d12c      	bne.n	8002b00 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f006 fe5a 	bl	8009766 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 822f 	beq.w	8002f1c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad8:	827b      	strh	r3, [r7, #18]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	441a      	add	r2, r3
 8002ae8:	8a7b      	ldrh	r3, [r7, #18]
 8002aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002af2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	8013      	strh	r3, [r2, #0]
 8002afe:	e20d      	b.n	8002f1c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d01f      	beq.n	8002b4a <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b24:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	441a      	add	r2, r3
 8002b34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	f040 81e3 	bne.w	8002f1c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b5c:	441a      	add	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	69da      	ldr	r2, [r3, #28]
 8002b66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b68:	441a      	add	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	6a1a      	ldr	r2, [r3, #32]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d309      	bcc.n	8002b8e <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	6a1a      	ldr	r2, [r3, #32]
 8002b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b86:	1ad2      	subs	r2, r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	621a      	str	r2, [r3, #32]
 8002b8c:	e014      	b.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002b96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b98:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ba2:	e009      	b.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	785b      	ldrb	r3, [r3, #1]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d155      	bne.n	8002c6c <HAL_PCD_EP_DB_Transmit+0x230>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	011a      	lsls	r2, r3, #4
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	4413      	add	r3, r2
 8002be2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d112      	bne.n	8002c14 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	801a      	strh	r2, [r3, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	801a      	strh	r2, [r3, #0]
 8002c12:	e047      	b.n	8002ca4 <HAL_PCD_EP_DB_Transmit+0x268>
 8002c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c16:	2b3e      	cmp	r3, #62	; 0x3e
 8002c18:	d811      	bhi.n	8002c3e <HAL_PCD_EP_DB_Transmit+0x202>
 8002c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	029b      	lsls	r3, r3, #10
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	801a      	strh	r2, [r3, #0]
 8002c3c:	e032      	b.n	8002ca4 <HAL_PCD_EP_DB_Transmit+0x268>
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x218>
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	3b01      	subs	r3, #1
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	029b      	lsls	r3, r3, #10
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	801a      	strh	r2, [r3, #0]
 8002c6a:	e01b      	b.n	8002ca4 <HAL_PCD_EP_DB_Transmit+0x268>
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	785b      	ldrb	r3, [r3, #1]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d117      	bne.n	8002ca4 <HAL_PCD_EP_DB_Transmit+0x268>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	623b      	str	r3, [r7, #32]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	4413      	add	r3, r2
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	011a      	lsls	r2, r3, #4
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	4413      	add	r3, r2
 8002c96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	6959      	ldr	r1, [r3, #20]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	891a      	ldrh	r2, [r3, #8]
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f003 fe22 	bl	80068fc <USB_WritePMA>
 8002cb8:	e130      	b.n	8002f1c <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	3306      	adds	r3, #6
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	6812      	ldr	r2, [r2, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	699a      	ldr	r2, [r3, #24]
 8002ce8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d306      	bcc.n	8002cfc <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cf4:	1ad2      	subs	r2, r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	619a      	str	r2, [r3, #24]
 8002cfa:	e002      	b.n	8002d02 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d12c      	bne.n	8002d64 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f006 fd28 	bl	8009766 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f040 80fd 	bne.w	8002f1c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	441a      	add	r2, r3
 8002d4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	8013      	strh	r3, [r2, #0]
 8002d62:	e0db      	b.n	8002f1c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d11f      	bne.n	8002dae <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d88:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	441a      	add	r2, r3
 8002d98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	f040 80b1 	bne.w	8002f1c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dc0:	441a      	add	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dcc:	441a      	add	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	6a1a      	ldr	r2, [r3, #32]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d309      	bcc.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	6a1a      	ldr	r2, [r3, #32]
 8002de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dea:	1ad2      	subs	r2, r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	621a      	str	r2, [r3, #32]
 8002df0:	e014      	b.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002dfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dfc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e06:	e009      	b.n	8002e1c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2200      	movs	r2, #0
 8002e12:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	637b      	str	r3, [r7, #52]	; 0x34
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	785b      	ldrb	r3, [r3, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d155      	bne.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e3e:	4413      	add	r3, r2
 8002e40:	647b      	str	r3, [r7, #68]	; 0x44
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	011a      	lsls	r2, r3, #4
 8002e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e50:	643b      	str	r3, [r7, #64]	; 0x40
 8002e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d112      	bne.n	8002e7e <HAL_PCD_EP_DB_Transmit+0x442>
 8002e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e66:	801a      	strh	r2, [r3, #0]
 8002e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e7a:	801a      	strh	r2, [r3, #0]
 8002e7c:	e044      	b.n	8002f08 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	2b3e      	cmp	r3, #62	; 0x3e
 8002e82:	d811      	bhi.n	8002ea8 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_PCD_EP_DB_Transmit+0x45e>
 8002e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e96:	3301      	adds	r3, #1
 8002e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	029b      	lsls	r3, r3, #10
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea4:	801a      	strh	r2, [r3, #0]
 8002ea6:	e02f      	b.n	8002f08 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <HAL_PCD_EP_DB_Transmit+0x482>
 8002eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	029b      	lsls	r3, r3, #10
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed2:	801a      	strh	r2, [r3, #0]
 8002ed4:	e018      	b.n	8002f08 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	785b      	ldrb	r3, [r3, #1]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d114      	bne.n	8002f08 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eec:	4413      	add	r3, r2
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	011a      	lsls	r2, r3, #4
 8002ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef8:	4413      	add	r3, r2
 8002efa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002efe:	633b      	str	r3, [r7, #48]	; 0x30
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f06:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	6959      	ldr	r1, [r3, #20]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	895a      	ldrh	r2, [r3, #10]
 8002f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f003 fcf0 	bl	80068fc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f36:	823b      	strh	r3, [r7, #16]
 8002f38:	8a3b      	ldrh	r3, [r7, #16]
 8002f3a:	f083 0310 	eor.w	r3, r3, #16
 8002f3e:	823b      	strh	r3, [r7, #16]
 8002f40:	8a3b      	ldrh	r3, [r7, #16]
 8002f42:	f083 0320 	eor.w	r3, r3, #32
 8002f46:	823b      	strh	r3, [r7, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	441a      	add	r2, r3
 8002f56:	8a3b      	ldrh	r3, [r7, #16]
 8002f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3748      	adds	r7, #72	; 0x48
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b087      	sub	sp, #28
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	607b      	str	r3, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	817b      	strh	r3, [r7, #10]
 8002f84:	4613      	mov	r3, r2
 8002f86:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f88:	897b      	ldrh	r3, [r7, #10]
 8002f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00b      	beq.n	8002fac <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f94:	897b      	ldrh	r3, [r7, #10]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	e009      	b.n	8002fc0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fac:	897a      	ldrh	r2, [r7, #10]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002fc0:	893b      	ldrh	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d107      	bne.n	8002fd6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	80da      	strh	r2, [r3, #6]
 8002fd4:	e00b      	b.n	8002fee <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0c1b      	lsrs	r3, r3, #16
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	371c      	adds	r7, #28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr
	...

08002ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e26c      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8087 	beq.w	800312a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800301c:	4b92      	ldr	r3, [pc, #584]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b04      	cmp	r3, #4
 8003026:	d00c      	beq.n	8003042 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003028:	4b8f      	ldr	r3, [pc, #572]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 030c 	and.w	r3, r3, #12
 8003030:	2b08      	cmp	r3, #8
 8003032:	d112      	bne.n	800305a <HAL_RCC_OscConfig+0x5e>
 8003034:	4b8c      	ldr	r3, [pc, #560]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003040:	d10b      	bne.n	800305a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003042:	4b89      	ldr	r3, [pc, #548]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d06c      	beq.n	8003128 <HAL_RCC_OscConfig+0x12c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d168      	bne.n	8003128 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e246      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x76>
 8003064:	4b80      	ldr	r3, [pc, #512]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a7f      	ldr	r2, [pc, #508]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800306a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	e02e      	b.n	80030d0 <HAL_RCC_OscConfig+0xd4>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x98>
 800307a:	4b7b      	ldr	r3, [pc, #492]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a7a      	ldr	r2, [pc, #488]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	4b78      	ldr	r3, [pc, #480]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a77      	ldr	r2, [pc, #476]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800308c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e01d      	b.n	80030d0 <HAL_RCC_OscConfig+0xd4>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0xbc>
 800309e:	4b72      	ldr	r3, [pc, #456]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a71      	ldr	r2, [pc, #452]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b6f      	ldr	r3, [pc, #444]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6e      	ldr	r2, [pc, #440]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e00b      	b.n	80030d0 <HAL_RCC_OscConfig+0xd4>
 80030b8:	4b6b      	ldr	r3, [pc, #428]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a6a      	ldr	r2, [pc, #424]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b68      	ldr	r3, [pc, #416]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a67      	ldr	r2, [pc, #412]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d013      	beq.n	8003100 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe f8ca 	bl	8001270 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e0:	f7fe f8c6 	bl	8001270 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	; 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e1fa      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b5d      	ldr	r3, [pc, #372]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0xe4>
 80030fe:	e014      	b.n	800312a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe f8b6 	bl	8001270 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003108:	f7fe f8b2 	bl	8001270 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	; 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1e6      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311a:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x10c>
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d063      	beq.n	80031fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003136:	4b4c      	ldr	r3, [pc, #304]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003142:	4b49      	ldr	r3, [pc, #292]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b08      	cmp	r3, #8
 800314c:	d11c      	bne.n	8003188 <HAL_RCC_OscConfig+0x18c>
 800314e:	4b46      	ldr	r3, [pc, #280]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d116      	bne.n	8003188 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	4b43      	ldr	r3, [pc, #268]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_RCC_OscConfig+0x176>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e1ba      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003172:	4b3d      	ldr	r3, [pc, #244]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4939      	ldr	r1, [pc, #228]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003186:	e03a      	b.n	80031fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d020      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003190:	4b36      	ldr	r3, [pc, #216]	; (800326c <HAL_RCC_OscConfig+0x270>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7fe f86b 	bl	8001270 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319e:	f7fe f867 	bl	8001270 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e19b      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b0:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	4b2a      	ldr	r3, [pc, #168]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4927      	ldr	r1, [pc, #156]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
 80031d0:	e015      	b.n	80031fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d2:	4b26      	ldr	r3, [pc, #152]	; (800326c <HAL_RCC_OscConfig+0x270>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7fe f84a 	bl	8001270 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e0:	f7fe f846 	bl	8001270 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e17a      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f2:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d03a      	beq.n	8003280 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d019      	beq.n	8003246 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003212:	4b17      	ldr	r3, [pc, #92]	; (8003270 <HAL_RCC_OscConfig+0x274>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003218:	f7fe f82a 	bl	8001270 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003220:	f7fe f826 	bl	8001270 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e15a      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <HAL_RCC_OscConfig+0x26c>)
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800323e:	2001      	movs	r0, #1
 8003240:	f000 fada 	bl	80037f8 <RCC_Delay>
 8003244:	e01c      	b.n	8003280 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_RCC_OscConfig+0x274>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324c:	f7fe f810 	bl	8001270 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003252:	e00f      	b.n	8003274 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003254:	f7fe f80c 	bl	8001270 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d908      	bls.n	8003274 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e140      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000
 800326c:	42420000 	.word	0x42420000
 8003270:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003274:	4b9e      	ldr	r3, [pc, #632]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e9      	bne.n	8003254 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80a6 	beq.w	80033da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003292:	4b97      	ldr	r3, [pc, #604]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10d      	bne.n	80032ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329e:	4b94      	ldr	r3, [pc, #592]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	4a93      	ldr	r2, [pc, #588]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a8:	61d3      	str	r3, [r2, #28]
 80032aa:	4b91      	ldr	r3, [pc, #580]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b6:	2301      	movs	r3, #1
 80032b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ba:	4b8e      	ldr	r3, [pc, #568]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d118      	bne.n	80032f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c6:	4b8b      	ldr	r3, [pc, #556]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a8a      	ldr	r2, [pc, #552]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80032cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d2:	f7fd ffcd 	bl	8001270 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032da:	f7fd ffc9 	bl	8001270 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b64      	cmp	r3, #100	; 0x64
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e0fd      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ec:	4b81      	ldr	r3, [pc, #516]	; (80034f4 <HAL_RCC_OscConfig+0x4f8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x312>
 8003300:	4b7b      	ldr	r3, [pc, #492]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4a7a      	ldr	r2, [pc, #488]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6213      	str	r3, [r2, #32]
 800330c:	e02d      	b.n	800336a <HAL_RCC_OscConfig+0x36e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10c      	bne.n	8003330 <HAL_RCC_OscConfig+0x334>
 8003316:	4b76      	ldr	r3, [pc, #472]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	4a75      	ldr	r2, [pc, #468]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	6213      	str	r3, [r2, #32]
 8003322:	4b73      	ldr	r3, [pc, #460]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4a72      	ldr	r2, [pc, #456]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	6213      	str	r3, [r2, #32]
 800332e:	e01c      	b.n	800336a <HAL_RCC_OscConfig+0x36e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b05      	cmp	r3, #5
 8003336:	d10c      	bne.n	8003352 <HAL_RCC_OscConfig+0x356>
 8003338:	4b6d      	ldr	r3, [pc, #436]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4a6c      	ldr	r2, [pc, #432]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 800333e:	f043 0304 	orr.w	r3, r3, #4
 8003342:	6213      	str	r3, [r2, #32]
 8003344:	4b6a      	ldr	r3, [pc, #424]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4a69      	ldr	r2, [pc, #420]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6213      	str	r3, [r2, #32]
 8003350:	e00b      	b.n	800336a <HAL_RCC_OscConfig+0x36e>
 8003352:	4b67      	ldr	r3, [pc, #412]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4a66      	ldr	r2, [pc, #408]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	6213      	str	r3, [r2, #32]
 800335e:	4b64      	ldr	r3, [pc, #400]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	4a63      	ldr	r2, [pc, #396]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003364:	f023 0304 	bic.w	r3, r3, #4
 8003368:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d015      	beq.n	800339e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003372:	f7fd ff7d 	bl	8001270 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003378:	e00a      	b.n	8003390 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7fd ff79 	bl	8001270 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	; 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e0ab      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	4b57      	ldr	r3, [pc, #348]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0ee      	beq.n	800337a <HAL_RCC_OscConfig+0x37e>
 800339c:	e014      	b.n	80033c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339e:	f7fd ff67 	bl	8001270 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7fd ff63 	bl	8001270 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e095      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033bc:	4b4c      	ldr	r3, [pc, #304]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ee      	bne.n	80033a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d105      	bne.n	80033da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ce:	4b48      	ldr	r3, [pc, #288]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	4a47      	ldr	r2, [pc, #284]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 80033d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 8081 	beq.w	80034e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e4:	4b42      	ldr	r3, [pc, #264]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d061      	beq.n	80034b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d146      	bne.n	8003486 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f8:	4b3f      	ldr	r3, [pc, #252]	; (80034f8 <HAL_RCC_OscConfig+0x4fc>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fd ff37 	bl	8001270 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003406:	f7fd ff33 	bl	8001270 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e067      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003418:	4b35      	ldr	r3, [pc, #212]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342c:	d108      	bne.n	8003440 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800342e:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	492d      	ldr	r1, [pc, #180]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003440:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a19      	ldr	r1, [r3, #32]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	430b      	orrs	r3, r1
 8003452:	4927      	ldr	r1, [pc, #156]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <HAL_RCC_OscConfig+0x4fc>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fd ff07 	bl	8001270 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003466:	f7fd ff03 	bl	8001270 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e037      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x46a>
 8003484:	e02f      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <HAL_RCC_OscConfig+0x4fc>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fd fef0 	bl	8001270 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7fd feec 	bl	8001270 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e020      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x498>
 80034b2:	e018      	b.n	80034e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e013      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCC_OscConfig+0x4f4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d106      	bne.n	80034e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40007000 	.word	0x40007000
 80034f8:	42420060 	.word	0x42420060

080034fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0d0      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b6a      	ldr	r3, [pc, #424]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d910      	bls.n	8003540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b67      	ldr	r3, [pc, #412]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 0207 	bic.w	r2, r3, #7
 8003526:	4965      	ldr	r1, [pc, #404]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b63      	ldr	r3, [pc, #396]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0b8      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d020      	beq.n	800358e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003558:	4b59      	ldr	r3, [pc, #356]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4a58      	ldr	r2, [pc, #352]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003562:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003570:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a52      	ldr	r2, [pc, #328]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800357a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800357c:	4b50      	ldr	r3, [pc, #320]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	494d      	ldr	r1, [pc, #308]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d040      	beq.n	800361c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	4b47      	ldr	r3, [pc, #284]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d115      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e07f      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e073      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ca:	4b3d      	ldr	r3, [pc, #244]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e06b      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035da:	4b39      	ldr	r3, [pc, #228]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f023 0203 	bic.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4936      	ldr	r1, [pc, #216]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ec:	f7fd fe40 	bl	8001270 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fd fe3c 	bl	8001270 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e053      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 020c 	and.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d1eb      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800361c:	4b27      	ldr	r3, [pc, #156]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d210      	bcs.n	800364c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 0207 	bic.w	r2, r3, #7
 8003632:	4922      	ldr	r1, [pc, #136]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	4b20      	ldr	r3, [pc, #128]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e032      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003658:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4916      	ldr	r1, [pc, #88]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003676:	4b12      	ldr	r3, [pc, #72]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	490e      	ldr	r1, [pc, #56]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	4313      	orrs	r3, r2
 8003688:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800368a:	f000 f821 	bl	80036d0 <HAL_RCC_GetSysClockFreq>
 800368e:	4601      	mov	r1, r0
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	5cd3      	ldrb	r3, [r2, r3]
 800369e:	fa21 f303 	lsr.w	r3, r1, r3
 80036a2:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <HAL_RCC_ClockConfig+0x1cc>)
 80036a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036a6:	4b09      	ldr	r3, [pc, #36]	; (80036cc <HAL_RCC_ClockConfig+0x1d0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fd fd9e 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40022000 	.word	0x40022000
 80036c0:	40021000 	.word	0x40021000
 80036c4:	0800d14c 	.word	0x0800d14c
 80036c8:	20000000 	.word	0x20000000
 80036cc:	20000004 	.word	0x20000004

080036d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d0:	b490      	push	{r4, r7}
 80036d2:	b08a      	sub	sp, #40	; 0x28
 80036d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036d6:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036d8:	1d3c      	adds	r4, r7, #4
 80036da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036e0:	4b28      	ldr	r3, [pc, #160]	; (8003784 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036fa:	4b23      	ldr	r3, [pc, #140]	; (8003788 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b04      	cmp	r3, #4
 8003708:	d002      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0x40>
 800370a:	2b08      	cmp	r3, #8
 800370c:	d003      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x46>
 800370e:	e02d      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003710:	4b1e      	ldr	r3, [pc, #120]	; (800378c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003712:	623b      	str	r3, [r7, #32]
      break;
 8003714:	e02d      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	0c9b      	lsrs	r3, r3, #18
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003722:	4413      	add	r3, r2
 8003724:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003728:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003734:	4b14      	ldr	r3, [pc, #80]	; (8003788 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	0c5b      	lsrs	r3, r3, #17
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003742:	4413      	add	r3, r2
 8003744:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003748:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	4a0f      	ldr	r2, [pc, #60]	; (800378c <HAL_RCC_GetSysClockFreq+0xbc>)
 800374e:	fb02 f203 	mul.w	r2, r2, r3
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
 800375a:	e004      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003760:	fb02 f303 	mul.w	r3, r2, r3
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	623b      	str	r3, [r7, #32]
      break;
 800376a:	e002      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800376c:	4b07      	ldr	r3, [pc, #28]	; (800378c <HAL_RCC_GetSysClockFreq+0xbc>)
 800376e:	623b      	str	r3, [r7, #32]
      break;
 8003770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003772:	6a3b      	ldr	r3, [r7, #32]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3728      	adds	r7, #40	; 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	bc90      	pop	{r4, r7}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	0800c8b8 	.word	0x0800c8b8
 8003784:	0800c8c8 	.word	0x0800c8c8
 8003788:	40021000 	.word	0x40021000
 800378c:	007a1200 	.word	0x007a1200
 8003790:	003d0900 	.word	0x003d0900

08003794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003798:	4b02      	ldr	r3, [pc, #8]	; (80037a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800379a:	681b      	ldr	r3, [r3, #0]
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	20000000 	.word	0x20000000

080037a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037ac:	f7ff fff2 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037b0:	4601      	mov	r1, r0
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	0a1b      	lsrs	r3, r3, #8
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4a03      	ldr	r2, [pc, #12]	; (80037cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037be:	5cd3      	ldrb	r3, [r2, r3]
 80037c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000
 80037cc:	0800d15c 	.word	0x0800d15c

080037d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037d4:	f7ff ffde 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037d8:	4601      	mov	r1, r0
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	0adb      	lsrs	r3, r3, #11
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4a03      	ldr	r2, [pc, #12]	; (80037f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e6:	5cd3      	ldrb	r3, [r2, r3]
 80037e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000
 80037f4:	0800d15c 	.word	0x0800d15c

080037f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <RCC_Delay+0x34>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <RCC_Delay+0x38>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	0a5b      	lsrs	r3, r3, #9
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003814:	bf00      	nop
  }
  while (Delay --);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1e5a      	subs	r2, r3, #1
 800381a:	60fa      	str	r2, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1f9      	bne.n	8003814 <RCC_Delay+0x1c>
}
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20000000 	.word	0x20000000
 8003830:	10624dd3 	.word	0x10624dd3

08003834 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d07d      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003850:	2300      	movs	r3, #0
 8003852:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003854:	4b4f      	ldr	r3, [pc, #316]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10d      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003860:	4b4c      	ldr	r3, [pc, #304]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	4a4b      	ldr	r2, [pc, #300]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386a:	61d3      	str	r3, [r2, #28]
 800386c:	4b49      	ldr	r3, [pc, #292]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003878:	2301      	movs	r3, #1
 800387a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387c:	4b46      	ldr	r3, [pc, #280]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d118      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003888:	4b43      	ldr	r3, [pc, #268]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a42      	ldr	r2, [pc, #264]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800388e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003892:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003894:	f7fd fcec 	bl	8001270 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389a:	e008      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389c:	f7fd fce8 	bl	8001270 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b64      	cmp	r3, #100	; 0x64
 80038a8:	d901      	bls.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e06d      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ae:	4b3a      	ldr	r3, [pc, #232]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038ba:	4b36      	ldr	r3, [pc, #216]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d02e      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d027      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038d8:	4b2e      	ldr	r3, [pc, #184]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038e2:	4b2e      	ldr	r3, [pc, #184]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038e8:	4b2c      	ldr	r3, [pc, #176]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038ee:	4a29      	ldr	r2, [pc, #164]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d014      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fd fcb7 	bl	8001270 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003904:	e00a      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003906:	f7fd fcb3 	bl	8001270 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	f241 3288 	movw	r2, #5000	; 0x1388
 8003914:	4293      	cmp	r3, r2
 8003916:	d901      	bls.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e036      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ee      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4917      	ldr	r1, [pc, #92]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003936:	4313      	orrs	r3, r2
 8003938:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800393a:	7dfb      	ldrb	r3, [r7, #23]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	4a13      	ldr	r2, [pc, #76]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003958:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	490b      	ldr	r1, [pc, #44]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	2b00      	cmp	r3, #0
 8003974:	d008      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003976:	4b07      	ldr	r3, [pc, #28]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	4904      	ldr	r1, [pc, #16]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000
 8003998:	40007000 	.word	0x40007000
 800399c:	42420440 	.word	0x42420440

080039a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e076      	b.n	8003aa0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d108      	bne.n	80039cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c2:	d009      	beq.n	80039d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	61da      	str	r2, [r3, #28]
 80039ca:	e005      	b.n	80039d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fd fa1c 	bl	8000e30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5c:	ea42 0103 	orr.w	r1, r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	0c1a      	lsrs	r2, r3, #16
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f002 0204 	and.w	r2, r2, #4
 8003a7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08c      	sub	sp, #48	; 0x30
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_SPI_TransmitReceive+0x26>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e18a      	b.n	8003de4 <HAL_SPI_TransmitReceive+0x33c>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ad6:	f7fd fbcb 	bl	8001270 <HAL_GetTick>
 8003ada:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003aec:	887b      	ldrh	r3, [r7, #2]
 8003aee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003af0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d00f      	beq.n	8003b18 <HAL_SPI_TransmitReceive+0x70>
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afe:	d107      	bne.n	8003b10 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d103      	bne.n	8003b10 <HAL_SPI_TransmitReceive+0x68>
 8003b08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d003      	beq.n	8003b18 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
 8003b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b16:	e15b      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_SPI_TransmitReceive+0x82>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_SPI_TransmitReceive+0x82>
 8003b24:	887b      	ldrh	r3, [r7, #2]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b30:	e14e      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d003      	beq.n	8003b46 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2205      	movs	r2, #5
 8003b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	887a      	ldrh	r2, [r7, #2]
 8003b56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	887a      	ldrh	r2, [r7, #2]
 8003b5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	887a      	ldrh	r2, [r7, #2]
 8003b68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	887a      	ldrh	r2, [r7, #2]
 8003b6e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b40      	cmp	r3, #64	; 0x40
 8003b88:	d007      	beq.n	8003b9a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba2:	d178      	bne.n	8003c96 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_SPI_TransmitReceive+0x10a>
 8003bac:	8b7b      	ldrh	r3, [r7, #26]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d166      	bne.n	8003c80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	881a      	ldrh	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	1c9a      	adds	r2, r3, #2
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bd6:	e053      	b.n	8003c80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d11b      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x176>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d016      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x176>
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d113      	bne.n	8003c1e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	881a      	ldrh	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	1c9a      	adds	r2, r3, #2
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d119      	bne.n	8003c60 <HAL_SPI_TransmitReceive+0x1b8>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d014      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	b292      	uxth	r2, r2
 8003c42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	1c9a      	adds	r2, r3, #2
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c60:	f7fd fb06 	bl	8001270 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d807      	bhi.n	8003c80 <HAL_SPI_TransmitReceive+0x1d8>
 8003c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d003      	beq.n	8003c80 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c7e:	e0a7      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1a6      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x130>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1a1      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x130>
 8003c94:	e07c      	b.n	8003d90 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_SPI_TransmitReceive+0x1fc>
 8003c9e:	8b7b      	ldrh	r3, [r7, #26]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d16b      	bne.n	8003d7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	330c      	adds	r3, #12
 8003cae:	7812      	ldrb	r2, [r2, #0]
 8003cb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cca:	e057      	b.n	8003d7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d11c      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x26c>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d017      	beq.n	8003d14 <HAL_SPI_TransmitReceive+0x26c>
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d114      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	7812      	ldrb	r2, [r2, #0]
 8003cf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d119      	bne.n	8003d56 <HAL_SPI_TransmitReceive+0x2ae>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d014      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d52:	2301      	movs	r3, #1
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d56:	f7fd fa8b 	bl	8001270 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d803      	bhi.n	8003d6e <HAL_SPI_TransmitReceive+0x2c6>
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d102      	bne.n	8003d74 <HAL_SPI_TransmitReceive+0x2cc>
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d103      	bne.n	8003d7c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d7a:	e029      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1a2      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x224>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d19d      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f8b1 	bl	8003efc <SPI_EndRxTxTransaction>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d006      	beq.n	8003dae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003dac:	e010      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	e000      	b.n	8003dd0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003dce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003de0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3730      	adds	r7, #48	; 0x30
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dfc:	f7fd fa38 	bl	8001270 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	4413      	add	r3, r2
 8003e0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e0c:	f7fd fa30 	bl	8001270 <HAL_GetTick>
 8003e10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e12:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	015b      	lsls	r3, r3, #5
 8003e18:	0d1b      	lsrs	r3, r3, #20
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	fb02 f303 	mul.w	r3, r2, r3
 8003e20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e22:	e054      	b.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	d050      	beq.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e2c:	f7fd fa20 	bl	8001270 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d902      	bls.n	8003e42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d13d      	bne.n	8003ebe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e5a:	d111      	bne.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e64:	d004      	beq.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6e:	d107      	bne.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e88:	d10f      	bne.n	8003eaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e017      	b.n	8003eee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	bf0c      	ite	eq
 8003ede:	2301      	moveq	r3, #1
 8003ee0:	2300      	movne	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d19b      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3720      	adds	r7, #32
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000000 	.word	0x20000000

08003efc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2180      	movs	r1, #128	; 0x80
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f7ff ff6a 	bl	8003dec <SPI_WaitFlagStateUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f22:	f043 0220 	orr.w	r2, r3, #32
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e000      	b.n	8003f30 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e04a      	b.n	8003fe0 <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d111      	bne.n	8003f7a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fad0 	bl	8004504 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d102      	bne.n	8003f72 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <HAL_UART_Init+0xb0>)
 8003f70:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2224      	movs	r2, #36	; 0x24
 8003f7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fc04 	bl	80047a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fa6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fb6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	08000ec5 	.word	0x08000ec5

08003fec <HAL_UART_RegisterCallback>:
  *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID, pUART_CallbackTypeDef pCallback)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d107      	bne.n	8004014 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004008:	f043 0220 	orr.w	r2, r3, #32
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e08e      	b.n	8004132 <HAL_UART_RegisterCallback+0x146>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_UART_RegisterCallback+0x36>
 800401e:	2302      	movs	r3, #2
 8004020:	e087      	b.n	8004132 <HAL_UART_RegisterCallback+0x146>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (huart->gState == HAL_UART_STATE_READY)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b20      	cmp	r3, #32
 8004034:	d152      	bne.n	80040dc <HAL_UART_RegisterCallback+0xf0>
  {
    switch (CallbackID)
 8004036:	7afb      	ldrb	r3, [r7, #11]
 8004038:	2b0c      	cmp	r3, #12
 800403a:	d845      	bhi.n	80040c8 <HAL_UART_RegisterCallback+0xdc>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <HAL_UART_RegisterCallback+0x58>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004079 	.word	0x08004079
 8004048:	08004081 	.word	0x08004081
 800404c:	08004089 	.word	0x08004089
 8004050:	08004091 	.word	0x08004091
 8004054:	08004099 	.word	0x08004099
 8004058:	080040a1 	.word	0x080040a1
 800405c:	080040a9 	.word	0x080040a9
 8004060:	080040b1 	.word	0x080040b1
 8004064:	080040c9 	.word	0x080040c9
 8004068:	080040c9 	.word	0x080040c9
 800406c:	080040c9 	.word	0x080040c9
 8004070:	080040b9 	.word	0x080040b9
 8004074:	080040c1 	.word	0x080040c1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	641a      	str	r2, [r3, #64]	; 0x40
        break;
 800407e:	e053      	b.n	8004128 <HAL_UART_RegisterCallback+0x13c>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8004086:	e04f      	b.n	8004128 <HAL_UART_RegisterCallback+0x13c>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800408e:	e04b      	b.n	8004128 <HAL_UART_RegisterCallback+0x13c>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004096:	e047      	b.n	8004128 <HAL_UART_RegisterCallback+0x13c>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800409e:	e043      	b.n	8004128 <HAL_UART_RegisterCallback+0x13c>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80040a6:	e03f      	b.n	8004128 <HAL_UART_RegisterCallback+0x13c>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80040ae:	e03b      	b.n	8004128 <HAL_UART_RegisterCallback+0x13c>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80040b6:	e037      	b.n	8004128 <HAL_UART_RegisterCallback+0x13c>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80040be:	e033      	b.n	8004128 <HAL_UART_RegisterCallback+0x13c>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80040c6:	e02f      	b.n	8004128 <HAL_UART_RegisterCallback+0x13c>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Return error status */
        status =  HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	75fb      	strb	r3, [r7, #23]
        break;
 80040d8:	bf00      	nop
 80040da:	e025      	b.n	8004128 <HAL_UART_RegisterCallback+0x13c>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d117      	bne.n	8004118 <HAL_UART_RegisterCallback+0x12c>
  {
    switch (CallbackID)
 80040e8:	7afb      	ldrb	r3, [r7, #11]
 80040ea:	2b0b      	cmp	r3, #11
 80040ec:	d002      	beq.n	80040f4 <HAL_UART_RegisterCallback+0x108>
 80040ee:	2b0c      	cmp	r3, #12
 80040f0:	d004      	beq.n	80040fc <HAL_UART_RegisterCallback+0x110>
 80040f2:	e007      	b.n	8004104 <HAL_UART_RegisterCallback+0x118>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80040fa:	e015      	b.n	8004128 <HAL_UART_RegisterCallback+0x13c>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8004102:	e011      	b.n	8004128 <HAL_UART_RegisterCallback+0x13c>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	f043 0220 	orr.w	r2, r3, #32
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Return error status */
        status =  HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	75fb      	strb	r3, [r7, #23]
        break;
 8004114:	bf00      	nop
 8004116:	e007      	b.n	8004128 <HAL_UART_RegisterCallback+0x13c>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	f043 0220 	orr.w	r2, r3, #32
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    status =  HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8004130:	7dfb      	ldrb	r3, [r7, #23]
}
 8004132:	4618      	mov	r0, r3
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr

0800413c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	4613      	mov	r3, r2
 8004148:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b20      	cmp	r3, #32
 8004154:	d130      	bne.n	80041b8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_UART_Transmit_IT+0x26>
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e029      	b.n	80041ba <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_UART_Transmit_IT+0x38>
 8004170:	2302      	movs	r3, #2
 8004172:	e022      	b.n	80041ba <HAL_UART_Transmit_IT+0x7e>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	88fa      	ldrh	r2, [r7, #6]
 8004186:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	88fa      	ldrh	r2, [r7, #6]
 800418c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2221      	movs	r2, #33	; 0x21
 8004198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041b2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d140      	bne.n	8004260 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_UART_Receive_IT+0x26>
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e039      	b.n	8004262 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_UART_Receive_IT+0x38>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e032      	b.n	8004262 <HAL_UART_Receive_IT+0x9e>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	88fa      	ldrh	r2, [r7, #6]
 800420e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	88fa      	ldrh	r2, [r7, #6]
 8004214:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2222      	movs	r2, #34	; 0x22
 8004220:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800423a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0220 	orr.w	r2, r2, #32
 800425a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800425c:	2300      	movs	r3, #0
 800425e:	e000      	b.n	8004262 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004260:	2302      	movs	r3, #2
  }
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10d      	bne.n	80042be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <HAL_UART_IRQHandler+0x52>
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f9f0 	bl	800469c <UART_Receive_IT>
      return;
 80042bc:	e0d4      	b.n	8004468 <HAL_UART_IRQHandler+0x1fc>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80b3 	beq.w	800442c <HAL_UART_IRQHandler+0x1c0>
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <HAL_UART_IRQHandler+0x70>
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 80a8 	beq.w	800442c <HAL_UART_IRQHandler+0x1c0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_UART_IRQHandler+0x90>
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f4:	f043 0201 	orr.w	r2, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_UART_IRQHandler+0xb0>
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004314:	f043 0202 	orr.w	r2, r3, #2
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_UART_IRQHandler+0xd0>
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	f043 0204 	orr.w	r2, r3, #4
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00f      	beq.n	8004366 <HAL_UART_IRQHandler+0xfa>
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d104      	bne.n	800435a <HAL_UART_IRQHandler+0xee>
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	f043 0208 	orr.w	r2, r3, #8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d07b      	beq.n	8004466 <HAL_UART_IRQHandler+0x1fa>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <HAL_UART_IRQHandler+0x11c>
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f98a 	bl	800469c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <HAL_UART_IRQHandler+0x144>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d033      	beq.n	8004418 <HAL_UART_IRQHandler+0x1ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f8d9 	bl	8004568 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d024      	beq.n	800440e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d013      	beq.n	8004404 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e0:	4a23      	ldr	r2, [pc, #140]	; (8004470 <HAL_UART_IRQHandler+0x204>)
 80043e2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fd f87b 	bl	80014e4 <HAL_DMA_Abort_IT>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d019      	beq.n	8004428 <HAL_UART_IRQHandler+0x1bc>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043fe:	4610      	mov	r0, r2
 8004400:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004402:	e011      	b.n	8004428 <HAL_UART_IRQHandler+0x1bc>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440c:	e00c      	b.n	8004428 <HAL_UART_IRQHandler+0x1bc>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004416:	e007      	b.n	8004428 <HAL_UART_IRQHandler+0x1bc>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004426:	e01e      	b.n	8004466 <HAL_UART_IRQHandler+0x1fa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	bf00      	nop
    return;
 800442a:	e01c      	b.n	8004466 <HAL_UART_IRQHandler+0x1fa>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004432:	2b00      	cmp	r3, #0
 8004434:	d008      	beq.n	8004448 <HAL_UART_IRQHandler+0x1dc>
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_UART_IRQHandler+0x1dc>
  {
    UART_Transmit_IT(huart);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f8c3 	bl	80045cc <UART_Transmit_IT>
    return;
 8004446:	e00f      	b.n	8004468 <HAL_UART_IRQHandler+0x1fc>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_UART_IRQHandler+0x1fc>
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_UART_IRQHandler+0x1fc>
  {
    UART_EndTransmit_IT(huart);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f904 	bl	800466a <UART_EndTransmit_IT>
    return;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <HAL_UART_IRQHandler+0x1fc>
    return;
 8004466:	bf00      	nop
  }
}
 8004468:	3720      	adds	r7, #32
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	080045a3 	.word	0x080045a3

08004474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr

08004486 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr

080044aa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr

080044f2 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a0e      	ldr	r2, [pc, #56]	; (8004548 <UART_InitCallbacksToDefault+0x44>)
 8004510:	641a      	str	r2, [r3, #64]	; 0x40
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a0d      	ldr	r2, [pc, #52]	; (800454c <UART_InitCallbacksToDefault+0x48>)
 8004516:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a0d      	ldr	r2, [pc, #52]	; (8004550 <UART_InitCallbacksToDefault+0x4c>)
 800451c:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a0c      	ldr	r2, [pc, #48]	; (8004554 <UART_InitCallbacksToDefault+0x50>)
 8004522:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a0c      	ldr	r2, [pc, #48]	; (8004558 <UART_InitCallbacksToDefault+0x54>)
 8004528:	651a      	str	r2, [r3, #80]	; 0x50
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a0b      	ldr	r2, [pc, #44]	; (800455c <UART_InitCallbacksToDefault+0x58>)
 800452e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a0b      	ldr	r2, [pc, #44]	; (8004560 <UART_InitCallbacksToDefault+0x5c>)
 8004534:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a0a      	ldr	r2, [pc, #40]	; (8004564 <UART_InitCallbacksToDefault+0x60>)
 800453a:	65da      	str	r2, [r3, #92]	; 0x5c

}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	08004487 	.word	0x08004487
 800454c:	08004475 	.word	0x08004475
 8004550:	080044ab 	.word	0x080044ab
 8004554:	08004499 	.word	0x08004499
 8004558:	080044bd 	.word	0x080044bd
 800455c:	080044cf 	.word	0x080044cf
 8004560:	080044e1 	.word	0x080044e1
 8004564:	080044f3 	.word	0x080044f3

08004568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800457e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695a      	ldr	r2, [r3, #20]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr

080045a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b21      	cmp	r3, #33	; 0x21
 80045de:	d13e      	bne.n	800465e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e8:	d114      	bne.n	8004614 <UART_Transmit_IT+0x48>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d110      	bne.n	8004614 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004606:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	1c9a      	adds	r2, r3, #2
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	621a      	str	r2, [r3, #32]
 8004612:	e008      	b.n	8004626 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	1c59      	adds	r1, r3, #1
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6211      	str	r1, [r2, #32]
 800461e:	781a      	ldrb	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29b      	uxth	r3, r3
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	4619      	mov	r1, r3
 8004634:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10f      	bne.n	800465a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004648:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004658:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	e000      	b.n	8004660 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800465e:	2302      	movs	r3, #2
  }
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr

0800466a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004680:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b22      	cmp	r3, #34	; 0x22
 80046ae:	d171      	bne.n	8004794 <UART_Receive_IT+0xf8>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b8:	d117      	bne.n	80046ea <UART_Receive_IT+0x4e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d113      	bne.n	80046ea <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ca:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	1c9a      	adds	r2, r3, #2
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28
 80046e8:	e026      	b.n	8004738 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fc:	d007      	beq.n	800470e <UART_Receive_IT+0x72>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <UART_Receive_IT+0x80>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	e008      	b.n	800472e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004728:	b2da      	uxtb	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29b      	uxth	r3, r3
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4619      	mov	r1, r3
 8004746:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004748:	2b00      	cmp	r3, #0
 800474a:	d121      	bne.n	8004790 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0220 	bic.w	r2, r2, #32
 800475a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800476a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695a      	ldr	r2, [r3, #20]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0201 	bic.w	r2, r2, #1
 800477a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	4798      	blx	r3
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e002      	b.n	8004796 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	e000      	b.n	8004796 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004794:	2302      	movs	r3, #2
  }
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047da:	f023 030c 	bic.w	r3, r3, #12
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	430b      	orrs	r3, r1
 80047e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a2c      	ldr	r2, [pc, #176]	; (80048b4 <UART_SetConfig+0x114>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d103      	bne.n	8004810 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004808:	f7fe ffe2 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	e002      	b.n	8004816 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004810:	f7fe ffca 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8004814:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	009a      	lsls	r2, r3, #2
 8004820:	441a      	add	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	4a22      	ldr	r2, [pc, #136]	; (80048b8 <UART_SetConfig+0x118>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	0119      	lsls	r1, r3, #4
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	009a      	lsls	r2, r3, #2
 8004840:	441a      	add	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	fbb2 f2f3 	udiv	r2, r2, r3
 800484c:	4b1a      	ldr	r3, [pc, #104]	; (80048b8 <UART_SetConfig+0x118>)
 800484e:	fba3 0302 	umull	r0, r3, r3, r2
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	2064      	movs	r0, #100	; 0x64
 8004856:	fb00 f303 	mul.w	r3, r0, r3
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	3332      	adds	r3, #50	; 0x32
 8004860:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <UART_SetConfig+0x118>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800486c:	4419      	add	r1, r3
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009a      	lsls	r2, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	fbb2 f2f3 	udiv	r2, r2, r3
 8004884:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <UART_SetConfig+0x118>)
 8004886:	fba3 0302 	umull	r0, r3, r3, r2
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2064      	movs	r0, #100	; 0x64
 800488e:	fb00 f303 	mul.w	r3, r0, r3
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	3332      	adds	r3, #50	; 0x32
 8004898:	4a07      	ldr	r2, [pc, #28]	; (80048b8 <UART_SetConfig+0x118>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	f003 020f 	and.w	r2, r3, #15
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	440a      	add	r2, r1
 80048aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40013800 	.word	0x40013800
 80048b8:	51eb851f 	.word	0x51eb851f

080048bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80048bc:	b084      	sub	sp, #16
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	f107 0014 	add.w	r0, r7, #20
 80048ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	b004      	add	sp, #16
 80048da:	4770      	bx	lr

080048dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80048ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80048f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004910:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004914:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	b29b      	uxth	r3, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	b29b      	uxth	r3, r3
 8004926:	4013      	ands	r3, r2
 8004928:	b29a      	uxth	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr

0800493c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr

08004954 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004954:	b084      	sub	sp, #16
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	f107 0014 	add.w	r0, r7, #20
 8004962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	b004      	add	sp, #16
 8004992:	4770      	bx	lr

08004994 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004994:	b480      	push	{r7}
 8004996:	b09b      	sub	sp, #108	; 0x6c
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80049b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	78db      	ldrb	r3, [r3, #3]
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d81f      	bhi.n	8004a06 <USB_ActivateEndpoint+0x72>
 80049c6:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <USB_ActivateEndpoint+0x38>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	080049dd 	.word	0x080049dd
 80049d0:	080049f9 	.word	0x080049f9
 80049d4:	08004a0f 	.word	0x08004a0f
 80049d8:	080049eb 	.word	0x080049eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80049dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049e4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80049e8:	e012      	b.n	8004a10 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80049ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049ee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80049f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80049f6:	e00b      	b.n	8004a10 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80049f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80049fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a00:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a04:	e004      	b.n	8004a10 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004a0c:	e000      	b.n	8004a10 <USB_ActivateEndpoint+0x7c>
      break;
 8004a0e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	441a      	add	r2, r3
 8004a1a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	441a      	add	r2, r3
 8004a60:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	7b1b      	ldrb	r3, [r3, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f040 8149 	bne.w	8004d14 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 8084 	beq.w	8004b94 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	011a      	lsls	r2, r3, #4
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	88db      	ldrh	r3, [r3, #6]
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	81fb      	strh	r3, [r7, #14]
 8004ace:	89fb      	ldrh	r3, [r7, #14]
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01b      	beq.n	8004b10 <USB_ActivateEndpoint+0x17c>
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aee:	81bb      	strh	r3, [r7, #12]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	441a      	add	r2, r3
 8004afa:	89bb      	ldrh	r3, [r7, #12]
 8004afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	78db      	ldrb	r3, [r3, #3]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d020      	beq.n	8004b5a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b2e:	813b      	strh	r3, [r7, #8]
 8004b30:	893b      	ldrh	r3, [r7, #8]
 8004b32:	f083 0320 	eor.w	r3, r3, #32
 8004b36:	813b      	strh	r3, [r7, #8]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	441a      	add	r2, r3
 8004b42:	893b      	ldrh	r3, [r7, #8]
 8004b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	8013      	strh	r3, [r2, #0]
 8004b58:	e27f      	b.n	800505a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b70:	817b      	strh	r3, [r7, #10]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	441a      	add	r2, r3
 8004b7c:	897b      	ldrh	r3, [r7, #10]
 8004b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8013      	strh	r3, [r2, #0]
 8004b92:	e262      	b.n	800505a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	4413      	add	r3, r2
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	011a      	lsls	r2, r3, #4
 8004bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	88db      	ldrh	r3, [r3, #6]
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	4413      	add	r3, r2
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	011a      	lsls	r2, r3, #4
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	4413      	add	r3, r2
 8004be6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bea:	623b      	str	r3, [r7, #32]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d112      	bne.n	8004c1a <USB_ActivateEndpoint+0x286>
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	801a      	strh	r2, [r3, #0]
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	801a      	strh	r2, [r3, #0]
 8004c18:	e02f      	b.n	8004c7a <USB_ActivateEndpoint+0x2e6>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8004c20:	d813      	bhi.n	8004c4a <USB_ActivateEndpoint+0x2b6>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	085b      	lsrs	r3, r3, #1
 8004c28:	663b      	str	r3, [r7, #96]	; 0x60
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <USB_ActivateEndpoint+0x2a8>
 8004c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c38:	3301      	adds	r3, #1
 8004c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	029b      	lsls	r3, r3, #10
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	801a      	strh	r2, [r3, #0]
 8004c48:	e017      	b.n	8004c7a <USB_ActivateEndpoint+0x2e6>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	663b      	str	r3, [r7, #96]	; 0x60
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 031f 	and.w	r3, r3, #31
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d102      	bne.n	8004c64 <USB_ActivateEndpoint+0x2d0>
 8004c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c60:	3b01      	subs	r3, #1
 8004c62:	663b      	str	r3, [r7, #96]	; 0x60
 8004c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	029b      	lsls	r3, r3, #10
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	83fb      	strh	r3, [r7, #30]
 8004c88:	8bfb      	ldrh	r3, [r7, #30]
 8004c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01b      	beq.n	8004cca <USB_ActivateEndpoint+0x336>
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca8:	83bb      	strh	r3, [r7, #28]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	441a      	add	r2, r3
 8004cb4:	8bbb      	ldrh	r3, [r7, #28]
 8004cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce0:	837b      	strh	r3, [r7, #26]
 8004ce2:	8b7b      	ldrh	r3, [r7, #26]
 8004ce4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ce8:	837b      	strh	r3, [r7, #26]
 8004cea:	8b7b      	ldrh	r3, [r7, #26]
 8004cec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cf0:	837b      	strh	r3, [r7, #26]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	441a      	add	r2, r3
 8004cfc:	8b7b      	ldrh	r3, [r7, #26]
 8004cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	8013      	strh	r3, [r2, #0]
 8004d12:	e1a2      	b.n	800505a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	441a      	add	r2, r3
 8004d38:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d44:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d60:	4413      	add	r3, r2
 8004d62:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	011a      	lsls	r2, r3, #4
 8004d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d72:	657b      	str	r3, [r7, #84]	; 0x54
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	891b      	ldrh	r3, [r3, #8]
 8004d78:	085b      	lsrs	r3, r3, #1
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d82:	801a      	strh	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	653b      	str	r3, [r7, #80]	; 0x50
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d94:	4413      	add	r3, r2
 8004d96:	653b      	str	r3, [r7, #80]	; 0x50
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	011a      	lsls	r2, r3, #4
 8004d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	895b      	ldrh	r3, [r3, #10]
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f040 8091 	bne.w	8004ee4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004dd0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01b      	beq.n	8004e12 <USB_ActivateEndpoint+0x47e>
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	441a      	add	r2, r3
 8004dfc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004e20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d01b      	beq.n	8004e62 <USB_ActivateEndpoint+0x4ce>
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e40:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	441a      	add	r2, r3
 8004e4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e78:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e80:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e88:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	441a      	add	r2, r3
 8004e94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec0:	867b      	strh	r3, [r7, #50]	; 0x32
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	441a      	add	r2, r3
 8004ecc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	8013      	strh	r3, [r2, #0]
 8004ee2:	e0ba      	b.n	800505a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004ef4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01d      	beq.n	8004f3c <USB_ActivateEndpoint+0x5a8>
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	441a      	add	r2, r3
 8004f24:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004f4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01d      	beq.n	8004f94 <USB_ActivateEndpoint+0x600>
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	441a      	add	r2, r3
 8004f7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	78db      	ldrb	r3, [r3, #3]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d024      	beq.n	8004fe6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004fb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004fba:	f083 0320 	eor.w	r3, r3, #32
 8004fbe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	441a      	add	r2, r3
 8004fcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	8013      	strh	r3, [r2, #0]
 8004fe4:	e01d      	b.n	8005022 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ffc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	441a      	add	r2, r3
 800500a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800500e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800501e:	b29b      	uxth	r3, r3
 8005020:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005038:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	441a      	add	r2, r3
 8005044:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800504a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800504e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005056:	b29b      	uxth	r3, r3
 8005058:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800505a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800505e:	4618      	mov	r0, r3
 8005060:	376c      	adds	r7, #108	; 0x6c
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005068:	b480      	push	{r7}
 800506a:	b08d      	sub	sp, #52	; 0x34
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	7b1b      	ldrb	r3, [r3, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	f040 808e 	bne.w	8005198 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	785b      	ldrb	r3, [r3, #1]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d044      	beq.n	800510e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	81bb      	strh	r3, [r7, #12]
 8005092:	89bb      	ldrh	r3, [r7, #12]
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01b      	beq.n	80050d4 <USB_DeactivateEndpoint+0x6c>
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b2:	817b      	strh	r3, [r7, #10]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	441a      	add	r2, r3
 80050be:	897b      	ldrh	r3, [r7, #10]
 80050c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ea:	813b      	strh	r3, [r7, #8]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	441a      	add	r2, r3
 80050f6:	893b      	ldrh	r3, [r7, #8]
 80050f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005108:	b29b      	uxth	r3, r3
 800510a:	8013      	strh	r3, [r2, #0]
 800510c:	e192      	b.n	8005434 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	827b      	strh	r3, [r7, #18]
 800511c:	8a7b      	ldrh	r3, [r7, #18]
 800511e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01b      	beq.n	800515e <USB_DeactivateEndpoint+0xf6>
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513c:	823b      	strh	r3, [r7, #16]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	441a      	add	r2, r3
 8005148:	8a3b      	ldrh	r3, [r7, #16]
 800514a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800514e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005152:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515a:	b29b      	uxth	r3, r3
 800515c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005174:	81fb      	strh	r3, [r7, #14]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	441a      	add	r2, r3
 8005180:	89fb      	ldrh	r3, [r7, #14]
 8005182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005192:	b29b      	uxth	r3, r3
 8005194:	8013      	strh	r3, [r2, #0]
 8005196:	e14d      	b.n	8005434 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f040 80a5 	bne.w	80052ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	843b      	strh	r3, [r7, #32]
 80051b0:	8c3b      	ldrh	r3, [r7, #32]
 80051b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01b      	beq.n	80051f2 <USB_DeactivateEndpoint+0x18a>
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d0:	83fb      	strh	r3, [r7, #30]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	441a      	add	r2, r3
 80051dc:	8bfb      	ldrh	r3, [r7, #30]
 80051de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	83bb      	strh	r3, [r7, #28]
 8005200:	8bbb      	ldrh	r3, [r7, #28]
 8005202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01b      	beq.n	8005242 <USB_DeactivateEndpoint+0x1da>
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	b29b      	uxth	r3, r3
 8005218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005220:	837b      	strh	r3, [r7, #26]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	441a      	add	r2, r3
 800522c:	8b7b      	ldrh	r3, [r7, #26]
 800522e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800523e:	b29b      	uxth	r3, r3
 8005240:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005258:	833b      	strh	r3, [r7, #24]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	441a      	add	r2, r3
 8005264:	8b3b      	ldrh	r3, [r7, #24]
 8005266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005272:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005276:	b29b      	uxth	r3, r3
 8005278:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800528c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005290:	82fb      	strh	r3, [r7, #22]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	441a      	add	r2, r3
 800529c:	8afb      	ldrh	r3, [r7, #22]
 800529e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052c8:	82bb      	strh	r3, [r7, #20]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	441a      	add	r2, r3
 80052d4:	8abb      	ldrh	r3, [r7, #20]
 80052d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	8013      	strh	r3, [r2, #0]
 80052ea:	e0a3      	b.n	8005434 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80052fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01b      	beq.n	800533c <USB_DeactivateEndpoint+0x2d4>
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	b29b      	uxth	r3, r3
 8005312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	441a      	add	r2, r3
 8005326:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800532c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005330:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005338:	b29b      	uxth	r3, r3
 800533a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	857b      	strh	r3, [r7, #42]	; 0x2a
 800534a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800534c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01b      	beq.n	800538c <USB_DeactivateEndpoint+0x324>
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29b      	uxth	r3, r3
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	853b      	strh	r3, [r7, #40]	; 0x28
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	441a      	add	r2, r3
 8005376:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800537c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005384:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005388:	b29b      	uxth	r3, r3
 800538a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	441a      	add	r2, r3
 80053ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	441a      	add	r2, r3
 80053e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	b29b      	uxth	r3, r3
 800540a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	847b      	strh	r3, [r7, #34]	; 0x22
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	441a      	add	r2, r3
 800541e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005430:	b29b      	uxth	r3, r3
 8005432:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3734      	adds	r7, #52	; 0x34
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr

08005440 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b0c4      	sub	sp, #272	; 0x110
 8005444:	af00      	add	r7, sp, #0
 8005446:	1d3b      	adds	r3, r7, #4
 8005448:	6018      	str	r0, [r3, #0]
 800544a:	463b      	mov	r3, r7
 800544c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800544e:	463b      	mov	r3, r7
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	2b01      	cmp	r3, #1
 8005456:	f040 8557 	bne.w	8005f08 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800545a:	463b      	mov	r3, r7
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699a      	ldr	r2, [r3, #24]
 8005460:	463b      	mov	r3, r7
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	429a      	cmp	r2, r3
 8005468:	d905      	bls.n	8005476 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800546a:	463b      	mov	r3, r7
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005474:	e004      	b.n	8005480 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005476:	463b      	mov	r3, r7
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005480:	463b      	mov	r3, r7
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	7b1b      	ldrb	r3, [r3, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d12c      	bne.n	80054e4 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800548a:	463b      	mov	r3, r7
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6959      	ldr	r1, [r3, #20]
 8005490:	463b      	mov	r3, r7
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	88da      	ldrh	r2, [r3, #6]
 8005496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800549a:	b29b      	uxth	r3, r3
 800549c:	1d38      	adds	r0, r7, #4
 800549e:	6800      	ldr	r0, [r0, #0]
 80054a0:	f001 fa2c 	bl	80068fc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80054a4:	1d3b      	adds	r3, r7, #4
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	1d3b      	adds	r3, r7, #4
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	4413      	add	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	463b      	mov	r3, r7
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	011a      	lsls	r2, r3, #4
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	4413      	add	r3, r2
 80054c8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80054cc:	f107 0310 	add.w	r3, r7, #16
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	f107 0310 	add.w	r3, r7, #16
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	801a      	strh	r2, [r3, #0]
 80054e0:	f000 bcdd 	b.w	8005e9e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80054e4:	463b      	mov	r3, r7
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	78db      	ldrb	r3, [r3, #3]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	f040 8347 	bne.w	8005b7e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80054f0:	463b      	mov	r3, r7
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6a1a      	ldr	r2, [r3, #32]
 80054f6:	463b      	mov	r3, r7
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	f240 82eb 	bls.w	8005ad8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005502:	1d3b      	adds	r3, r7, #4
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	463b      	mov	r3, r7
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005520:	1d3b      	adds	r3, r7, #4
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	463b      	mov	r3, r7
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	441a      	add	r2, r3
 800552e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800553a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800553e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005542:	b29b      	uxth	r3, r3
 8005544:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005546:	463b      	mov	r3, r7
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6a1a      	ldr	r2, [r3, #32]
 800554c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005550:	1ad2      	subs	r2, r2, r3
 8005552:	463b      	mov	r3, r7
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005558:	1d3b      	adds	r3, r7, #4
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	463b      	mov	r3, r7
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 8159 	beq.w	8005826 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005574:	1d3b      	adds	r3, r7, #4
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	637b      	str	r3, [r7, #52]	; 0x34
 800557a:	463b      	mov	r3, r7
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	785b      	ldrb	r3, [r3, #1]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d164      	bne.n	800564e <USB_EPStartXfer+0x20e>
 8005584:	1d3b      	adds	r3, r7, #4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800558a:	1d3b      	adds	r3, r7, #4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005592:	b29b      	uxth	r3, r3
 8005594:	461a      	mov	r2, r3
 8005596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005598:	4413      	add	r3, r2
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800559c:	463b      	mov	r3, r7
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	011a      	lsls	r2, r3, #4
 80055a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a6:	4413      	add	r3, r2
 80055a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d112      	bne.n	80055dc <USB_EPStartXfer+0x19c>
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	801a      	strh	r2, [r3, #0]
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	801a      	strh	r2, [r3, #0]
 80055da:	e054      	b.n	8005686 <USB_EPStartXfer+0x246>
 80055dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e0:	2b3e      	cmp	r3, #62	; 0x3e
 80055e2:	d817      	bhi.n	8005614 <USB_EPStartXfer+0x1d4>
 80055e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e8:	085b      	lsrs	r3, r3, #1
 80055ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d004      	beq.n	8005604 <USB_EPStartXfer+0x1c4>
 80055fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055fe:	3301      	adds	r3, #1
 8005600:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005608:	b29b      	uxth	r3, r3
 800560a:	029b      	lsls	r3, r3, #10
 800560c:	b29a      	uxth	r2, r3
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	801a      	strh	r2, [r3, #0]
 8005612:	e038      	b.n	8005686 <USB_EPStartXfer+0x246>
 8005614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800561e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005622:	f003 031f 	and.w	r3, r3, #31
 8005626:	2b00      	cmp	r3, #0
 8005628:	d104      	bne.n	8005634 <USB_EPStartXfer+0x1f4>
 800562a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800562e:	3b01      	subs	r3, #1
 8005630:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005638:	b29b      	uxth	r3, r3
 800563a:	029b      	lsls	r3, r3, #10
 800563c:	b29b      	uxth	r3, r3
 800563e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005646:	b29a      	uxth	r2, r3
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	801a      	strh	r2, [r3, #0]
 800564c:	e01b      	b.n	8005686 <USB_EPStartXfer+0x246>
 800564e:	463b      	mov	r3, r7
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	785b      	ldrb	r3, [r3, #1]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d116      	bne.n	8005686 <USB_EPStartXfer+0x246>
 8005658:	1d3b      	adds	r3, r7, #4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005660:	b29b      	uxth	r3, r3
 8005662:	461a      	mov	r2, r3
 8005664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005666:	4413      	add	r3, r2
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
 800566a:	463b      	mov	r3, r7
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	011a      	lsls	r2, r3, #4
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005674:	4413      	add	r3, r2
 8005676:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800567a:	633b      	str	r3, [r7, #48]	; 0x30
 800567c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005680:	b29a      	uxth	r2, r3
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005686:	463b      	mov	r3, r7
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	895b      	ldrh	r3, [r3, #10]
 800568c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005690:	463b      	mov	r3, r7
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6959      	ldr	r1, [r3, #20]
 8005696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800569a:	b29b      	uxth	r3, r3
 800569c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80056a0:	1d38      	adds	r0, r7, #4
 80056a2:	6800      	ldr	r0, [r0, #0]
 80056a4:	f001 f92a 	bl	80068fc <USB_WritePMA>
            ep->xfer_buff += len;
 80056a8:	463b      	mov	r3, r7
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b2:	441a      	add	r2, r3
 80056b4:	463b      	mov	r3, r7
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80056ba:	463b      	mov	r3, r7
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6a1a      	ldr	r2, [r3, #32]
 80056c0:	463b      	mov	r3, r7
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d909      	bls.n	80056de <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80056ca:	463b      	mov	r3, r7
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6a1a      	ldr	r2, [r3, #32]
 80056d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056d4:	1ad2      	subs	r2, r2, r3
 80056d6:	463b      	mov	r3, r7
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	621a      	str	r2, [r3, #32]
 80056dc:	e008      	b.n	80056f0 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80056de:	463b      	mov	r3, r7
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80056e8:	463b      	mov	r3, r7
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2200      	movs	r2, #0
 80056ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056f0:	463b      	mov	r3, r7
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	785b      	ldrb	r3, [r3, #1]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d164      	bne.n	80057c4 <USB_EPStartXfer+0x384>
 80056fa:	1d3b      	adds	r3, r7, #4
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	1d3b      	adds	r3, r7, #4
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005708:	b29b      	uxth	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	4413      	add	r3, r2
 8005710:	61fb      	str	r3, [r7, #28]
 8005712:	463b      	mov	r3, r7
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	011a      	lsls	r2, r3, #4
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d112      	bne.n	8005752 <USB_EPStartXfer+0x312>
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	b29b      	uxth	r3, r3
 8005732:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005736:	b29a      	uxth	r2, r3
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	801a      	strh	r2, [r3, #0]
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800574a:	b29a      	uxth	r2, r3
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	801a      	strh	r2, [r3, #0]
 8005750:	e057      	b.n	8005802 <USB_EPStartXfer+0x3c2>
 8005752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005756:	2b3e      	cmp	r3, #62	; 0x3e
 8005758:	d817      	bhi.n	800578a <USB_EPStartXfer+0x34a>
 800575a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800575e:	085b      	lsrs	r3, r3, #1
 8005760:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <USB_EPStartXfer+0x33a>
 8005770:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005774:	3301      	adds	r3, #1
 8005776:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800577a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800577e:	b29b      	uxth	r3, r3
 8005780:	029b      	lsls	r3, r3, #10
 8005782:	b29a      	uxth	r2, r3
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	801a      	strh	r2, [r3, #0]
 8005788:	e03b      	b.n	8005802 <USB_EPStartXfer+0x3c2>
 800578a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	2b00      	cmp	r3, #0
 800579e:	d104      	bne.n	80057aa <USB_EPStartXfer+0x36a>
 80057a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057a4:	3b01      	subs	r3, #1
 80057a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	029b      	lsls	r3, r3, #10
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057bc:	b29a      	uxth	r2, r3
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	801a      	strh	r2, [r3, #0]
 80057c2:	e01e      	b.n	8005802 <USB_EPStartXfer+0x3c2>
 80057c4:	463b      	mov	r3, r7
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	785b      	ldrb	r3, [r3, #1]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d119      	bne.n	8005802 <USB_EPStartXfer+0x3c2>
 80057ce:	1d3b      	adds	r3, r7, #4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
 80057d4:	1d3b      	adds	r3, r7, #4
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057dc:	b29b      	uxth	r3, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	4413      	add	r3, r2
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
 80057e6:	463b      	mov	r3, r7
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	011a      	lsls	r2, r3, #4
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	4413      	add	r3, r2
 80057f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057f6:	623b      	str	r3, [r7, #32]
 80057f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005802:	463b      	mov	r3, r7
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	891b      	ldrh	r3, [r3, #8]
 8005808:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800580c:	463b      	mov	r3, r7
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6959      	ldr	r1, [r3, #20]
 8005812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005816:	b29b      	uxth	r3, r3
 8005818:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800581c:	1d38      	adds	r0, r7, #4
 800581e:	6800      	ldr	r0, [r0, #0]
 8005820:	f001 f86c 	bl	80068fc <USB_WritePMA>
 8005824:	e33b      	b.n	8005e9e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005826:	463b      	mov	r3, r7
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d164      	bne.n	80058fa <USB_EPStartXfer+0x4ba>
 8005830:	1d3b      	adds	r3, r7, #4
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005836:	1d3b      	adds	r3, r7, #4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583e:	b29b      	uxth	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005844:	4413      	add	r3, r2
 8005846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005848:	463b      	mov	r3, r7
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	011a      	lsls	r2, r3, #4
 8005850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005852:	4413      	add	r3, r2
 8005854:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005858:	64bb      	str	r3, [r7, #72]	; 0x48
 800585a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800585e:	2b00      	cmp	r3, #0
 8005860:	d112      	bne.n	8005888 <USB_EPStartXfer+0x448>
 8005862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800586c:	b29a      	uxth	r2, r3
 800586e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005880:	b29a      	uxth	r2, r3
 8005882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005884:	801a      	strh	r2, [r3, #0]
 8005886:	e057      	b.n	8005938 <USB_EPStartXfer+0x4f8>
 8005888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800588c:	2b3e      	cmp	r3, #62	; 0x3e
 800588e:	d817      	bhi.n	80058c0 <USB_EPStartXfer+0x480>
 8005890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800589a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <USB_EPStartXfer+0x470>
 80058a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058aa:	3301      	adds	r3, #1
 80058ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	029b      	lsls	r3, r3, #10
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	e03b      	b.n	8005938 <USB_EPStartXfer+0x4f8>
 80058c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d104      	bne.n	80058e0 <USB_EPStartXfer+0x4a0>
 80058d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058da:	3b01      	subs	r3, #1
 80058dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80058e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	029b      	lsls	r3, r3, #10
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f6:	801a      	strh	r2, [r3, #0]
 80058f8:	e01e      	b.n	8005938 <USB_EPStartXfer+0x4f8>
 80058fa:	463b      	mov	r3, r7
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d119      	bne.n	8005938 <USB_EPStartXfer+0x4f8>
 8005904:	1d3b      	adds	r3, r7, #4
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	657b      	str	r3, [r7, #84]	; 0x54
 800590a:	1d3b      	adds	r3, r7, #4
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005912:	b29b      	uxth	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005918:	4413      	add	r3, r2
 800591a:	657b      	str	r3, [r7, #84]	; 0x54
 800591c:	463b      	mov	r3, r7
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	011a      	lsls	r2, r3, #4
 8005924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005926:	4413      	add	r3, r2
 8005928:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800592c:	653b      	str	r3, [r7, #80]	; 0x50
 800592e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005932:	b29a      	uxth	r2, r3
 8005934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005936:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005938:	463b      	mov	r3, r7
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	891b      	ldrh	r3, [r3, #8]
 800593e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005942:	463b      	mov	r3, r7
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6959      	ldr	r1, [r3, #20]
 8005948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594c:	b29b      	uxth	r3, r3
 800594e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005952:	1d38      	adds	r0, r7, #4
 8005954:	6800      	ldr	r0, [r0, #0]
 8005956:	f000 ffd1 	bl	80068fc <USB_WritePMA>
            ep->xfer_buff += len;
 800595a:	463b      	mov	r3, r7
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005964:	441a      	add	r2, r3
 8005966:	463b      	mov	r3, r7
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800596c:	463b      	mov	r3, r7
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6a1a      	ldr	r2, [r3, #32]
 8005972:	463b      	mov	r3, r7
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	429a      	cmp	r2, r3
 800597a:	d909      	bls.n	8005990 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800597c:	463b      	mov	r3, r7
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6a1a      	ldr	r2, [r3, #32]
 8005982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005986:	1ad2      	subs	r2, r2, r3
 8005988:	463b      	mov	r3, r7
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	621a      	str	r2, [r3, #32]
 800598e:	e008      	b.n	80059a2 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005990:	463b      	mov	r3, r7
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800599a:	463b      	mov	r3, r7
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2200      	movs	r2, #0
 80059a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059a2:	1d3b      	adds	r3, r7, #4
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	647b      	str	r3, [r7, #68]	; 0x44
 80059a8:	463b      	mov	r3, r7
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	785b      	ldrb	r3, [r3, #1]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d164      	bne.n	8005a7c <USB_EPStartXfer+0x63c>
 80059b2:	1d3b      	adds	r3, r7, #4
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b8:	1d3b      	adds	r3, r7, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c6:	4413      	add	r3, r2
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ca:	463b      	mov	r3, r7
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	011a      	lsls	r2, r3, #4
 80059d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d4:	4413      	add	r3, r2
 80059d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059da:	63bb      	str	r3, [r7, #56]	; 0x38
 80059dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d112      	bne.n	8005a0a <USB_EPStartXfer+0x5ca>
 80059e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	801a      	strh	r2, [r3, #0]
 80059f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a06:	801a      	strh	r2, [r3, #0]
 8005a08:	e054      	b.n	8005ab4 <USB_EPStartXfer+0x674>
 8005a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a0e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a10:	d817      	bhi.n	8005a42 <USB_EPStartXfer+0x602>
 8005a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a16:	085b      	lsrs	r3, r3, #1
 8005a18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d004      	beq.n	8005a32 <USB_EPStartXfer+0x5f2>
 8005a28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	029b      	lsls	r3, r3, #10
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	e038      	b.n	8005ab4 <USB_EPStartXfer+0x674>
 8005a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a50:	f003 031f 	and.w	r3, r3, #31
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d104      	bne.n	8005a62 <USB_EPStartXfer+0x622>
 8005a58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005a62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	029b      	lsls	r3, r3, #10
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	801a      	strh	r2, [r3, #0]
 8005a7a:	e01b      	b.n	8005ab4 <USB_EPStartXfer+0x674>
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d116      	bne.n	8005ab4 <USB_EPStartXfer+0x674>
 8005a86:	1d3b      	adds	r3, r7, #4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	461a      	mov	r2, r3
 8005a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a94:	4413      	add	r3, r2
 8005a96:	647b      	str	r3, [r7, #68]	; 0x44
 8005a98:	463b      	mov	r3, r7
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	011a      	lsls	r2, r3, #4
 8005aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8005aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	895b      	ldrh	r3, [r3, #10]
 8005aba:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005abe:	463b      	mov	r3, r7
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6959      	ldr	r1, [r3, #20]
 8005ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005ace:	1d38      	adds	r0, r7, #4
 8005ad0:	6800      	ldr	r0, [r0, #0]
 8005ad2:	f000 ff13 	bl	80068fc <USB_WritePMA>
 8005ad6:	e1e2      	b.n	8005e9e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ad8:	463b      	mov	r3, r7
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005ae2:	1d3b      	adds	r3, r7, #4
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	463b      	mov	r3, r7
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005b00:	1d3b      	adds	r3, r7, #4
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	463b      	mov	r3, r7
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	441a      	add	r2, r3
 8005b0e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b26:	1d3b      	adds	r3, r7, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b2c:	1d3b      	adds	r3, r7, #4
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b3a:	4413      	add	r3, r2
 8005b3c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b3e:	463b      	mov	r3, r7
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	011a      	lsls	r2, r3, #4
 8005b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b48:	4413      	add	r3, r2
 8005b4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b5a:	463b      	mov	r3, r7
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	891b      	ldrh	r3, [r3, #8]
 8005b60:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b64:	463b      	mov	r3, r7
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6959      	ldr	r1, [r3, #20]
 8005b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005b74:	1d38      	adds	r0, r7, #4
 8005b76:	6800      	ldr	r0, [r0, #0]
 8005b78:	f000 fec0 	bl	80068fc <USB_WritePMA>
 8005b7c:	e18f      	b.n	8005e9e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b7e:	1d3b      	adds	r3, r7, #4
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	463b      	mov	r3, r7
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 808f 	beq.w	8005cb8 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b9a:	1d3b      	adds	r3, r7, #4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ba0:	463b      	mov	r3, r7
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d164      	bne.n	8005c74 <USB_EPStartXfer+0x834>
 8005baa:	1d3b      	adds	r3, r7, #4
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	673b      	str	r3, [r7, #112]	; 0x70
 8005bb0:	1d3b      	adds	r3, r7, #4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bbe:	4413      	add	r3, r2
 8005bc0:	673b      	str	r3, [r7, #112]	; 0x70
 8005bc2:	463b      	mov	r3, r7
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	011a      	lsls	r2, r3, #4
 8005bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bcc:	4413      	add	r3, r2
 8005bce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d112      	bne.n	8005c02 <USB_EPStartXfer+0x7c2>
 8005bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bea:	801a      	strh	r2, [r3, #0]
 8005bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	e054      	b.n	8005cac <USB_EPStartXfer+0x86c>
 8005c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c06:	2b3e      	cmp	r3, #62	; 0x3e
 8005c08:	d817      	bhi.n	8005c3a <USB_EPStartXfer+0x7fa>
 8005c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d004      	beq.n	8005c2a <USB_EPStartXfer+0x7ea>
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c24:	3301      	adds	r3, #1
 8005c26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	029b      	lsls	r3, r3, #10
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	e038      	b.n	8005cac <USB_EPStartXfer+0x86c>
 8005c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d104      	bne.n	8005c5a <USB_EPStartXfer+0x81a>
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c54:	3b01      	subs	r3, #1
 8005c56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	029b      	lsls	r3, r3, #10
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c70:	801a      	strh	r2, [r3, #0]
 8005c72:	e01b      	b.n	8005cac <USB_EPStartXfer+0x86c>
 8005c74:	463b      	mov	r3, r7
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d116      	bne.n	8005cac <USB_EPStartXfer+0x86c>
 8005c7e:	1d3b      	adds	r3, r7, #4
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c8c:	4413      	add	r3, r2
 8005c8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c90:	463b      	mov	r3, r7
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	011a      	lsls	r2, r3, #4
 8005c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ca0:	677b      	str	r3, [r7, #116]	; 0x74
 8005ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005caa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005cac:	463b      	mov	r3, r7
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	895b      	ldrh	r3, [r3, #10]
 8005cb2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005cb6:	e097      	b.n	8005de8 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cb8:	463b      	mov	r3, r7
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	785b      	ldrb	r3, [r3, #1]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d168      	bne.n	8005d94 <USB_EPStartXfer+0x954>
 8005cc2:	1d3b      	adds	r3, r7, #4
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cca:	1d3b      	adds	r3, r7, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cda:	4413      	add	r3, r2
 8005cdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ce0:	463b      	mov	r3, r7
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	011a      	lsls	r2, r3, #4
 8005ce8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cec:	4413      	add	r3, r2
 8005cee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cf2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d112      	bne.n	8005d22 <USB_EPStartXfer+0x8e2>
 8005cfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d0a:	801a      	strh	r2, [r3, #0]
 8005d0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	e05d      	b.n	8005dde <USB_EPStartXfer+0x99e>
 8005d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d26:	2b3e      	cmp	r3, #62	; 0x3e
 8005d28:	d817      	bhi.n	8005d5a <USB_EPStartXfer+0x91a>
 8005d2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <USB_EPStartXfer+0x90a>
 8005d40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d44:	3301      	adds	r3, #1
 8005d46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	029b      	lsls	r3, r3, #10
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d56:	801a      	strh	r2, [r3, #0]
 8005d58:	e041      	b.n	8005dde <USB_EPStartXfer+0x99e>
 8005d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d68:	f003 031f 	and.w	r3, r3, #31
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d104      	bne.n	8005d7a <USB_EPStartXfer+0x93a>
 8005d70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d74:	3b01      	subs	r3, #1
 8005d76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	029b      	lsls	r3, r3, #10
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	e024      	b.n	8005dde <USB_EPStartXfer+0x99e>
 8005d94:	463b      	mov	r3, r7
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	785b      	ldrb	r3, [r3, #1]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d11f      	bne.n	8005dde <USB_EPStartXfer+0x99e>
 8005d9e:	1d3b      	adds	r3, r7, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005da6:	1d3b      	adds	r3, r7, #4
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	461a      	mov	r2, r3
 8005db2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005db6:	4413      	add	r3, r2
 8005db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	011a      	lsls	r2, r3, #4
 8005dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dc8:	4413      	add	r3, r2
 8005dca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ddc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dde:	463b      	mov	r3, r7
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	891b      	ldrh	r3, [r3, #8]
 8005de4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005de8:	463b      	mov	r3, r7
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6959      	ldr	r1, [r3, #20]
 8005dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005df8:	1d38      	adds	r0, r7, #4
 8005dfa:	6800      	ldr	r0, [r0, #0]
 8005dfc:	f000 fd7e 	bl	80068fc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005e00:	463b      	mov	r3, r7
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	785b      	ldrb	r3, [r3, #1]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d122      	bne.n	8005e50 <USB_EPStartXfer+0xa10>
 8005e0a:	1d3b      	adds	r3, r7, #4
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	463b      	mov	r3, r7
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e24:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005e28:	1d3b      	adds	r3, r7, #4
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	441a      	add	r2, r3
 8005e36:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	8013      	strh	r3, [r2, #0]
 8005e4e:	e026      	b.n	8005e9e <USB_EPStartXfer+0xa5e>
 8005e50:	463b      	mov	r3, r7
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d121      	bne.n	8005e9e <USB_EPStartXfer+0xa5e>
 8005e5a:	1d3b      	adds	r3, r7, #4
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	463b      	mov	r3, r7
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e74:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005e78:	1d3b      	adds	r3, r7, #4
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	441a      	add	r2, r3
 8005e86:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e9e:	1d3b      	adds	r3, r7, #4
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	463b      	mov	r3, r7
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f107 020e 	add.w	r2, r7, #14
 8005eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ebc:	8013      	strh	r3, [r2, #0]
 8005ebe:	f107 030e 	add.w	r3, r7, #14
 8005ec2:	f107 020e 	add.w	r2, r7, #14
 8005ec6:	8812      	ldrh	r2, [r2, #0]
 8005ec8:	f082 0210 	eor.w	r2, r2, #16
 8005ecc:	801a      	strh	r2, [r3, #0]
 8005ece:	f107 030e 	add.w	r3, r7, #14
 8005ed2:	f107 020e 	add.w	r2, r7, #14
 8005ed6:	8812      	ldrh	r2, [r2, #0]
 8005ed8:	f082 0220 	eor.w	r2, r2, #32
 8005edc:	801a      	strh	r2, [r3, #0]
 8005ede:	1d3b      	adds	r3, r7, #4
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	441a      	add	r2, r3
 8005eec:	f107 030e 	add.w	r3, r7, #14
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	8013      	strh	r3, [r2, #0]
 8005f06:	e3b5      	b.n	8006674 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f08:	463b      	mov	r3, r7
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	7b1b      	ldrb	r3, [r3, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f040 8090 	bne.w	8006034 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f14:	463b      	mov	r3, r7
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699a      	ldr	r2, [r3, #24]
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d90e      	bls.n	8005f42 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005f24:	463b      	mov	r3, r7
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005f2e:	463b      	mov	r3, r7
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	699a      	ldr	r2, [r3, #24]
 8005f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f38:	1ad2      	subs	r2, r2, r3
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	619a      	str	r2, [r3, #24]
 8005f40:	e008      	b.n	8005f54 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005f42:	463b      	mov	r3, r7
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005f4c:	463b      	mov	r3, r7
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2200      	movs	r2, #0
 8005f52:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f54:	1d3b      	adds	r3, r7, #4
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f5c:	1d3b      	adds	r3, r7, #4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f72:	463b      	mov	r3, r7
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	011a      	lsls	r2, r3, #4
 8005f7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f7e:	4413      	add	r3, r2
 8005f80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d116      	bne.n	8005fbe <USB_EPStartXfer+0xb7e>
 8005f90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fa2:	801a      	strh	r2, [r3, #0]
 8005fa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fba:	801a      	strh	r2, [r3, #0]
 8005fbc:	e32c      	b.n	8006618 <USB_EPStartXfer+0x11d8>
 8005fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fc2:	2b3e      	cmp	r3, #62	; 0x3e
 8005fc4:	d818      	bhi.n	8005ff8 <USB_EPStartXfer+0xbb8>
 8005fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fca:	085b      	lsrs	r3, r3, #1
 8005fcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d004      	beq.n	8005fe6 <USB_EPStartXfer+0xba6>
 8005fdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fe6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	029b      	lsls	r3, r3, #10
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ff4:	801a      	strh	r2, [r3, #0]
 8005ff6:	e30f      	b.n	8006618 <USB_EPStartXfer+0x11d8>
 8005ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ffc:	095b      	lsrs	r3, r3, #5
 8005ffe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006006:	f003 031f 	and.w	r3, r3, #31
 800600a:	2b00      	cmp	r3, #0
 800600c:	d104      	bne.n	8006018 <USB_EPStartXfer+0xbd8>
 800600e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006012:	3b01      	subs	r3, #1
 8006014:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006018:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800601c:	b29b      	uxth	r3, r3
 800601e:	029b      	lsls	r3, r3, #10
 8006020:	b29b      	uxth	r3, r3
 8006022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800602a:	b29a      	uxth	r2, r3
 800602c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	e2f1      	b.n	8006618 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006034:	463b      	mov	r3, r7
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	78db      	ldrb	r3, [r3, #3]
 800603a:	2b02      	cmp	r3, #2
 800603c:	f040 818f 	bne.w	800635e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006040:	463b      	mov	r3, r7
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	785b      	ldrb	r3, [r3, #1]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d175      	bne.n	8006136 <USB_EPStartXfer+0xcf6>
 800604a:	1d3b      	adds	r3, r7, #4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006052:	1d3b      	adds	r3, r7, #4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800605a:	b29b      	uxth	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006062:	4413      	add	r3, r2
 8006064:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006068:	463b      	mov	r3, r7
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	011a      	lsls	r2, r3, #4
 8006070:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006074:	4413      	add	r3, r2
 8006076:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800607a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800607e:	463b      	mov	r3, r7
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d116      	bne.n	80060b6 <USB_EPStartXfer+0xc76>
 8006088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b29b      	uxth	r3, r3
 8006090:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006094:	b29a      	uxth	r2, r3
 8006096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800609a:	801a      	strh	r2, [r3, #0]
 800609c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060b2:	801a      	strh	r2, [r3, #0]
 80060b4:	e065      	b.n	8006182 <USB_EPStartXfer+0xd42>
 80060b6:	463b      	mov	r3, r7
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2b3e      	cmp	r3, #62	; 0x3e
 80060be:	d81a      	bhi.n	80060f6 <USB_EPStartXfer+0xcb6>
 80060c0:	463b      	mov	r3, r7
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060cc:	463b      	mov	r3, r7
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <USB_EPStartXfer+0xca4>
 80060da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060de:	3301      	adds	r3, #1
 80060e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	029b      	lsls	r3, r3, #10
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060f2:	801a      	strh	r2, [r3, #0]
 80060f4:	e045      	b.n	8006182 <USB_EPStartXfer+0xd42>
 80060f6:	463b      	mov	r3, r7
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006102:	463b      	mov	r3, r7
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 031f 	and.w	r3, r3, #31
 800610c:	2b00      	cmp	r3, #0
 800610e:	d104      	bne.n	800611a <USB_EPStartXfer+0xcda>
 8006110:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006114:	3b01      	subs	r3, #1
 8006116:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800611a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800611e:	b29b      	uxth	r3, r3
 8006120:	029b      	lsls	r3, r3, #10
 8006122:	b29b      	uxth	r3, r3
 8006124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800612c:	b29a      	uxth	r2, r3
 800612e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006132:	801a      	strh	r2, [r3, #0]
 8006134:	e025      	b.n	8006182 <USB_EPStartXfer+0xd42>
 8006136:	463b      	mov	r3, r7
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	785b      	ldrb	r3, [r3, #1]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d120      	bne.n	8006182 <USB_EPStartXfer+0xd42>
 8006140:	1d3b      	adds	r3, r7, #4
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006148:	1d3b      	adds	r3, r7, #4
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006150:	b29b      	uxth	r3, r3
 8006152:	461a      	mov	r2, r3
 8006154:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006158:	4413      	add	r3, r2
 800615a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800615e:	463b      	mov	r3, r7
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	011a      	lsls	r2, r3, #4
 8006166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800616a:	4413      	add	r3, r2
 800616c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006174:	463b      	mov	r3, r7
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	b29a      	uxth	r2, r3
 800617c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006180:	801a      	strh	r2, [r3, #0]
 8006182:	1d3b      	adds	r3, r7, #4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800618a:	463b      	mov	r3, r7
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d175      	bne.n	8006280 <USB_EPStartXfer+0xe40>
 8006194:	1d3b      	adds	r3, r7, #4
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800619c:	1d3b      	adds	r3, r7, #4
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061ac:	4413      	add	r3, r2
 80061ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061b2:	463b      	mov	r3, r7
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	011a      	lsls	r2, r3, #4
 80061ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061be:	4413      	add	r3, r2
 80061c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061c8:	463b      	mov	r3, r7
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d116      	bne.n	8006200 <USB_EPStartXfer+0xdc0>
 80061d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061de:	b29a      	uxth	r2, r3
 80061e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061e4:	801a      	strh	r2, [r3, #0]
 80061e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	e061      	b.n	80062c4 <USB_EPStartXfer+0xe84>
 8006200:	463b      	mov	r3, r7
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2b3e      	cmp	r3, #62	; 0x3e
 8006208:	d81a      	bhi.n	8006240 <USB_EPStartXfer+0xe00>
 800620a:	463b      	mov	r3, r7
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	085b      	lsrs	r3, r3, #1
 8006212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006216:	463b      	mov	r3, r7
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d004      	beq.n	800622e <USB_EPStartXfer+0xdee>
 8006224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006228:	3301      	adds	r3, #1
 800622a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800622e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006232:	b29b      	uxth	r3, r3
 8006234:	029b      	lsls	r3, r3, #10
 8006236:	b29a      	uxth	r2, r3
 8006238:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	e041      	b.n	80062c4 <USB_EPStartXfer+0xe84>
 8006240:	463b      	mov	r3, r7
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800624c:	463b      	mov	r3, r7
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 031f 	and.w	r3, r3, #31
 8006256:	2b00      	cmp	r3, #0
 8006258:	d104      	bne.n	8006264 <USB_EPStartXfer+0xe24>
 800625a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625e:	3b01      	subs	r3, #1
 8006260:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006268:	b29b      	uxth	r3, r3
 800626a:	029b      	lsls	r3, r3, #10
 800626c:	b29b      	uxth	r3, r3
 800626e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006276:	b29a      	uxth	r2, r3
 8006278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800627c:	801a      	strh	r2, [r3, #0]
 800627e:	e021      	b.n	80062c4 <USB_EPStartXfer+0xe84>
 8006280:	463b      	mov	r3, r7
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d11c      	bne.n	80062c4 <USB_EPStartXfer+0xe84>
 800628a:	1d3b      	adds	r3, r7, #4
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006292:	b29b      	uxth	r3, r3
 8006294:	461a      	mov	r2, r3
 8006296:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800629a:	4413      	add	r3, r2
 800629c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062a0:	463b      	mov	r3, r7
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	011a      	lsls	r2, r3, #4
 80062a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80062ac:	4413      	add	r3, r2
 80062ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062b6:	463b      	mov	r3, r7
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	b29a      	uxth	r2, r3
 80062be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80062c2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80062c4:	463b      	mov	r3, r7
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 81a4 	beq.w	8006618 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80062d0:	1d3b      	adds	r3, r7, #4
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	463b      	mov	r3, r7
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062e4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80062e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <USB_EPStartXfer+0xebc>
 80062f0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10d      	bne.n	8006318 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062fc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006304:	2b00      	cmp	r3, #0
 8006306:	f040 8187 	bne.w	8006618 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800630a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800630e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006312:	2b00      	cmp	r3, #0
 8006314:	f040 8180 	bne.w	8006618 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006318:	1d3b      	adds	r3, r7, #4
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	463b      	mov	r3, r7
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	b29b      	uxth	r3, r3
 800632a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006332:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006336:	1d3b      	adds	r3, r7, #4
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	463b      	mov	r3, r7
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	441a      	add	r2, r3
 8006344:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800634c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006354:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006358:	b29b      	uxth	r3, r3
 800635a:	8013      	strh	r3, [r2, #0]
 800635c:	e15c      	b.n	8006618 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800635e:	463b      	mov	r3, r7
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	78db      	ldrb	r3, [r3, #3]
 8006364:	2b01      	cmp	r3, #1
 8006366:	f040 8155 	bne.w	8006614 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800636a:	463b      	mov	r3, r7
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	699a      	ldr	r2, [r3, #24]
 8006370:	463b      	mov	r3, r7
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	429a      	cmp	r2, r3
 8006378:	d90e      	bls.n	8006398 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800637a:	463b      	mov	r3, r7
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006384:	463b      	mov	r3, r7
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800638e:	1ad2      	subs	r2, r2, r3
 8006390:	463b      	mov	r3, r7
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	619a      	str	r2, [r3, #24]
 8006396:	e008      	b.n	80063aa <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006398:	463b      	mov	r3, r7
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80063a2:	463b      	mov	r3, r7
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2200      	movs	r2, #0
 80063a8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80063aa:	463b      	mov	r3, r7
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d16f      	bne.n	8006494 <USB_EPStartXfer+0x1054>
 80063b4:	1d3b      	adds	r3, r7, #4
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063bc:	1d3b      	adds	r3, r7, #4
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063cc:	4413      	add	r3, r2
 80063ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063d2:	463b      	mov	r3, r7
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	011a      	lsls	r2, r3, #4
 80063da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063de:	4413      	add	r3, r2
 80063e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d116      	bne.n	800641e <USB_EPStartXfer+0xfde>
 80063f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	b29b      	uxth	r3, r3
 800640c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006414:	b29a      	uxth	r2, r3
 8006416:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800641a:	801a      	strh	r2, [r3, #0]
 800641c:	e05f      	b.n	80064de <USB_EPStartXfer+0x109e>
 800641e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006422:	2b3e      	cmp	r3, #62	; 0x3e
 8006424:	d818      	bhi.n	8006458 <USB_EPStartXfer+0x1018>
 8006426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800642a:	085b      	lsrs	r3, r3, #1
 800642c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d004      	beq.n	8006446 <USB_EPStartXfer+0x1006>
 800643c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006440:	3301      	adds	r3, #1
 8006442:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800644a:	b29b      	uxth	r3, r3
 800644c:	029b      	lsls	r3, r3, #10
 800644e:	b29a      	uxth	r2, r3
 8006450:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006454:	801a      	strh	r2, [r3, #0]
 8006456:	e042      	b.n	80064de <USB_EPStartXfer+0x109e>
 8006458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800645c:	095b      	lsrs	r3, r3, #5
 800645e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	2b00      	cmp	r3, #0
 800646c:	d104      	bne.n	8006478 <USB_EPStartXfer+0x1038>
 800646e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006472:	3b01      	subs	r3, #1
 8006474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800647c:	b29b      	uxth	r3, r3
 800647e:	029b      	lsls	r3, r3, #10
 8006480:	b29b      	uxth	r3, r3
 8006482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800648a:	b29a      	uxth	r2, r3
 800648c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006490:	801a      	strh	r2, [r3, #0]
 8006492:	e024      	b.n	80064de <USB_EPStartXfer+0x109e>
 8006494:	463b      	mov	r3, r7
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	785b      	ldrb	r3, [r3, #1]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d11f      	bne.n	80064de <USB_EPStartXfer+0x109e>
 800649e:	1d3b      	adds	r3, r7, #4
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064a6:	1d3b      	adds	r3, r7, #4
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064b6:	4413      	add	r3, r2
 80064b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064bc:	463b      	mov	r3, r7
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	011a      	lsls	r2, r3, #4
 80064c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064c8:	4413      	add	r3, r2
 80064ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80064d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064dc:	801a      	strh	r2, [r3, #0]
 80064de:	1d3b      	adds	r3, r7, #4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064e6:	463b      	mov	r3, r7
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	785b      	ldrb	r3, [r3, #1]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d16f      	bne.n	80065d0 <USB_EPStartXfer+0x1190>
 80064f0:	1d3b      	adds	r3, r7, #4
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064f8:	1d3b      	adds	r3, r7, #4
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006500:	b29b      	uxth	r3, r3
 8006502:	461a      	mov	r2, r3
 8006504:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006508:	4413      	add	r3, r2
 800650a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800650e:	463b      	mov	r3, r7
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	011a      	lsls	r2, r3, #4
 8006516:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800651a:	4413      	add	r3, r2
 800651c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006520:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d116      	bne.n	800655a <USB_EPStartXfer+0x111a>
 800652c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006538:	b29a      	uxth	r2, r3
 800653a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800653e:	801a      	strh	r2, [r3, #0]
 8006540:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800654c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006550:	b29a      	uxth	r2, r3
 8006552:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006556:	801a      	strh	r2, [r3, #0]
 8006558:	e05e      	b.n	8006618 <USB_EPStartXfer+0x11d8>
 800655a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800655e:	2b3e      	cmp	r3, #62	; 0x3e
 8006560:	d818      	bhi.n	8006594 <USB_EPStartXfer+0x1154>
 8006562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006566:	085b      	lsrs	r3, r3, #1
 8006568:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800656c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <USB_EPStartXfer+0x1142>
 8006578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800657c:	3301      	adds	r3, #1
 800657e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006586:	b29b      	uxth	r3, r3
 8006588:	029b      	lsls	r3, r3, #10
 800658a:	b29a      	uxth	r2, r3
 800658c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006590:	801a      	strh	r2, [r3, #0]
 8006592:	e041      	b.n	8006618 <USB_EPStartXfer+0x11d8>
 8006594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800659e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d104      	bne.n	80065b4 <USB_EPStartXfer+0x1174>
 80065aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ae:	3b01      	subs	r3, #1
 80065b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	029b      	lsls	r3, r3, #10
 80065bc:	b29b      	uxth	r3, r3
 80065be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	e023      	b.n	8006618 <USB_EPStartXfer+0x11d8>
 80065d0:	463b      	mov	r3, r7
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	785b      	ldrb	r3, [r3, #1]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d11e      	bne.n	8006618 <USB_EPStartXfer+0x11d8>
 80065da:	1d3b      	adds	r3, r7, #4
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065ea:	4413      	add	r3, r2
 80065ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065f0:	463b      	mov	r3, r7
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	011a      	lsls	r2, r3, #4
 80065f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065fc:	4413      	add	r3, r2
 80065fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006602:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800660a:	b29a      	uxth	r2, r3
 800660c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006610:	801a      	strh	r2, [r3, #0]
 8006612:	e001      	b.n	8006618 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e02e      	b.n	8006676 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006618:	1d3b      	adds	r3, r7, #4
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	463b      	mov	r3, r7
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	b29b      	uxth	r3, r3
 800662a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800662e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006632:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006636:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800663a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800663e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006642:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006646:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800664a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800664e:	1d3b      	adds	r3, r7, #4
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	463b      	mov	r3, r7
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	441a      	add	r2, r3
 800665c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800666c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006670:	b29b      	uxth	r3, r3
 8006672:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d020      	beq.n	80066d4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a8:	81bb      	strh	r3, [r7, #12]
 80066aa:	89bb      	ldrh	r3, [r7, #12]
 80066ac:	f083 0310 	eor.w	r3, r3, #16
 80066b0:	81bb      	strh	r3, [r7, #12]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	89bb      	ldrh	r3, [r7, #12]
 80066be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]
 80066d2:	e01f      	b.n	8006714 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ea:	81fb      	strh	r3, [r7, #14]
 80066ec:	89fb      	ldrh	r3, [r7, #14]
 80066ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066f2:	81fb      	strh	r3, [r7, #14]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	441a      	add	r2, r3
 80066fe:	89fb      	ldrh	r3, [r7, #14]
 8006700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006710:	b29b      	uxth	r3, r3
 8006712:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	bc80      	pop	{r7}
 800671e:	4770      	bx	lr

08006720 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	7b1b      	ldrb	r3, [r3, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	f040 809d 	bne.w	800686e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	785b      	ldrb	r3, [r3, #1]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d04c      	beq.n	80067d6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	823b      	strh	r3, [r7, #16]
 800674a:	8a3b      	ldrh	r3, [r7, #16]
 800674c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01b      	beq.n	800678c <USB_EPClearStall+0x6c>
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676a:	81fb      	strh	r3, [r7, #14]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	441a      	add	r2, r3
 8006776:	89fb      	ldrh	r3, [r7, #14]
 8006778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800677c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006784:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006788:	b29b      	uxth	r3, r3
 800678a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	78db      	ldrb	r3, [r3, #3]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d06c      	beq.n	800686e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067aa:	81bb      	strh	r3, [r7, #12]
 80067ac:	89bb      	ldrh	r3, [r7, #12]
 80067ae:	f083 0320 	eor.w	r3, r3, #32
 80067b2:	81bb      	strh	r3, [r7, #12]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	441a      	add	r2, r3
 80067be:	89bb      	ldrh	r3, [r7, #12]
 80067c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	8013      	strh	r3, [r2, #0]
 80067d4:	e04b      	b.n	800686e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	82fb      	strh	r3, [r7, #22]
 80067e4:	8afb      	ldrh	r3, [r7, #22]
 80067e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d01b      	beq.n	8006826 <USB_EPClearStall+0x106>
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006804:	82bb      	strh	r3, [r7, #20]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	441a      	add	r2, r3
 8006810:	8abb      	ldrh	r3, [r7, #20]
 8006812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800681e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006822:	b29b      	uxth	r3, r3
 8006824:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683c:	827b      	strh	r3, [r7, #18]
 800683e:	8a7b      	ldrh	r3, [r7, #18]
 8006840:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006844:	827b      	strh	r3, [r7, #18]
 8006846:	8a7b      	ldrh	r3, [r7, #18]
 8006848:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800684c:	827b      	strh	r3, [r7, #18]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	441a      	add	r2, r3
 8006858:	8a7b      	ldrh	r3, [r7, #18]
 800685a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686a:	b29b      	uxth	r3, r3
 800686c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr

0800687a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	460b      	mov	r3, r1
 8006884:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d103      	bne.n	8006894 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2280      	movs	r2, #128	; 0x80
 8006890:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	bc80      	pop	{r7}
 800689e:	4770      	bx	lr

080068a0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bc80      	pop	{r7}
 80068b2:	4770      	bx	lr

080068b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr

080068c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80068da:	68fb      	ldr	r3, [r7, #12]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bc80      	pop	{r7}
 80068e4:	4770      	bx	lr

080068e6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr

080068fc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b08d      	sub	sp, #52	; 0x34
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	4611      	mov	r1, r2
 8006908:	461a      	mov	r2, r3
 800690a:	460b      	mov	r3, r1
 800690c:	80fb      	strh	r3, [r7, #6]
 800690e:	4613      	mov	r3, r2
 8006910:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006912:	88bb      	ldrh	r3, [r7, #4]
 8006914:	3301      	adds	r3, #1
 8006916:	085b      	lsrs	r3, r3, #1
 8006918:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006922:	88fb      	ldrh	r3, [r7, #6]
 8006924:	005a      	lsls	r2, r3, #1
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800692e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006934:	e01e      	b.n	8006974 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	3301      	adds	r3, #1
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	b29b      	uxth	r3, r3
 8006948:	021b      	lsls	r3, r3, #8
 800694a:	b29b      	uxth	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	b29a      	uxth	r2, r3
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	3302      	adds	r3, #2
 8006960:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	3302      	adds	r3, #2
 8006966:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	3301      	adds	r3, #1
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006970:	3b01      	subs	r3, #1
 8006972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1dd      	bne.n	8006936 <USB_WritePMA+0x3a>
  }
}
 800697a:	bf00      	nop
 800697c:	3734      	adds	r7, #52	; 0x34
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr

08006984 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006984:	b480      	push	{r7}
 8006986:	b08b      	sub	sp, #44	; 0x2c
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4611      	mov	r1, r2
 8006990:	461a      	mov	r2, r3
 8006992:	460b      	mov	r3, r1
 8006994:	80fb      	strh	r3, [r7, #6]
 8006996:	4613      	mov	r3, r2
 8006998:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800699a:	88bb      	ldrh	r3, [r7, #4]
 800699c:	085b      	lsrs	r3, r3, #1
 800699e:	b29b      	uxth	r3, r3
 80069a0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80069aa:	88fb      	ldrh	r3, [r7, #6]
 80069ac:	005a      	lsls	r2, r3, #1
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069b6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
 80069bc:	e01b      	b.n	80069f6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	3302      	adds	r3, #2
 80069ca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	3301      	adds	r3, #1
 80069d8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	0a1b      	lsrs	r3, r3, #8
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	3301      	adds	r3, #1
 80069e8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	3302      	adds	r3, #2
 80069ee:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80069f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f2:	3b01      	subs	r3, #1
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e0      	bne.n	80069be <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80069fc:	88bb      	ldrh	r3, [r7, #4]
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	701a      	strb	r2, [r3, #0]
  }
}
 8006a18:	bf00      	nop
 8006a1a:	372c      	adds	r7, #44	; 0x2c
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr

08006a22 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	7c1b      	ldrb	r3, [r3, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d115      	bne.n	8006a66 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a3e:	2202      	movs	r2, #2
 8006a40:	2181      	movs	r1, #129	; 0x81
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f002 ff73 	bl	800992e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a52:	2202      	movs	r2, #2
 8006a54:	2101      	movs	r1, #1
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f002 ff69 	bl	800992e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006a64:	e012      	b.n	8006a8c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a66:	2340      	movs	r3, #64	; 0x40
 8006a68:	2202      	movs	r2, #2
 8006a6a:	2181      	movs	r1, #129	; 0x81
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f002 ff5e 	bl	800992e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a78:	2340      	movs	r3, #64	; 0x40
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f002 ff55 	bl	800992e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a8c:	2308      	movs	r3, #8
 8006a8e:	2203      	movs	r2, #3
 8006a90:	2182      	movs	r1, #130	; 0x82
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f002 ff4b 	bl	800992e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a9e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006aa2:	f003 f86b 	bl	8009b7c <USBD_static_malloc>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d102      	bne.n	8006abe <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	73fb      	strb	r3, [r7, #15]
 8006abc:	e026      	b.n	8006b0c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	7c1b      	ldrb	r3, [r3, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d109      	bne.n	8006afc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006af2:	2101      	movs	r1, #1
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f003 f80b 	bl	8009b10 <USBD_LL_PrepareReceive>
 8006afa:	e007      	b.n	8006b0c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b02:	2340      	movs	r3, #64	; 0x40
 8006b04:	2101      	movs	r1, #1
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f003 f802 	bl	8009b10 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b084      	sub	sp, #16
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006b26:	2181      	movs	r1, #129	; 0x81
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f002 ff26 	bl	800997a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006b34:	2101      	movs	r1, #1
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f002 ff1f 	bl	800997a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006b44:	2182      	movs	r1, #130	; 0x82
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f002 ff17 	bl	800997a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00e      	beq.n	8006b7a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f003 f811 	bl	8009b94 <USBD_static_free>
    pdev->pClassData = NULL;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b94:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d039      	beq.n	8006c22 <USBD_CDC_Setup+0x9e>
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	d17c      	bne.n	8006cac <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	88db      	ldrh	r3, [r3, #6]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d029      	beq.n	8006c0e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	b25b      	sxtb	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	da11      	bge.n	8006be8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006bd0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	88d2      	ldrh	r2, [r2, #6]
 8006bd6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006bd8:	6939      	ldr	r1, [r7, #16]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	88db      	ldrh	r3, [r3, #6]
 8006bde:	461a      	mov	r2, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 f9f9 	bl	8007fd8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006be6:	e068      	b.n	8006cba <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	785a      	ldrb	r2, [r3, #1]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	88db      	ldrh	r3, [r3, #6]
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006bfe:	6939      	ldr	r1, [r7, #16]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	88db      	ldrh	r3, [r3, #6]
 8006c04:	461a      	mov	r2, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 fa14 	bl	8008034 <USBD_CtlPrepareRx>
      break;
 8006c0c:	e055      	b.n	8006cba <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	7850      	ldrb	r0, [r2, #1]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	4798      	blx	r3
      break;
 8006c20:	e04b      	b.n	8006cba <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	785b      	ldrb	r3, [r3, #1]
 8006c26:	2b0a      	cmp	r3, #10
 8006c28:	d017      	beq.n	8006c5a <USBD_CDC_Setup+0xd6>
 8006c2a:	2b0b      	cmp	r3, #11
 8006c2c:	d029      	beq.n	8006c82 <USBD_CDC_Setup+0xfe>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d133      	bne.n	8006c9a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d107      	bne.n	8006c4c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006c3c:	f107 030c 	add.w	r3, r7, #12
 8006c40:	2202      	movs	r2, #2
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 f9c7 	bl	8007fd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c4a:	e02e      	b.n	8006caa <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 f958 	bl	8007f04 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c54:	2302      	movs	r3, #2
 8006c56:	75fb      	strb	r3, [r7, #23]
          break;
 8006c58:	e027      	b.n	8006caa <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	d107      	bne.n	8006c74 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c64:	f107 030f 	add.w	r3, r7, #15
 8006c68:	2201      	movs	r2, #1
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 f9b3 	bl	8007fd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c72:	e01a      	b.n	8006caa <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 f944 	bl	8007f04 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	75fb      	strb	r3, [r7, #23]
          break;
 8006c80:	e013      	b.n	8006caa <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d00d      	beq.n	8006ca8 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 f938 	bl	8007f04 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c94:	2302      	movs	r3, #2
 8006c96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006c98:	e006      	b.n	8006ca8 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 f931 	bl	8007f04 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ca6:	e000      	b.n	8006caa <USBD_CDC_Setup+0x126>
          break;
 8006ca8:	bf00      	nop
      }
      break;
 8006caa:	e006      	b.n	8006cba <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f001 f928 	bl	8007f04 <USBD_CtlError>
      ret = USBD_FAIL;
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb8:	bf00      	nop
  }

  return ret;
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3718      	adds	r7, #24
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cde:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d03a      	beq.n	8006d60 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006cea:	78fa      	ldrb	r2, [r7, #3]
 8006cec:	6879      	ldr	r1, [r7, #4]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	440b      	add	r3, r1
 8006cf8:	331c      	adds	r3, #28
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d029      	beq.n	8006d54 <USBD_CDC_DataIn+0x90>
 8006d00:	78fa      	ldrb	r2, [r7, #3]
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	4613      	mov	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	331c      	adds	r3, #28
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	78f9      	ldrb	r1, [r7, #3]
 8006d14:	68b8      	ldr	r0, [r7, #8]
 8006d16:	460b      	mov	r3, r1
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	4403      	add	r3, r0
 8006d20:	3338      	adds	r3, #56	; 0x38
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d28:	fb03 f301 	mul.w	r3, r3, r1
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d110      	bne.n	8006d54 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006d32:	78fa      	ldrb	r2, [r7, #3]
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	331c      	adds	r3, #28
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d46:	78f9      	ldrb	r1, [r7, #3]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f002 febc 	bl	8009aca <USBD_LL_Transmit>
 8006d52:	e003      	b.n	8006d5c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e000      	b.n	8006d62 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006d60:	2302      	movs	r3, #2
  }
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d7e:	78fb      	ldrb	r3, [r7, #3]
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f002 fee7 	bl	8009b56 <USBD_LL_GetRxDataSize>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00d      	beq.n	8006db6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006dae:	4611      	mov	r1, r2
 8006db0:	4798      	blx	r3

    return USBD_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	e000      	b.n	8006db8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006db6:	2302      	movs	r3, #2
  }
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dce:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d015      	beq.n	8006e06 <USBD_CDC_EP0_RxReady+0x46>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006de0:	2bff      	cmp	r3, #255	; 0xff
 8006de2:	d010      	beq.n	8006e06 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006df2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006dfa:	b292      	uxth	r2, r2
 8006dfc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	22ff      	movs	r2, #255	; 0xff
 8006e02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2243      	movs	r2, #67	; 0x43
 8006e1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006e1e:	4b03      	ldr	r3, [pc, #12]	; (8006e2c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	20000094 	.word	0x20000094

08006e30 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2243      	movs	r2, #67	; 0x43
 8006e3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006e3e:	4b03      	ldr	r3, [pc, #12]	; (8006e4c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	20000050 	.word	0x20000050

08006e50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2243      	movs	r2, #67	; 0x43
 8006e5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006e5e:	4b03      	ldr	r3, [pc, #12]	; (8006e6c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bc80      	pop	{r7}
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	200000d8 	.word	0x200000d8

08006e70 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	220a      	movs	r2, #10
 8006e7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006e7e:	4b03      	ldr	r3, [pc, #12]	; (8006e8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	2000000c 	.word	0x2000000c

08006e90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr

08006ebc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006eda:	88fa      	ldrh	r2, [r7, #6]
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bc80      	pop	{r7}
 8006eec:	4770      	bx	lr

08006eee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr

08006f14 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d01c      	beq.n	8006f68 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d115      	bne.n	8006f64 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2181      	movs	r1, #129	; 0x81
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f002 fdb5 	bl	8009aca <USBD_LL_Transmit>

      return USBD_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	e002      	b.n	8006f6a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e000      	b.n	8006f6a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006f68:	2302      	movs	r3, #2
  }
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f80:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d017      	beq.n	8006fbc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	7c1b      	ldrb	r3, [r3, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d109      	bne.n	8006fa8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f002 fdb5 	bl	8009b10 <USBD_LL_PrepareReceive>
 8006fa6:	e007      	b.n	8006fb8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fae:	2340      	movs	r3, #64	; 0x40
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f002 fdac 	bl	8009b10 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	e000      	b.n	8006fbe <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006fbc:	2302      	movs	r3, #2
  }
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b084      	sub	sp, #16
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	60f8      	str	r0, [r7, #12]
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006fda:	2302      	movs	r3, #2
 8006fdc:	e01a      	b.n	8007014 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	79fa      	ldrb	r2, [r7, #7]
 800700a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f002 fc19 	bl	8009844 <USBD_LL_Init>

  return USBD_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d006      	beq.n	800703e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	73fb      	strb	r3, [r7, #15]
 800703c:	e001      	b.n	8007042 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800703e:	2302      	movs	r3, #2
 8007040:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007042:	7bfb      	ldrb	r3, [r7, #15]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr

0800704e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f002 fc4e 	bl	80098f8 <USBD_LL_Start>

  return USBD_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	bc80      	pop	{r7}
 8007078:	4770      	bx	lr

0800707a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	460b      	mov	r3, r1
 8007084:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007086:	2302      	movs	r3, #2
 8007088:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00c      	beq.n	80070ae <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	78fa      	ldrb	r2, [r7, #3]
 800709e:	4611      	mov	r1, r2
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	4798      	blx	r3
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	78fa      	ldrb	r2, [r7, #3]
 80070ce:	4611      	mov	r1, r2
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	4798      	blx	r3

  return USBD_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b082      	sub	sp, #8
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fecb 	bl	8007e8c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007104:	461a      	mov	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007112:	f003 031f 	and.w	r3, r3, #31
 8007116:	2b01      	cmp	r3, #1
 8007118:	d00c      	beq.n	8007134 <USBD_LL_SetupStage+0x56>
 800711a:	2b01      	cmp	r3, #1
 800711c:	d302      	bcc.n	8007124 <USBD_LL_SetupStage+0x46>
 800711e:	2b02      	cmp	r3, #2
 8007120:	d010      	beq.n	8007144 <USBD_LL_SetupStage+0x66>
 8007122:	e017      	b.n	8007154 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f9cb 	bl	80074c8 <USBD_StdDevReq>
      break;
 8007132:	e01a      	b.n	800716a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fa2d 	bl	800759c <USBD_StdItfReq>
      break;
 8007142:	e012      	b.n	800716a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fa6b 	bl	8007628 <USBD_StdEPReq>
      break;
 8007152:	e00a      	b.n	800716a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800715a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800715e:	b2db      	uxtb	r3, r3
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f002 fc28 	bl	80099b8 <USBD_LL_StallEP>
      break;
 8007168:	bf00      	nop
  }

  return USBD_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	460b      	mov	r3, r1
 800717e:	607a      	str	r2, [r7, #4]
 8007180:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007182:	7afb      	ldrb	r3, [r7, #11]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d14b      	bne.n	8007220 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800718e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007196:	2b03      	cmp	r3, #3
 8007198:	d134      	bne.n	8007204 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d919      	bls.n	80071da <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	1ad2      	subs	r2, r2, r3
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80071bc:	429a      	cmp	r2, r3
 80071be:	d203      	bcs.n	80071c8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	e002      	b.n	80071ce <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	461a      	mov	r2, r3
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 ff4c 	bl	8008070 <USBD_CtlContinueRx>
 80071d8:	e038      	b.n	800724c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d105      	bne.n	80071fc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 ff49 	bl	8008094 <USBD_CtlSendStatus>
 8007202:	e023      	b.n	800724c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800720a:	2b05      	cmp	r3, #5
 800720c:	d11e      	bne.n	800724c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007216:	2100      	movs	r1, #0
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f002 fbcd 	bl	80099b8 <USBD_LL_StallEP>
 800721e:	e015      	b.n	800724c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00d      	beq.n	8007248 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007232:	2b03      	cmp	r3, #3
 8007234:	d108      	bne.n	8007248 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	7afa      	ldrb	r2, [r7, #11]
 8007240:	4611      	mov	r1, r2
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	4798      	blx	r3
 8007246:	e001      	b.n	800724c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007248:	2302      	movs	r3, #2
 800724a:	e000      	b.n	800724e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b086      	sub	sp, #24
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	460b      	mov	r3, r1
 8007260:	607a      	str	r2, [r7, #4]
 8007262:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007264:	7afb      	ldrb	r3, [r7, #11]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d17f      	bne.n	800736a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3314      	adds	r3, #20
 800726e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007276:	2b02      	cmp	r3, #2
 8007278:	d15c      	bne.n	8007334 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	429a      	cmp	r2, r3
 8007284:	d915      	bls.n	80072b2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	1ad2      	subs	r2, r2, r3
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	b29b      	uxth	r3, r3
 800729a:	461a      	mov	r2, r3
 800729c:	6879      	ldr	r1, [r7, #4]
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 feb6 	bl	8008010 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072a4:	2300      	movs	r3, #0
 80072a6:	2200      	movs	r2, #0
 80072a8:	2100      	movs	r1, #0
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f002 fc30 	bl	8009b10 <USBD_LL_PrepareReceive>
 80072b0:	e04e      	b.n	8007350 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	6912      	ldr	r2, [r2, #16]
 80072ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80072be:	fb02 f201 	mul.w	r2, r2, r1
 80072c2:	1a9b      	subs	r3, r3, r2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d11c      	bne.n	8007302 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d316      	bcc.n	8007302 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	689a      	ldr	r2, [r3, #8]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072de:	429a      	cmp	r2, r3
 80072e0:	d20f      	bcs.n	8007302 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072e2:	2200      	movs	r2, #0
 80072e4:	2100      	movs	r1, #0
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 fe92 	bl	8008010 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072f4:	2300      	movs	r3, #0
 80072f6:	2200      	movs	r2, #0
 80072f8:	2100      	movs	r1, #0
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f002 fc08 	bl	8009b10 <USBD_LL_PrepareReceive>
 8007300:	e026      	b.n	8007350 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007314:	2b03      	cmp	r3, #3
 8007316:	d105      	bne.n	8007324 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007324:	2180      	movs	r1, #128	; 0x80
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f002 fb46 	bl	80099b8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 fec4 	bl	80080ba <USBD_CtlReceiveStatus>
 8007332:	e00d      	b.n	8007350 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800733a:	2b04      	cmp	r3, #4
 800733c:	d004      	beq.n	8007348 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007344:	2b00      	cmp	r3, #0
 8007346:	d103      	bne.n	8007350 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007348:	2180      	movs	r1, #128	; 0x80
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f002 fb34 	bl	80099b8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007356:	2b01      	cmp	r3, #1
 8007358:	d11d      	bne.n	8007396 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f7ff fe83 	bl	8007066 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007368:	e015      	b.n	8007396 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00d      	beq.n	8007392 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800737c:	2b03      	cmp	r3, #3
 800737e:	d108      	bne.n	8007392 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	7afa      	ldrb	r2, [r7, #11]
 800738a:	4611      	mov	r1, r2
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	4798      	blx	r3
 8007390:	e001      	b.n	8007396 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007392:	2302      	movs	r3, #2
 8007394:	e000      	b.n	8007398 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073a8:	2340      	movs	r3, #64	; 0x40
 80073aa:	2200      	movs	r2, #0
 80073ac:	2100      	movs	r1, #0
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f002 fabd 	bl	800992e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2240      	movs	r2, #64	; 0x40
 80073c0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073c4:	2340      	movs	r3, #64	; 0x40
 80073c6:	2200      	movs	r2, #0
 80073c8:	2180      	movs	r1, #128	; 0x80
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f002 faaf 	bl	800992e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2240      	movs	r2, #64	; 0x40
 80073da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d009      	beq.n	8007418 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6852      	ldr	r2, [r2, #4]
 8007410:	b2d2      	uxtb	r2, r2
 8007412:	4611      	mov	r1, r2
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	4798      	blx	r3
  }

  return USBD_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	460b      	mov	r3, r1
 800742c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	78fa      	ldrb	r2, [r7, #3]
 8007432:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	bc80      	pop	{r7}
 800743e:	4770      	bx	lr

08007440 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2204      	movs	r2, #4
 8007458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	bc80      	pop	{r7}
 8007466:	4770      	bx	lr

08007468 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007476:	2b04      	cmp	r3, #4
 8007478:	d105      	bne.n	8007486 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr

08007492 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d10b      	bne.n	80074bc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074de:	2b20      	cmp	r3, #32
 80074e0:	d004      	beq.n	80074ec <USBD_StdDevReq+0x24>
 80074e2:	2b40      	cmp	r3, #64	; 0x40
 80074e4:	d002      	beq.n	80074ec <USBD_StdDevReq+0x24>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d008      	beq.n	80074fc <USBD_StdDevReq+0x34>
 80074ea:	e04c      	b.n	8007586 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
      break;
 80074fa:	e049      	b.n	8007590 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	2b09      	cmp	r3, #9
 8007502:	d83a      	bhi.n	800757a <USBD_StdDevReq+0xb2>
 8007504:	a201      	add	r2, pc, #4	; (adr r2, 800750c <USBD_StdDevReq+0x44>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	0800755d 	.word	0x0800755d
 8007510:	08007571 	.word	0x08007571
 8007514:	0800757b 	.word	0x0800757b
 8007518:	08007567 	.word	0x08007567
 800751c:	0800757b 	.word	0x0800757b
 8007520:	0800753f 	.word	0x0800753f
 8007524:	08007535 	.word	0x08007535
 8007528:	0800757b 	.word	0x0800757b
 800752c:	08007553 	.word	0x08007553
 8007530:	08007549 	.word	0x08007549
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f9d4 	bl	80078e4 <USBD_GetDescriptor>
          break;
 800753c:	e022      	b.n	8007584 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fb37 	bl	8007bb4 <USBD_SetAddress>
          break;
 8007546:	e01d      	b.n	8007584 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fb74 	bl	8007c38 <USBD_SetConfig>
          break;
 8007550:	e018      	b.n	8007584 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fbfd 	bl	8007d54 <USBD_GetConfig>
          break;
 800755a:	e013      	b.n	8007584 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fc2c 	bl	8007dbc <USBD_GetStatus>
          break;
 8007564:	e00e      	b.n	8007584 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fc5a 	bl	8007e22 <USBD_SetFeature>
          break;
 800756e:	e009      	b.n	8007584 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fc69 	bl	8007e4a <USBD_ClrFeature>
          break;
 8007578:	e004      	b.n	8007584 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fcc1 	bl	8007f04 <USBD_CtlError>
          break;
 8007582:	bf00      	nop
      }
      break;
 8007584:	e004      	b.n	8007590 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fcbb 	bl	8007f04 <USBD_CtlError>
      break;
 800758e:	bf00      	nop
  }

  return ret;
 8007590:	7bfb      	ldrb	r3, [r7, #15]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop

0800759c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075b2:	2b20      	cmp	r3, #32
 80075b4:	d003      	beq.n	80075be <USBD_StdItfReq+0x22>
 80075b6:	2b40      	cmp	r3, #64	; 0x40
 80075b8:	d001      	beq.n	80075be <USBD_StdItfReq+0x22>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d12a      	bne.n	8007614 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c4:	3b01      	subs	r3, #1
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d81d      	bhi.n	8007606 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	889b      	ldrh	r3, [r3, #4]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d813      	bhi.n	80075fc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	88db      	ldrh	r3, [r3, #6]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d110      	bne.n	8007610 <USBD_StdItfReq+0x74>
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10d      	bne.n	8007610 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fd4d 	bl	8008094 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075fa:	e009      	b.n	8007610 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fc80 	bl	8007f04 <USBD_CtlError>
          break;
 8007604:	e004      	b.n	8007610 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fc7b 	bl	8007f04 <USBD_CtlError>
          break;
 800760e:	e000      	b.n	8007612 <USBD_StdItfReq+0x76>
          break;
 8007610:	bf00      	nop
      }
      break;
 8007612:	e004      	b.n	800761e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fc74 	bl	8007f04 <USBD_CtlError>
      break;
 800761c:	bf00      	nop
  }

  return USBD_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	889b      	ldrh	r3, [r3, #4]
 800763a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007644:	2b20      	cmp	r3, #32
 8007646:	d004      	beq.n	8007652 <USBD_StdEPReq+0x2a>
 8007648:	2b40      	cmp	r3, #64	; 0x40
 800764a:	d002      	beq.n	8007652 <USBD_StdEPReq+0x2a>
 800764c:	2b00      	cmp	r3, #0
 800764e:	d008      	beq.n	8007662 <USBD_StdEPReq+0x3a>
 8007650:	e13d      	b.n	80078ce <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	4798      	blx	r3
      break;
 8007660:	e13a      	b.n	80078d8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800766a:	2b20      	cmp	r3, #32
 800766c:	d10a      	bne.n	8007684 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	4798      	blx	r3
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	e12a      	b.n	80078da <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	785b      	ldrb	r3, [r3, #1]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d03e      	beq.n	800770a <USBD_StdEPReq+0xe2>
 800768c:	2b03      	cmp	r3, #3
 800768e:	d002      	beq.n	8007696 <USBD_StdEPReq+0x6e>
 8007690:	2b00      	cmp	r3, #0
 8007692:	d070      	beq.n	8007776 <USBD_StdEPReq+0x14e>
 8007694:	e115      	b.n	80078c2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769c:	2b02      	cmp	r3, #2
 800769e:	d002      	beq.n	80076a6 <USBD_StdEPReq+0x7e>
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d015      	beq.n	80076d0 <USBD_StdEPReq+0xa8>
 80076a4:	e02b      	b.n	80076fe <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00c      	beq.n	80076c6 <USBD_StdEPReq+0x9e>
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	2b80      	cmp	r3, #128	; 0x80
 80076b0:	d009      	beq.n	80076c6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80076b2:	7bbb      	ldrb	r3, [r7, #14]
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f002 f97e 	bl	80099b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80076bc:	2180      	movs	r1, #128	; 0x80
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f002 f97a 	bl	80099b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076c4:	e020      	b.n	8007708 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fc1b 	bl	8007f04 <USBD_CtlError>
              break;
 80076ce:	e01b      	b.n	8007708 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	885b      	ldrh	r3, [r3, #2]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10e      	bne.n	80076f6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00b      	beq.n	80076f6 <USBD_StdEPReq+0xce>
 80076de:	7bbb      	ldrb	r3, [r7, #14]
 80076e0:	2b80      	cmp	r3, #128	; 0x80
 80076e2:	d008      	beq.n	80076f6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	88db      	ldrh	r3, [r3, #6]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d104      	bne.n	80076f6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80076ec:	7bbb      	ldrb	r3, [r7, #14]
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f002 f961 	bl	80099b8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fccc 	bl	8008094 <USBD_CtlSendStatus>

              break;
 80076fc:	e004      	b.n	8007708 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fbff 	bl	8007f04 <USBD_CtlError>
              break;
 8007706:	bf00      	nop
          }
          break;
 8007708:	e0e0      	b.n	80078cc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007710:	2b02      	cmp	r3, #2
 8007712:	d002      	beq.n	800771a <USBD_StdEPReq+0xf2>
 8007714:	2b03      	cmp	r3, #3
 8007716:	d015      	beq.n	8007744 <USBD_StdEPReq+0x11c>
 8007718:	e026      	b.n	8007768 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00c      	beq.n	800773a <USBD_StdEPReq+0x112>
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	2b80      	cmp	r3, #128	; 0x80
 8007724:	d009      	beq.n	800773a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007726:	7bbb      	ldrb	r3, [r7, #14]
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f002 f944 	bl	80099b8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007730:	2180      	movs	r1, #128	; 0x80
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f002 f940 	bl	80099b8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007738:	e01c      	b.n	8007774 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fbe1 	bl	8007f04 <USBD_CtlError>
              break;
 8007742:	e017      	b.n	8007774 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	885b      	ldrh	r3, [r3, #2]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d112      	bne.n	8007772 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800774c:	7bbb      	ldrb	r3, [r7, #14]
 800774e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007752:	2b00      	cmp	r3, #0
 8007754:	d004      	beq.n	8007760 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	4619      	mov	r1, r3
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f002 f94b 	bl	80099f6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fc97 	bl	8008094 <USBD_CtlSendStatus>
              }
              break;
 8007766:	e004      	b.n	8007772 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fbca 	bl	8007f04 <USBD_CtlError>
              break;
 8007770:	e000      	b.n	8007774 <USBD_StdEPReq+0x14c>
              break;
 8007772:	bf00      	nop
          }
          break;
 8007774:	e0aa      	b.n	80078cc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800777c:	2b02      	cmp	r3, #2
 800777e:	d002      	beq.n	8007786 <USBD_StdEPReq+0x15e>
 8007780:	2b03      	cmp	r3, #3
 8007782:	d032      	beq.n	80077ea <USBD_StdEPReq+0x1c2>
 8007784:	e097      	b.n	80078b6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d007      	beq.n	800779c <USBD_StdEPReq+0x174>
 800778c:	7bbb      	ldrb	r3, [r7, #14]
 800778e:	2b80      	cmp	r3, #128	; 0x80
 8007790:	d004      	beq.n	800779c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fbb5 	bl	8007f04 <USBD_CtlError>
                break;
 800779a:	e091      	b.n	80078c0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800779c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	da0b      	bge.n	80077bc <USBD_StdEPReq+0x194>
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077aa:	4613      	mov	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	3310      	adds	r3, #16
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	4413      	add	r3, r2
 80077b8:	3304      	adds	r3, #4
 80077ba:	e00b      	b.n	80077d4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	4413      	add	r3, r2
 80077d2:	3304      	adds	r3, #4
 80077d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2200      	movs	r2, #0
 80077da:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2202      	movs	r2, #2
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fbf8 	bl	8007fd8 <USBD_CtlSendData>
              break;
 80077e8:	e06a      	b.n	80078c0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	da11      	bge.n	8007816 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	f003 020f 	and.w	r2, r3, #15
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	440b      	add	r3, r1
 8007804:	3318      	adds	r3, #24
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d117      	bne.n	800783c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fb78 	bl	8007f04 <USBD_CtlError>
                  break;
 8007814:	e054      	b.n	80078c0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	f003 020f 	and.w	r2, r3, #15
 800781c:	6879      	ldr	r1, [r7, #4]
 800781e:	4613      	mov	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	440b      	add	r3, r1
 8007828:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d104      	bne.n	800783c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fb65 	bl	8007f04 <USBD_CtlError>
                  break;
 800783a:	e041      	b.n	80078c0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800783c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007840:	2b00      	cmp	r3, #0
 8007842:	da0b      	bge.n	800785c <USBD_StdEPReq+0x234>
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800784a:	4613      	mov	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	3310      	adds	r3, #16
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	4413      	add	r3, r2
 8007858:	3304      	adds	r3, #4
 800785a:	e00b      	b.n	8007874 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	4413      	add	r3, r2
 8007872:	3304      	adds	r3, #4
 8007874:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <USBD_StdEPReq+0x25a>
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	2b80      	cmp	r3, #128	; 0x80
 8007880:	d103      	bne.n	800788a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2200      	movs	r2, #0
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	e00e      	b.n	80078a8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800788a:	7bbb      	ldrb	r3, [r7, #14]
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f002 f8d0 	bl	8009a34 <USBD_LL_IsStallEP>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2201      	movs	r2, #1
 800789e:	601a      	str	r2, [r3, #0]
 80078a0:	e002      	b.n	80078a8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2202      	movs	r2, #2
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fb92 	bl	8007fd8 <USBD_CtlSendData>
              break;
 80078b4:	e004      	b.n	80078c0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fb23 	bl	8007f04 <USBD_CtlError>
              break;
 80078be:	bf00      	nop
          }
          break;
 80078c0:	e004      	b.n	80078cc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fb1d 	bl	8007f04 <USBD_CtlError>
          break;
 80078ca:	bf00      	nop
      }
      break;
 80078cc:	e004      	b.n	80078d8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fb17 	bl	8007f04 <USBD_CtlError>
      break;
 80078d6:	bf00      	nop
  }

  return ret;
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	885b      	ldrh	r3, [r3, #2]
 80078fe:	0a1b      	lsrs	r3, r3, #8
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	2b06      	cmp	r3, #6
 8007906:	f200 8128 	bhi.w	8007b5a <USBD_GetDescriptor+0x276>
 800790a:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <USBD_GetDescriptor+0x2c>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	0800792d 	.word	0x0800792d
 8007914:	08007945 	.word	0x08007945
 8007918:	08007985 	.word	0x08007985
 800791c:	08007b5b 	.word	0x08007b5b
 8007920:	08007b5b 	.word	0x08007b5b
 8007924:	08007afb 	.word	0x08007afb
 8007928:	08007b27 	.word	0x08007b27
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	7c12      	ldrb	r2, [r2, #16]
 8007938:	f107 0108 	add.w	r1, r7, #8
 800793c:	4610      	mov	r0, r2
 800793e:	4798      	blx	r3
 8007940:	60f8      	str	r0, [r7, #12]
      break;
 8007942:	e112      	b.n	8007b6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	7c1b      	ldrb	r3, [r3, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10d      	bne.n	8007968 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007954:	f107 0208 	add.w	r2, r7, #8
 8007958:	4610      	mov	r0, r2
 800795a:	4798      	blx	r3
 800795c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3301      	adds	r3, #1
 8007962:	2202      	movs	r2, #2
 8007964:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007966:	e100      	b.n	8007b6a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	f107 0208 	add.w	r2, r7, #8
 8007974:	4610      	mov	r0, r2
 8007976:	4798      	blx	r3
 8007978:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3301      	adds	r3, #1
 800797e:	2202      	movs	r2, #2
 8007980:	701a      	strb	r2, [r3, #0]
      break;
 8007982:	e0f2      	b.n	8007b6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	885b      	ldrh	r3, [r3, #2]
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b05      	cmp	r3, #5
 800798c:	f200 80ac 	bhi.w	8007ae8 <USBD_GetDescriptor+0x204>
 8007990:	a201      	add	r2, pc, #4	; (adr r2, 8007998 <USBD_GetDescriptor+0xb4>)
 8007992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007996:	bf00      	nop
 8007998:	080079b1 	.word	0x080079b1
 800799c:	080079e5 	.word	0x080079e5
 80079a0:	08007a19 	.word	0x08007a19
 80079a4:	08007a4d 	.word	0x08007a4d
 80079a8:	08007a81 	.word	0x08007a81
 80079ac:	08007ab5 	.word	0x08007ab5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00b      	beq.n	80079d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	7c12      	ldrb	r2, [r2, #16]
 80079c8:	f107 0108 	add.w	r1, r7, #8
 80079cc:	4610      	mov	r0, r2
 80079ce:	4798      	blx	r3
 80079d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079d2:	e091      	b.n	8007af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fa94 	bl	8007f04 <USBD_CtlError>
            err++;
 80079dc:	7afb      	ldrb	r3, [r7, #11]
 80079de:	3301      	adds	r3, #1
 80079e0:	72fb      	strb	r3, [r7, #11]
          break;
 80079e2:	e089      	b.n	8007af8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00b      	beq.n	8007a08 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	7c12      	ldrb	r2, [r2, #16]
 80079fc:	f107 0108 	add.w	r1, r7, #8
 8007a00:	4610      	mov	r0, r2
 8007a02:	4798      	blx	r3
 8007a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a06:	e077      	b.n	8007af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fa7a 	bl	8007f04 <USBD_CtlError>
            err++;
 8007a10:	7afb      	ldrb	r3, [r7, #11]
 8007a12:	3301      	adds	r3, #1
 8007a14:	72fb      	strb	r3, [r7, #11]
          break;
 8007a16:	e06f      	b.n	8007af8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00b      	beq.n	8007a3c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	7c12      	ldrb	r2, [r2, #16]
 8007a30:	f107 0108 	add.w	r1, r7, #8
 8007a34:	4610      	mov	r0, r2
 8007a36:	4798      	blx	r3
 8007a38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a3a:	e05d      	b.n	8007af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fa60 	bl	8007f04 <USBD_CtlError>
            err++;
 8007a44:	7afb      	ldrb	r3, [r7, #11]
 8007a46:	3301      	adds	r3, #1
 8007a48:	72fb      	strb	r3, [r7, #11]
          break;
 8007a4a:	e055      	b.n	8007af8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00b      	beq.n	8007a70 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	7c12      	ldrb	r2, [r2, #16]
 8007a64:	f107 0108 	add.w	r1, r7, #8
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4798      	blx	r3
 8007a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a6e:	e043      	b.n	8007af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fa46 	bl	8007f04 <USBD_CtlError>
            err++;
 8007a78:	7afb      	ldrb	r3, [r7, #11]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a7e:	e03b      	b.n	8007af8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	7c12      	ldrb	r2, [r2, #16]
 8007a98:	f107 0108 	add.w	r1, r7, #8
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
 8007aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aa2:	e029      	b.n	8007af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fa2c 	bl	8007f04 <USBD_CtlError>
            err++;
 8007aac:	7afb      	ldrb	r3, [r7, #11]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ab2:	e021      	b.n	8007af8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	7c12      	ldrb	r2, [r2, #16]
 8007acc:	f107 0108 	add.w	r1, r7, #8
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4798      	blx	r3
 8007ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ad6:	e00f      	b.n	8007af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fa12 	bl	8007f04 <USBD_CtlError>
            err++;
 8007ae0:	7afb      	ldrb	r3, [r7, #11]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ae6:	e007      	b.n	8007af8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fa0a 	bl	8007f04 <USBD_CtlError>
          err++;
 8007af0:	7afb      	ldrb	r3, [r7, #11]
 8007af2:	3301      	adds	r3, #1
 8007af4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007af6:	e038      	b.n	8007b6a <USBD_GetDescriptor+0x286>
 8007af8:	e037      	b.n	8007b6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	7c1b      	ldrb	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d109      	bne.n	8007b16 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0a:	f107 0208 	add.w	r2, r7, #8
 8007b0e:	4610      	mov	r0, r2
 8007b10:	4798      	blx	r3
 8007b12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b14:	e029      	b.n	8007b6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f9f3 	bl	8007f04 <USBD_CtlError>
        err++;
 8007b1e:	7afb      	ldrb	r3, [r7, #11]
 8007b20:	3301      	adds	r3, #1
 8007b22:	72fb      	strb	r3, [r7, #11]
      break;
 8007b24:	e021      	b.n	8007b6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	7c1b      	ldrb	r3, [r3, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10d      	bne.n	8007b4a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	f107 0208 	add.w	r2, r7, #8
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	4798      	blx	r3
 8007b3e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	3301      	adds	r3, #1
 8007b44:	2207      	movs	r2, #7
 8007b46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b48:	e00f      	b.n	8007b6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f9d9 	bl	8007f04 <USBD_CtlError>
        err++;
 8007b52:	7afb      	ldrb	r3, [r7, #11]
 8007b54:	3301      	adds	r3, #1
 8007b56:	72fb      	strb	r3, [r7, #11]
      break;
 8007b58:	e007      	b.n	8007b6a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f9d1 	bl	8007f04 <USBD_CtlError>
      err++;
 8007b62:	7afb      	ldrb	r3, [r7, #11]
 8007b64:	3301      	adds	r3, #1
 8007b66:	72fb      	strb	r3, [r7, #11]
      break;
 8007b68:	bf00      	nop
  }

  if (err != 0U)
 8007b6a:	7afb      	ldrb	r3, [r7, #11]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d11c      	bne.n	8007baa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007b70:	893b      	ldrh	r3, [r7, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d011      	beq.n	8007b9a <USBD_GetDescriptor+0x2b6>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	88db      	ldrh	r3, [r3, #6]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00d      	beq.n	8007b9a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	88da      	ldrh	r2, [r3, #6]
 8007b82:	893b      	ldrh	r3, [r7, #8]
 8007b84:	4293      	cmp	r3, r2
 8007b86:	bf28      	it	cs
 8007b88:	4613      	movcs	r3, r2
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b8e:	893b      	ldrh	r3, [r7, #8]
 8007b90:	461a      	mov	r2, r3
 8007b92:	68f9      	ldr	r1, [r7, #12]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fa1f 	bl	8007fd8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	88db      	ldrh	r3, [r3, #6]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d104      	bne.n	8007bac <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa76 	bl	8008094 <USBD_CtlSendStatus>
 8007ba8:	e000      	b.n	8007bac <USBD_GetDescriptor+0x2c8>
    return;
 8007baa:	bf00      	nop
    }
  }
}
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop

08007bb4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	889b      	ldrh	r3, [r3, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d130      	bne.n	8007c28 <USBD_SetAddress+0x74>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	88db      	ldrh	r3, [r3, #6]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d12c      	bne.n	8007c28 <USBD_SetAddress+0x74>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	885b      	ldrh	r3, [r3, #2]
 8007bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8007bd4:	d828      	bhi.n	8007c28 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	885b      	ldrh	r3, [r3, #2]
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007be0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007be8:	2b03      	cmp	r3, #3
 8007bea:	d104      	bne.n	8007bf6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f988 	bl	8007f04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf4:	e01c      	b.n	8007c30 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	7bfa      	ldrb	r2, [r7, #15]
 8007bfa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f001 ff42 	bl	8009a8c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fa43 	bl	8008094 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d004      	beq.n	8007c1e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c1c:	e008      	b.n	8007c30 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c26:	e003      	b.n	8007c30 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f96a 	bl	8007f04 <USBD_CtlError>
  }
}
 8007c30:	bf00      	nop
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	885b      	ldrh	r3, [r3, #2]
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	4b41      	ldr	r3, [pc, #260]	; (8007d50 <USBD_SetConfig+0x118>)
 8007c4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c4c:	4b40      	ldr	r3, [pc, #256]	; (8007d50 <USBD_SetConfig+0x118>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d904      	bls.n	8007c5e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f954 	bl	8007f04 <USBD_CtlError>
 8007c5c:	e075      	b.n	8007d4a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d002      	beq.n	8007c6e <USBD_SetConfig+0x36>
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	d023      	beq.n	8007cb4 <USBD_SetConfig+0x7c>
 8007c6c:	e062      	b.n	8007d34 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007c6e:	4b38      	ldr	r3, [pc, #224]	; (8007d50 <USBD_SetConfig+0x118>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d01a      	beq.n	8007cac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007c76:	4b36      	ldr	r3, [pc, #216]	; (8007d50 <USBD_SetConfig+0x118>)
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2203      	movs	r2, #3
 8007c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c88:	4b31      	ldr	r3, [pc, #196]	; (8007d50 <USBD_SetConfig+0x118>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff f9f3 	bl	800707a <USBD_SetClassConfig>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d104      	bne.n	8007ca4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f931 	bl	8007f04 <USBD_CtlError>
            return;
 8007ca2:	e052      	b.n	8007d4a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f9f5 	bl	8008094 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007caa:	e04e      	b.n	8007d4a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f9f1 	bl	8008094 <USBD_CtlSendStatus>
        break;
 8007cb2:	e04a      	b.n	8007d4a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007cb4:	4b26      	ldr	r3, [pc, #152]	; (8007d50 <USBD_SetConfig+0x118>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d112      	bne.n	8007ce2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007cc4:	4b22      	ldr	r3, [pc, #136]	; (8007d50 <USBD_SetConfig+0x118>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007cce:	4b20      	ldr	r3, [pc, #128]	; (8007d50 <USBD_SetConfig+0x118>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff f9ef 	bl	80070b8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f9da 	bl	8008094 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ce0:	e033      	b.n	8007d4a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007ce2:	4b1b      	ldr	r3, [pc, #108]	; (8007d50 <USBD_SetConfig+0x118>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d01d      	beq.n	8007d2c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7ff f9dd 	bl	80070b8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007cfe:	4b14      	ldr	r3, [pc, #80]	; (8007d50 <USBD_SetConfig+0x118>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d08:	4b11      	ldr	r3, [pc, #68]	; (8007d50 <USBD_SetConfig+0x118>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff f9b3 	bl	800707a <USBD_SetClassConfig>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d104      	bne.n	8007d24 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f8f1 	bl	8007f04 <USBD_CtlError>
            return;
 8007d22:	e012      	b.n	8007d4a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f9b5 	bl	8008094 <USBD_CtlSendStatus>
        break;
 8007d2a:	e00e      	b.n	8007d4a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f9b1 	bl	8008094 <USBD_CtlSendStatus>
        break;
 8007d32:	e00a      	b.n	8007d4a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f8e4 	bl	8007f04 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d3c:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <USBD_SetConfig+0x118>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff f9b8 	bl	80070b8 <USBD_ClrClassConfig>
        break;
 8007d48:	bf00      	nop
    }
  }
}
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20000208 	.word	0x20000208

08007d54 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	88db      	ldrh	r3, [r3, #6]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d004      	beq.n	8007d70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f8cb 	bl	8007f04 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d6e:	e021      	b.n	8007db4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	db17      	blt.n	8007daa <USBD_GetConfig+0x56>
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	dd02      	ble.n	8007d84 <USBD_GetConfig+0x30>
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d00b      	beq.n	8007d9a <USBD_GetConfig+0x46>
 8007d82:	e012      	b.n	8007daa <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	2201      	movs	r2, #1
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f920 	bl	8007fd8 <USBD_CtlSendData>
        break;
 8007d98:	e00c      	b.n	8007db4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	2201      	movs	r2, #1
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f918 	bl	8007fd8 <USBD_CtlSendData>
        break;
 8007da8:	e004      	b.n	8007db4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f8a9 	bl	8007f04 <USBD_CtlError>
        break;
 8007db2:	bf00      	nop
}
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d81e      	bhi.n	8007e10 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	88db      	ldrh	r3, [r3, #6]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d004      	beq.n	8007de4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f891 	bl	8007f04 <USBD_CtlError>
        break;
 8007de2:	e01a      	b.n	8007e1a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f043 0202 	orr.w	r2, r3, #2
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	330c      	adds	r3, #12
 8007e04:	2202      	movs	r2, #2
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f8e5 	bl	8007fd8 <USBD_CtlSendData>
      break;
 8007e0e:	e004      	b.n	8007e1a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f876 	bl	8007f04 <USBD_CtlError>
      break;
 8007e18:	bf00      	nop
  }
}
 8007e1a:	bf00      	nop
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	885b      	ldrh	r3, [r3, #2]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d106      	bne.n	8007e42 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f929 	bl	8008094 <USBD_CtlSendStatus>
  }
}
 8007e42:	bf00      	nop
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d80b      	bhi.n	8007e78 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	885b      	ldrh	r3, [r3, #2]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d10c      	bne.n	8007e82 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f90f 	bl	8008094 <USBD_CtlSendStatus>
      }
      break;
 8007e76:	e004      	b.n	8007e82 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f842 	bl	8007f04 <USBD_CtlError>
      break;
 8007e80:	e000      	b.n	8007e84 <USBD_ClrFeature+0x3a>
      break;
 8007e82:	bf00      	nop
  }
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	781a      	ldrb	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	785a      	ldrb	r2, [r3, #1]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	3302      	adds	r3, #2
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	3303      	adds	r3, #3
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	021b      	lsls	r3, r3, #8
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	4413      	add	r3, r2
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	3305      	adds	r3, #5
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	4413      	add	r3, r2
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	3306      	adds	r3, #6
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	3307      	adds	r3, #7
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	021b      	lsls	r3, r3, #8
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	4413      	add	r3, r2
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	80da      	strh	r2, [r3, #6]

}
 8007efa:	bf00      	nop
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bc80      	pop	{r7}
 8007f02:	4770      	bx	lr

08007f04 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007f0e:	2180      	movs	r1, #128	; 0x80
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f001 fd51 	bl	80099b8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007f16:	2100      	movs	r1, #0
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 fd4d 	bl	80099b8 <USBD_LL_StallEP>
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b086      	sub	sp, #24
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d032      	beq.n	8007fa2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f834 	bl	8007faa <USBD_GetLen>
 8007f42:	4603      	mov	r3, r0
 8007f44:	3301      	adds	r3, #1
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007f50:	7dfb      	ldrb	r3, [r7, #23]
 8007f52:	1c5a      	adds	r2, r3, #1
 8007f54:	75fa      	strb	r2, [r7, #23]
 8007f56:	461a      	mov	r2, r3
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	7812      	ldrb	r2, [r2, #0]
 8007f60:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	75fa      	strb	r2, [r7, #23]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	2203      	movs	r2, #3
 8007f70:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007f72:	e012      	b.n	8007f9a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	60fa      	str	r2, [r7, #12]
 8007f7a:	7dfa      	ldrb	r2, [r7, #23]
 8007f7c:	1c51      	adds	r1, r2, #1
 8007f7e:	75f9      	strb	r1, [r7, #23]
 8007f80:	4611      	mov	r1, r2
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	440a      	add	r2, r1
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	75fa      	strb	r2, [r7, #23]
 8007f90:	461a      	mov	r2, r3
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	4413      	add	r3, r2
 8007f96:	2200      	movs	r2, #0
 8007f98:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e8      	bne.n	8007f74 <USBD_GetString+0x4e>
    }
  }
}
 8007fa2:	bf00      	nop
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b085      	sub	sp, #20
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007fb6:	e005      	b.n	8007fc4 <USBD_GetLen+0x1a>
  {
    len++;
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1f5      	bne.n	8007fb8 <USBD_GetLen+0xe>
  }

  return len;
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bc80      	pop	{r7}
 8007fd6:	4770      	bx	lr

08007fd8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2202      	movs	r2, #2
 8007fea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007fee:	88fa      	ldrh	r2, [r7, #6]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007ff4:	88fa      	ldrh	r2, [r7, #6]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ffa:	88fb      	ldrh	r3, [r7, #6]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	2100      	movs	r1, #0
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f001 fd62 	bl	8009aca <USBD_LL_Transmit>

  return USBD_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800801e:	88fb      	ldrh	r3, [r7, #6]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	2100      	movs	r1, #0
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f001 fd50 	bl	8009aca <USBD_LL_Transmit>

  return USBD_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	4613      	mov	r3, r2
 8008040:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2203      	movs	r2, #3
 8008046:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800804a:	88fa      	ldrh	r2, [r7, #6]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008052:	88fa      	ldrh	r2, [r7, #6]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800805a:	88fb      	ldrh	r3, [r7, #6]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	2100      	movs	r1, #0
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f001 fd55 	bl	8009b10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	4613      	mov	r3, r2
 800807c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800807e:	88fb      	ldrh	r3, [r7, #6]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	2100      	movs	r1, #0
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f001 fd43 	bl	8009b10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2204      	movs	r2, #4
 80080a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80080a4:	2300      	movs	r3, #0
 80080a6:	2200      	movs	r2, #0
 80080a8:	2100      	movs	r1, #0
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 fd0d 	bl	8009aca <USBD_LL_Transmit>

  return USBD_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2205      	movs	r2, #5
 80080c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080ca:	2300      	movs	r3, #0
 80080cc:	2200      	movs	r2, #0
 80080ce:	2100      	movs	r1, #0
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f001 fd1d 	bl	8009b10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <_ZN5SPI_14InitEv>:
//------------------------------------------------------------------------
// SPI_1
//------------------------------------------------------------------------
SPI_HandleTypeDef SPI_1::hspi;

void SPI_1::Init() {
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
	hspi.Instance = SPI1;
 80080e4:	4b15      	ldr	r3, [pc, #84]	; (800813c <_ZN5SPI_14InitEv+0x5c>)
 80080e6:	4a16      	ldr	r2, [pc, #88]	; (8008140 <_ZN5SPI_14InitEv+0x60>)
 80080e8:	601a      	str	r2, [r3, #0]
	hspi.Init.Mode = SPI_MODE_MASTER;
 80080ea:	4b14      	ldr	r3, [pc, #80]	; (800813c <_ZN5SPI_14InitEv+0x5c>)
 80080ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80080f0:	605a      	str	r2, [r3, #4]
	hspi.Init.Direction = SPI_DIRECTION_2LINES;
 80080f2:	4b12      	ldr	r3, [pc, #72]	; (800813c <_ZN5SPI_14InitEv+0x5c>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	609a      	str	r2, [r3, #8]
	hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 80080f8:	4b10      	ldr	r3, [pc, #64]	; (800813c <_ZN5SPI_14InitEv+0x5c>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	60da      	str	r2, [r3, #12]
	hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 80080fe:	4b0f      	ldr	r3, [pc, #60]	; (800813c <_ZN5SPI_14InitEv+0x5c>)
 8008100:	2200      	movs	r2, #0
 8008102:	611a      	str	r2, [r3, #16]
	hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008104:	4b0d      	ldr	r3, [pc, #52]	; (800813c <_ZN5SPI_14InitEv+0x5c>)
 8008106:	2200      	movs	r2, #0
 8008108:	615a      	str	r2, [r3, #20]
	hspi.Init.NSS = SPI_NSS_SOFT;
 800810a:	4b0c      	ldr	r3, [pc, #48]	; (800813c <_ZN5SPI_14InitEv+0x5c>)
 800810c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008110:	619a      	str	r2, [r3, #24]
	hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008112:	4b0a      	ldr	r3, [pc, #40]	; (800813c <_ZN5SPI_14InitEv+0x5c>)
 8008114:	2218      	movs	r2, #24
 8008116:	61da      	str	r2, [r3, #28]
	hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008118:	4b08      	ldr	r3, [pc, #32]	; (800813c <_ZN5SPI_14InitEv+0x5c>)
 800811a:	2200      	movs	r2, #0
 800811c:	621a      	str	r2, [r3, #32]
	hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 800811e:	4b07      	ldr	r3, [pc, #28]	; (800813c <_ZN5SPI_14InitEv+0x5c>)
 8008120:	2200      	movs	r2, #0
 8008122:	625a      	str	r2, [r3, #36]	; 0x24
	hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008124:	4b05      	ldr	r3, [pc, #20]	; (800813c <_ZN5SPI_14InitEv+0x5c>)
 8008126:	2200      	movs	r2, #0
 8008128:	629a      	str	r2, [r3, #40]	; 0x28
	hspi.Init.CRCPolynomial = 10;
 800812a:	4b04      	ldr	r3, [pc, #16]	; (800813c <_ZN5SPI_14InitEv+0x5c>)
 800812c:	220a      	movs	r2, #10
 800812e:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(&hspi);
 8008130:	4802      	ldr	r0, [pc, #8]	; (800813c <_ZN5SPI_14InitEv+0x5c>)
 8008132:	f7fb fc35 	bl	80039a0 <HAL_SPI_Init>

}
 8008136:	bf00      	nop
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	2000020c 	.word	0x2000020c
 8008140:	40013000 	.word	0x40013000

08008144 <_ZN5SPI_12RWEh>:

uint8_t SPI_1::RW(uint8_t reg) {
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af02      	add	r7, sp, #8
 800814a:	4603      	mov	r3, r0
 800814c:	71fb      	strb	r3, [r7, #7]
	uint8_t rec;
	HAL_SPI_TransmitReceive(&hspi, &reg, &rec, 1, 1000);
 800814e:	f107 020f 	add.w	r2, r7, #15
 8008152:	1df9      	adds	r1, r7, #7
 8008154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	2301      	movs	r3, #1
 800815c:	4803      	ldr	r0, [pc, #12]	; (800816c <_ZN5SPI_12RWEh+0x28>)
 800815e:	f7fb fca3 	bl	8003aa8 <HAL_SPI_TransmitReceive>
	return rec;
 8008162:	7bfb      	ldrb	r3, [r7, #15]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	2000020c 	.word	0x2000020c

08008170 <_ZN5RFM695CS_DNEv>:
char RFM69::txt[120];

#define MY_NETWORK_ID 0x47
//#define BAUDRATE  19200 // 4800, 19200, 38400, 300000

void RFM69::CS_DN() {
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_CS_GPIO_Port, R_CS_Pin, GPIO_PIN_RESET);
 8008174:	2200      	movs	r2, #0
 8008176:	2140      	movs	r1, #64	; 0x40
 8008178:	4802      	ldr	r0, [pc, #8]	; (8008184 <_ZN5RFM695CS_DNEv+0x14>)
 800817a:	f7f9 fba3 	bl	80018c4 <HAL_GPIO_WritePin>
}
 800817e:	bf00      	nop
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	40010c00 	.word	0x40010c00

08008188 <_ZN5RFM695CS_UPEv>:
void RFM69::CS_UP() {
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_CS_GPIO_Port, R_CS_Pin, GPIO_PIN_SET);
 800818c:	2201      	movs	r2, #1
 800818e:	2140      	movs	r1, #64	; 0x40
 8008190:	4802      	ldr	r0, [pc, #8]	; (800819c <_ZN5RFM695CS_UPEv+0x14>)
 8008192:	f7f9 fb97 	bl	80018c4 <HAL_GPIO_WritePin>
}
 8008196:	bf00      	nop
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	40010c00 	.word	0x40010c00

080081a0 <_ZN5RFM698RESET_DNEv>:
void RFM69::RESET_DN() {
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_RESET_GPIO_Port, R_RESET_Pin, GPIO_PIN_RESET);
 80081a4:	2200      	movs	r2, #0
 80081a6:	2180      	movs	r1, #128	; 0x80
 80081a8:	4802      	ldr	r0, [pc, #8]	; (80081b4 <_ZN5RFM698RESET_DNEv+0x14>)
 80081aa:	f7f9 fb8b 	bl	80018c4 <HAL_GPIO_WritePin>
}
 80081ae:	bf00      	nop
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	40010c00 	.word	0x40010c00

080081b8 <_ZN5RFM698RESET_UPEv>:
void RFM69::RESET_UP() {
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R_RESET_GPIO_Port, R_RESET_Pin, GPIO_PIN_SET);
 80081bc:	2201      	movs	r2, #1
 80081be:	2180      	movs	r1, #128	; 0x80
 80081c0:	4802      	ldr	r0, [pc, #8]	; (80081cc <_ZN5RFM698RESET_UPEv+0x14>)
 80081c2:	f7f9 fb7f 	bl	80018c4 <HAL_GPIO_WritePin>
}
 80081c6:	bf00      	nop
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	40010c00 	.word	0x40010c00

080081d0 <_ZN5RFM696InitIOEv>:

bool RFM69::readINT() {
	return (HAL_GPIO_ReadPin(R_INT_GPIO_Port, R_INT_Pin) == GPIO_PIN_RESET);
}

void RFM69::InitIO() {
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = R_CS_Pin;
 80081d6:	2340      	movs	r3, #64	; 0x40
 80081d8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081da:	2301      	movs	r3, #1
 80081dc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081de:	2302      	movs	r3, #2
 80081e0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(R_CS_GPIO_Port, &GPIO_InitStruct);
 80081e2:	463b      	mov	r3, r7
 80081e4:	4619      	mov	r1, r3
 80081e6:	4811      	ldr	r0, [pc, #68]	; (800822c <_ZN5RFM696InitIOEv+0x5c>)
 80081e8:	f7f9 fa12 	bl	8001610 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = R_RESET_Pin;
 80081ec:	2380      	movs	r3, #128	; 0x80
 80081ee:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081f0:	2301      	movs	r3, #1
 80081f2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081f4:	2302      	movs	r3, #2
 80081f6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(R_RESET_GPIO_Port, &GPIO_InitStruct);
 80081f8:	463b      	mov	r3, r7
 80081fa:	4619      	mov	r1, r3
 80081fc:	480b      	ldr	r0, [pc, #44]	; (800822c <_ZN5RFM696InitIOEv+0x5c>)
 80081fe:	f7f9 fa07 	bl	8001610 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = R_INT_Pin;
 8008202:	2320      	movs	r3, #32
 8008204:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008206:	2300      	movs	r3, #0
 8008208:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800820a:	2302      	movs	r3, #2
 800820c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(R_INT_GPIO_Port, &GPIO_InitStruct);
 800820e:	463b      	mov	r3, r7
 8008210:	4619      	mov	r1, r3
 8008212:	4806      	ldr	r0, [pc, #24]	; (800822c <_ZN5RFM696InitIOEv+0x5c>)
 8008214:	f7f9 f9fc 	bl	8001610 <HAL_GPIO_Init>

	CS_UP();
 8008218:	f7ff ffb6 	bl	8008188 <_ZN5RFM695CS_UPEv>
	RESET_UP();
 800821c:	f7ff ffcc 	bl	80081b8 <_ZN5RFM698RESET_UPEv>
	SPI_1::Init();
 8008220:	f7ff ff5e 	bl	80080e0 <_ZN5SPI_14InitEv>
}
 8008224:	bf00      	nop
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	40010c00 	.word	0x40010c00

08008230 <_ZN5RFM694InitEPK6RFMCfg>:

int RFM69::getChannelFreq(int channel) {
	return SLINE_FREQ_BASE + channel * SLINE_FREQ_CHANNEL_WIDE;
}

bool RFM69::Init(const RFMCfg *cfg) {
 8008230:	b5b0      	push	{r4, r5, r7, lr}
 8008232:	b08c      	sub	sp, #48	; 0x30
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]

	mNewframe = false;
 8008238:	4b8e      	ldr	r3, [pc, #568]	; (8008474 <_ZN5RFM694InitEPK6RFMCfg+0x244>)
 800823a:	2200      	movs	r2, #0
 800823c:	701a      	strb	r2, [r3, #0]
	mShowRecFrame = false;
 800823e:	4b8e      	ldr	r3, [pc, #568]	; (8008478 <_ZN5RFM694InitEPK6RFMCfg+0x248>)
 8008240:	2200      	movs	r2, #0
 8008242:	701a      	strb	r2, [r3, #0]
	mPowerLevel = 31;
 8008244:	4b8d      	ldr	r3, [pc, #564]	; (800847c <_ZN5RFM694InitEPK6RFMCfg+0x24c>)
 8008246:	221f      	movs	r2, #31
 8008248:	701a      	strb	r2, [r3, #0]
	mPA_Mode = paMode1;
 800824a:	4b8d      	ldr	r3, [pc, #564]	; (8008480 <_ZN5RFM694InitEPK6RFMCfg+0x250>)
 800824c:	2200      	movs	r2, #0
 800824e:	701a      	strb	r2, [r3, #0]
	mMode = modeSTANDBY;
 8008250:	4b8c      	ldr	r3, [pc, #560]	; (8008484 <_ZN5RFM694InitEPK6RFMCfg+0x254>)
 8008252:	2201      	movs	r2, #1
 8008254:	701a      	strb	r2, [r3, #0]

	InitIO();
 8008256:	f7ff ffbb 	bl	80081d0 <_ZN5RFM696InitIOEv>
	CS_UP();
 800825a:	f7ff ff95 	bl	8008188 <_ZN5RFM695CS_UPEv>
	RESET_UP();
 800825e:	f7ff ffab 	bl	80081b8 <_ZN5RFM698RESET_UPEv>
	HAL_Delay(2);
 8008262:	2002      	movs	r0, #2
 8008264:	f7f9 f80e 	bl	8001284 <HAL_Delay>
	RESET_DN();
 8008268:	f7ff ff9a 	bl	80081a0 <_ZN5RFM698RESET_DNEv>
	HAL_Delay(10);
 800826c:	200a      	movs	r0, #10
 800826e:	f7f9 f809 	bl	8001284 <HAL_Delay>

	const uint8_t CONFIG[][2] = {
 8008272:	4b85      	ldr	r3, [pc, #532]	; (8008488 <_ZN5RFM694InitEPK6RFMCfg+0x258>)
 8008274:	f107 0408 	add.w	r4, r7, #8
 8008278:	461d      	mov	r5, r3
 800827a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800827c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800827e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008282:	c407      	stmia	r4!, {r0, r1, r2}
 8008284:	8023      	strh	r3, [r4, #0]
			/* 0x3C */{ REG_FIFOTHRESH, RF_FIFOTHRESH_TXSTART_FIFONOTEMPTY | RF_FIFOTHRESH_VALUE }, // TX on FIFO not empty
			/* 0x6F */{ REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode for Fading Margin Improvement, recommended default for AfcLowBetaOn=0
			{ 255, 0 } };

	//sprawdzenie, odczekanie, czy uk�ad jest ju� obudzony
	uint32_t start = HAL_GetTick();
 8008286:	f7f8 fff3 	bl	8001270 <HAL_GetTick>
 800828a:	62b8      	str	r0, [r7, #40]	; 0x28
	uint8_t timeout = 50;
 800828c:	2332      	movs	r3, #50	; 0x32
 800828e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (HAL_GetTick() - start < timeout) {
 8008292:	f7f8 ffed 	bl	8001270 <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	1ad2      	subs	r2, r2, r3
 800829c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082a0:	429a      	cmp	r2, r3
 80082a2:	bf34      	ite	cc
 80082a4:	2301      	movcc	r3, #1
 80082a6:	2300      	movcs	r3, #0
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d010      	beq.n	80082d0 <_ZN5RFM694InitEPK6RFMCfg+0xa0>
		writeReg(REG_SYNCVALUE1, 0xAA);
 80082ae:	21aa      	movs	r1, #170	; 0xaa
 80082b0:	202f      	movs	r0, #47	; 0x2f
 80082b2:	f000 f904 	bl	80084be <_ZN5RFM698writeRegEhh>
		if (readReg(REG_SYNCVALUE1) == 0xAA)
 80082b6:	202f      	movs	r0, #47	; 0x2f
 80082b8:	f000 f8ea 	bl	8008490 <_ZN5RFM697readRegEh>
 80082bc:	4603      	mov	r3, r0
 80082be:	2baa      	cmp	r3, #170	; 0xaa
 80082c0:	bf0c      	ite	eq
 80082c2:	2301      	moveq	r3, #1
 80082c4:	2300      	movne	r3, #0
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d100      	bne.n	80082ce <_ZN5RFM694InitEPK6RFMCfg+0x9e>
	while (HAL_GetTick() - start < timeout) {
 80082cc:	e7e1      	b.n	8008292 <_ZN5RFM694InitEPK6RFMCfg+0x62>
			break;
 80082ce:	bf00      	nop
	};
	start = HAL_GetTick();
 80082d0:	f7f8 ffce 	bl	8001270 <HAL_GetTick>
 80082d4:	62b8      	str	r0, [r7, #40]	; 0x28
	while (HAL_GetTick() - start < timeout) {
 80082d6:	f7f8 ffcb 	bl	8001270 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082de:	1ad2      	subs	r2, r2, r3
 80082e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082e4:	429a      	cmp	r2, r3
 80082e6:	bf34      	ite	cc
 80082e8:	2301      	movcc	r3, #1
 80082ea:	2300      	movcs	r3, #0
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d010      	beq.n	8008314 <_ZN5RFM694InitEPK6RFMCfg+0xe4>
		writeReg(REG_SYNCVALUE1, 0x55);
 80082f2:	2155      	movs	r1, #85	; 0x55
 80082f4:	202f      	movs	r0, #47	; 0x2f
 80082f6:	f000 f8e2 	bl	80084be <_ZN5RFM698writeRegEhh>
		if (readReg(REG_SYNCVALUE1) == 0x55)
 80082fa:	202f      	movs	r0, #47	; 0x2f
 80082fc:	f000 f8c8 	bl	8008490 <_ZN5RFM697readRegEh>
 8008300:	4603      	mov	r3, r0
 8008302:	2b55      	cmp	r3, #85	; 0x55
 8008304:	bf0c      	ite	eq
 8008306:	2301      	moveq	r3, #1
 8008308:	2300      	movne	r3, #0
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	d100      	bne.n	8008312 <_ZN5RFM694InitEPK6RFMCfg+0xe2>
	while (HAL_GetTick() - start < timeout) {
 8008310:	e7e1      	b.n	80082d6 <_ZN5RFM694InitEPK6RFMCfg+0xa6>
			break;
 8008312:	bf00      	nop
	};

	//wpisanie tablicy parametr�w
	for (int i = 0; CONFIG[i][0] != 255; i++)
 8008314:	2300      	movs	r3, #0
 8008316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008320:	4413      	add	r3, r2
 8008322:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008326:	2bff      	cmp	r3, #255	; 0xff
 8008328:	d015      	beq.n	8008356 <_ZN5RFM694InitEPK6RFMCfg+0x126>
		writeReg(CONFIG[i][0], CONFIG[i][1]);
 800832a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008332:	4413      	add	r3, r2
 8008334:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 8008338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8008340:	440b      	add	r3, r1
 8008342:	f813 3c27 	ldrb.w	r3, [r3, #-39]
 8008346:	4619      	mov	r1, r3
 8008348:	4610      	mov	r0, r2
 800834a:	f000 f8b8 	bl	80084be <_ZN5RFM698writeRegEhh>
	for (int i = 0; CONFIG[i][0] != 255; i++)
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	3301      	adds	r3, #1
 8008352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008354:	e7e0      	b.n	8008318 <_ZN5RFM694InitEPK6RFMCfg+0xe8>

	setFrequency(cfg->ChannelFreq);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4618      	mov	r0, r3
 800835c:	f000 fa3c 	bl	80087d8 <_ZN5RFM6912setFrequencyEm>

	switch (cfg->BaudRate) {
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	791b      	ldrb	r3, [r3, #4]
 8008364:	2b03      	cmp	r3, #3
 8008366:	d851      	bhi.n	800840c <_ZN5RFM694InitEPK6RFMCfg+0x1dc>
 8008368:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <_ZN5RFM694InitEPK6RFMCfg+0x140>)
 800836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836e:	bf00      	nop
 8008370:	08008381 	.word	0x08008381
 8008374:	080083a3 	.word	0x080083a3
 8008378:	080083c5 	.word	0x080083c5
 800837c:	080083e7 	.word	0x080083e7
	case bd4800:
		setBitRate(4800);
 8008380:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 8008384:	f000 faa0 	bl	80088c8 <_ZN5RFM6910setBitRateEm>
		setDeviation(10000);
 8008388:	f242 7010 	movw	r0, #10000	; 0x2710
 800838c:	f000 faea 	bl	8008964 <_ZN5RFM6912setDeviationEm>
		// (BitRate < 2 * RxBw) -> 125kHz ????
		writeReg(REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_16 | RF_RXBW_EXP_2); // REG_RXBW: 125kHz
 8008390:	2142      	movs	r1, #66	; 0x42
 8008392:	2019      	movs	r0, #25
 8008394:	f000 f893 	bl	80084be <_ZN5RFM698writeRegEhh>
		// RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
		writeReg(REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF);
 8008398:	2112      	movs	r1, #18
 800839a:	203d      	movs	r0, #61	; 0x3d
 800839c:	f000 f88f 	bl	80084be <_ZN5RFM698writeRegEhh>
		break;
 80083a0:	e034      	b.n	800840c <_ZN5RFM694InitEPK6RFMCfg+0x1dc>

	case bd19200:
		setBitRate(19200);
 80083a2:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
 80083a6:	f000 fa8f 	bl	80088c8 <_ZN5RFM6910setBitRateEm>
		setDeviation(20000);
 80083aa:	f644 6020 	movw	r0, #20000	; 0x4e20
 80083ae:	f000 fad9 	bl	8008964 <_ZN5RFM6912setDeviationEm>

		//writeReg(REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_24 | RF_RXBW_EXP_3 );  //  -> 41.7kHz
		writeReg(REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_16 | RF_RXBW_EXP_1); //  -> 250kHz
 80083b2:	2141      	movs	r1, #65	; 0x41
 80083b4:	2019      	movs	r0, #25
 80083b6:	f000 f882 	bl	80084be <_ZN5RFM698writeRegEhh>

		// RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
		writeReg(REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF);
 80083ba:	21c2      	movs	r1, #194	; 0xc2
 80083bc:	203d      	movs	r0, #61	; 0x3d
 80083be:	f000 f87e 	bl	80084be <_ZN5RFM698writeRegEhh>
		break;
 80083c2:	e023      	b.n	800840c <_ZN5RFM694InitEPK6RFMCfg+0x1dc>
	case bd38400:

		setBitRate(38400);
 80083c4:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 80083c8:	f000 fa7e 	bl	80088c8 <_ZN5RFM6910setBitRateEm>
		setDeviation(40000);
 80083cc:	f649 4040 	movw	r0, #40000	; 0x9c40
 80083d0:	f000 fac8 	bl	8008964 <_ZN5RFM6912setDeviationEm>
		writeReg(REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_16 | RF_RXBW_EXP_1);  //  -> 250kHz
 80083d4:	2141      	movs	r1, #65	; 0x41
 80083d6:	2019      	movs	r0, #25
 80083d8:	f000 f871 	bl	80084be <_ZN5RFM698writeRegEhh>
		// RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
		writeReg(REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_NONE | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF);
 80083dc:	21c2      	movs	r1, #194	; 0xc2
 80083de:	203d      	movs	r0, #61	; 0x3d
 80083e0:	f000 f86d 	bl	80084be <_ZN5RFM698writeRegEhh>
		break;
 80083e4:	e012      	b.n	800840c <_ZN5RFM694InitEPK6RFMCfg+0x1dc>
	case bd300000:

		setDeviation(300000);
 80083e6:	4829      	ldr	r0, [pc, #164]	; (800848c <_ZN5RFM694InitEPK6RFMCfg+0x25c>)
 80083e8:	f000 fabc 	bl	8008964 <_ZN5RFM6912setDeviationEm>
		setBitRate(300000);
 80083ec:	4827      	ldr	r0, [pc, #156]	; (800848c <_ZN5RFM694InitEPK6RFMCfg+0x25c>)
 80083ee:	f000 fa6b 	bl	80088c8 <_ZN5RFM6910setBitRateEm>

		// Filter = 500kHz
		writeReg(REG_RXBW, RF_RXBW_DCCFREQ_010 | RF_RXBW_MANT_16 | RF_RXBW_EXP_0);  //REG_RXBW: 500kHz
 80083f2:	2140      	movs	r1, #64	; 0x40
 80083f4:	2019      	movs	r0, #25
 80083f6:	f000 f862 	bl	80084be <_ZN5RFM698writeRegEhh>

		writeReg(REG_AFCBW, RF_AFCBW_DCCFREQAFC_100 | RF_AFCBW_MANTAFC_16 | RF_AFCBW_EXPAFC_0);  //REG_AFCBW: 500kHz
 80083fa:	2180      	movs	r1, #128	; 0x80
 80083fc:	201a      	movs	r0, #26
 80083fe:	f000 f85e 	bl	80084be <_ZN5RFM698writeRegEhh>

		writeReg(REG_RSSITHRESH, 240);   //set REG_RSSITHRESH to -120dBm
 8008402:	21f0      	movs	r1, #240	; 0xf0
 8008404:	2029      	movs	r0, #41	; 0x29
 8008406:	f000 f85a 	bl	80084be <_ZN5RFM698writeRegEhh>
		break;
 800840a:	bf00      	nop
	}

	// Encryption is persistent between resets and can trip you up during debugging.
	// Disable it during initialization so we always start from a known state.
	encrypt(0);
 800840c:	2000      	movs	r0, #0
 800840e:	f000 faf5 	bl	80089fc <_ZN5RFM697encryptEPKc>

	setPAMode((PAMode) cfg->PAMode);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	799b      	ldrb	r3, [r3, #6]
 8008416:	4618      	mov	r0, r3
 8008418:	f000 f906 	bl	8008628 <_ZN5RFM699setPAModeE6PAMode>
	setPowerLevel(cfg->TxPower);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	795b      	ldrb	r3, [r3, #5]
 8008420:	4618      	mov	r0, r3
 8008422:	f000 f8d3 	bl	80085cc <_ZN5RFM6913setPowerLevelEh>
	setMode(modeRX);
 8008426:	2004      	movs	r0, #4
 8008428:	f000 f942 	bl	80086b0 <_ZN5RFM697setModeE11TRFM69_MODE>

	// wait for ModeReady
	start = HAL_GetTick();
 800842c:	f7f8 ff20 	bl	8001270 <HAL_GetTick>
 8008430:	62b8      	str	r0, [r7, #40]	; 0x28
	while (((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00)) {
 8008432:	2027      	movs	r0, #39	; 0x27
 8008434:	f000 f82c 	bl	8008490 <_ZN5RFM697readRegEh>
 8008438:	4603      	mov	r3, r0
 800843a:	b25b      	sxtb	r3, r3
 800843c:	43db      	mvns	r3, r3
 800843e:	b2db      	uxtb	r3, r3
 8008440:	09db      	lsrs	r3, r3, #7
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00f      	beq.n	8008468 <_ZN5RFM694InitEPK6RFMCfg+0x238>
		if (HAL_GetTick() - start > timeout) {
 8008448:	f7f8 ff12 	bl	8001270 <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008450:	1ad2      	subs	r2, r2, r3
 8008452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008456:	429a      	cmp	r2, r3
 8008458:	bf8c      	ite	hi
 800845a:	2301      	movhi	r3, #1
 800845c:	2300      	movls	r3, #0
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d0e6      	beq.n	8008432 <_ZN5RFM694InitEPK6RFMCfg+0x202>
			return false;
 8008464:	2300      	movs	r3, #0
 8008466:	e000      	b.n	800846a <_ZN5RFM694InitEPK6RFMCfg+0x23a>
		}
	}

	return true;
 8008468:	2301      	movs	r3, #1
}
 800846a:	4618      	mov	r0, r3
 800846c:	3730      	adds	r7, #48	; 0x30
 800846e:	46bd      	mov	sp, r7
 8008470:	bdb0      	pop	{r4, r5, r7, pc}
 8008472:	bf00      	nop
 8008474:	200002b9 	.word	0x200002b9
 8008478:	200002ba 	.word	0x200002ba
 800847c:	200002b8 	.word	0x200002b8
 8008480:	20000265 	.word	0x20000265
 8008484:	20000264 	.word	0x20000264
 8008488:	0800c8cc 	.word	0x0800c8cc
 800848c:	000493e0 	.word	0x000493e0

08008490 <_ZN5RFM697readRegEh>:

bool RFM69::readIrqPin() {
	return (HAL_GPIO_ReadPin(R_INT_GPIO_Port, R_INT_Pin) != 0);
}

uint8_t RFM69::readReg(uint8_t addr) {
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	4603      	mov	r3, r0
 8008498:	71fb      	strb	r3, [r7, #7]
	CS_DN();
 800849a:	f7ff fe69 	bl	8008170 <_ZN5RFM695CS_DNEv>
	SPI_1::RW(addr); // Select register to read from..
 800849e:	79fb      	ldrb	r3, [r7, #7]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7ff fe4f 	bl	8008144 <_ZN5SPI_12RWEh>
	uint8_t value = SPI_1::RW(0); // ..then read register value
 80084a6:	2000      	movs	r0, #0
 80084a8:	f7ff fe4c 	bl	8008144 <_ZN5SPI_12RWEh>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]
	CS_UP();
 80084b0:	f7ff fe6a 	bl	8008188 <_ZN5RFM695CS_UPEv>
	return value;
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <_ZN5RFM698writeRegEhh>:

void RFM69::writeReg(uint8_t addr, uint8_t value) {
 80084be:	b580      	push	{r7, lr}
 80084c0:	b082      	sub	sp, #8
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	4603      	mov	r3, r0
 80084c6:	460a      	mov	r2, r1
 80084c8:	71fb      	strb	r3, [r7, #7]
 80084ca:	4613      	mov	r3, r2
 80084cc:	71bb      	strb	r3, [r7, #6]
	CS_DN();
 80084ce:	f7ff fe4f 	bl	8008170 <_ZN5RFM695CS_DNEv>
	SPI_1::RW(addr | 0x80); // Select register to read from..
 80084d2:	79fb      	ldrb	r3, [r7, #7]
 80084d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff fe32 	bl	8008144 <_ZN5SPI_12RWEh>
	SPI_1::RW(value); // ..then read register value
 80084e0:	79bb      	ldrb	r3, [r7, #6]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7ff fe2e 	bl	8008144 <_ZN5SPI_12RWEh>
	CS_UP();
 80084e8:	f7ff fe4e 	bl	8008188 <_ZN5RFM695CS_UPEv>
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <_ZN5RFM699writeMRegEhPKhi>:

void RFM69::writeMReg(uint8_t addr, const uint8_t *ptr, int cnt) {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	4603      	mov	r3, r0
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	73fb      	strb	r3, [r7, #15]
	CS_DN();
 8008502:	f7ff fe35 	bl	8008170 <_ZN5RFM695CS_DNEv>
	SPI_1::RW(addr | 0x80); // Select register to read from..
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800850c:	b2db      	uxtb	r3, r3
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff fe18 	bl	8008144 <_ZN5SPI_12RWEh>
	for (int i = 0; i < cnt; i++) {
 8008514:	2300      	movs	r3, #0
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	429a      	cmp	r2, r3
 800851e:	da0b      	bge.n	8008538 <_ZN5RFM699writeMRegEhPKhi+0x44>
		SPI_1::RW(*ptr); // ..then read register ptr
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff fe0d 	bl	8008144 <_ZN5SPI_12RWEh>
		ptr++;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	3301      	adds	r3, #1
 800852e:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < cnt; i++) {
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	3301      	adds	r3, #1
 8008534:	617b      	str	r3, [r7, #20]
 8008536:	e7ef      	b.n	8008518 <_ZN5RFM699writeMRegEhPKhi+0x24>
	}
	CS_UP();
 8008538:	f7ff fe26 	bl	8008188 <_ZN5RFM695CS_UPEv>
}
 800853c:	bf00      	nop
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <_ZN5RFM699modifyRegEhhh>:

void RFM69::modifyReg(uint8_t addr, uint8_t mask, uint8_t value) {
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	71fb      	strb	r3, [r7, #7]
 800854e:	460b      	mov	r3, r1
 8008550:	71bb      	strb	r3, [r7, #6]
 8008552:	4613      	mov	r3, r2
 8008554:	717b      	strb	r3, [r7, #5]
	uint8_t v = readReg(addr);
 8008556:	79fb      	ldrb	r3, [r7, #7]
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff ff99 	bl	8008490 <_ZN5RFM697readRegEh>
 800855e:	4603      	mov	r3, r0
 8008560:	73fb      	strb	r3, [r7, #15]
	v = v & ~mask;
 8008562:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008566:	43db      	mvns	r3, r3
 8008568:	b25a      	sxtb	r2, r3
 800856a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800856e:	4013      	ands	r3, r2
 8008570:	b25b      	sxtb	r3, r3
 8008572:	73fb      	strb	r3, [r7, #15]
	v = v | value;
 8008574:	7bfa      	ldrb	r2, [r7, #15]
 8008576:	797b      	ldrb	r3, [r7, #5]
 8008578:	4313      	orrs	r3, r2
 800857a:	73fb      	strb	r3, [r7, #15]
	writeReg(addr, v);
 800857c:	7bfa      	ldrb	r2, [r7, #15]
 800857e:	79fb      	ldrb	r3, [r7, #7]
 8008580:	4611      	mov	r1, r2
 8008582:	4618      	mov	r0, r3
 8008584:	f7ff ff9b 	bl	80084be <_ZN5RFM698writeRegEhh>
}
 8008588:	bf00      	nop
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <_ZN5RFM6916setHighPowerRegsEb>:

// internal function
void RFM69::setHighPowerRegs(bool onOff) {
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	4603      	mov	r3, r0
 8008598:	71fb      	strb	r3, [r7, #7]
	writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
 800859a:	79fb      	ldrb	r3, [r7, #7]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <_ZN5RFM6916setHighPowerRegsEb+0x14>
 80085a0:	235d      	movs	r3, #93	; 0x5d
 80085a2:	e000      	b.n	80085a6 <_ZN5RFM6916setHighPowerRegsEb+0x16>
 80085a4:	2355      	movs	r3, #85	; 0x55
 80085a6:	4619      	mov	r1, r3
 80085a8:	205a      	movs	r0, #90	; 0x5a
 80085aa:	f7ff ff88 	bl	80084be <_ZN5RFM698writeRegEhh>
	writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
 80085ae:	79fb      	ldrb	r3, [r7, #7]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <_ZN5RFM6916setHighPowerRegsEb+0x28>
 80085b4:	237c      	movs	r3, #124	; 0x7c
 80085b6:	e000      	b.n	80085ba <_ZN5RFM6916setHighPowerRegsEb+0x2a>
 80085b8:	2370      	movs	r3, #112	; 0x70
 80085ba:	4619      	mov	r1, r3
 80085bc:	205c      	movs	r0, #92	; 0x5c
 80085be:	f7ff ff7e 	bl	80084be <_ZN5RFM698writeRegEhh>
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
	...

080085cc <_ZN5RFM6913setPowerLevelEh>:
// the power configurations are explained in the SX1231H datasheet (Table 10 on p21; RegPaLevel p66): http://www.semtech.com/images/datasheet/sx1231h.pdf
// valid powerLevel parameter values are 0-31 and result in a directly proportional effect on the output/transmission power
// this function implements 2 modes as follows:
//       - for RFM69W the range is from 0-31 [-18dBm to 13dBm] (PA0 only on RFIO pin)
//       - for RFM69HW the range is from 0-31 [5dBm to 20dBm]  (PA1 & PA2 on PA_BOOST pin & high Power PA settings - see section 3.3.7 in datasheet, p22)
void RFM69::setPowerLevel(uint8_t powerLevel) {
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	71fb      	strb	r3, [r7, #7]
	mPowerLevel = (powerLevel > 31 ? 31 : powerLevel);
 80085d6:	79fb      	ldrb	r3, [r7, #7]
 80085d8:	2b1f      	cmp	r3, #31
 80085da:	bf28      	it	cs
 80085dc:	231f      	movcs	r3, #31
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	4b0f      	ldr	r3, [pc, #60]	; (8008620 <_ZN5RFM6913setPowerLevelEh+0x54>)
 80085e2:	701a      	strb	r2, [r3, #0]
	if (mPA_Mode == paMode4)
 80085e4:	4b0f      	ldr	r3, [pc, #60]	; (8008624 <_ZN5RFM6913setPowerLevelEh+0x58>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	d105      	bne.n	80085f8 <_ZN5RFM6913setPowerLevelEh+0x2c>
		mPowerLevel /= 2;
 80085ec:	4b0c      	ldr	r3, [pc, #48]	; (8008620 <_ZN5RFM6913setPowerLevelEh+0x54>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	085b      	lsrs	r3, r3, #1
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	4b0a      	ldr	r3, [pc, #40]	; (8008620 <_ZN5RFM6913setPowerLevelEh+0x54>)
 80085f6:	701a      	strb	r2, [r3, #0]
	writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | mPowerLevel);
 80085f8:	2011      	movs	r0, #17
 80085fa:	f7ff ff49 	bl	8008490 <_ZN5RFM697readRegEh>
 80085fe:	4603      	mov	r3, r0
 8008600:	f023 031f 	bic.w	r3, r3, #31
 8008604:	b2da      	uxtb	r2, r3
 8008606:	4b06      	ldr	r3, [pc, #24]	; (8008620 <_ZN5RFM6913setPowerLevelEh+0x54>)
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	4313      	orrs	r3, r2
 800860c:	b2db      	uxtb	r3, r3
 800860e:	4619      	mov	r1, r3
 8008610:	2011      	movs	r0, #17
 8008612:	f7ff ff54 	bl	80084be <_ZN5RFM698writeRegEhh>
}
 8008616:	bf00      	nop
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	200002b8 	.word	0x200002b8
 8008624:	20000265 	.word	0x20000265

08008628 <_ZN5RFM699setPAModeE6PAMode>:

// for RFM69HW only: you must call setHighPower(true) after initialize() or else transmission won't work
void RFM69::setPAMode(PAMode mode) {
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	4603      	mov	r3, r0
 8008630:	71fb      	strb	r3, [r7, #7]
	mPA_Mode = mode;
 8008632:	4a1e      	ldr	r2, [pc, #120]	; (80086ac <_ZN5RFM699setPAModeE6PAMode+0x84>)
 8008634:	79fb      	ldrb	r3, [r7, #7]
 8008636:	7013      	strb	r3, [r2, #0]
	writeReg(REG_OCP, (mPA_Mode == paMode4) ? RF_OCP_OFF : RF_OCP_ON);
 8008638:	4b1c      	ldr	r3, [pc, #112]	; (80086ac <_ZN5RFM699setPAModeE6PAMode+0x84>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b03      	cmp	r3, #3
 800863e:	d101      	bne.n	8008644 <_ZN5RFM699setPAModeE6PAMode+0x1c>
 8008640:	230f      	movs	r3, #15
 8008642:	e000      	b.n	8008646 <_ZN5RFM699setPAModeE6PAMode+0x1e>
 8008644:	231a      	movs	r3, #26
 8008646:	4619      	mov	r1, r3
 8008648:	2013      	movs	r0, #19
 800864a:	f7ff ff38 	bl	80084be <_ZN5RFM698writeRegEhh>
	uint8_t val = readReg(REG_PALEVEL) & 0x1F;
 800864e:	2011      	movs	r0, #17
 8008650:	f7ff ff1e 	bl	8008490 <_ZN5RFM697readRegEh>
 8008654:	4603      	mov	r3, r0
 8008656:	f003 031f 	and.w	r3, r3, #31
 800865a:	73fb      	strb	r3, [r7, #15]
	switch (mPA_Mode) {
 800865c:	4b13      	ldr	r3, [pc, #76]	; (80086ac <_ZN5RFM699setPAModeE6PAMode+0x84>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b03      	cmp	r3, #3
 8008662:	d81a      	bhi.n	800869a <_ZN5RFM699setPAModeE6PAMode+0x72>
 8008664:	a201      	add	r2, pc, #4	; (adr r2, 800866c <_ZN5RFM699setPAModeE6PAMode+0x44>)
 8008666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866a:	bf00      	nop
 800866c:	0800867d 	.word	0x0800867d
 8008670:	08008687 	.word	0x08008687
 8008674:	08008691 	.word	0x08008691
 8008678:	08008691 	.word	0x08008691
	case paMode1:
		val |= RF_PALEVEL_PA0_ON;
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008682:	73fb      	strb	r3, [r7, #15]
		break;
 8008684:	e009      	b.n	800869a <_ZN5RFM699setPAModeE6PAMode+0x72>
	case paMode2:
		val |= RF_PALEVEL_PA1_ON;
 8008686:	7bfb      	ldrb	r3, [r7, #15]
 8008688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800868c:	73fb      	strb	r3, [r7, #15]
		break;
 800868e:	e004      	b.n	800869a <_ZN5RFM699setPAModeE6PAMode+0x72>
	case paMode3:
	case paMode4:
		val |= RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON;
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008696:	73fb      	strb	r3, [r7, #15]
		break;
 8008698:	bf00      	nop
	}
	writeReg(REG_PALEVEL, val);
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	4619      	mov	r1, r3
 800869e:	2011      	movs	r0, #17
 80086a0:	f7ff ff0d 	bl	80084be <_ZN5RFM698writeRegEhh>
}
 80086a4:	bf00      	nop
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20000265 	.word	0x20000265

080086b0 <_ZN5RFM697setModeE11TRFM69_MODE>:

void RFM69::setMode(TRFM69_MODE newMode) {
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	71fb      	strb	r3, [r7, #7]
	if (newMode == mMode)
 80086ba:	4b2d      	ldr	r3, [pc, #180]	; (8008770 <_ZN5RFM697setModeE11TRFM69_MODE+0xc0>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	79fa      	ldrb	r2, [r7, #7]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d04e      	beq.n	8008762 <_ZN5RFM697setModeE11TRFM69_MODE+0xb2>
		return;

	switch (newMode) {
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d84d      	bhi.n	8008766 <_ZN5RFM697setModeE11TRFM69_MODE+0xb6>
 80086ca:	a201      	add	r2, pc, #4	; (adr r2, 80086d0 <_ZN5RFM697setModeE11TRFM69_MODE+0x20>)
 80086cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d0:	0800872f 	.word	0x0800872f
 80086d4:	08008723 	.word	0x08008723
 80086d8:	08008717 	.word	0x08008717
 80086dc:	080086e5 	.word	0x080086e5
 80086e0:	08008705 	.word	0x08008705
	case modeTX:
		modifyReg(REG_OPMODE, 0x1C, RF_OPMODE_TRANSMITTER);
 80086e4:	220c      	movs	r2, #12
 80086e6:	211c      	movs	r1, #28
 80086e8:	2001      	movs	r0, #1
 80086ea:	f7ff ff2b 	bl	8008544 <_ZN5RFM699modifyRegEhhh>
		setHighPowerRegs(mPA_Mode == paMode4);
 80086ee:	4b21      	ldr	r3, [pc, #132]	; (8008774 <_ZN5RFM697setModeE11TRFM69_MODE+0xc4>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	bf0c      	ite	eq
 80086f6:	2301      	moveq	r3, #1
 80086f8:	2300      	movne	r3, #0
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7ff ff47 	bl	8008590 <_ZN5RFM6916setHighPowerRegsEb>
		break;
 8008702:	e01a      	b.n	800873a <_ZN5RFM697setModeE11TRFM69_MODE+0x8a>
	case modeRX:
		modifyReg(REG_OPMODE, 0x1C, RF_OPMODE_RECEIVER);
 8008704:	2210      	movs	r2, #16
 8008706:	211c      	movs	r1, #28
 8008708:	2001      	movs	r0, #1
 800870a:	f7ff ff1b 	bl	8008544 <_ZN5RFM699modifyRegEhhh>
		setHighPowerRegs(false);
 800870e:	2000      	movs	r0, #0
 8008710:	f7ff ff3e 	bl	8008590 <_ZN5RFM6916setHighPowerRegsEb>
		break;
 8008714:	e011      	b.n	800873a <_ZN5RFM697setModeE11TRFM69_MODE+0x8a>
	case modeSYNTH:
		modifyReg(REG_OPMODE, 0x1C, RF_OPMODE_SYNTHESIZER);
 8008716:	2208      	movs	r2, #8
 8008718:	211c      	movs	r1, #28
 800871a:	2001      	movs	r0, #1
 800871c:	f7ff ff12 	bl	8008544 <_ZN5RFM699modifyRegEhhh>
		break;
 8008720:	e00b      	b.n	800873a <_ZN5RFM697setModeE11TRFM69_MODE+0x8a>
	case modeSTANDBY:
		modifyReg(REG_OPMODE, 0x1C, RF_OPMODE_STANDBY);
 8008722:	2204      	movs	r2, #4
 8008724:	211c      	movs	r1, #28
 8008726:	2001      	movs	r0, #1
 8008728:	f7ff ff0c 	bl	8008544 <_ZN5RFM699modifyRegEhhh>
		break;
 800872c:	e005      	b.n	800873a <_ZN5RFM697setModeE11TRFM69_MODE+0x8a>
	case modeSLEEP:
		modifyReg(REG_OPMODE, 0x1C, RF_OPMODE_SLEEP);
 800872e:	2200      	movs	r2, #0
 8008730:	211c      	movs	r1, #28
 8008732:	2001      	movs	r0, #1
 8008734:	f7ff ff06 	bl	8008544 <_ZN5RFM699modifyRegEhhh>
		break;
 8008738:	bf00      	nop
		return;
	}

	// we are using packet mode, so this check is not really needed
	// but waiting for mode ready is necessary when going from sleep because the FIFO may not be immediately available from previous mode
	if (mMode == modeSLEEP) {
 800873a:	4b0d      	ldr	r3, [pc, #52]	; (8008770 <_ZN5RFM697setModeE11TRFM69_MODE+0xc0>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10b      	bne.n	800875a <_ZN5RFM697setModeE11TRFM69_MODE+0xaa>
		while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) {
 8008742:	2027      	movs	r0, #39	; 0x27
 8008744:	f7ff fea4 	bl	8008490 <_ZN5RFM697readRegEh>
 8008748:	4603      	mov	r3, r0
 800874a:	b25b      	sxtb	r3, r3
 800874c:	43db      	mvns	r3, r3
 800874e:	b2db      	uxtb	r3, r3
 8008750:	09db      	lsrs	r3, r3, #7
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d000      	beq.n	800875a <_ZN5RFM697setModeE11TRFM69_MODE+0xaa>
 8008758:	e7f3      	b.n	8008742 <_ZN5RFM697setModeE11TRFM69_MODE+0x92>

		}; // wait for ModeReady
	}
	mMode = newMode;
 800875a:	4a05      	ldr	r2, [pc, #20]	; (8008770 <_ZN5RFM697setModeE11TRFM69_MODE+0xc0>)
 800875c:	79fb      	ldrb	r3, [r7, #7]
 800875e:	7013      	strb	r3, [r2, #0]
 8008760:	e002      	b.n	8008768 <_ZN5RFM697setModeE11TRFM69_MODE+0xb8>
		return;
 8008762:	bf00      	nop
 8008764:	e000      	b.n	8008768 <_ZN5RFM697setModeE11TRFM69_MODE+0xb8>
		return;
 8008766:	bf00      	nop
}
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000264 	.word	0x20000264
 8008774:	20000265 	.word	0x20000265

08008778 <_ZN5RFM6912getFrequencyEv>:

// return the frequency (in Hz)
uint32_t RFM69::getFrequency() {
 8008778:	b590      	push	{r4, r7, lr}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
	uint32_t r1 = readReg(REG_FRFMSB);
 800877e:	2007      	movs	r0, #7
 8008780:	f7ff fe86 	bl	8008490 <_ZN5RFM697readRegEh>
 8008784:	4603      	mov	r3, r0
 8008786:	60fb      	str	r3, [r7, #12]
	uint32_t r2 = readReg(REG_FRFMID);
 8008788:	2008      	movs	r0, #8
 800878a:	f7ff fe81 	bl	8008490 <_ZN5RFM697readRegEh>
 800878e:	4603      	mov	r3, r0
 8008790:	60bb      	str	r3, [r7, #8]
	uint32_t r3 = readReg(REG_FRFLSB);
 8008792:	2009      	movs	r0, #9
 8008794:	f7ff fe7c 	bl	8008490 <_ZN5RFM697readRegEh>
 8008798:	4603      	mov	r3, r0
 800879a:	607b      	str	r3, [r7, #4]
	return (int) (RF69_FSTEP * ((r1 << 16) | (r2 << 8) | r3));
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	041a      	lsls	r2, r3, #16
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	021b      	lsls	r3, r3, #8
 80087a4:	431a      	orrs	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7f7 fe5e 	bl	800046c <__aeabi_ui2d>
 80087b0:	a307      	add	r3, pc, #28	; (adr r3, 80087d0 <_ZN5RFM6912getFrequencyEv+0x58>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f7f7 fed3 	bl	8000560 <__aeabi_dmul>
 80087ba:	4603      	mov	r3, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	4618      	mov	r0, r3
 80087c0:	4621      	mov	r1, r4
 80087c2:	f7f8 f8df 	bl	8000984 <__aeabi_d2iz>
 80087c6:	4603      	mov	r3, r0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd90      	pop	{r4, r7, pc}
 80087d0:	00000000 	.word	0x00000000
 80087d4:	404e8480 	.word	0x404e8480

080087d8 <_ZN5RFM6912setFrequencyEm>:

// set the frequency (in Hz)
void RFM69::setFrequency(uint32_t freqHz) {
 80087d8:	b590      	push	{r4, r7, lr}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	TRFM69_MODE oldMode = mMode;
 80087e0:	4b1f      	ldr	r3, [pc, #124]	; (8008860 <_ZN5RFM6912setFrequencyEm+0x88>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	73fb      	strb	r3, [r7, #15]
	if (oldMode == modeTX) {
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d102      	bne.n	80087f2 <_ZN5RFM6912setFrequencyEm+0x1a>
		setMode(modeRX);
 80087ec:	2004      	movs	r0, #4
 80087ee:	f7ff ff5f 	bl	80086b0 <_ZN5RFM697setModeE11TRFM69_MODE>
	}
	freqHz /= RF69_FSTEP; // divide down by FSTEP to get FRF
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7f7 fe3a 	bl	800046c <__aeabi_ui2d>
 80087f8:	a317      	add	r3, pc, #92	; (adr r3, 8008858 <_ZN5RFM6912setFrequencyEm+0x80>)
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	f7f7 ffd9 	bl	80007b4 <__aeabi_ddiv>
 8008802:	4603      	mov	r3, r0
 8008804:	460c      	mov	r4, r1
 8008806:	4618      	mov	r0, r3
 8008808:	4621      	mov	r1, r4
 800880a:	f7f8 f8e3 	bl	80009d4 <__aeabi_d2uiz>
 800880e:	4603      	mov	r3, r0
 8008810:	607b      	str	r3, [r7, #4]
	writeReg(REG_FRFMSB, freqHz >> 16);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	0c1b      	lsrs	r3, r3, #16
 8008816:	b2db      	uxtb	r3, r3
 8008818:	4619      	mov	r1, r3
 800881a:	2007      	movs	r0, #7
 800881c:	f7ff fe4f 	bl	80084be <_ZN5RFM698writeRegEhh>
	writeReg(REG_FRFMID, freqHz >> 8);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	0a1b      	lsrs	r3, r3, #8
 8008824:	b2db      	uxtb	r3, r3
 8008826:	4619      	mov	r1, r3
 8008828:	2008      	movs	r0, #8
 800882a:	f7ff fe48 	bl	80084be <_ZN5RFM698writeRegEhh>
	writeReg(REG_FRFLSB, freqHz);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	b2db      	uxtb	r3, r3
 8008832:	4619      	mov	r1, r3
 8008834:	2009      	movs	r0, #9
 8008836:	f7ff fe42 	bl	80084be <_ZN5RFM698writeRegEhh>
	if (oldMode == modeRX) {
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	2b04      	cmp	r3, #4
 800883e:	d102      	bne.n	8008846 <_ZN5RFM6912setFrequencyEm+0x6e>
		setMode(modeSYNTH);
 8008840:	2002      	movs	r0, #2
 8008842:	f7ff ff35 	bl	80086b0 <_ZN5RFM697setModeE11TRFM69_MODE>
	}
	setMode(oldMode);
 8008846:	7bfb      	ldrb	r3, [r7, #15]
 8008848:	4618      	mov	r0, r3
 800884a:	f7ff ff31 	bl	80086b0 <_ZN5RFM697setModeE11TRFM69_MODE>
}
 800884e:	bf00      	nop
 8008850:	3714      	adds	r7, #20
 8008852:	46bd      	mov	sp, r7
 8008854:	bd90      	pop	{r4, r7, pc}
 8008856:	bf00      	nop
 8008858:	00000000 	.word	0x00000000
 800885c:	404e8480 	.word	0x404e8480
 8008860:	20000264 	.word	0x20000264
 8008864:	00000000 	.word	0x00000000

08008868 <_ZN5RFM6910getBitRateEv>:

#define FOSC 32000000.0
uint32_t RFM69::getBitRate() {
 8008868:	b590      	push	{r4, r7, lr}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
	uint32_t r1 = readReg(REG_BITRATEMSB);
 800886e:	2003      	movs	r0, #3
 8008870:	f7ff fe0e 	bl	8008490 <_ZN5RFM697readRegEh>
 8008874:	4603      	mov	r3, r0
 8008876:	60fb      	str	r3, [r7, #12]
	uint32_t r2 = readReg(REG_BITRATELSB);
 8008878:	2004      	movs	r0, #4
 800887a:	f7ff fe09 	bl	8008490 <_ZN5RFM697readRegEh>
 800887e:	4603      	mov	r3, r0
 8008880:	60bb      	str	r3, [r7, #8]
	uint32_t r = ((r1 << 8) | r2);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	021b      	lsls	r3, r3, #8
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	4313      	orrs	r3, r2
 800888a:	607b      	str	r3, [r7, #4]

	return FOSC / r;
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7f7 fded 	bl	800046c <__aeabi_ui2d>
 8008892:	4603      	mov	r3, r0
 8008894:	460c      	mov	r4, r1
 8008896:	461a      	mov	r2, r3
 8008898:	4623      	mov	r3, r4
 800889a:	a109      	add	r1, pc, #36	; (adr r1, 80088c0 <_ZN5RFM6910getBitRateEv+0x58>)
 800889c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088a0:	f7f7 ff88 	bl	80007b4 <__aeabi_ddiv>
 80088a4:	4603      	mov	r3, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	4618      	mov	r0, r3
 80088aa:	4621      	mov	r1, r4
 80088ac:	f7f8 f892 	bl	80009d4 <__aeabi_d2uiz>
 80088b0:	4603      	mov	r3, r0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd90      	pop	{r4, r7, pc}
 80088ba:	bf00      	nop
 80088bc:	f3af 8000 	nop.w
 80088c0:	00000000 	.word	0x00000000
 80088c4:	417e8480 	.word	0x417e8480

080088c8 <_ZN5RFM6910setBitRateEm>:

void RFM69::setBitRate(uint32_t rate) {
 80088c8:	b590      	push	{r4, r7, lr}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
	uint32_t r = FOSC / rate;
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f7f7 fdcb 	bl	800046c <__aeabi_ui2d>
 80088d6:	4603      	mov	r3, r0
 80088d8:	460c      	mov	r4, r1
 80088da:	461a      	mov	r2, r3
 80088dc:	4623      	mov	r3, r4
 80088de:	a110      	add	r1, pc, #64	; (adr r1, 8008920 <_ZN5RFM6910setBitRateEm+0x58>)
 80088e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088e4:	f7f7 ff66 	bl	80007b4 <__aeabi_ddiv>
 80088e8:	4603      	mov	r3, r0
 80088ea:	460c      	mov	r4, r1
 80088ec:	4618      	mov	r0, r3
 80088ee:	4621      	mov	r1, r4
 80088f0:	f7f8 f870 	bl	80009d4 <__aeabi_d2uiz>
 80088f4:	4603      	mov	r3, r0
 80088f6:	60fb      	str	r3, [r7, #12]
	writeReg(REG_BITRATEMSB, r >> 8);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	0a1b      	lsrs	r3, r3, #8
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	4619      	mov	r1, r3
 8008900:	2003      	movs	r0, #3
 8008902:	f7ff fddc 	bl	80084be <_ZN5RFM698writeRegEhh>
	writeReg(REG_BITRATELSB, r & 0xff);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	b2db      	uxtb	r3, r3
 800890a:	4619      	mov	r1, r3
 800890c:	2004      	movs	r0, #4
 800890e:	f7ff fdd6 	bl	80084be <_ZN5RFM698writeRegEhh>
}
 8008912:	bf00      	nop
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	bd90      	pop	{r4, r7, pc}
 800891a:	bf00      	nop
 800891c:	f3af 8000 	nop.w
 8008920:	00000000 	.word	0x00000000
 8008924:	417e8480 	.word	0x417e8480

08008928 <_ZN5RFM6912getDeviationEv>:

uint32_t RFM69::getDeviation() {
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
	uint32_t r1 = readReg(REG_FDEVMSB);
 800892e:	2005      	movs	r0, #5
 8008930:	f7ff fdae 	bl	8008490 <_ZN5RFM697readRegEh>
 8008934:	4603      	mov	r3, r0
 8008936:	60fb      	str	r3, [r7, #12]
	uint32_t r2 = readReg(REG_FDEVLSB);
 8008938:	2006      	movs	r0, #6
 800893a:	f7ff fda9 	bl	8008490 <_ZN5RFM697readRegEh>
 800893e:	4603      	mov	r3, r0
 8008940:	60bb      	str	r3, [r7, #8]
	uint32_t freqDev = ((r1 & 0x3f) << 8) | r2;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	021b      	lsls	r3, r3, #8
 8008946:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	4313      	orrs	r3, r2
 800894e:	607b      	str	r3, [r7, #4]
	return 61 * freqDev;
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	4613      	mov	r3, r2
 8008954:	011b      	lsls	r3, r3, #4
 8008956:	1a9b      	subs	r3, r3, r2
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <_ZN5RFM6912setDeviationEm>:

void RFM69::setDeviation(uint32_t dev) {
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
	dev /= 61;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a0e      	ldr	r2, [pc, #56]	; (80089a8 <_ZN5RFM6912setDeviationEm+0x44>)
 8008970:	fba2 2303 	umull	r2, r3, r2, r3
 8008974:	091b      	lsrs	r3, r3, #4
 8008976:	607b      	str	r3, [r7, #4]
	if (dev > 0x3fff)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800897e:	d302      	bcc.n	8008986 <_ZN5RFM6912setDeviationEm+0x22>
		dev = 0x3fff;
 8008980:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8008984:	607b      	str	r3, [r7, #4]
	writeReg(REG_FDEVMSB, dev >> 8);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	0a1b      	lsrs	r3, r3, #8
 800898a:	b2db      	uxtb	r3, r3
 800898c:	4619      	mov	r1, r3
 800898e:	2005      	movs	r0, #5
 8008990:	f7ff fd95 	bl	80084be <_ZN5RFM698writeRegEhh>
	writeReg(REG_FDEVLSB, dev & 0xff);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	4619      	mov	r1, r3
 800899a:	2006      	movs	r0, #6
 800899c:	f7ff fd8f 	bl	80084be <_ZN5RFM698writeRegEhh>
}
 80089a0:	bf00      	nop
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	4325c53f 	.word	0x4325c53f

080089ac <_ZN5RFM6915readTemperatureEh>:

// returns centigrade
uint8_t RFM69::readTemperature(uint8_t calFactor) {
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	4603      	mov	r3, r0
 80089b4:	71fb      	strb	r3, [r7, #7]
	setMode(modeSTANDBY);
 80089b6:	2001      	movs	r0, #1
 80089b8:	f7ff fe7a 	bl	80086b0 <_ZN5RFM697setModeE11TRFM69_MODE>
	writeReg(REG_TEMP1, RF_TEMP1_MEAS_START);
 80089bc:	2108      	movs	r1, #8
 80089be:	204e      	movs	r0, #78	; 0x4e
 80089c0:	f7ff fd7d 	bl	80084be <_ZN5RFM698writeRegEhh>
	while ((readReg(REG_TEMP1) & RF_TEMP1_MEAS_RUNNING))
 80089c4:	204e      	movs	r0, #78	; 0x4e
 80089c6:	f7ff fd63 	bl	8008490 <_ZN5RFM697readRegEh>
 80089ca:	4603      	mov	r3, r0
 80089cc:	f003 0304 	and.w	r3, r3, #4
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bf14      	ite	ne
 80089d4:	2301      	movne	r3, #1
 80089d6:	2300      	moveq	r3, #0
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d000      	beq.n	80089e0 <_ZN5RFM6915readTemperatureEh+0x34>
 80089de:	e7f1      	b.n	80089c4 <_ZN5RFM6915readTemperatureEh+0x18>
		;
	return ~readReg(REG_TEMP2) + COURSE_TEMP_COEF + calFactor; // 'complement' corrects the slope, rising temp = rising val
 80089e0:	204f      	movs	r0, #79	; 0x4f
 80089e2:	f7ff fd55 	bl	8008490 <_ZN5RFM697readRegEh>
 80089e6:	4603      	mov	r3, r0
 80089e8:	461a      	mov	r2, r3
 80089ea:	79fb      	ldrb	r3, [r7, #7]
 80089ec:	1a9b      	subs	r3, r3, r2
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	3b5b      	subs	r3, #91	; 0x5b
 80089f2:	b2db      	uxtb	r3, r3
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <_ZN5RFM697encryptEPKc>:

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 uint8_ts !!!
void RFM69::encrypt(const char *key) {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
	setMode(modeSTANDBY);
 8008a04:	2001      	movs	r0, #1
 8008a06:	f7ff fe53 	bl	80086b0 <_ZN5RFM697setModeE11TRFM69_MODE>
	if (key != 0) {
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d004      	beq.n	8008a1a <_ZN5RFM697encryptEPKc+0x1e>
		writeMReg(REG_AESKEY1, (const uint8_t*) key, 16);
 8008a10:	2210      	movs	r2, #16
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	203e      	movs	r0, #62	; 0x3e
 8008a16:	f7ff fd6d 	bl	80084f4 <_ZN5RFM699writeMRegEhPKhi>
	}
	modifyReg(REG_PACKETCONFIG2, 0x01, (key ? 1 : 0));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <_ZN5RFM697encryptEPKc+0x28>
 8008a20:	2301      	movs	r3, #1
 8008a22:	e000      	b.n	8008a26 <_ZN5RFM697encryptEPKc+0x2a>
 8008a24:	2300      	movs	r3, #0
 8008a26:	461a      	mov	r2, r3
 8008a28:	2101      	movs	r1, #1
 8008a2a:	203d      	movs	r0, #61	; 0x3d
 8008a2c:	f7ff fd8a 	bl	8008544 <_ZN5RFM699modifyRegEhhh>
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <_ZN5RFM6910sendPacketEhPKvh>:

// internal function
TRfmErrorDef RFM69::sendPacket(uint8_t myAddress, const void *buffer, uint8_t bufferSize) {
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	6039      	str	r1, [r7, #0]
 8008a42:	71fb      	strb	r3, [r7, #7]
 8008a44:	4613      	mov	r3, r2
 8008a46:	71bb      	strb	r3, [r7, #6]
	modifyReg(REG_PACKETCONFIG2, 0x04, RF_PACKET2_RXRESTART); // avoid RX deadlocks
 8008a48:	2204      	movs	r2, #4
 8008a4a:	2104      	movs	r1, #4
 8008a4c:	203d      	movs	r0, #61	; 0x3d
 8008a4e:	f7ff fd79 	bl	8008544 <_ZN5RFM699modifyRegEhhh>

	setMode(modeSTANDBY); // turn off receiver to prevent reception while filling fifo
 8008a52:	2001      	movs	r0, #1
 8008a54:	f7ff fe2c 	bl	80086b0 <_ZN5RFM697setModeE11TRFM69_MODE>
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) {
 8008a58:	2027      	movs	r0, #39	; 0x27
 8008a5a:	f7ff fd19 	bl	8008490 <_ZN5RFM697readRegEh>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	b25b      	sxtb	r3, r3
 8008a62:	43db      	mvns	r3, r3
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	09db      	lsrs	r3, r3, #7
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d000      	beq.n	8008a70 <_ZN5RFM6910sendPacketEhPKvh+0x38>
 8008a6e:	e7f3      	b.n	8008a58 <_ZN5RFM6910sendPacketEhPKvh+0x20>
		// wait for ModeReady
	}
	if (bufferSize > RF69_MAX_DATA_LEN)
 8008a70:	79bb      	ldrb	r3, [r7, #6]
 8008a72:	2b41      	cmp	r3, #65	; 0x41
 8008a74:	d901      	bls.n	8008a7a <_ZN5RFM6910sendPacketEhPKvh+0x42>
		bufferSize = RF69_MAX_DATA_LEN;
 8008a76:	2341      	movs	r3, #65	; 0x41
 8008a78:	71bb      	strb	r3, [r7, #6]

	// write to FIFO
	CS_DN();
 8008a7a:	f7ff fb79 	bl	8008170 <_ZN5RFM695CS_DNEv>
	SPI_1::RW(REG_FIFO | 0x80);
 8008a7e:	2080      	movs	r0, #128	; 0x80
 8008a80:	f7ff fb60 	bl	8008144 <_ZN5SPI_12RWEh>
	SPI_1::RW(bufferSize + 1);
 8008a84:	79bb      	ldrb	r3, [r7, #6]
 8008a86:	3301      	adds	r3, #1
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7ff fb5a 	bl	8008144 <_ZN5SPI_12RWEh>
	SPI_1::RW(myAddress);
 8008a90:	79fb      	ldrb	r3, [r7, #7]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff fb56 	bl	8008144 <_ZN5SPI_12RWEh>

	const uint8_t *pBuf = (const uint8_t*) buffer;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < bufferSize; i++)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	75fb      	strb	r3, [r7, #23]
 8008aa0:	7dfa      	ldrb	r2, [r7, #23]
 8008aa2:	79bb      	ldrb	r3, [r7, #6]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d20a      	bcs.n	8008abe <_ZN5RFM6910sendPacketEhPKvh+0x86>
		SPI_1::RW(pBuf[i]);
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	4413      	add	r3, r2
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7ff fb47 	bl	8008144 <_ZN5SPI_12RWEh>
	for (uint8_t i = 0; i < bufferSize; i++)
 8008ab6:	7dfb      	ldrb	r3, [r7, #23]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	75fb      	strb	r3, [r7, #23]
 8008abc:	e7f0      	b.n	8008aa0 <_ZN5RFM6910sendPacketEhPKvh+0x68>
	CS_UP();
 8008abe:	f7ff fb63 	bl	8008188 <_ZN5RFM695CS_UPEv>

	// no need to wait for transmit mode to be ready since its handled by the radio
	setMode(modeTX);
 8008ac2:	2003      	movs	r0, #3
 8008ac4:	f7ff fdf4 	bl	80086b0 <_ZN5RFM697setModeE11TRFM69_MODE>

	// wait for signalling transmission finish
	TRfmErrorDef st = stRFM_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	75bb      	strb	r3, [r7, #22]
	uint32_t txStart = HAL_GetTick();
 8008acc:	f7f8 fbd0 	bl	8001270 <HAL_GetTick>
 8008ad0:	60f8      	str	r0, [r7, #12]
	while (true) {
		if (HAL_GetTick() - txStart > RF69_TX_LIMIT_MS) {
 8008ad2:	f7f8 fbcd 	bl	8001270 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ae0:	bf8c      	ite	hi
 8008ae2:	2301      	movhi	r3, #1
 8008ae4:	2300      	movls	r3, #0
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <_ZN5RFM6910sendPacketEhPKvh+0xba>
			st = stRFM_TXERROR;
 8008aec:	2305      	movs	r3, #5
 8008aee:	75bb      	strb	r3, [r7, #22]
			break;
 8008af0:	e00e      	b.n	8008b10 <_ZN5RFM6910sendPacketEhPKvh+0xd8>
		}
		if ((readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT) != 0) {
 8008af2:	2028      	movs	r0, #40	; 0x28
 8008af4:	f7ff fccc 	bl	8008490 <_ZN5RFM697readRegEh>
 8008af8:	4603      	mov	r3, r0
 8008afa:	f003 0308 	and.w	r3, r3, #8
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	bf14      	ite	ne
 8008b02:	2301      	movne	r3, #1
 8008b04:	2300      	moveq	r3, #0
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d100      	bne.n	8008b0e <_ZN5RFM6910sendPacketEhPKvh+0xd6>
		if (HAL_GetTick() - txStart > RF69_TX_LIMIT_MS) {
 8008b0c:	e7e1      	b.n	8008ad2 <_ZN5RFM6910sendPacketEhPKvh+0x9a>
			break;
 8008b0e:	bf00      	nop
		}
	}
	receiveBegin();
 8008b10:	f000 f938 	bl	8008d84 <_ZN5RFM6912receiveBeginEv>
	return st;
 8008b14:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <_ZN5RFM6911readRSSI_hdEb>:

// get the received signal strength indicator (RSSI)
int RFM69::readRSSI_hd(bool forceTrigger) {
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b082      	sub	sp, #8
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	4603      	mov	r3, r0
 8008b26:	71fb      	strb	r3, [r7, #7]
	if (forceTrigger) {
 8008b28:	79fb      	ldrb	r3, [r7, #7]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d011      	beq.n	8008b52 <_ZN5RFM6911readRSSI_hdEb+0x34>
		// RSSI trigger not needed if DAGC is in continuous mode
		writeReg(REG_RSSICONFIG, RF_RSSI_START);
 8008b2e:	2101      	movs	r1, #1
 8008b30:	2023      	movs	r0, #35	; 0x23
 8008b32:	f7ff fcc4 	bl	80084be <_ZN5RFM698writeRegEhh>
		while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00) {
 8008b36:	2023      	movs	r0, #35	; 0x23
 8008b38:	f7ff fcaa 	bl	8008490 <_ZN5RFM697readRegEh>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	bf0c      	ite	eq
 8008b46:	2301      	moveq	r3, #1
 8008b48:	2300      	movne	r3, #0
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d000      	beq.n	8008b52 <_ZN5RFM6911readRSSI_hdEb+0x34>
 8008b50:	e7f1      	b.n	8008b36 <_ZN5RFM6911readRSSI_hdEb+0x18>
			// wait for RSSI_Ready
		}
	}
	return readReg(REG_RSSIVALUE);
 8008b52:	2024      	movs	r0, #36	; 0x24
 8008b54:	f7ff fc9c 	bl	8008490 <_ZN5RFM697readRegEh>
 8008b58:	4603      	mov	r3, r0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <_ZN5RFM698readRSSIEb>:

// get the received signal strength indicator (RSSI)
float RFM69::readRSSI(bool forceTrigger) {
 8008b64:	b590      	push	{r4, r7, lr}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	71fb      	strb	r3, [r7, #7]
	return -0.5 * readRSSI_hd(forceTrigger);
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7ff ffd4 	bl	8008b1e <_ZN5RFM6911readRSSI_hdEb>
 8008b76:	4603      	mov	r3, r0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7f7 fc87 	bl	800048c <__aeabi_i2d>
 8008b7e:	f04f 0200 	mov.w	r2, #0
 8008b82:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <_ZN5RFM698readRSSIEb+0x3c>)
 8008b84:	f7f7 fcec 	bl	8000560 <__aeabi_dmul>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	4621      	mov	r1, r4
 8008b90:	f7f7 ff40 	bl	8000a14 <__aeabi_d2f>
 8008b94:	4603      	mov	r3, r0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd90      	pop	{r4, r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	bfe00000 	.word	0xbfe00000

08008ba4 <_ZN5RFM6910reciveTickEv>:
bool RFM69::canSend() {
	return (readRSSI() < CSMA_LIMIT);
}

// returns true if frame is recived
bool RFM69::reciveTick() {
 8008ba4:	b590      	push	{r4, r7, lr}
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	af02      	add	r7, sp, #8
	if (mMode == modeRX) {
 8008baa:	4b6d      	ldr	r3, [pc, #436]	; (8008d60 <_ZN5RFM6910reciveTickEv+0x1bc>)
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	f040 80d0 	bne.w	8008d54 <_ZN5RFM6910reciveTickEv+0x1b0>
		if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY) {
 8008bb4:	2028      	movs	r0, #40	; 0x28
 8008bb6:	f7ff fc6b 	bl	8008490 <_ZN5RFM697readRegEh>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	f003 0304 	and.w	r3, r3, #4
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	bf14      	ite	ne
 8008bc4:	2301      	movne	r3, #1
 8008bc6:	2300      	moveq	r3, #0
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 80bc 	beq.w	8008d48 <_ZN5RFM6910reciveTickEv+0x1a4>

			setMode(modeSTANDBY);
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	f7ff fd6d 	bl	80086b0 <_ZN5RFM697setModeE11TRFM69_MODE>
			CS_DN();
 8008bd6:	f7ff facb 	bl	8008170 <_ZN5RFM695CS_DNEv>
			SPI_1::RW(REG_FIFO & 0x7F);
 8008bda:	2000      	movs	r0, #0
 8008bdc:	f7ff fab2 	bl	8008144 <_ZN5SPI_12RWEh>
			int payloadLen = SPI_1::RW(0);
 8008be0:	2000      	movs	r0, #0
 8008be2:	f7ff faaf 	bl	8008144 <_ZN5SPI_12RWEh>
 8008be6:	4603      	mov	r3, r0
 8008be8:	60fb      	str	r3, [r7, #12]
			if (payloadLen > RF69_MAX_DATA_LEN)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2b41      	cmp	r3, #65	; 0x41
 8008bee:	dd01      	ble.n	8008bf4 <_ZN5RFM6910reciveTickEv+0x50>
				payloadLen = RF69_MAX_DATA_LEN;
 8008bf0:	2341      	movs	r3, #65	; 0x41
 8008bf2:	60fb      	str	r3, [r7, #12]

			recVar.DataLen = payloadLen - 1;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	4b59      	ldr	r3, [pc, #356]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008bfe:	705a      	strb	r2, [r3, #1]

			recVar.SenderID = SPI_1::RW(0);
 8008c00:	2000      	movs	r0, #0
 8008c02:	f7ff fa9f 	bl	8008144 <_ZN5SPI_12RWEh>
 8008c06:	4603      	mov	r3, r0
 8008c08:	461a      	mov	r2, r3
 8008c0a:	4b56      	ldr	r3, [pc, #344]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008c0c:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < recVar.DataLen; i++) {
 8008c0e:	2300      	movs	r3, #0
 8008c10:	72fb      	strb	r3, [r7, #11]
 8008c12:	4b54      	ldr	r3, [pc, #336]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008c14:	785b      	ldrb	r3, [r3, #1]
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	7afa      	ldrb	r2, [r7, #11]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	bf34      	ite	cc
 8008c1e:	2301      	movcc	r3, #1
 8008c20:	2300      	movcs	r3, #0
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00c      	beq.n	8008c42 <_ZN5RFM6910reciveTickEv+0x9e>
				recVar.DataBuf[i] = SPI_1::RW(0);
 8008c28:	7afc      	ldrb	r4, [r7, #11]
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	f7ff fa8a 	bl	8008144 <_ZN5SPI_12RWEh>
 8008c30:	4603      	mov	r3, r0
 8008c32:	461a      	mov	r2, r3
 8008c34:	4b4b      	ldr	r3, [pc, #300]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008c36:	4423      	add	r3, r4
 8008c38:	731a      	strb	r2, [r3, #12]
			for (uint8_t i = 0; i < recVar.DataLen; i++) {
 8008c3a:	7afb      	ldrb	r3, [r7, #11]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	72fb      	strb	r3, [r7, #11]
 8008c40:	e7e7      	b.n	8008c12 <_ZN5RFM6910reciveTickEv+0x6e>
			}
			if (recVar.DataLen < RF69_MAX_DATA_LEN)
 8008c42:	4b48      	ldr	r3, [pc, #288]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008c44:	785b      	ldrb	r3, [r3, #1]
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b40      	cmp	r3, #64	; 0x40
 8008c4a:	bf94      	ite	ls
 8008c4c:	2301      	movls	r3, #1
 8008c4e:	2300      	movhi	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d007      	beq.n	8008c66 <_ZN5RFM6910reciveTickEv+0xc2>
				recVar.DataBuf[recVar.DataLen] = 0; // add null at end of string
 8008c56:	4b43      	ldr	r3, [pc, #268]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008c58:	785b      	ldrb	r3, [r3, #1]
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	4b41      	ldr	r3, [pc, #260]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008c60:	4413      	add	r3, r2
 8008c62:	2200      	movs	r2, #0
 8008c64:	731a      	strb	r2, [r3, #12]

			CS_UP();
 8008c66:	f7ff fa8f 	bl	8008188 <_ZN5RFM695CS_UPEv>
			setMode(modeRX);
 8008c6a:	2004      	movs	r0, #4
 8008c6c:	f7ff fd20 	bl	80086b0 <_ZN5RFM697setModeE11TRFM69_MODE>
			recVar.RSSI_hd = readReg(REG_RSSIVALUE);
 8008c70:	2024      	movs	r0, #36	; 0x24
 8008c72:	f7ff fc0d 	bl	8008490 <_ZN5RFM697readRegEh>
 8008c76:	4603      	mov	r3, r0
 8008c78:	461a      	mov	r2, r3
 8008c7a:	4b3a      	ldr	r3, [pc, #232]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008c7c:	609a      	str	r2, [r3, #8]
			recVar.RSSI = -0.5 * recVar.RSSI_hd;
 8008c7e:	4b39      	ldr	r3, [pc, #228]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7f7 fc02 	bl	800048c <__aeabi_i2d>
 8008c88:	f04f 0200 	mov.w	r2, #0
 8008c8c:	4b36      	ldr	r3, [pc, #216]	; (8008d68 <_ZN5RFM6910reciveTickEv+0x1c4>)
 8008c8e:	f7f7 fc67 	bl	8000560 <__aeabi_dmul>
 8008c92:	4603      	mov	r3, r0
 8008c94:	460c      	mov	r4, r1
 8008c96:	4618      	mov	r0, r3
 8008c98:	4621      	mov	r1, r4
 8008c9a:	f7f7 febb 	bl	8000a14 <__aeabi_d2f>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	4b30      	ldr	r3, [pc, #192]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008ca2:	605a      	str	r2, [r3, #4]
			mNewframe = true;
 8008ca4:	4b31      	ldr	r3, [pc, #196]	; (8008d6c <_ZN5RFM6910reciveTickEv+0x1c8>)
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	701a      	strb	r2, [r3, #0]
			if (mShowRecFrame) {
 8008caa:	4b31      	ldr	r3, [pc, #196]	; (8008d70 <_ZN5RFM6910reciveTickEv+0x1cc>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d048      	beq.n	8008d44 <_ZN5RFM6910reciveTickEv+0x1a0>
				}
				getOutStream()->oMsgX(colYELLOW, txt);

#endif
#if RFM69_SHELL_CHAR
				int n = snprintf(txt, sizeof(txt), "RADIO: Snd=%u Len=%u RSSI=%df[dBm/2] ", recVar.SenderID, recVar.DataLen, -recVar.RSSI_hd);
 8008cb2:	4b2c      	ldr	r3, [pc, #176]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4b2a      	ldr	r3, [pc, #168]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008cbc:	785b      	ldrb	r3, [r3, #1]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4b28      	ldr	r3, [pc, #160]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	425b      	negs	r3, r3
 8008cc8:	9301      	str	r3, [sp, #4]
 8008cca:	9200      	str	r2, [sp, #0]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4a29      	ldr	r2, [pc, #164]	; (8008d74 <_ZN5RFM6910reciveTickEv+0x1d0>)
 8008cd0:	2178      	movs	r1, #120	; 0x78
 8008cd2:	4829      	ldr	r0, [pc, #164]	; (8008d78 <_ZN5RFM6910reciveTickEv+0x1d4>)
 8008cd4:	f002 fd02 	bl	800b6dc <sniprintf>
 8008cd8:	6078      	str	r0, [r7, #4]
				for (int i = 0; i < recVar.DataLen; i++) {
 8008cda:	2300      	movs	r3, #0
 8008cdc:	603b      	str	r3, [r7, #0]
 8008cde:	4b21      	ldr	r3, [pc, #132]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008ce0:	785b      	ldrb	r3, [r3, #1]
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	bfb4      	ite	lt
 8008cec:	2301      	movlt	r3, #1
 8008cee:	2300      	movge	r3, #0
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d015      	beq.n	8008d22 <_ZN5RFM6910reciveTickEv+0x17e>
					n += snprintf(&txt[n], sizeof(txt) - n, "%02X ", recVar.DataBuf[i]);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a1f      	ldr	r2, [pc, #124]	; (8008d78 <_ZN5RFM6910reciveTickEv+0x1d4>)
 8008cfa:	1898      	adds	r0, r3, r2
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f1c3 0178 	rsb	r1, r3, #120	; 0x78
 8008d02:	4a18      	ldr	r2, [pc, #96]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	4413      	add	r3, r2
 8008d08:	330c      	adds	r3, #12
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	4a1b      	ldr	r2, [pc, #108]	; (8008d7c <_ZN5RFM6910reciveTickEv+0x1d8>)
 8008d0e:	f002 fce5 	bl	800b6dc <sniprintf>
 8008d12:	4602      	mov	r2, r0
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4413      	add	r3, r2
 8008d18:	607b      	str	r3, [r7, #4]
				for (int i = 0; i < recVar.DataLen; i++) {
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	603b      	str	r3, [r7, #0]
 8008d20:	e7dd      	b.n	8008cde <_ZN5RFM6910reciveTickEv+0x13a>
				}
				n += snprintf(&txt[n], sizeof(txt) - n, "\r\n");
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a14      	ldr	r2, [pc, #80]	; (8008d78 <_ZN5RFM6910reciveTickEv+0x1d4>)
 8008d26:	1898      	adds	r0, r3, r2
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8008d2e:	4a14      	ldr	r2, [pc, #80]	; (8008d80 <_ZN5RFM6910reciveTickEv+0x1dc>)
 8008d30:	4619      	mov	r1, r3
 8008d32:	f002 fcd3 	bl	800b6dc <sniprintf>
 8008d36:	4602      	mov	r2, r0
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	607b      	str	r3, [r7, #4]
				printf(txt);
 8008d3e:	480e      	ldr	r0, [pc, #56]	; (8008d78 <_ZN5RFM6910reciveTickEv+0x1d4>)
 8008d40:	f002 fb8e 	bl	800b460 <iprintf>

#endif
			}

			return true;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e006      	b.n	8008d56 <_ZN5RFM6910reciveTickEv+0x1b2>
		} else
			recVar.RSSI = readRSSI();
 8008d48:	2000      	movs	r0, #0
 8008d4a:	f7ff ff0b 	bl	8008b64 <_ZN5RFM698readRSSIEb>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	4b04      	ldr	r3, [pc, #16]	; (8008d64 <_ZN5RFM6910reciveTickEv+0x1c0>)
 8008d52:	605a      	str	r2, [r3, #4]
	}
	return false;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd90      	pop	{r4, r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20000264 	.word	0x20000264
 8008d64:	20000268 	.word	0x20000268
 8008d68:	bfe00000 	.word	0xbfe00000
 8008d6c:	200002b9 	.word	0x200002b9
 8008d70:	200002ba 	.word	0x200002ba
 8008d74:	0800c8ec 	.word	0x0800c8ec
 8008d78:	200002bc 	.word	0x200002bc
 8008d7c:	0800c914 	.word	0x0800c914
 8008d80:	0800c91c 	.word	0x0800c91c

08008d84 <_ZN5RFM6912receiveBeginEv>:

void RFM69::receiveBegin() {
 8008d84:	b580      	push	{r7, lr}
 8008d86:	af00      	add	r7, sp, #0
	memset(&recVar, 0, sizeof(recVar));
 8008d88:	2250      	movs	r2, #80	; 0x50
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	480c      	ldr	r0, [pc, #48]	; (8008dc0 <_ZN5RFM6912receiveBeginEv+0x3c>)
 8008d8e:	f002 fb5e 	bl	800b44e <memset>
	if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
 8008d92:	2028      	movs	r0, #40	; 0x28
 8008d94:	f7ff fb7c 	bl	8008490 <_ZN5RFM697readRegEh>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	f003 0304 	and.w	r3, r3, #4
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	bf14      	ite	ne
 8008da2:	2301      	movne	r3, #1
 8008da4:	2300      	moveq	r3, #0
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d004      	beq.n	8008db6 <_ZN5RFM6912receiveBeginEv+0x32>
		modifyReg(REG_PACKETCONFIG2, 0x04, RF_PACKET2_RXRESTART); // avoid RX deadlocks
 8008dac:	2204      	movs	r2, #4
 8008dae:	2104      	movs	r1, #4
 8008db0:	203d      	movs	r0, #61	; 0x3d
 8008db2:	f7ff fbc7 	bl	8008544 <_ZN5RFM699modifyRegEhhh>
	setMode(modeRX);
 8008db6:	2004      	movs	r0, #4
 8008db8:	f7ff fc7a 	bl	80086b0 <_ZN5RFM697setModeE11TRFM69_MODE>
}
 8008dbc:	bf00      	nop
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	20000268 	.word	0x20000268

08008dc4 <_ZN5RFM697dumpRegEv>:
}
#endif

#if  RFM69_SHELL_CHAR

void RFM69::dumpReg() {
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b098      	sub	sp, #96	; 0x60
 8008dc8:	af00      	add	r7, sp, #0
	uint8_t tab[0x50];
	for (int n = 1; n < 0x50; n++) {
 8008dca:	2301      	movs	r3, #1
 8008dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dd0:	2b4f      	cmp	r3, #79	; 0x4f
 8008dd2:	dc0f      	bgt.n	8008df4 <_ZN5RFM697dumpRegEv+0x30>
		tab[n] = readReg(n);
 8008dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff fb59 	bl	8008490 <_ZN5RFM697readRegEh>
 8008dde:	4603      	mov	r3, r0
 8008de0:	4619      	mov	r1, r3
 8008de2:	1d3a      	adds	r2, r7, #4
 8008de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008de6:	4413      	add	r3, r2
 8008de8:	460a      	mov	r2, r1
 8008dea:	701a      	strb	r2, [r3, #0]
	for (int n = 1; n < 0x50; n++) {
 8008dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dee:	3301      	adds	r3, #1
 8008df0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008df2:	e7ec      	b.n	8008dce <_ZN5RFM697dumpRegEv+0xa>
	}

	for (int n = 1; n < 0x50; n++) {
 8008df4:	2301      	movs	r3, #1
 8008df6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dfa:	2b4f      	cmp	r3, #79	; 0x4f
 8008dfc:	dc73      	bgt.n	8008ee6 <_ZN5RFM697dumpRegEv+0x122>
		printf("%02X. ", n);
 8008dfe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e00:	483b      	ldr	r0, [pc, #236]	; (8008ef0 <_ZN5RFM697dumpRegEv+0x12c>)
 8008e02:	f002 fb2d 	bl	800b460 <iprintf>
		HAL_Delay(20);
 8008e06:	2014      	movs	r0, #20
 8008e08:	f7f8 fa3c 	bl	8001284 <HAL_Delay>
		printf("%s ", tabNames[n]);
 8008e0c:	4a39      	ldr	r2, [pc, #228]	; (8008ef4 <_ZN5RFM697dumpRegEv+0x130>)
 8008e0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e14:	4619      	mov	r1, r3
 8008e16:	4838      	ldr	r0, [pc, #224]	; (8008ef8 <_ZN5RFM697dumpRegEv+0x134>)
 8008e18:	f002 fb22 	bl	800b460 <iprintf>

		uint8_t regVal = tab[n];
 8008e1c:	1d3a      	adds	r2, r7, #4
 8008e1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e20:	4413      	add	r3, r2
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		if (regVal == 0)
 8008e28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d103      	bne.n	8008e38 <_ZN5RFM697dumpRegEv+0x74>
			printf("0        ");
 8008e30:	4832      	ldr	r0, [pc, #200]	; (8008efc <_ZN5RFM697dumpRegEv+0x138>)
 8008e32:	f002 fb15 	bl	800b460 <iprintf>
 8008e36:	e00f      	b.n	8008e58 <_ZN5RFM697dumpRegEv+0x94>
		else if (regVal == 255)
 8008e38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e3c:	2bff      	cmp	r3, #255	; 0xff
 8008e3e:	d103      	bne.n	8008e48 <_ZN5RFM697dumpRegEv+0x84>
			printf("FF       ");
 8008e40:	482f      	ldr	r0, [pc, #188]	; (8008f00 <_ZN5RFM697dumpRegEv+0x13c>)
 8008e42:	f002 fb0d 	bl	800b460 <iprintf>
 8008e46:	e007      	b.n	8008e58 <_ZN5RFM697dumpRegEv+0x94>
		else
			printf("%.3u,0x%02x ", regVal, regVal);
 8008e48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e4c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008e50:	4619      	mov	r1, r3
 8008e52:	482c      	ldr	r0, [pc, #176]	; (8008f04 <_ZN5RFM697dumpRegEv+0x140>)
 8008e54:	f002 fb04 	bl	800b460 <iprintf>

		switch (n) {
 8008e58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e5a:	3b03      	subs	r3, #3
 8008e5c:	2b0d      	cmp	r3, #13
 8008e5e:	d83b      	bhi.n	8008ed8 <_ZN5RFM697dumpRegEv+0x114>
 8008e60:	a201      	add	r2, pc, #4	; (adr r2, 8008e68 <_ZN5RFM697dumpRegEv+0xa4>)
 8008e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e66:	bf00      	nop
 8008e68:	08008ea1 	.word	0x08008ea1
 8008e6c:	08008ed9 	.word	0x08008ed9
 8008e70:	08008eb1 	.word	0x08008eb1
 8008e74:	08008ed9 	.word	0x08008ed9
 8008e78:	08008ec1 	.word	0x08008ec1
 8008e7c:	08008ed9 	.word	0x08008ed9
 8008e80:	08008ed9 	.word	0x08008ed9
 8008e84:	08008ed9 	.word	0x08008ed9
 8008e88:	08008ed9 	.word	0x08008ed9
 8008e8c:	08008ed9 	.word	0x08008ed9
 8008e90:	08008ed9 	.word	0x08008ed9
 8008e94:	08008ed9 	.word	0x08008ed9
 8008e98:	08008ed9 	.word	0x08008ed9
 8008e9c:	08008ed1 	.word	0x08008ed1
		case REG_BITRATEMSB:
			printf("BitRate=%u", (int) getBitRate());
 8008ea0:	f7ff fce2 	bl	8008868 <_ZN5RFM6910getBitRateEv>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	4817      	ldr	r0, [pc, #92]	; (8008f08 <_ZN5RFM697dumpRegEv+0x144>)
 8008eaa:	f002 fad9 	bl	800b460 <iprintf>
			break;
 8008eae:	e013      	b.n	8008ed8 <_ZN5RFM697dumpRegEv+0x114>
		case REG_FDEVMSB:
			printf("deviation=%u", (int) getDeviation());
 8008eb0:	f7ff fd3a 	bl	8008928 <_ZN5RFM6912getDeviationEv>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	4814      	ldr	r0, [pc, #80]	; (8008f0c <_ZN5RFM697dumpRegEv+0x148>)
 8008eba:	f002 fad1 	bl	800b460 <iprintf>
			break;
 8008ebe:	e00b      	b.n	8008ed8 <_ZN5RFM697dumpRegEv+0x114>
		case REG_FRFMSB:
			printf("freq=%u[Hz]", (int) getFrequency());
 8008ec0:	f7ff fc5a 	bl	8008778 <_ZN5RFM6912getFrequencyEv>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4811      	ldr	r0, [pc, #68]	; (8008f10 <_ZN5RFM697dumpRegEv+0x14c>)
 8008eca:	f002 fac9 	bl	800b460 <iprintf>
			break;
 8008ece:	e003      	b.n	8008ed8 <_ZN5RFM697dumpRegEv+0x114>
		case REG_VERSION:
			printf("ChipVersion");
 8008ed0:	4810      	ldr	r0, [pc, #64]	; (8008f14 <_ZN5RFM697dumpRegEv+0x150>)
 8008ed2:	f002 fac5 	bl	800b460 <iprintf>
			break;
 8008ed6:	bf00      	nop
		}

		printf("\r\n");
 8008ed8:	480f      	ldr	r0, [pc, #60]	; (8008f18 <_ZN5RFM697dumpRegEv+0x154>)
 8008eda:	f002 fb49 	bl	800b570 <puts>
	for (int n = 1; n < 0x50; n++) {
 8008ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ee4:	e788      	b.n	8008df8 <_ZN5RFM697dumpRegEv+0x34>
	}
}
 8008ee6:	bf00      	nop
 8008ee8:	3760      	adds	r7, #96	; 0x60
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	0800cc48 	.word	0x0800cc48
 8008ef4:	0800d164 	.word	0x0800d164
 8008ef8:	0800cc50 	.word	0x0800cc50
 8008efc:	0800cc54 	.word	0x0800cc54
 8008f00:	0800cc60 	.word	0x0800cc60
 8008f04:	0800cc6c 	.word	0x0800cc6c
 8008f08:	0800cc7c 	.word	0x0800cc7c
 8008f0c:	0800cc88 	.word	0x0800cc88
 8008f10:	0800cc98 	.word	0x0800cc98
 8008f14:	0800cca4 	.word	0x0800cca4
 8008f18:	0800ccb0 	.word	0x0800ccb0

08008f1c <_ZN5RFM6910isNewFrameEv>:
	writeReg(REG_SYNCVALUE1, 0);
	writeReg(REG_SYNCVALUE2, 0);
	return ((a1 == 0x11) && (a2 == 0x22));
}

bool RFM69::isNewFrame() {
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
	bool q = mNewframe;
 8008f22:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <_ZN5RFM6910isNewFrameEv+0x20>)
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	71fb      	strb	r3, [r7, #7]
	mNewframe = false;
 8008f28:	4b04      	ldr	r3, [pc, #16]	; (8008f3c <_ZN5RFM6910isNewFrameEv+0x20>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	701a      	strb	r2, [r3, #0]
	return q;
 8008f2e:	79fb      	ldrb	r3, [r7, #7]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bc80      	pop	{r7}
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	200002b9 	.word	0x200002b9

08008f40 <_ZN5RFM694tickEv>:

void RFM69::tick() {
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
	reciveTick();
 8008f44:	f7ff fe2e 	bl	8008ba4 <_ZN5RFM6910reciveTickEv>
}
 8008f48:	bf00      	nop
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <_ZN5RFM695shellEc>:

#endif

#if RFM69_SHELL_CHAR

bool RFM69::shell(char key) {
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	71fb      	strb	r3, [r7, #7]
	uint8_t w, w1;
	switch (key) {
 8008f56:	79fb      	ldrb	r3, [r7, #7]
 8008f58:	3b1b      	subs	r3, #27
 8008f5a:	2b58      	cmp	r3, #88	; 0x58
 8008f5c:	f200 8158 	bhi.w	8009210 <_ZN5RFM695shellEc+0x2c4>
 8008f60:	a201      	add	r2, pc, #4	; (adr r2, 8008f68 <_ZN5RFM695shellEc+0x1c>)
 8008f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f66:	bf00      	nop
 8008f68:	080090cd 	.word	0x080090cd
 8008f6c:	08009211 	.word	0x08009211
 8008f70:	08009211 	.word	0x08009211
 8008f74:	08009211 	.word	0x08009211
 8008f78:	08009211 	.word	0x08009211
 8008f7c:	08009211 	.word	0x08009211
 8008f80:	08009211 	.word	0x08009211
 8008f84:	08009211 	.word	0x08009211
 8008f88:	08009211 	.word	0x08009211
 8008f8c:	08009211 	.word	0x08009211
 8008f90:	08009211 	.word	0x08009211
 8008f94:	08009211 	.word	0x08009211
 8008f98:	08009211 	.word	0x08009211
 8008f9c:	08009211 	.word	0x08009211
 8008fa0:	08009211 	.word	0x08009211
 8008fa4:	08009211 	.word	0x08009211
 8008fa8:	08009211 	.word	0x08009211
 8008fac:	08009211 	.word	0x08009211
 8008fb0:	08009211 	.word	0x08009211
 8008fb4:	08009211 	.word	0x08009211
 8008fb8:	08009211 	.word	0x08009211
 8008fbc:	08009211 	.word	0x08009211
 8008fc0:	08009211 	.word	0x08009211
 8008fc4:	08009211 	.word	0x08009211
 8008fc8:	08009211 	.word	0x08009211
 8008fcc:	08009211 	.word	0x08009211
 8008fd0:	08009211 	.word	0x08009211
 8008fd4:	08009211 	.word	0x08009211
 8008fd8:	08009211 	.word	0x08009211
 8008fdc:	08009211 	.word	0x08009211
 8008fe0:	08009211 	.word	0x08009211
 8008fe4:	08009211 	.word	0x08009211
 8008fe8:	08009211 	.word	0x08009211
 8008fec:	08009211 	.word	0x08009211
 8008ff0:	08009211 	.word	0x08009211
 8008ff4:	08009173 	.word	0x08009173
 8008ff8:	08009211 	.word	0x08009211
 8008ffc:	08009211 	.word	0x08009211
 8009000:	08009211 	.word	0x08009211
 8009004:	08009211 	.word	0x08009211
 8009008:	08009211 	.word	0x08009211
 800900c:	08009211 	.word	0x08009211
 8009010:	08009211 	.word	0x08009211
 8009014:	08009211 	.word	0x08009211
 8009018:	08009211 	.word	0x08009211
 800901c:	08009211 	.word	0x08009211
 8009020:	08009211 	.word	0x08009211
 8009024:	08009211 	.word	0x08009211
 8009028:	08009211 	.word	0x08009211
 800902c:	08009211 	.word	0x08009211
 8009030:	08009211 	.word	0x08009211
 8009034:	08009211 	.word	0x08009211
 8009038:	08009211 	.word	0x08009211
 800903c:	08009211 	.word	0x08009211
 8009040:	08009211 	.word	0x08009211
 8009044:	08009211 	.word	0x08009211
 8009048:	080091e7 	.word	0x080091e7
 800904c:	080091c7 	.word	0x080091c7
 8009050:	08009211 	.word	0x08009211
 8009054:	08009211 	.word	0x08009211
 8009058:	08009211 	.word	0x08009211
 800905c:	08009211 	.word	0x08009211
 8009060:	080091d9 	.word	0x080091d9
 8009064:	08009211 	.word	0x08009211
 8009068:	08009211 	.word	0x08009211
 800906c:	08009211 	.word	0x08009211
 8009070:	08009211 	.word	0x08009211
 8009074:	08009211 	.word	0x08009211
 8009078:	08009211 	.word	0x08009211
 800907c:	08009211 	.word	0x08009211
 8009080:	08009211 	.word	0x08009211
 8009084:	08009211 	.word	0x08009211
 8009088:	08009211 	.word	0x08009211
 800908c:	080091c1 	.word	0x080091c1
 8009090:	08009211 	.word	0x08009211
 8009094:	080090d1 	.word	0x080090d1
 8009098:	08009211 	.word	0x08009211
 800909c:	08009211 	.word	0x08009211
 80090a0:	08009211 	.word	0x08009211
 80090a4:	08009211 	.word	0x08009211
 80090a8:	080091f5 	.word	0x080091f5
 80090ac:	0800915f 	.word	0x0800915f
 80090b0:	08009211 	.word	0x08009211
 80090b4:	08009211 	.word	0x08009211
 80090b8:	08009211 	.word	0x08009211
 80090bc:	08009211 	.word	0x08009211
 80090c0:	08009211 	.word	0x08009211
 80090c4:	080091b5 	.word	0x080091b5
 80090c8:	080090fd 	.word	0x080090fd
	case 27:
		return true;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e0a4      	b.n	800921a <_ZN5RFM695shellEc+0x2ce>
	case 'f':
		printf("freq=%u[Hz]\r\n", (int) getFrequency());
 80090d0:	f7ff fb52 	bl	8008778 <_ZN5RFM6912getFrequencyEv>
 80090d4:	4603      	mov	r3, r0
 80090d6:	4619      	mov	r1, r3
 80090d8:	4852      	ldr	r0, [pc, #328]	; (8009224 <_ZN5RFM695shellEc+0x2d8>)
 80090da:	f002 f9c1 	bl	800b460 <iprintf>
		printf("BitRate=%u[bit/sek]\r\n", (int) getBitRate());
 80090de:	f7ff fbc3 	bl	8008868 <_ZN5RFM6910getBitRateEv>
 80090e2:	4603      	mov	r3, r0
 80090e4:	4619      	mov	r1, r3
 80090e6:	4850      	ldr	r0, [pc, #320]	; (8009228 <_ZN5RFM695shellEc+0x2dc>)
 80090e8:	f002 f9ba 	bl	800b460 <iprintf>
		printf("Deviation=%u[Hz]\r\n", (int) getDeviation());
 80090ec:	f7ff fc1c 	bl	8008928 <_ZN5RFM6912getDeviationEv>
 80090f0:	4603      	mov	r3, r0
 80090f2:	4619      	mov	r1, r3
 80090f4:	484d      	ldr	r0, [pc, #308]	; (800922c <_ZN5RFM695shellEc+0x2e0>)
 80090f6:	f002 f9b3 	bl	800b460 <iprintf>
		break;
 80090fa:	e08d      	b.n	8009218 <_ZN5RFM695shellEc+0x2cc>
	case 's':
		printf("Mode=%u\r\n", mMode);
 80090fc:	4b4c      	ldr	r3, [pc, #304]	; (8009230 <_ZN5RFM695shellEc+0x2e4>)
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	4619      	mov	r1, r3
 8009102:	484c      	ldr	r0, [pc, #304]	; (8009234 <_ZN5RFM695shellEc+0x2e8>)
 8009104:	f002 f9ac 	bl	800b460 <iprintf>
		printf("PAMode=%u\r\n", mPA_Mode);
 8009108:	4b4b      	ldr	r3, [pc, #300]	; (8009238 <_ZN5RFM695shellEc+0x2ec>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	4619      	mov	r1, r3
 800910e:	484b      	ldr	r0, [pc, #300]	; (800923c <_ZN5RFM695shellEc+0x2f0>)
 8009110:	f002 f9a6 	bl	800b460 <iprintf>
		printf("REG_OPMODE=%u\r\n", (readReg(REG_OPMODE) >> 2) & 0x07);
 8009114:	2001      	movs	r0, #1
 8009116:	f7ff f9bb 	bl	8008490 <_ZN5RFM697readRegEh>
 800911a:	4603      	mov	r3, r0
 800911c:	109b      	asrs	r3, r3, #2
 800911e:	f003 0307 	and.w	r3, r3, #7
 8009122:	4619      	mov	r1, r3
 8009124:	4846      	ldr	r0, [pc, #280]	; (8009240 <_ZN5RFM695shellEc+0x2f4>)
 8009126:	f002 f99b 	bl	800b460 <iprintf>
		printf("REG_IRQFLAGS1=0x%02X\r\n", readReg(REG_IRQFLAGS1));
 800912a:	2027      	movs	r0, #39	; 0x27
 800912c:	f7ff f9b0 	bl	8008490 <_ZN5RFM697readRegEh>
 8009130:	4603      	mov	r3, r0
 8009132:	4619      	mov	r1, r3
 8009134:	4843      	ldr	r0, [pc, #268]	; (8009244 <_ZN5RFM695shellEc+0x2f8>)
 8009136:	f002 f993 	bl	800b460 <iprintf>
		printf("REG_IRQFLAGS2=0x%02X\r\n", readReg(REG_IRQFLAGS2));
 800913a:	2028      	movs	r0, #40	; 0x28
 800913c:	f7ff f9a8 	bl	8008490 <_ZN5RFM697readRegEh>
 8009140:	4603      	mov	r3, r0
 8009142:	4619      	mov	r1, r3
 8009144:	4840      	ldr	r0, [pc, #256]	; (8009248 <_ZN5RFM695shellEc+0x2fc>)
 8009146:	f002 f98b 	bl	800b460 <iprintf>
		printf("REG_RSSIVALUE=%d[*0.5 dBm]\r\n", -readReg(REG_RSSIVALUE));
 800914a:	2024      	movs	r0, #36	; 0x24
 800914c:	f7ff f9a0 	bl	8008490 <_ZN5RFM697readRegEh>
 8009150:	4603      	mov	r3, r0
 8009152:	425b      	negs	r3, r3
 8009154:	4619      	mov	r1, r3
 8009156:	483d      	ldr	r0, [pc, #244]	; (800924c <_ZN5RFM695shellEc+0x300>)
 8009158:	f002 f982 	bl	800b460 <iprintf>
		break;
 800915c:	e05c      	b.n	8009218 <_ZN5RFM695shellEc+0x2cc>
	case 'l':
		printf("RSSI=%d[0.5*dBm]\r\n", - readRSSI_hd(true));
 800915e:	2001      	movs	r0, #1
 8009160:	f7ff fcdd 	bl	8008b1e <_ZN5RFM6911readRSSI_hdEb>
 8009164:	4603      	mov	r3, r0
 8009166:	425b      	negs	r3, r3
 8009168:	4619      	mov	r1, r3
 800916a:	4839      	ldr	r0, [pc, #228]	; (8009250 <_ZN5RFM695shellEc+0x304>)
 800916c:	f002 f978 	bl	800b460 <iprintf>
		break;
 8009170:	e052      	b.n	8009218 <_ZN5RFM695shellEc+0x2cc>

	case '>':
		w = readReg(REG_DIOMAPPING2);
 8009172:	2026      	movs	r0, #38	; 0x26
 8009174:	f7ff f98c 	bl	8008490 <_ZN5RFM697readRegEh>
 8009178:	4603      	mov	r3, r0
 800917a:	73fb      	strb	r3, [r7, #15]

		w1 = w & 0x07;
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	f003 0307 	and.w	r3, r3, #7
 8009182:	73bb      	strb	r3, [r7, #14]
		w1 = (w1 + 1) & 0x07;
 8009184:	7bbb      	ldrb	r3, [r7, #14]
 8009186:	3301      	adds	r3, #1
 8009188:	b2db      	uxtb	r3, r3
 800918a:	f003 0307 	and.w	r3, r3, #7
 800918e:	73bb      	strb	r3, [r7, #14]
		w = (w & 0xF8) | w1;
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	f023 0307 	bic.w	r3, r3, #7
 8009196:	b2da      	uxtb	r2, r3
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	4313      	orrs	r3, r2
 800919c:	73fb      	strb	r3, [r7, #15]
		writeReg(REG_DIOMAPPING2, w);
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	4619      	mov	r1, r3
 80091a2:	2026      	movs	r0, #38	; 0x26
 80091a4:	f7ff f98b 	bl	80084be <_ZN5RFM698writeRegEhh>
		printf("ClkOut=%u\r\n", w1);
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
 80091aa:	4619      	mov	r1, r3
 80091ac:	4829      	ldr	r0, [pc, #164]	; (8009254 <_ZN5RFM695shellEc+0x308>)
 80091ae:	f002 f957 	bl	800b460 <iprintf>
		break;
 80091b2:	e031      	b.n	8009218 <_ZN5RFM695shellEc+0x2cc>

	case 'r':
		printf("reciveBegin\r\n");
 80091b4:	4828      	ldr	r0, [pc, #160]	; (8009258 <_ZN5RFM695shellEc+0x30c>)
 80091b6:	f002 f9db 	bl	800b570 <puts>
		receiveBegin();
 80091ba:	f7ff fde3 	bl	8008d84 <_ZN5RFM6912receiveBeginEv>
		break;
 80091be:	e02b      	b.n	8009218 <_ZN5RFM695shellEc+0x2cc>

	case 'd':
		dumpReg();
 80091c0:	f7ff fe00 	bl	8008dc4 <_ZN5RFM697dumpRegEv>
		break;
 80091c4:	e028      	b.n	8009218 <_ZN5RFM695shellEc+0x2cc>
	case 'T':
		printf("Temp=%u\r\n", readTemperature(0));
 80091c6:	2000      	movs	r0, #0
 80091c8:	f7ff fbf0 	bl	80089ac <_ZN5RFM6915readTemperatureEh>
 80091cc:	4603      	mov	r3, r0
 80091ce:	4619      	mov	r1, r3
 80091d0:	4822      	ldr	r0, [pc, #136]	; (800925c <_ZN5RFM695shellEc+0x310>)
 80091d2:	f002 f945 	bl	800b460 <iprintf>
		break;
 80091d6:	e01f      	b.n	8009218 <_ZN5RFM695shellEc+0x2cc>
	case 'Y':
		setMode(modeSTANDBY);
 80091d8:	2001      	movs	r0, #1
 80091da:	f7ff fa69 	bl	80086b0 <_ZN5RFM697setModeE11TRFM69_MODE>
		printf("StandBy Mode\r\n");
 80091de:	4820      	ldr	r0, [pc, #128]	; (8009260 <_ZN5RFM695shellEc+0x314>)
 80091e0:	f002 f9c6 	bl	800b570 <puts>
		break;
 80091e4:	e018      	b.n	8009218 <_ZN5RFM695shellEc+0x2cc>
	case 'S':
		setMode(modeSYNTH);
 80091e6:	2002      	movs	r0, #2
 80091e8:	f7ff fa62 	bl	80086b0 <_ZN5RFM697setModeE11TRFM69_MODE>
		printf("SYNTH Mode\r\n");
 80091ec:	481d      	ldr	r0, [pc, #116]	; (8009264 <_ZN5RFM695shellEc+0x318>)
 80091ee:	f002 f9bf 	bl	800b570 <puts>
		break;
 80091f2:	e011      	b.n	8009218 <_ZN5RFM695shellEc+0x2cc>
	case 'k':
		mShowRecFrame = !mShowRecFrame;
 80091f4:	4b1c      	ldr	r3, [pc, #112]	; (8009268 <_ZN5RFM695shellEc+0x31c>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	f083 0301 	eor.w	r3, r3, #1
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	4b1a      	ldr	r3, [pc, #104]	; (8009268 <_ZN5RFM695shellEc+0x31c>)
 8009200:	701a      	strb	r2, [r3, #0]
		printf("mShowRecFrame=%u\r\n", mShowRecFrame);
 8009202:	4b19      	ldr	r3, [pc, #100]	; (8009268 <_ZN5RFM695shellEc+0x31c>)
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	4619      	mov	r1, r3
 8009208:	4818      	ldr	r0, [pc, #96]	; (800926c <_ZN5RFM695shellEc+0x320>)
 800920a:	f002 f929 	bl	800b460 <iprintf>
		break;
 800920e:	e003      	b.n	8009218 <_ZN5RFM695shellEc+0x2cc>

	default:
		printf( //
 8009210:	4817      	ldr	r0, [pc, #92]	; (8009270 <_ZN5RFM695shellEc+0x324>)
 8009212:	f002 f925 	bl	800b460 <iprintf>
						"l - read RSSI\r\n"
						"Y - StandBy Mode\r\n"
						"S - SYNTH Mode\r\n"
						"f - show freq\r\n"
						"k - show recFrames");
		break;
 8009216:	bf00      	nop
	}
	return false;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	0800ccb4 	.word	0x0800ccb4
 8009228:	0800ccc4 	.word	0x0800ccc4
 800922c:	0800ccdc 	.word	0x0800ccdc
 8009230:	20000264 	.word	0x20000264
 8009234:	0800ccf0 	.word	0x0800ccf0
 8009238:	20000265 	.word	0x20000265
 800923c:	0800ccfc 	.word	0x0800ccfc
 8009240:	0800cd08 	.word	0x0800cd08
 8009244:	0800cd18 	.word	0x0800cd18
 8009248:	0800cd30 	.word	0x0800cd30
 800924c:	0800cd48 	.word	0x0800cd48
 8009250:	0800cd68 	.word	0x0800cd68
 8009254:	0800cd7c 	.word	0x0800cd7c
 8009258:	0800cd88 	.word	0x0800cd88
 800925c:	0800cd98 	.word	0x0800cd98
 8009260:	0800cda4 	.word	0x0800cda4
 8009264:	0800cdb4 	.word	0x0800cdb4
 8009268:	200002ba 	.word	0x200002ba
 800926c:	0800cdc0 	.word	0x0800cdc0
 8009270:	0800cdd4 	.word	0x0800cdd4

08009274 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009278:	2200      	movs	r2, #0
 800927a:	4912      	ldr	r1, [pc, #72]	; (80092c4 <MX_USB_DEVICE_Init+0x50>)
 800927c:	4812      	ldr	r0, [pc, #72]	; (80092c8 <MX_USB_DEVICE_Init+0x54>)
 800927e:	f7fd fea2 	bl	8006fc6 <USBD_Init>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009288:	f7f7 fd9a 	bl	8000dc0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800928c:	490f      	ldr	r1, [pc, #60]	; (80092cc <MX_USB_DEVICE_Init+0x58>)
 800928e:	480e      	ldr	r0, [pc, #56]	; (80092c8 <MX_USB_DEVICE_Init+0x54>)
 8009290:	f7fd fec4 	bl	800701c <USBD_RegisterClass>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800929a:	f7f7 fd91 	bl	8000dc0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800929e:	490c      	ldr	r1, [pc, #48]	; (80092d0 <MX_USB_DEVICE_Init+0x5c>)
 80092a0:	4809      	ldr	r0, [pc, #36]	; (80092c8 <MX_USB_DEVICE_Init+0x54>)
 80092a2:	f7fd fdf5 	bl	8006e90 <USBD_CDC_RegisterInterface>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d001      	beq.n	80092b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80092ac:	f7f7 fd88 	bl	8000dc0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80092b0:	4805      	ldr	r0, [pc, #20]	; (80092c8 <MX_USB_DEVICE_Init+0x54>)
 80092b2:	f7fd fecc 	bl	800704e <USBD_Start>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80092bc:	f7f7 fd80 	bl	8000dc0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80092c0:	bf00      	nop
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	2000012c 	.word	0x2000012c
 80092c8:	200025f4 	.word	0x200025f4
 80092cc:	20000018 	.word	0x20000018
 80092d0:	2000011c 	.word	0x2000011c

080092d4 <CDC_IsTransmiterRdy>:

__weak void CDC_UserOnReciveData(uint8_t* Buf, uint32_t Len){

}

uint8_t CDC_IsTransmiterRdy(){
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *) hUsbDeviceFS.pClassData;
 80092da:	4b08      	ldr	r3, [pc, #32]	; (80092fc <CDC_IsTransmiterRdy+0x28>)
 80092dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e0:	607b      	str	r3, [r7, #4]
	return (hcdc->TxState == 0);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	bf0c      	ite	eq
 80092ec:	2301      	moveq	r3, #1
 80092ee:	2300      	movne	r3, #0
 80092f0:	b2db      	uxtb	r3, r3
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bc80      	pop	{r7}
 80092fa:	4770      	bx	lr
 80092fc:	200025f4 	.word	0x200025f4

08009300 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009304:	2200      	movs	r2, #0
 8009306:	4905      	ldr	r1, [pc, #20]	; (800931c <CDC_Init_FS+0x1c>)
 8009308:	4805      	ldr	r0, [pc, #20]	; (8009320 <CDC_Init_FS+0x20>)
 800930a:	f7fd fdd7 	bl	8006ebc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800930e:	4905      	ldr	r1, [pc, #20]	; (8009324 <CDC_Init_FS+0x24>)
 8009310:	4803      	ldr	r0, [pc, #12]	; (8009320 <CDC_Init_FS+0x20>)
 8009312:	f7fd fdec 	bl	8006eee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009316:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009318:	4618      	mov	r0, r3
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20002ca0 	.word	0x20002ca0
 8009320:	200025f4 	.word	0x200025f4
 8009324:	200028b8 	.word	0x200028b8

08009328 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009328:	b480      	push	{r7}
 800932a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800932c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800932e:	4618      	mov	r0, r3
 8009330:	46bd      	mov	sp, r7
 8009332:	bc80      	pop	{r7}
 8009334:	4770      	bx	lr
	...

08009338 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	4603      	mov	r3, r0
 8009340:	6039      	str	r1, [r7, #0]
 8009342:	71fb      	strb	r3, [r7, #7]
 8009344:	4613      	mov	r3, r2
 8009346:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	2b23      	cmp	r3, #35	; 0x23
 800934c:	d863      	bhi.n	8009416 <CDC_Control_FS+0xde>
 800934e:	a201      	add	r2, pc, #4	; (adr r2, 8009354 <CDC_Control_FS+0x1c>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	08009417 	.word	0x08009417
 8009358:	08009417 	.word	0x08009417
 800935c:	08009417 	.word	0x08009417
 8009360:	08009417 	.word	0x08009417
 8009364:	08009417 	.word	0x08009417
 8009368:	08009417 	.word	0x08009417
 800936c:	08009417 	.word	0x08009417
 8009370:	08009417 	.word	0x08009417
 8009374:	08009417 	.word	0x08009417
 8009378:	08009417 	.word	0x08009417
 800937c:	08009417 	.word	0x08009417
 8009380:	08009417 	.word	0x08009417
 8009384:	08009417 	.word	0x08009417
 8009388:	08009417 	.word	0x08009417
 800938c:	08009417 	.word	0x08009417
 8009390:	08009417 	.word	0x08009417
 8009394:	08009417 	.word	0x08009417
 8009398:	08009417 	.word	0x08009417
 800939c:	08009417 	.word	0x08009417
 80093a0:	08009417 	.word	0x08009417
 80093a4:	08009417 	.word	0x08009417
 80093a8:	08009417 	.word	0x08009417
 80093ac:	08009417 	.word	0x08009417
 80093b0:	08009417 	.word	0x08009417
 80093b4:	08009417 	.word	0x08009417
 80093b8:	08009417 	.word	0x08009417
 80093bc:	08009417 	.word	0x08009417
 80093c0:	08009417 	.word	0x08009417
 80093c4:	08009417 	.word	0x08009417
 80093c8:	08009417 	.word	0x08009417
 80093cc:	08009417 	.word	0x08009417
 80093d0:	08009417 	.word	0x08009417
 80093d4:	08009417 	.word	0x08009417
 80093d8:	080093e5 	.word	0x080093e5
 80093dc:	08009417 	.word	0x08009417
 80093e0:	08009417 	.word	0x08009417
    case CDC_SET_LINE_CODING:

    break;

    case CDC_GET_LINE_CODING:{
		LCStruct *pLC = (LCStruct*) pbuf;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	60fb      	str	r3, [r7, #12]
		pLC->dwDTERate = 115200;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	701a      	strb	r2, [r3, #0]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f062 023d 	orn	r2, r2, #61	; 0x3d
 80093f4:	705a      	strb	r2, [r3, #1]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f042 0201 	orr.w	r2, r2, #1
 80093fc:	709a      	strb	r2, [r3, #2]
 80093fe:	2200      	movs	r2, #0
 8009400:	70da      	strb	r2, [r3, #3]
		pLC->bDataBits = 8;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2208      	movs	r2, #8
 8009406:	719a      	strb	r2, [r3, #6]
		pLC->bParityType = 0;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2200      	movs	r2, #0
 800940c:	715a      	strb	r2, [r3, #5]
		pLC->bCharFormat = 0;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	711a      	strb	r2, [r3, #4]
    }
    break;
 8009414:	e000      	b.n	8009418 <CDC_Control_FS+0xe0>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009416:	bf00      	nop
  }

  return (USBD_OK);
 8009418:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800941a:	4618      	mov	r0, r3
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	bc80      	pop	{r7}
 8009422:	4770      	bx	lr

08009424 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_UserOnReciveData(Buf,*Len);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4619      	mov	r1, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f001 fe65 	bl	800b104 <CDC_UserOnReciveData>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800943a:	6879      	ldr	r1, [r7, #4]
 800943c:	4805      	ldr	r0, [pc, #20]	; (8009454 <CDC_Receive_FS+0x30>)
 800943e:	f7fd fd56 	bl	8006eee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009442:	4804      	ldr	r0, [pc, #16]	; (8009454 <CDC_Receive_FS+0x30>)
 8009444:	f7fd fd95 	bl	8006f72 <USBD_CDC_ReceivePacket>



  return (USBD_OK);
 8009448:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800944a:	4618      	mov	r0, r3
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	200025f4 	.word	0x200025f4

08009458 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	460b      	mov	r3, r1
 8009462:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009468:	4b0d      	ldr	r3, [pc, #52]	; (80094a0 <CDC_Transmit_FS+0x48>)
 800946a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800946e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800947a:	2301      	movs	r3, #1
 800947c:	e00b      	b.n	8009496 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800947e:	887b      	ldrh	r3, [r7, #2]
 8009480:	461a      	mov	r2, r3
 8009482:	6879      	ldr	r1, [r7, #4]
 8009484:	4806      	ldr	r0, [pc, #24]	; (80094a0 <CDC_Transmit_FS+0x48>)
 8009486:	f7fd fd19 	bl	8006ebc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800948a:	4805      	ldr	r0, [pc, #20]	; (80094a0 <CDC_Transmit_FS+0x48>)
 800948c:	f7fd fd42 	bl	8006f14 <USBD_CDC_TransmitPacket>
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009494:	7bfb      	ldrb	r3, [r7, #15]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	200025f4 	.word	0x200025f4

080094a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	4603      	mov	r3, r0
 80094ac:	6039      	str	r1, [r7, #0]
 80094ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	2212      	movs	r2, #18
 80094b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094b6:	4b03      	ldr	r3, [pc, #12]	; (80094c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	bc80      	pop	{r7}
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	20000148 	.word	0x20000148

080094c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	6039      	str	r1, [r7, #0]
 80094d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	2204      	movs	r2, #4
 80094d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094da:	4b03      	ldr	r3, [pc, #12]	; (80094e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80094dc:	4618      	mov	r0, r3
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bc80      	pop	{r7}
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	2000015c 	.word	0x2000015c

080094ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	4603      	mov	r3, r0
 80094f4:	6039      	str	r1, [r7, #0]
 80094f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094f8:	79fb      	ldrb	r3, [r7, #7]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d105      	bne.n	800950a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	4907      	ldr	r1, [pc, #28]	; (8009520 <USBD_FS_ProductStrDescriptor+0x34>)
 8009502:	4808      	ldr	r0, [pc, #32]	; (8009524 <USBD_FS_ProductStrDescriptor+0x38>)
 8009504:	f7fe fd0f 	bl	8007f26 <USBD_GetString>
 8009508:	e004      	b.n	8009514 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	4904      	ldr	r1, [pc, #16]	; (8009520 <USBD_FS_ProductStrDescriptor+0x34>)
 800950e:	4805      	ldr	r0, [pc, #20]	; (8009524 <USBD_FS_ProductStrDescriptor+0x38>)
 8009510:	f7fe fd09 	bl	8007f26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009514:	4b02      	ldr	r3, [pc, #8]	; (8009520 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	20003088 	.word	0x20003088
 8009524:	0800cea8 	.word	0x0800cea8

08009528 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	4603      	mov	r3, r0
 8009530:	6039      	str	r1, [r7, #0]
 8009532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009534:	683a      	ldr	r2, [r7, #0]
 8009536:	4904      	ldr	r1, [pc, #16]	; (8009548 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009538:	4804      	ldr	r0, [pc, #16]	; (800954c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800953a:	f7fe fcf4 	bl	8007f26 <USBD_GetString>
  return USBD_StrDesc;
 800953e:	4b02      	ldr	r3, [pc, #8]	; (8009548 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	20003088 	.word	0x20003088
 800954c:	0800ceb4 	.word	0x0800ceb4

08009550 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	4603      	mov	r3, r0
 8009558:	6039      	str	r1, [r7, #0]
 800955a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	221a      	movs	r2, #26
 8009560:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009562:	f000 f843 	bl	80095ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009566:	4b02      	ldr	r3, [pc, #8]	; (8009570 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009568:	4618      	mov	r0, r3
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	20000160 	.word	0x20000160

08009574 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	4603      	mov	r3, r0
 800957c:	6039      	str	r1, [r7, #0]
 800957e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009580:	79fb      	ldrb	r3, [r7, #7]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d105      	bne.n	8009592 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	4907      	ldr	r1, [pc, #28]	; (80095a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800958a:	4808      	ldr	r0, [pc, #32]	; (80095ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800958c:	f7fe fccb 	bl	8007f26 <USBD_GetString>
 8009590:	e004      	b.n	800959c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	4904      	ldr	r1, [pc, #16]	; (80095a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009596:	4805      	ldr	r0, [pc, #20]	; (80095ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8009598:	f7fe fcc5 	bl	8007f26 <USBD_GetString>
  }
  return USBD_StrDesc;
 800959c:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20003088 	.word	0x20003088
 80095ac:	0800cebc 	.word	0x0800cebc

080095b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	6039      	str	r1, [r7, #0]
 80095ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d105      	bne.n	80095ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	4907      	ldr	r1, [pc, #28]	; (80095e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095c6:	4808      	ldr	r0, [pc, #32]	; (80095e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095c8:	f7fe fcad 	bl	8007f26 <USBD_GetString>
 80095cc:	e004      	b.n	80095d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	4904      	ldr	r1, [pc, #16]	; (80095e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095d2:	4805      	ldr	r0, [pc, #20]	; (80095e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095d4:	f7fe fca7 	bl	8007f26 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095d8:	4b02      	ldr	r3, [pc, #8]	; (80095e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20003088 	.word	0x20003088
 80095e8:	0800cec8 	.word	0x0800cec8

080095ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80095f2:	4b0f      	ldr	r3, [pc, #60]	; (8009630 <Get_SerialNum+0x44>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095f8:	4b0e      	ldr	r3, [pc, #56]	; (8009634 <Get_SerialNum+0x48>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095fe:	4b0e      	ldr	r3, [pc, #56]	; (8009638 <Get_SerialNum+0x4c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4413      	add	r3, r2
 800960a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d009      	beq.n	8009626 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009612:	2208      	movs	r2, #8
 8009614:	4909      	ldr	r1, [pc, #36]	; (800963c <Get_SerialNum+0x50>)
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f000 f814 	bl	8009644 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800961c:	2204      	movs	r2, #4
 800961e:	4908      	ldr	r1, [pc, #32]	; (8009640 <Get_SerialNum+0x54>)
 8009620:	68b8      	ldr	r0, [r7, #8]
 8009622:	f000 f80f 	bl	8009644 <IntToUnicode>
  }
}
 8009626:	bf00      	nop
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	1ffff7e8 	.word	0x1ffff7e8
 8009634:	1ffff7ec 	.word	0x1ffff7ec
 8009638:	1ffff7f0 	.word	0x1ffff7f0
 800963c:	20000162 	.word	0x20000162
 8009640:	20000172 	.word	0x20000172

08009644 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009644:	b480      	push	{r7}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	4613      	mov	r3, r2
 8009650:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009656:	2300      	movs	r3, #0
 8009658:	75fb      	strb	r3, [r7, #23]
 800965a:	e027      	b.n	80096ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	0f1b      	lsrs	r3, r3, #28
 8009660:	2b09      	cmp	r3, #9
 8009662:	d80b      	bhi.n	800967c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	0f1b      	lsrs	r3, r3, #28
 8009668:	b2da      	uxtb	r2, r3
 800966a:	7dfb      	ldrb	r3, [r7, #23]
 800966c:	005b      	lsls	r3, r3, #1
 800966e:	4619      	mov	r1, r3
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	440b      	add	r3, r1
 8009674:	3230      	adds	r2, #48	; 0x30
 8009676:	b2d2      	uxtb	r2, r2
 8009678:	701a      	strb	r2, [r3, #0]
 800967a:	e00a      	b.n	8009692 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	0f1b      	lsrs	r3, r3, #28
 8009680:	b2da      	uxtb	r2, r3
 8009682:	7dfb      	ldrb	r3, [r7, #23]
 8009684:	005b      	lsls	r3, r3, #1
 8009686:	4619      	mov	r1, r3
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	440b      	add	r3, r1
 800968c:	3237      	adds	r2, #55	; 0x37
 800968e:	b2d2      	uxtb	r2, r2
 8009690:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	011b      	lsls	r3, r3, #4
 8009696:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009698:	7dfb      	ldrb	r3, [r7, #23]
 800969a:	005b      	lsls	r3, r3, #1
 800969c:	3301      	adds	r3, #1
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	4413      	add	r3, r2
 80096a2:	2200      	movs	r2, #0
 80096a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096a6:	7dfb      	ldrb	r3, [r7, #23]
 80096a8:	3301      	adds	r3, #1
 80096aa:	75fb      	strb	r3, [r7, #23]
 80096ac:	7dfa      	ldrb	r2, [r7, #23]
 80096ae:	79fb      	ldrb	r3, [r7, #7]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d3d3      	bcc.n	800965c <IntToUnicode+0x18>
  }
}
 80096b4:	bf00      	nop
 80096b6:	371c      	adds	r7, #28
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bc80      	pop	{r7}
 80096bc:	4770      	bx	lr
	...

080096c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a0d      	ldr	r2, [pc, #52]	; (8009704 <HAL_PCD_MspInit+0x44>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d113      	bne.n	80096fa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80096d2:	4b0d      	ldr	r3, [pc, #52]	; (8009708 <HAL_PCD_MspInit+0x48>)
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	4a0c      	ldr	r2, [pc, #48]	; (8009708 <HAL_PCD_MspInit+0x48>)
 80096d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80096dc:	61d3      	str	r3, [r2, #28]
 80096de:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <HAL_PCD_MspInit+0x48>)
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80096ea:	2200      	movs	r2, #0
 80096ec:	2100      	movs	r1, #0
 80096ee:	2014      	movs	r0, #20
 80096f0:	f7f7 fec1 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80096f4:	2014      	movs	r0, #20
 80096f6:	f7f7 feda 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80096fa:	bf00      	nop
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	40005c00 	.word	0x40005c00
 8009708:	40021000 	.word	0x40021000

0800970c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009720:	4619      	mov	r1, r3
 8009722:	4610      	mov	r0, r2
 8009724:	f7fd fcdb 	bl	80070de <USBD_LL_SetupStage>
}
 8009728:	bf00      	nop
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	460b      	mov	r3, r1
 800973a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009742:	78fa      	ldrb	r2, [r7, #3]
 8009744:	6879      	ldr	r1, [r7, #4]
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	00db      	lsls	r3, r3, #3
 800974e:	440b      	add	r3, r1
 8009750:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	78fb      	ldrb	r3, [r7, #3]
 8009758:	4619      	mov	r1, r3
 800975a:	f7fd fd0b 	bl	8007174 <USBD_LL_DataOutStage>
}
 800975e:	bf00      	nop
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	460b      	mov	r3, r1
 8009770:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009778:	78fa      	ldrb	r2, [r7, #3]
 800977a:	6879      	ldr	r1, [r7, #4]
 800977c:	4613      	mov	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4413      	add	r3, r2
 8009782:	00db      	lsls	r3, r3, #3
 8009784:	440b      	add	r3, r1
 8009786:	333c      	adds	r3, #60	; 0x3c
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	78fb      	ldrb	r3, [r7, #3]
 800978c:	4619      	mov	r1, r3
 800978e:	f7fd fd62 	bl	8007256 <USBD_LL_DataInStage>
}
 8009792:	bf00      	nop
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fd fe72 	bl	8007492 <USBD_LL_SOF>
}
 80097ae:	bf00      	nop
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097be:	2301      	movs	r3, #1
 80097c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d001      	beq.n	80097ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80097ca:	f7f7 faf9 	bl	8000dc0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80097d4:	7bfa      	ldrb	r2, [r7, #15]
 80097d6:	4611      	mov	r1, r2
 80097d8:	4618      	mov	r0, r3
 80097da:	f7fd fe22 	bl	8007422 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7fd fddb 	bl	80073a0 <USBD_LL_Reset>
}
 80097ea:	bf00      	nop
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
	...

080097f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009802:	4618      	mov	r0, r3
 8009804:	f7fd fe1c 	bl	8007440 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d005      	beq.n	800981c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009810:	4b04      	ldr	r3, [pc, #16]	; (8009824 <HAL_PCD_SuspendCallback+0x30>)
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	4a03      	ldr	r2, [pc, #12]	; (8009824 <HAL_PCD_SuspendCallback+0x30>)
 8009816:	f043 0306 	orr.w	r3, r3, #6
 800981a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800981c:	bf00      	nop
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	e000ed00 	.word	0xe000ed00

08009828 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009836:	4618      	mov	r0, r3
 8009838:	f7fd fe16 	bl	8007468 <USBD_LL_Resume>
}
 800983c:	bf00      	nop
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800984c:	4a28      	ldr	r2, [pc, #160]	; (80098f0 <USBD_LL_Init+0xac>)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a26      	ldr	r2, [pc, #152]	; (80098f0 <USBD_LL_Init+0xac>)
 8009858:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800985c:	4b24      	ldr	r3, [pc, #144]	; (80098f0 <USBD_LL_Init+0xac>)
 800985e:	4a25      	ldr	r2, [pc, #148]	; (80098f4 <USBD_LL_Init+0xb0>)
 8009860:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009862:	4b23      	ldr	r3, [pc, #140]	; (80098f0 <USBD_LL_Init+0xac>)
 8009864:	2208      	movs	r2, #8
 8009866:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009868:	4b21      	ldr	r3, [pc, #132]	; (80098f0 <USBD_LL_Init+0xac>)
 800986a:	2202      	movs	r2, #2
 800986c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800986e:	4b20      	ldr	r3, [pc, #128]	; (80098f0 <USBD_LL_Init+0xac>)
 8009870:	2200      	movs	r2, #0
 8009872:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009874:	4b1e      	ldr	r3, [pc, #120]	; (80098f0 <USBD_LL_Init+0xac>)
 8009876:	2200      	movs	r2, #0
 8009878:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800987a:	4b1d      	ldr	r3, [pc, #116]	; (80098f0 <USBD_LL_Init+0xac>)
 800987c:	2200      	movs	r2, #0
 800987e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009880:	481b      	ldr	r0, [pc, #108]	; (80098f0 <USBD_LL_Init+0xac>)
 8009882:	f7f8 f837 	bl	80018f4 <HAL_PCD_Init>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d001      	beq.n	8009890 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800988c:	f7f7 fa98 	bl	8000dc0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009896:	2318      	movs	r3, #24
 8009898:	2200      	movs	r2, #0
 800989a:	2100      	movs	r1, #0
 800989c:	f7f9 fb6b 	bl	8002f76 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098a6:	2358      	movs	r3, #88	; 0x58
 80098a8:	2200      	movs	r2, #0
 80098aa:	2180      	movs	r1, #128	; 0x80
 80098ac:	f7f9 fb63 	bl	8002f76 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098b6:	23c0      	movs	r3, #192	; 0xc0
 80098b8:	2200      	movs	r2, #0
 80098ba:	2181      	movs	r1, #129	; 0x81
 80098bc:	f7f9 fb5b 	bl	8002f76 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80098ca:	2200      	movs	r2, #0
 80098cc:	2101      	movs	r1, #1
 80098ce:	f7f9 fb52 	bl	8002f76 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098dc:	2200      	movs	r2, #0
 80098de:	2182      	movs	r1, #130	; 0x82
 80098e0:	f7f9 fb49 	bl	8002f76 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	20003288 	.word	0x20003288
 80098f4:	40005c00 	.word	0x40005c00

080098f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009900:	2300      	movs	r3, #0
 8009902:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800990e:	4618      	mov	r0, r3
 8009910:	f7f8 f8fb 	bl	8001b0a <HAL_PCD_Start>
 8009914:	4603      	mov	r3, r0
 8009916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	4618      	mov	r0, r3
 800991c:	f000 f94e 	bl	8009bbc <USBD_Get_USB_Status>
 8009920:	4603      	mov	r3, r0
 8009922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009924:	7bbb      	ldrb	r3, [r7, #14]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b084      	sub	sp, #16
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	4608      	mov	r0, r1
 8009938:	4611      	mov	r1, r2
 800993a:	461a      	mov	r2, r3
 800993c:	4603      	mov	r3, r0
 800993e:	70fb      	strb	r3, [r7, #3]
 8009940:	460b      	mov	r3, r1
 8009942:	70bb      	strb	r3, [r7, #2]
 8009944:	4613      	mov	r3, r2
 8009946:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800994c:	2300      	movs	r3, #0
 800994e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009956:	78bb      	ldrb	r3, [r7, #2]
 8009958:	883a      	ldrh	r2, [r7, #0]
 800995a:	78f9      	ldrb	r1, [r7, #3]
 800995c:	f7f8 fa75 	bl	8001e4a <HAL_PCD_EP_Open>
 8009960:	4603      	mov	r3, r0
 8009962:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009964:	7bfb      	ldrb	r3, [r7, #15]
 8009966:	4618      	mov	r0, r3
 8009968:	f000 f928 	bl	8009bbc <USBD_Get_USB_Status>
 800996c:	4603      	mov	r3, r0
 800996e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009970:	7bbb      	ldrb	r3, [r7, #14]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	460b      	mov	r3, r1
 8009984:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009994:	78fa      	ldrb	r2, [r7, #3]
 8009996:	4611      	mov	r1, r2
 8009998:	4618      	mov	r0, r3
 800999a:	f7f8 fabc 	bl	8001f16 <HAL_PCD_EP_Close>
 800999e:	4603      	mov	r3, r0
 80099a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 f909 	bl	8009bbc <USBD_Get_USB_Status>
 80099aa:	4603      	mov	r3, r0
 80099ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	460b      	mov	r3, r1
 80099c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099d2:	78fa      	ldrb	r2, [r7, #3]
 80099d4:	4611      	mov	r1, r2
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7f8 fb7c 	bl	80020d4 <HAL_PCD_EP_SetStall>
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 f8ea 	bl	8009bbc <USBD_Get_USB_Status>
 80099e8:	4603      	mov	r3, r0
 80099ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b084      	sub	sp, #16
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	460b      	mov	r3, r1
 8009a00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a10:	78fa      	ldrb	r2, [r7, #3]
 8009a12:	4611      	mov	r1, r2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7f8 fbbd 	bl	8002194 <HAL_PCD_EP_ClrStall>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 f8cb 	bl	8009bbc <USBD_Get_USB_Status>
 8009a26:	4603      	mov	r3, r0
 8009a28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	da0c      	bge.n	8009a6a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a56:	68f9      	ldr	r1, [r7, #12]
 8009a58:	1c5a      	adds	r2, r3, #1
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	4413      	add	r3, r2
 8009a60:	00db      	lsls	r3, r3, #3
 8009a62:	440b      	add	r3, r1
 8009a64:	3302      	adds	r3, #2
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	e00b      	b.n	8009a82 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a6a:	78fb      	ldrb	r3, [r7, #3]
 8009a6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a70:	68f9      	ldr	r1, [r7, #12]
 8009a72:	4613      	mov	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	00db      	lsls	r3, r3, #3
 8009a7a:	440b      	add	r3, r1
 8009a7c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009a80:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bc80      	pop	{r7}
 8009a8a:	4770      	bx	lr

08009a8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	460b      	mov	r3, r1
 8009a96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009aa6:	78fa      	ldrb	r2, [r7, #3]
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7f8 f9a8 	bl	8001e00 <HAL_PCD_SetAddress>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 f880 	bl	8009bbc <USBD_Get_USB_Status>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b086      	sub	sp, #24
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	72fb      	strb	r3, [r7, #11]
 8009ada:	4613      	mov	r3, r2
 8009adc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009aec:	893b      	ldrh	r3, [r7, #8]
 8009aee:	7af9      	ldrb	r1, [r7, #11]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	f7f8 faac 	bl	800204e <HAL_PCD_EP_Transmit>
 8009af6:	4603      	mov	r3, r0
 8009af8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009afa:	7dfb      	ldrb	r3, [r7, #23]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 f85d 	bl	8009bbc <USBD_Get_USB_Status>
 8009b02:	4603      	mov	r3, r0
 8009b04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b06:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3718      	adds	r7, #24
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	607a      	str	r2, [r7, #4]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	72fb      	strb	r3, [r7, #11]
 8009b20:	4613      	mov	r3, r2
 8009b22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b32:	893b      	ldrh	r3, [r7, #8]
 8009b34:	7af9      	ldrb	r1, [r7, #11]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	f7f8 fa35 	bl	8001fa6 <HAL_PCD_EP_Receive>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b40:	7dfb      	ldrb	r3, [r7, #23]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 f83a 	bl	8009bbc <USBD_Get_USB_Status>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b082      	sub	sp, #8
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	460b      	mov	r3, r1
 8009b60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b68:	78fa      	ldrb	r2, [r7, #3]
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7f8 fa57 	bl	8002020 <HAL_PCD_EP_GetRxCount>
 8009b72:	4603      	mov	r3, r0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b84:	4b02      	ldr	r3, [pc, #8]	; (8009b90 <USBD_static_malloc+0x14>)
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bc80      	pop	{r7}
 8009b8e:	4770      	bx	lr
 8009b90:	20000334 	.word	0x20000334

08009b94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]

}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bc80      	pop	{r7}
 8009ba4:	4770      	bx	lr

08009ba6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b083      	sub	sp, #12
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	460b      	mov	r3, r1
 8009bb0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009bb2:	bf00      	nop
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bc80      	pop	{r7}
 8009bba:	4770      	bx	lr

08009bbc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bca:	79fb      	ldrb	r3, [r7, #7]
 8009bcc:	2b03      	cmp	r3, #3
 8009bce:	d817      	bhi.n	8009c00 <USBD_Get_USB_Status+0x44>
 8009bd0:	a201      	add	r2, pc, #4	; (adr r2, 8009bd8 <USBD_Get_USB_Status+0x1c>)
 8009bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd6:	bf00      	nop
 8009bd8:	08009be9 	.word	0x08009be9
 8009bdc:	08009bef 	.word	0x08009bef
 8009be0:	08009bf5 	.word	0x08009bf5
 8009be4:	08009bfb 	.word	0x08009bfb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	73fb      	strb	r3, [r7, #15]
    break;
 8009bec:	e00b      	b.n	8009c06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bee:	2302      	movs	r3, #2
 8009bf0:	73fb      	strb	r3, [r7, #15]
    break;
 8009bf2:	e008      	b.n	8009c06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bf8:	e005      	b.n	8009c06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009bfa:	2302      	movs	r3, #2
 8009bfc:	73fb      	strb	r3, [r7, #15]
    break;
 8009bfe:	e002      	b.n	8009c06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c00:	2302      	movs	r3, #2
 8009c02:	73fb      	strb	r3, [r7, #15]
    break;
 8009c04:	bf00      	nop
  }
  return usb_status;
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bc80      	pop	{r7}
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop

08009c14 <_ZL6getDecPKc>:

//-------------------------------------------------------------------------------------
// loadSoftVer
//-------------------------------------------------------------------------------------

static uint16_t getDec(const char *p) {
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
	char ch = *p;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	73fb      	strb	r3, [r7, #15]
	if (ch >= '0' || ch <= '9')
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	2b2f      	cmp	r3, #47	; 0x2f
 8009c26:	d802      	bhi.n	8009c2e <_ZL6getDecPKc+0x1a>
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
 8009c2a:	2b39      	cmp	r3, #57	; 0x39
 8009c2c:	d804      	bhi.n	8009c38 <_ZL6getDecPKc+0x24>
		return ch - '0';
 8009c2e:	7bfb      	ldrb	r3, [r7, #15]
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	3b30      	subs	r3, #48	; 0x30
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	e000      	b.n	8009c3a <_ZL6getDecPKc+0x26>
	else
		return 0;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3714      	adds	r7, #20
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bc80      	pop	{r7}
 8009c42:	4770      	bx	lr

08009c44 <_ZL7getInt3PKc>:

static uint16_t getInt3(const char *p) {
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
	uint16_t w = getDec(p++) * 100;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	1c5a      	adds	r2, r3, #1
 8009c50:	607a      	str	r2, [r7, #4]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7ff ffde 	bl	8009c14 <_ZL6getDecPKc>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	0092      	lsls	r2, r2, #2
 8009c5e:	4413      	add	r3, r2
 8009c60:	461a      	mov	r2, r3
 8009c62:	0091      	lsls	r1, r2, #2
 8009c64:	461a      	mov	r2, r3
 8009c66:	460b      	mov	r3, r1
 8009c68:	4413      	add	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	81fb      	strh	r3, [r7, #14]
	w += getDec(p++) * 10;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	1c5a      	adds	r2, r3, #1
 8009c72:	607a      	str	r2, [r7, #4]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7ff ffcd 	bl	8009c14 <_ZL6getDecPKc>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	4613      	mov	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	005b      	lsls	r3, r3, #1
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	89fb      	ldrh	r3, [r7, #14]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	81fb      	strh	r3, [r7, #14]
	w += getDec(p);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff ffc0 	bl	8009c14 <_ZL6getDecPKc>
 8009c94:	4603      	mov	r3, r0
 8009c96:	461a      	mov	r2, r3
 8009c98:	89fb      	ldrh	r3, [r7, #14]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	81fb      	strh	r3, [r7, #14]
	return w;
 8009c9e:	89fb      	ldrh	r3, [r7, #14]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <_ZL7getInt2PKc>:

static uint8_t getInt2(const char *p) {
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
	uint8_t w = getDec(p++) * 10;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	607a      	str	r2, [r7, #4]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7ff ffac 	bl	8009c14 <_ZL6getDecPKc>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	0092      	lsls	r2, r2, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	005b      	lsls	r3, r3, #1
 8009cc8:	73fb      	strb	r3, [r7, #15]
	w += getDec(p);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7ff ffa2 	bl	8009c14 <_ZL6getDecPKc>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	73fb      	strb	r3, [r7, #15]
	return w;
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <_Z7_strcmpPKcS0_>:
const char Tx1[] = "Date :";
const char Tx2[] = "Time :";
const char Tx3[] = "Ver.";
const char Tx4[] = "Rev.";

uint8_t _strcmp(const char *s1, const char *s2) {
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
	while (*s1 && *s2) {
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d012      	beq.n	8009d1c <_Z7_strcmpPKcS0_+0x38>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00e      	beq.n	8009d1c <_Z7_strcmpPKcS0_+0x38>
		if (*s1 != *s2)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	781a      	ldrb	r2, [r3, #0]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d001      	beq.n	8009d0e <_Z7_strcmpPKcS0_+0x2a>
			return 0;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	e007      	b.n	8009d1e <_Z7_strcmpPKcS0_+0x3a>
		s1++;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	3301      	adds	r3, #1
 8009d12:	607b      	str	r3, [r7, #4]
		s2++;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	3301      	adds	r3, #1
 8009d18:	603b      	str	r3, [r7, #0]
	while (*s1 && *s2) {
 8009d1a:	e7e8      	b.n	8009cee <_Z7_strcmpPKcS0_+0xa>
	}
	return 1;
 8009d1c:	2301      	movs	r3, #1
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	370c      	adds	r7, #12
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bc80      	pop	{r7}
 8009d26:	4770      	bx	lr

08009d28 <_Z11loadSoftVerP7VerInfoPKc>:

uint8_t loadSoftVer(VerInfo *ver, const char *mem) {
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
	if (_strcmp(Tx1, &mem[0]) && _strcmp(Tx2, &mem[16]) && _strcmp(Tx3, &mem[32]) && _strcmp(Tx4, &mem[40])) {
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	483f      	ldr	r0, [pc, #252]	; (8009e34 <_Z11loadSoftVerP7VerInfoPKc+0x10c>)
 8009d36:	f7ff ffd5 	bl	8009ce4 <_Z7_strcmpPKcS0_>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01c      	beq.n	8009d7a <_Z11loadSoftVerP7VerInfoPKc+0x52>
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	3310      	adds	r3, #16
 8009d44:	4619      	mov	r1, r3
 8009d46:	483c      	ldr	r0, [pc, #240]	; (8009e38 <_Z11loadSoftVerP7VerInfoPKc+0x110>)
 8009d48:	f7ff ffcc 	bl	8009ce4 <_Z7_strcmpPKcS0_>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d013      	beq.n	8009d7a <_Z11loadSoftVerP7VerInfoPKc+0x52>
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	3320      	adds	r3, #32
 8009d56:	4619      	mov	r1, r3
 8009d58:	4838      	ldr	r0, [pc, #224]	; (8009e3c <_Z11loadSoftVerP7VerInfoPKc+0x114>)
 8009d5a:	f7ff ffc3 	bl	8009ce4 <_Z7_strcmpPKcS0_>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00a      	beq.n	8009d7a <_Z11loadSoftVerP7VerInfoPKc+0x52>
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	3328      	adds	r3, #40	; 0x28
 8009d68:	4619      	mov	r1, r3
 8009d6a:	4835      	ldr	r0, [pc, #212]	; (8009e40 <_Z11loadSoftVerP7VerInfoPKc+0x118>)
 8009d6c:	f7ff ffba 	bl	8009ce4 <_Z7_strcmpPKcS0_>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <_Z11loadSoftVerP7VerInfoPKc+0x52>
 8009d76:	2301      	movs	r3, #1
 8009d78:	e000      	b.n	8009d7c <_Z11loadSoftVerP7VerInfoPKc+0x54>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d04f      	beq.n	8009e20 <_Z11loadSoftVerP7VerInfoPKc+0xf8>
		ver->ver = getInt3(&mem[36]);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	3324      	adds	r3, #36	; 0x24
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7ff ff5d 	bl	8009c44 <_ZL7getInt3PKc>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	801a      	strh	r2, [r3, #0]
		ver->rev = getInt3(&mem[44]);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	332c      	adds	r3, #44	; 0x2c
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff ff54 	bl	8009c44 <_ZL7getInt3PKc>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	461a      	mov	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	805a      	strh	r2, [r3, #2]
		ver->time.rk = getInt2(&mem[7]);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	3307      	adds	r3, #7
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7ff ff7d 	bl	8009ca8 <_ZL7getInt2PKc>
 8009dae:	4603      	mov	r3, r0
 8009db0:	461a      	mov	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	711a      	strb	r2, [r3, #4]
		ver->time.ms = getInt2(&mem[10]);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	330a      	adds	r3, #10
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7ff ff74 	bl	8009ca8 <_ZL7getInt2PKc>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	715a      	strb	r2, [r3, #5]
		ver->time.dz = getInt2(&mem[13]);
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	330d      	adds	r3, #13
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7ff ff6b 	bl	8009ca8 <_ZL7getInt2PKc>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	719a      	strb	r2, [r3, #6]
		ver->time.gd = getInt2(&mem[16 + 7]);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	3317      	adds	r3, #23
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7ff ff62 	bl	8009ca8 <_ZL7getInt2PKc>
 8009de4:	4603      	mov	r3, r0
 8009de6:	461a      	mov	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	71da      	strb	r2, [r3, #7]
		ver->time.mn = getInt2(&mem[16 + 10]);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	331a      	adds	r3, #26
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff ff59 	bl	8009ca8 <_ZL7getInt2PKc>
 8009df6:	4603      	mov	r3, r0
 8009df8:	461a      	mov	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	721a      	strb	r2, [r3, #8]
		ver->time.sc = getInt2(&mem[16 + 13]);
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	331d      	adds	r3, #29
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7ff ff50 	bl	8009ca8 <_ZL7getInt2PKc>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	725a      	strb	r2, [r3, #9]
		ver->time.se = 0;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	729a      	strb	r2, [r3, #10]
		ver->time.timeSource = 0;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	72da      	strb	r2, [r3, #11]
		return 1;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e005      	b.n	8009e2c <_Z11loadSoftVerP7VerInfoPKc+0x104>
	} else {
		memset(ver, 0, sizeof(VerInfo));
 8009e20:	220c      	movs	r2, #12
 8009e22:	2100      	movs	r1, #0
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f001 fb12 	bl	800b44e <memset>
		return 0;
 8009e2a:	2300      	movs	r3, #0
	}
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	0800d2a4 	.word	0x0800d2a4
 8009e38:	0800d2ac 	.word	0x0800d2ac
 8009e3c:	0800d2b4 	.word	0x0800d2b4
 8009e40:	0800d2bc 	.word	0x0800d2bc

08009e44 <_Z7setLed1h>:

//-------------------------------------------------------------------------------
//UART
//-------------------------------------------------------------------------------

void setLed1(uint8_t q) {
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	71fb      	strb	r3, [r7, #7]
	if (q)
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d006      	beq.n	8009e62 <_Z7setLed1h+0x1e>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8009e54:	2200      	movs	r2, #0
 8009e56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009e5a:	4807      	ldr	r0, [pc, #28]	; (8009e78 <_Z7setLed1h+0x34>)
 8009e5c:	f7f7 fd32 	bl	80018c4 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
}
 8009e60:	e005      	b.n	8009e6e <_Z7setLed1h+0x2a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8009e62:	2201      	movs	r2, #1
 8009e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009e68:	4803      	ldr	r0, [pc, #12]	; (8009e78 <_Z7setLed1h+0x34>)
 8009e6a:	f7f7 fd2b 	bl	80018c4 <HAL_GPIO_WritePin>
}
 8009e6e:	bf00      	nop
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	40011000 	.word	0x40011000

08009e7c <_Z7setLed2h>:

void setLed2(uint8_t q) {
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	4603      	mov	r3, r0
 8009e84:	71fb      	strb	r3, [r7, #7]
	if (q)
 8009e86:	79fb      	ldrb	r3, [r7, #7]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d006      	beq.n	8009e9a <_Z7setLed2h+0x1e>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009e92:	4807      	ldr	r0, [pc, #28]	; (8009eb0 <_Z7setLed2h+0x34>)
 8009e94:	f7f7 fd16 	bl	80018c4 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
}
 8009e98:	e005      	b.n	8009ea6 <_Z7setLed2h+0x2a>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009ea0:	4803      	ldr	r0, [pc, #12]	; (8009eb0 <_Z7setLed2h+0x34>)
 8009ea2:	f7f7 fd0f 	bl	80018c4 <HAL_GPIO_WritePin>
}
 8009ea6:	bf00      	nop
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	40011000 	.word	0x40011000

08009eb4 <_Z13setUsbConnecth>:

void setUsbConnect(uint8_t q) {
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	4603      	mov	r3, r0
 8009ebc:	71fb      	strb	r3, [r7, #7]
	if (q)
 8009ebe:	79fb      	ldrb	r3, [r7, #7]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d006      	beq.n	8009ed2 <_Z13setUsbConnecth+0x1e>
		HAL_GPIO_WritePin(USB_ON_GPIO_Port, USB_ON_Pin, GPIO_PIN_RESET);
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009eca:	4807      	ldr	r0, [pc, #28]	; (8009ee8 <_Z13setUsbConnecth+0x34>)
 8009ecc:	f7f7 fcfa 	bl	80018c4 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(USB_ON_GPIO_Port, USB_ON_Pin, GPIO_PIN_SET);
}
 8009ed0:	e005      	b.n	8009ede <_Z13setUsbConnecth+0x2a>
		HAL_GPIO_WritePin(USB_ON_GPIO_Port, USB_ON_Pin, GPIO_PIN_SET);
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009ed8:	4803      	ldr	r0, [pc, #12]	; (8009ee8 <_Z13setUsbConnecth+0x34>)
 8009eda:	f7f7 fcf3 	bl	80018c4 <HAL_GPIO_WritePin>
}
 8009ede:	bf00      	nop
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	40010c00 	.word	0x40010c00

08009eec <_ZN7DbgUart4InitEv>:
};

UartRxRec DbgUart::rxRec;
UartTxRec DbgUart::txRec;

void DbgUart::Init() {
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
	memset(&rxRec, 0, sizeof(rxRec));
 8009ef2:	2218      	movs	r2, #24
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	4825      	ldr	r0, [pc, #148]	; (8009f8c <_ZN7DbgUart4InitEv+0xa0>)
 8009ef8:	f001 faa9 	bl	800b44e <memset>
	memset(&txRec, 0, sizeof(txRec));
 8009efc:	f241 0210 	movw	r2, #4112	; 0x1010
 8009f00:	2100      	movs	r1, #0
 8009f02:	4823      	ldr	r0, [pc, #140]	; (8009f90 <_ZN7DbgUart4InitEv+0xa4>)
 8009f04:	f001 faa3 	bl	800b44e <memset>

	setvbuf(stdout, NULL, _IONBF, 0);
 8009f08:	4b22      	ldr	r3, [pc, #136]	; (8009f94 <_ZN7DbgUart4InitEv+0xa8>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6898      	ldr	r0, [r3, #8]
 8009f0e:	2300      	movs	r3, #0
 8009f10:	2202      	movs	r2, #2
 8009f12:	2100      	movs	r1, #0
 8009f14:	f001 fb34 	bl	800b580 <setvbuf>

	huart1.Instance = USART1;
 8009f18:	4b1f      	ldr	r3, [pc, #124]	; (8009f98 <_ZN7DbgUart4InitEv+0xac>)
 8009f1a:	4a20      	ldr	r2, [pc, #128]	; (8009f9c <_ZN7DbgUart4InitEv+0xb0>)
 8009f1c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8009f1e:	4b1e      	ldr	r3, [pc, #120]	; (8009f98 <_ZN7DbgUart4InitEv+0xac>)
 8009f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009f24:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009f26:	4b1c      	ldr	r3, [pc, #112]	; (8009f98 <_ZN7DbgUart4InitEv+0xac>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8009f2c:	4b1a      	ldr	r3, [pc, #104]	; (8009f98 <_ZN7DbgUart4InitEv+0xac>)
 8009f2e:	2200      	movs	r2, #0
 8009f30:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8009f32:	4b19      	ldr	r3, [pc, #100]	; (8009f98 <_ZN7DbgUart4InitEv+0xac>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8009f38:	4b17      	ldr	r3, [pc, #92]	; (8009f98 <_ZN7DbgUart4InitEv+0xac>)
 8009f3a:	220c      	movs	r2, #12
 8009f3c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f3e:	4b16      	ldr	r3, [pc, #88]	; (8009f98 <_ZN7DbgUart4InitEv+0xac>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009f44:	4b14      	ldr	r3, [pc, #80]	; (8009f98 <_ZN7DbgUart4InitEv+0xac>)
 8009f46:	2200      	movs	r2, #0
 8009f48:	61da      	str	r2, [r3, #28]

	HAL_StatusTypeDef st = HAL_UART_Init(&huart1);
 8009f4a:	4813      	ldr	r0, [pc, #76]	; (8009f98 <_ZN7DbgUart4InitEv+0xac>)
 8009f4c:	f7f9 fff4 	bl	8003f38 <HAL_UART_Init>
 8009f50:	4603      	mov	r3, r0
 8009f52:	71fb      	strb	r3, [r7, #7]
	if (st == HAL_OK) {
 8009f54:	79fb      	ldrb	r3, [r7, #7]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d113      	bne.n	8009f82 <_ZN7DbgUart4InitEv+0x96>
		HAL_UART_RegisterCallback(&huart1, HAL_UART_TX_COMPLETE_CB_ID, TxCpltCallback);
 8009f5a:	4a11      	ldr	r2, [pc, #68]	; (8009fa0 <_ZN7DbgUart4InitEv+0xb4>)
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	480e      	ldr	r0, [pc, #56]	; (8009f98 <_ZN7DbgUart4InitEv+0xac>)
 8009f60:	f7fa f844 	bl	8003fec <HAL_UART_RegisterCallback>
		HAL_UART_RegisterCallback(&huart1, HAL_UART_RX_COMPLETE_CB_ID, RxCpltCallback);
 8009f64:	4a0f      	ldr	r2, [pc, #60]	; (8009fa4 <_ZN7DbgUart4InitEv+0xb8>)
 8009f66:	2103      	movs	r1, #3
 8009f68:	480b      	ldr	r0, [pc, #44]	; (8009f98 <_ZN7DbgUart4InitEv+0xac>)
 8009f6a:	f7fa f83f 	bl	8003fec <HAL_UART_RegisterCallback>
		HAL_UART_Receive_IT(&huart1, (uint8_t*) &rxRec.buf[rxRec.head], 1);
 8009f6e:	4b07      	ldr	r3, [pc, #28]	; (8009f8c <_ZN7DbgUart4InitEv+0xa0>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3308      	adds	r3, #8
 8009f74:	4a05      	ldr	r2, [pc, #20]	; (8009f8c <_ZN7DbgUart4InitEv+0xa0>)
 8009f76:	4413      	add	r3, r2
 8009f78:	2201      	movs	r2, #1
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	4806      	ldr	r0, [pc, #24]	; (8009f98 <_ZN7DbgUart4InitEv+0xac>)
 8009f7e:	f7fa f921 	bl	80041c4 <HAL_UART_Receive_IT>
	}
}
 8009f82:	bf00      	nop
 8009f84:	3708      	adds	r7, #8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20000564 	.word	0x20000564
 8009f90:	2000057c 	.word	0x2000057c
 8009f94:	20000184 	.word	0x20000184
 8009f98:	2000252c 	.word	0x2000252c
 8009f9c:	40013800 	.word	0x40013800
 8009fa0:	0800a051 	.word	0x0800a051
 8009fa4:	08009fa9 	.word	0x08009fa9

08009fa8 <_ZN7DbgUart14RxCpltCallbackEP20__UART_HandleTypeDef>:

void DbgUart::RxCpltCallback(struct __UART_HandleTypeDef *huart) {
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
	if (++rxRec.head == sizeof(rxRec.buf)) {
 8009fb0:	4b0f      	ldr	r3, [pc, #60]	; (8009ff0 <_ZN7DbgUart14RxCpltCallbackEP20__UART_HandleTypeDef+0x48>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	4a0e      	ldr	r2, [pc, #56]	; (8009ff0 <_ZN7DbgUart14RxCpltCallbackEP20__UART_HandleTypeDef+0x48>)
 8009fb8:	6013      	str	r3, [r2, #0]
 8009fba:	4b0d      	ldr	r3, [pc, #52]	; (8009ff0 <_ZN7DbgUart14RxCpltCallbackEP20__UART_HandleTypeDef+0x48>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b10      	cmp	r3, #16
 8009fc0:	bf0c      	ite	eq
 8009fc2:	2301      	moveq	r3, #1
 8009fc4:	2300      	movne	r3, #0
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <_ZN7DbgUart14RxCpltCallbackEP20__UART_HandleTypeDef+0x2a>
		rxRec.head = 0;
 8009fcc:	4b08      	ldr	r3, [pc, #32]	; (8009ff0 <_ZN7DbgUart14RxCpltCallbackEP20__UART_HandleTypeDef+0x48>)
 8009fce:	2200      	movs	r2, #0
 8009fd0:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &rxRec.buf[rxRec.head], 1);
 8009fd2:	4b07      	ldr	r3, [pc, #28]	; (8009ff0 <_ZN7DbgUart14RxCpltCallbackEP20__UART_HandleTypeDef+0x48>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	4a05      	ldr	r2, [pc, #20]	; (8009ff0 <_ZN7DbgUart14RxCpltCallbackEP20__UART_HandleTypeDef+0x48>)
 8009fda:	4413      	add	r3, r2
 8009fdc:	2201      	movs	r2, #1
 8009fde:	4619      	mov	r1, r3
 8009fe0:	4804      	ldr	r0, [pc, #16]	; (8009ff4 <_ZN7DbgUart14RxCpltCallbackEP20__UART_HandleTypeDef+0x4c>)
 8009fe2:	f7fa f8ef 	bl	80041c4 <HAL_UART_Receive_IT>
}
 8009fe6:	bf00      	nop
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	20000564 	.word	0x20000564
 8009ff4:	2000252c 	.word	0x2000252c

08009ff8 <_ZN7DbgUart5getChEPc>:

bool DbgUart::getCh(char *ch) {
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
	if (rxRec.tail != rxRec.head) {
 800a000:	4b12      	ldr	r3, [pc, #72]	; (800a04c <_ZN7DbgUart5getChEPc+0x54>)
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	4b11      	ldr	r3, [pc, #68]	; (800a04c <_ZN7DbgUart5getChEPc+0x54>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d019      	beq.n	800a040 <_ZN7DbgUart5getChEPc+0x48>
		*ch = rxRec.buf[rxRec.tail];
 800a00c:	4b0f      	ldr	r3, [pc, #60]	; (800a04c <_ZN7DbgUart5getChEPc+0x54>)
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	4a0e      	ldr	r2, [pc, #56]	; (800a04c <_ZN7DbgUart5getChEPc+0x54>)
 800a012:	4413      	add	r3, r2
 800a014:	7a1a      	ldrb	r2, [r3, #8]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	701a      	strb	r2, [r3, #0]
		if (++rxRec.tail == sizeof(rxRec.buf)) {
 800a01a:	4b0c      	ldr	r3, [pc, #48]	; (800a04c <_ZN7DbgUart5getChEPc+0x54>)
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	3301      	adds	r3, #1
 800a020:	4a0a      	ldr	r2, [pc, #40]	; (800a04c <_ZN7DbgUart5getChEPc+0x54>)
 800a022:	6053      	str	r3, [r2, #4]
 800a024:	4b09      	ldr	r3, [pc, #36]	; (800a04c <_ZN7DbgUart5getChEPc+0x54>)
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	2b10      	cmp	r3, #16
 800a02a:	bf0c      	ite	eq
 800a02c:	2301      	moveq	r3, #1
 800a02e:	2300      	movne	r3, #0
 800a030:	b2db      	uxtb	r3, r3
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <_ZN7DbgUart5getChEPc+0x44>
			rxRec.tail = 0;
 800a036:	4b05      	ldr	r3, [pc, #20]	; (800a04c <_ZN7DbgUart5getChEPc+0x54>)
 800a038:	2200      	movs	r2, #0
 800a03a:	605a      	str	r2, [r3, #4]
		}
		return true;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e000      	b.n	800a042 <_ZN7DbgUart5getChEPc+0x4a>
	} else {
		return false;
 800a040:	2300      	movs	r3, #0
	}
}
 800a042:	4618      	mov	r0, r3
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	bc80      	pop	{r7}
 800a04a:	4770      	bx	lr
 800a04c:	20000564 	.word	0x20000564

0800a050 <_ZN7DbgUart14TxCpltCallbackEP20__UART_HandleTypeDef>:

void DbgUart::TxCpltCallback(struct __UART_HandleTypeDef *huart) {
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
	txRec.sending = false;
 800a058:	4b09      	ldr	r3, [pc, #36]	; (800a080 <_ZN7DbgUart14TxCpltCallbackEP20__UART_HandleTypeDef+0x30>)
 800a05a:	2200      	movs	r2, #0
 800a05c:	701a      	strb	r2, [r3, #0]
	txRec.tail = txRec.tailSending;
 800a05e:	4b08      	ldr	r3, [pc, #32]	; (800a080 <_ZN7DbgUart14TxCpltCallbackEP20__UART_HandleTypeDef+0x30>)
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	4a07      	ldr	r2, [pc, #28]	; (800a080 <_ZN7DbgUart14TxCpltCallbackEP20__UART_HandleTypeDef+0x30>)
 800a064:	60d3      	str	r3, [r2, #12]

	if (txRec.head != txRec.tail) {
 800a066:	4b06      	ldr	r3, [pc, #24]	; (800a080 <_ZN7DbgUart14TxCpltCallbackEP20__UART_HandleTypeDef+0x30>)
 800a068:	685a      	ldr	r2, [r3, #4]
 800a06a:	4b05      	ldr	r3, [pc, #20]	; (800a080 <_ZN7DbgUart14TxCpltCallbackEP20__UART_HandleTypeDef+0x30>)
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d001      	beq.n	800a076 <_ZN7DbgUart14TxCpltCallbackEP20__UART_HandleTypeDef+0x26>
		sendNextPart();
 800a072:	f000 f807 	bl	800a084 <_ZN7DbgUart12sendNextPartEv>
	}
}
 800a076:	bf00      	nop
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	2000057c 	.word	0x2000057c

0800a084 <_ZN7DbgUart12sendNextPartEv>:

void DbgUart::sendNextPart() {
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
	if (!txRec.sending) {
 800a08a:	4b1c      	ldr	r3, [pc, #112]	; (800a0fc <_ZN7DbgUart12sendNextPartEv+0x78>)
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	f083 0301 	eor.w	r3, r3, #1
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d02b      	beq.n	800a0f2 <_ZN7DbgUart12sendNextPartEv+0x6e>

		int sz;
		if (txRec.head > txRec.tail) {
 800a09a:	4b18      	ldr	r3, [pc, #96]	; (800a0fc <_ZN7DbgUart12sendNextPartEv+0x78>)
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	4b17      	ldr	r3, [pc, #92]	; (800a0fc <_ZN7DbgUart12sendNextPartEv+0x78>)
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	dd0a      	ble.n	800a0bc <_ZN7DbgUart12sendNextPartEv+0x38>

			//bufor nie zostal przewinięty
			txRec.tailSending = txRec.head;
 800a0a6:	4b15      	ldr	r3, [pc, #84]	; (800a0fc <_ZN7DbgUart12sendNextPartEv+0x78>)
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	4a14      	ldr	r2, [pc, #80]	; (800a0fc <_ZN7DbgUart12sendNextPartEv+0x78>)
 800a0ac:	6093      	str	r3, [r2, #8]
			sz = txRec.head - txRec.tail;
 800a0ae:	4b13      	ldr	r3, [pc, #76]	; (800a0fc <_ZN7DbgUart12sendNextPartEv+0x78>)
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	4b12      	ldr	r3, [pc, #72]	; (800a0fc <_ZN7DbgUart12sendNextPartEv+0x78>)
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	607b      	str	r3, [r7, #4]
 800a0ba:	e007      	b.n	800a0cc <_ZN7DbgUart12sendNextPartEv+0x48>
		} else {
			//bufor do końca
			sz = sizeof(txRec.buf) - txRec.tail;
 800a0bc:	4b0f      	ldr	r3, [pc, #60]	; (800a0fc <_ZN7DbgUart12sendNextPartEv+0x78>)
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800a0c4:	607b      	str	r3, [r7, #4]
			txRec.tailSending = 0;
 800a0c6:	4b0d      	ldr	r3, [pc, #52]	; (800a0fc <_ZN7DbgUart12sendNextPartEv+0x78>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	609a      	str	r2, [r3, #8]
		}
		HAL_StatusTypeDef st = HAL_UART_Transmit_IT(&huart1, (uint8_t*) &txRec.buf[txRec.tail], sz);
 800a0cc:	4b0b      	ldr	r3, [pc, #44]	; (800a0fc <_ZN7DbgUart12sendNextPartEv+0x78>)
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	3310      	adds	r3, #16
 800a0d2:	4a0a      	ldr	r2, [pc, #40]	; (800a0fc <_ZN7DbgUart12sendNextPartEv+0x78>)
 800a0d4:	4413      	add	r3, r2
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	b292      	uxth	r2, r2
 800a0da:	4619      	mov	r1, r3
 800a0dc:	4808      	ldr	r0, [pc, #32]	; (800a100 <_ZN7DbgUart12sendNextPartEv+0x7c>)
 800a0de:	f7fa f82d 	bl	800413c <HAL_UART_Transmit_IT>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	70fb      	strb	r3, [r7, #3]
		if (st == HAL_OK) {
 800a0e6:	78fb      	ldrb	r3, [r7, #3]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d102      	bne.n	800a0f2 <_ZN7DbgUart12sendNextPartEv+0x6e>
			txRec.sending = true;
 800a0ec:	4b03      	ldr	r3, [pc, #12]	; (800a0fc <_ZN7DbgUart12sendNextPartEv+0x78>)
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800a0f2:	bf00      	nop
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	2000057c 	.word	0x2000057c
 800a100:	2000252c 	.word	0x2000252c

0800a104 <_ZN7DbgUart7putChHdEc>:

bool DbgUart::putChHd(char ch) {
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	4603      	mov	r3, r0
 800a10c:	71fb      	strb	r3, [r7, #7]
	int h = txRec.head;
 800a10e:	4b13      	ldr	r3, [pc, #76]	; (800a15c <_ZN7DbgUart7putChHdEc+0x58>)
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	60fb      	str	r3, [r7, #12]
	if (++h == sizeof(txRec.buf))
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	3301      	adds	r3, #1
 800a118:	60fb      	str	r3, [r7, #12]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a120:	bf0c      	ite	eq
 800a122:	2301      	moveq	r3, #1
 800a124:	2300      	movne	r3, #0
 800a126:	b2db      	uxtb	r3, r3
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <_ZN7DbgUart7putChHdEc+0x2c>
		h = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	60fb      	str	r3, [r7, #12]
	if (h != txRec.tail) {
 800a130:	4b0a      	ldr	r3, [pc, #40]	; (800a15c <_ZN7DbgUart7putChHdEc+0x58>)
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	429a      	cmp	r2, r3
 800a138:	d00a      	beq.n	800a150 <_ZN7DbgUart7putChHdEc+0x4c>
		txRec.buf[txRec.head] = ch;
 800a13a:	4b08      	ldr	r3, [pc, #32]	; (800a15c <_ZN7DbgUart7putChHdEc+0x58>)
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	4a07      	ldr	r2, [pc, #28]	; (800a15c <_ZN7DbgUart7putChHdEc+0x58>)
 800a140:	4413      	add	r3, r2
 800a142:	79fa      	ldrb	r2, [r7, #7]
 800a144:	741a      	strb	r2, [r3, #16]
		txRec.head = h;
 800a146:	4a05      	ldr	r2, [pc, #20]	; (800a15c <_ZN7DbgUart7putChHdEc+0x58>)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6053      	str	r3, [r2, #4]
		return true;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e000      	b.n	800a152 <_ZN7DbgUart7putChHdEc+0x4e>
	} else
		return false;
 800a150:	2300      	movs	r3, #0

}
 800a152:	4618      	mov	r0, r3
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	bc80      	pop	{r7}
 800a15a:	4770      	bx	lr
 800a15c:	2000057c 	.word	0x2000057c

0800a160 <_ZN7DbgUart5writeEPKvi>:
bool DbgUart::putCh(char ch) {
	putChHd(ch);
	sendNextPart();
}

void DbgUart::write(const void *dt, int size) {
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
	char *pch = (char*) dt;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < size; i++)
 800a16e:	2300      	movs	r3, #0
 800a170:	60bb      	str	r3, [r7, #8]
 800a172:	68ba      	ldr	r2, [r7, #8]
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	429a      	cmp	r2, r3
 800a178:	da0a      	bge.n	800a190 <_ZN7DbgUart5writeEPKvi+0x30>
		putChHd(*pch++);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	60fa      	str	r2, [r7, #12]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	4618      	mov	r0, r3
 800a184:	f7ff ffbe 	bl	800a104 <_ZN7DbgUart7putChHdEc>
	for (int i = 0; i < size; i++)
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	3301      	adds	r3, #1
 800a18c:	60bb      	str	r3, [r7, #8]
 800a18e:	e7f0      	b.n	800a172 <_ZN7DbgUart5writeEPKvi+0x12>
	sendNextPart();
 800a190:	f7ff ff78 	bl	800a084 <_ZN7DbgUart12sendNextPartEv>
}
 800a194:	bf00      	nop
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <_write>:
extern "C" int __io_putchar(int ch) {
	DbgUart::putCh(ch);
	return 1;
}

extern "C" int _write(int file, char *ptr, int len) {
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
	DbgUart::write(ptr, len);
 800a1a8:	6879      	ldr	r1, [r7, #4]
 800a1aa:	68b8      	ldr	r0, [r7, #8]
 800a1ac:	f7ff ffd8 	bl	800a160 <_ZN7DbgUart5writeEPKvi>
	return len;
 800a1b0:	687b      	ldr	r3, [r7, #4]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
	...

0800a1bc <_Z8tickLed1v>:

//-------------------------------------------------------------------------------
//Shell
//-------------------------------------------------------------------------------

void tickLed1() {
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
	static uint8_t mem = 0;

	uint32_t tt = HAL_GetTick();
 800a1c2:	f7f7 f855 	bl	8001270 <HAL_GetTick>
 800a1c6:	60f8      	str	r0, [r7, #12]

	uint32_t t1 = tt % 1000;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4a13      	ldr	r2, [pc, #76]	; (800a218 <_Z8tickLed1v+0x5c>)
 800a1cc:	fba2 1203 	umull	r1, r2, r2, r3
 800a1d0:	0992      	lsrs	r2, r2, #6
 800a1d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a1d6:	fb01 f202 	mul.w	r2, r1, r2
 800a1da:	1a9b      	subs	r3, r3, r2
 800a1dc:	60bb      	str	r3, [r7, #8]
	bool q = (t1 < 100);
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2b63      	cmp	r3, #99	; 0x63
 800a1e2:	bf94      	ite	ls
 800a1e4:	2301      	movls	r3, #1
 800a1e6:	2300      	movhi	r3, #0
 800a1e8:	71fb      	strb	r3, [r7, #7]
	if (mem != q) {
 800a1ea:	79fa      	ldrb	r2, [r7, #7]
 800a1ec:	4b0b      	ldr	r3, [pc, #44]	; (800a21c <_Z8tickLed1v+0x60>)
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d00d      	beq.n	800a210 <_Z8tickLed1v+0x54>
		mem = q;
 800a1f4:	79fa      	ldrb	r2, [r7, #7]
 800a1f6:	4b09      	ldr	r3, [pc, #36]	; (800a21c <_Z8tickLed1v+0x60>)
 800a1f8:	701a      	strb	r2, [r3, #0]
		if (mem) {
 800a1fa:	4b08      	ldr	r3, [pc, #32]	; (800a21c <_Z8tickLed1v+0x60>)
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d003      	beq.n	800a20a <_Z8tickLed1v+0x4e>
			setLed1(1);
 800a202:	2001      	movs	r0, #1
 800a204:	f7ff fe1e 	bl	8009e44 <_Z7setLed1h>
		} else {
			setLed1(0);
		}
	}
}
 800a208:	e002      	b.n	800a210 <_Z8tickLed1v+0x54>
			setLed1(0);
 800a20a:	2000      	movs	r0, #0
 800a20c:	f7ff fe1a 	bl	8009e44 <_Z7setLed1h>
}
 800a210:	bf00      	nop
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	10624dd3 	.word	0x10624dd3
 800a21c:	2000158c 	.word	0x2000158c

0800a220 <_Z12setBottomLedib>:

int ledBottomMode;

void setBottomLed(int ledNr, bool state) {
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	460b      	mov	r3, r1
 800a22a:	70fb      	strb	r3, [r7, #3]
	state = !state;
 800a22c:	78fb      	ldrb	r3, [r7, #3]
 800a22e:	f083 0301 	eor.w	r3, r3, #1
 800a232:	70fb      	strb	r3, [r7, #3]
	switch (ledNr) {
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b04      	cmp	r3, #4
 800a238:	d833      	bhi.n	800a2a2 <_Z12setBottomLedib+0x82>
 800a23a:	a201      	add	r2, pc, #4	; (adr r2, 800a240 <_Z12setBottomLedib+0x20>)
 800a23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a240:	0800a255 	.word	0x0800a255
 800a244:	0800a265 	.word	0x0800a265
 800a248:	0800a273 	.word	0x0800a273
 800a24c:	0800a283 	.word	0x0800a283
 800a250:	0800a293 	.word	0x0800a293
	case 0:
		HAL_GPIO_WritePin(L_PC_GPIO_Port, L_PC_Pin, (GPIO_PinState) state);
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	461a      	mov	r2, r3
 800a258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a25c:	4813      	ldr	r0, [pc, #76]	; (800a2ac <_Z12setBottomLedib+0x8c>)
 800a25e:	f7f7 fb31 	bl	80018c4 <HAL_GPIO_WritePin>
		break;
 800a262:	e01e      	b.n	800a2a2 <_Z12setBottomLedib+0x82>
	case 1:
		HAL_GPIO_WritePin(L_CPU1_GPIO_Port, L_CPU1_Pin, (GPIO_PinState) state);
 800a264:	78fb      	ldrb	r3, [r7, #3]
 800a266:	461a      	mov	r2, r3
 800a268:	2140      	movs	r1, #64	; 0x40
 800a26a:	4810      	ldr	r0, [pc, #64]	; (800a2ac <_Z12setBottomLedib+0x8c>)
 800a26c:	f7f7 fb2a 	bl	80018c4 <HAL_GPIO_WritePin>
		break;
 800a270:	e017      	b.n	800a2a2 <_Z12setBottomLedib+0x82>
	case 2:
		HAL_GPIO_WritePin(L_CPU2_GPIO_Port, L_CPU2_Pin, (GPIO_PinState) state);
 800a272:	78fb      	ldrb	r3, [r7, #3]
 800a274:	461a      	mov	r2, r3
 800a276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a27a:	480d      	ldr	r0, [pc, #52]	; (800a2b0 <_Z12setBottomLedib+0x90>)
 800a27c:	f7f7 fb22 	bl	80018c4 <HAL_GPIO_WritePin>
		break;
 800a280:	e00f      	b.n	800a2a2 <_Z12setBottomLedib+0x82>
	case 3:
		HAL_GPIO_WritePin(L_CPU3_GPIO_Port, L_CPU3_Pin, (GPIO_PinState) state);
 800a282:	78fb      	ldrb	r3, [r7, #3]
 800a284:	461a      	mov	r2, r3
 800a286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a28a:	4809      	ldr	r0, [pc, #36]	; (800a2b0 <_Z12setBottomLedib+0x90>)
 800a28c:	f7f7 fb1a 	bl	80018c4 <HAL_GPIO_WritePin>
		break;
 800a290:	e007      	b.n	800a2a2 <_Z12setBottomLedib+0x82>
	case 4:
		HAL_GPIO_WritePin(L_CPU4_GPIO_Port, L_CPU4_Pin, (GPIO_PinState) state);
 800a292:	78fb      	ldrb	r3, [r7, #3]
 800a294:	461a      	mov	r2, r3
 800a296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a29a:	4805      	ldr	r0, [pc, #20]	; (800a2b0 <_Z12setBottomLedib+0x90>)
 800a29c:	f7f7 fb12 	bl	80018c4 <HAL_GPIO_WritePin>
		break;
 800a2a0:	bf00      	nop
	}
}
 800a2a2:	bf00      	nop
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	40011000 	.word	0x40011000
 800a2b0:	40010c00 	.word	0x40010c00

0800a2b4 <_Z11tickledSpodv>:

void tickledSpod() {
 800a2b4:	b5b0      	push	{r4, r5, r7, lr}
 800a2b6:	b08a      	sub	sp, #40	; 0x28
 800a2b8:	af00      	add	r7, sp, #0
	static int tt;
	static uint8_t ph;
	const int phTime[] = { 100, 100, 500, 500, 500, 500 };
 800a2ba:	4b72      	ldr	r3, [pc, #456]	; (800a484 <_Z11tickledSpodv+0x1d0>)
 800a2bc:	463c      	mov	r4, r7
 800a2be:	461d      	mov	r5, r3
 800a2c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a2c8:	e884 0003 	stmia.w	r4, {r0, r1}

	int t1 = HAL_GetTick();
 800a2cc:	f7f6 ffd0 	bl	8001270 <HAL_GetTick>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	61bb      	str	r3, [r7, #24]
	if (t1 - tt > phTime[ledBottomMode]) {
 800a2d4:	4b6c      	ldr	r3, [pc, #432]	; (800a488 <_Z11tickledSpodv+0x1d4>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	1ad2      	subs	r2, r2, r3
 800a2dc:	4b6b      	ldr	r3, [pc, #428]	; (800a48c <_Z11tickledSpodv+0x1d8>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a2e6:	440b      	add	r3, r1
 800a2e8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	f340 80c4 	ble.w	800a47a <_Z11tickledSpodv+0x1c6>
		tt = t1;
 800a2f2:	4a65      	ldr	r2, [pc, #404]	; (800a488 <_Z11tickledSpodv+0x1d4>)
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	6013      	str	r3, [r2, #0]

		int mxPh = 2;
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	627b      	str	r3, [r7, #36]	; 0x24
		switch (ledBottomMode) {
 800a2fc:	4b63      	ldr	r3, [pc, #396]	; (800a48c <_Z11tickledSpodv+0x1d8>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b03      	cmp	r3, #3
 800a302:	f200 80a6 	bhi.w	800a452 <_Z11tickledSpodv+0x19e>
 800a306:	a201      	add	r2, pc, #4	; (adr r2, 800a30c <_Z11tickledSpodv+0x58>)
 800a308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30c:	0800a31d 	.word	0x0800a31d
 800a310:	0800a34f 	.word	0x0800a34f
 800a314:	0800a387 	.word	0x0800a387
 800a318:	0800a3fb 	.word	0x0800a3fb
		case 0:
			//wędrujące led
			for (int i = 0; i < 5; i++) {
 800a31c:	2300      	movs	r3, #0
 800a31e:	623b      	str	r3, [r7, #32]
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	2b04      	cmp	r3, #4
 800a324:	dc10      	bgt.n	800a348 <_Z11tickledSpodv+0x94>
				setBottomLed(i, i == ph);
 800a326:	4b5a      	ldr	r3, [pc, #360]	; (800a490 <_Z11tickledSpodv+0x1dc>)
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	461a      	mov	r2, r3
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	4293      	cmp	r3, r2
 800a330:	bf0c      	ite	eq
 800a332:	2301      	moveq	r3, #1
 800a334:	2300      	movne	r3, #0
 800a336:	b2db      	uxtb	r3, r3
 800a338:	4619      	mov	r1, r3
 800a33a:	6a38      	ldr	r0, [r7, #32]
 800a33c:	f7ff ff70 	bl	800a220 <_Z12setBottomLedib>
			for (int i = 0; i < 5; i++) {
 800a340:	6a3b      	ldr	r3, [r7, #32]
 800a342:	3301      	adds	r3, #1
 800a344:	623b      	str	r3, [r7, #32]
 800a346:	e7eb      	b.n	800a320 <_Z11tickledSpodv+0x6c>
			}
			mxPh = 5;
 800a348:	2305      	movs	r3, #5
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800a34c:	e081      	b.n	800a452 <_Z11tickledSpodv+0x19e>
		case 1:
			//wędrujące led - odwortny kierunek
			for (int i = 0; i < 5; i++) {
 800a34e:	2300      	movs	r3, #0
 800a350:	61fb      	str	r3, [r7, #28]
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	2b04      	cmp	r3, #4
 800a356:	dc13      	bgt.n	800a380 <_Z11tickledSpodv+0xcc>
				setBottomLed(4 - i, i == ph);
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	f1c3 0204 	rsb	r2, r3, #4
 800a35e:	4b4c      	ldr	r3, [pc, #304]	; (800a490 <_Z11tickledSpodv+0x1dc>)
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	4619      	mov	r1, r3
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	428b      	cmp	r3, r1
 800a368:	bf0c      	ite	eq
 800a36a:	2301      	moveq	r3, #1
 800a36c:	2300      	movne	r3, #0
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	4619      	mov	r1, r3
 800a372:	4610      	mov	r0, r2
 800a374:	f7ff ff54 	bl	800a220 <_Z12setBottomLedib>
			for (int i = 0; i < 5; i++) {
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	3301      	adds	r3, #1
 800a37c:	61fb      	str	r3, [r7, #28]
 800a37e:	e7e8      	b.n	800a352 <_Z11tickledSpodv+0x9e>
			}
			mxPh = 5;
 800a380:	2305      	movs	r3, #5
 800a382:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800a384:	e065      	b.n	800a452 <_Z11tickledSpodv+0x19e>
		case 2:
			setBottomLed(0, ph == 0);
 800a386:	4b42      	ldr	r3, [pc, #264]	; (800a490 <_Z11tickledSpodv+0x1dc>)
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	bf0c      	ite	eq
 800a38e:	2301      	moveq	r3, #1
 800a390:	2300      	movne	r3, #0
 800a392:	b2db      	uxtb	r3, r3
 800a394:	4619      	mov	r1, r3
 800a396:	2000      	movs	r0, #0
 800a398:	f7ff ff42 	bl	800a220 <_Z12setBottomLedib>
			setBottomLed(1, ph == 1);
 800a39c:	4b3c      	ldr	r3, [pc, #240]	; (800a490 <_Z11tickledSpodv+0x1dc>)
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	bf0c      	ite	eq
 800a3a4:	2301      	moveq	r3, #1
 800a3a6:	2300      	movne	r3, #0
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	2001      	movs	r0, #1
 800a3ae:	f7ff ff37 	bl	800a220 <_Z12setBottomLedib>
			setBottomLed(2, ph == 2);
 800a3b2:	4b37      	ldr	r3, [pc, #220]	; (800a490 <_Z11tickledSpodv+0x1dc>)
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	bf0c      	ite	eq
 800a3ba:	2301      	moveq	r3, #1
 800a3bc:	2300      	movne	r3, #0
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	2002      	movs	r0, #2
 800a3c4:	f7ff ff2c 	bl	800a220 <_Z12setBottomLedib>
			setBottomLed(3, ph == 1);
 800a3c8:	4b31      	ldr	r3, [pc, #196]	; (800a490 <_Z11tickledSpodv+0x1dc>)
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	bf0c      	ite	eq
 800a3d0:	2301      	moveq	r3, #1
 800a3d2:	2300      	movne	r3, #0
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	2003      	movs	r0, #3
 800a3da:	f7ff ff21 	bl	800a220 <_Z12setBottomLedib>
			setBottomLed(4, ph == 0);
 800a3de:	4b2c      	ldr	r3, [pc, #176]	; (800a490 <_Z11tickledSpodv+0x1dc>)
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	bf0c      	ite	eq
 800a3e6:	2301      	moveq	r3, #1
 800a3e8:	2300      	movne	r3, #0
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	2004      	movs	r0, #4
 800a3f0:	f7ff ff16 	bl	800a220 <_Z12setBottomLedib>
			mxPh = 3;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800a3f8:	e02b      	b.n	800a452 <_Z11tickledSpodv+0x19e>
		case 3:
			setBottomLed(0, ph == 0);
 800a3fa:	4b25      	ldr	r3, [pc, #148]	; (800a490 <_Z11tickledSpodv+0x1dc>)
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	bf0c      	ite	eq
 800a402:	2301      	moveq	r3, #1
 800a404:	2300      	movne	r3, #0
 800a406:	b2db      	uxtb	r3, r3
 800a408:	4619      	mov	r1, r3
 800a40a:	2000      	movs	r0, #0
 800a40c:	f7ff ff08 	bl	800a220 <_Z12setBottomLedib>
			setBottomLed(1, 0);
 800a410:	2100      	movs	r1, #0
 800a412:	2001      	movs	r0, #1
 800a414:	f7ff ff04 	bl	800a220 <_Z12setBottomLedib>
			setBottomLed(2, ph == 1);
 800a418:	4b1d      	ldr	r3, [pc, #116]	; (800a490 <_Z11tickledSpodv+0x1dc>)
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	bf0c      	ite	eq
 800a420:	2301      	moveq	r3, #1
 800a422:	2300      	movne	r3, #0
 800a424:	b2db      	uxtb	r3, r3
 800a426:	4619      	mov	r1, r3
 800a428:	2002      	movs	r0, #2
 800a42a:	f7ff fef9 	bl	800a220 <_Z12setBottomLedib>
			setBottomLed(3, 0);
 800a42e:	2100      	movs	r1, #0
 800a430:	2003      	movs	r0, #3
 800a432:	f7ff fef5 	bl	800a220 <_Z12setBottomLedib>
			setBottomLed(4, ph == 0);
 800a436:	4b16      	ldr	r3, [pc, #88]	; (800a490 <_Z11tickledSpodv+0x1dc>)
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	bf0c      	ite	eq
 800a43e:	2301      	moveq	r3, #1
 800a440:	2300      	movne	r3, #0
 800a442:	b2db      	uxtb	r3, r3
 800a444:	4619      	mov	r1, r3
 800a446:	2004      	movs	r0, #4
 800a448:	f7ff feea 	bl	800a220 <_Z12setBottomLedib>
			mxPh = 2;
 800a44c:	2302      	movs	r3, #2
 800a44e:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800a450:	bf00      	nop
		}

		if (++ph >= mxPh)
 800a452:	4b0f      	ldr	r3, [pc, #60]	; (800a490 <_Z11tickledSpodv+0x1dc>)
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	3301      	adds	r3, #1
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	4b0d      	ldr	r3, [pc, #52]	; (800a490 <_Z11tickledSpodv+0x1dc>)
 800a45c:	701a      	strb	r2, [r3, #0]
 800a45e:	4b0c      	ldr	r3, [pc, #48]	; (800a490 <_Z11tickledSpodv+0x1dc>)
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a466:	4293      	cmp	r3, r2
 800a468:	bfd4      	ite	le
 800a46a:	2301      	movle	r3, #1
 800a46c:	2300      	movgt	r3, #0
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b00      	cmp	r3, #0
 800a472:	d002      	beq.n	800a47a <_Z11tickledSpodv+0x1c6>
			ph = 0;
 800a474:	4b06      	ldr	r3, [pc, #24]	; (800a490 <_Z11tickledSpodv+0x1dc>)
 800a476:	2200      	movs	r2, #0
 800a478:	701a      	strb	r2, [r3, #0]

	}
}
 800a47a:	bf00      	nop
 800a47c:	3728      	adds	r7, #40	; 0x28
 800a47e:	46bd      	mov	sp, r7
 800a480:	bdb0      	pop	{r4, r5, r7, pc}
 800a482:	bf00      	nop
 800a484:	0800ced8 	.word	0x0800ced8
 800a488:	20001594 	.word	0x20001594
 800a48c:	20001590 	.word	0x20001590
 800a490:	20001598 	.word	0x20001598

0800a494 <_Z11HAL_GetMickv>:

uint8_t HAL_GetMick() {
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
	int m = SysTick->VAL;
 800a49a:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <_Z11HAL_GetMickv+0x30>)
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	607b      	str	r3, [r7, #4]
	int c = SysTick->LOAD;
 800a4a0:	4b08      	ldr	r3, [pc, #32]	; (800a4c4 <_Z11HAL_GetMickv+0x30>)
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	603b      	str	r3, [r7, #0]
	return 100 * (c - m) / c;
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	2264      	movs	r2, #100	; 0x64
 800a4ae:	fb02 f203 	mul.w	r2, r2, r3
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	fb92 f3f3 	sdiv	r3, r2, r3
 800a4b8:	b2db      	uxtb	r3, r3
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	370c      	adds	r7, #12
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bc80      	pop	{r7}
 800a4c2:	4770      	bx	lr
 800a4c4:	e000e010 	.word	0xe000e010

0800a4c8 <_Z11getPrecTimePmPh>:

void getPrecTime(uint32_t *tick, uint8_t *mick) {
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
	while (1) {
		uint32_t t1 = HAL_GetTick();
 800a4d2:	f7f6 fecd 	bl	8001270 <HAL_GetTick>
 800a4d6:	60f8      	str	r0, [r7, #12]
		*mick = HAL_GetMick();
 800a4d8:	f7ff ffdc 	bl	800a494 <_Z11HAL_GetMickv>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	461a      	mov	r2, r3
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	701a      	strb	r2, [r3, #0]
		uint32_t t2 = HAL_GetTick();
 800a4e4:	f7f6 fec4 	bl	8001270 <HAL_GetTick>
 800a4e8:	60b8      	str	r0, [r7, #8]
		if (t1 == t2) {
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d1ef      	bne.n	800a4d2 <_Z11getPrecTimePmPh+0xa>
			*tick = t1;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	601a      	str	r2, [r3, #0]
			break;
 800a4f8:	bf00      	nop
		}
	}

}
 800a4fa:	bf00      	nop
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <_ZN8DataFifo4initEv>:
	void init();
	bool push(const RawData *dt);
	bool pop(RawData *dt);
};

void DataFifo::init() {
 800a502:	b480      	push	{r7}
 800a504:	b083      	sub	sp, #12
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
	Head = 0;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	601a      	str	r2, [r3, #0]
	Tail = 0;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	605a      	str	r2, [r3, #4]
}
 800a516:	bf00      	nop
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bc80      	pop	{r7}
 800a51e:	4770      	bx	lr

0800a520 <_ZN8DataFifo4pushEPK7RawData>:

bool DataFifo::push(const RawData *dt) {
 800a520:	b4b0      	push	{r4, r5, r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
	int h = Head;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	60fb      	str	r3, [r7, #12]
	if (++h == FIFO_SIZE)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	3301      	adds	r3, #1
 800a534:	60fb      	str	r3, [r7, #12]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2b40      	cmp	r3, #64	; 0x40
 800a53a:	bf0c      	ite	eq
 800a53c:	2301      	moveq	r3, #1
 800a53e:	2300      	movne	r3, #0
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <_ZN8DataFifo4pushEPK7RawData+0x2a>
		h = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	60fb      	str	r3, [r7, #12]
	if (h != Tail) {
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	429a      	cmp	r2, r3
 800a552:	d018      	beq.n	800a586 <_ZN8DataFifo4pushEPK7RawData+0x66>
		Mem[Head] = *dt;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	212c      	movs	r1, #44	; 0x2c
 800a55c:	fb01 f303 	mul.w	r3, r1, r3
 800a560:	4413      	add	r3, r2
 800a562:	f103 0208 	add.w	r2, r3, #8
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	4614      	mov	r4, r2
 800a56a:	461d      	mov	r5, r3
 800a56c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a56e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		Head = h;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	601a      	str	r2, [r3, #0]
		return true;
 800a582:	2301      	movs	r3, #1
 800a584:	e000      	b.n	800a588 <_ZN8DataFifo4pushEPK7RawData+0x68>
	} else
		return false;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bcb0      	pop	{r4, r5, r7}
 800a590:	4770      	bx	lr

0800a592 <_ZN8DataFifo3popEP7RawData>:

bool DataFifo::pop(RawData *dt) {
 800a592:	b4b0      	push	{r4, r5, r7}
 800a594:	b083      	sub	sp, #12
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	6039      	str	r1, [r7, #0]
	if (Tail != Head) {
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d025      	beq.n	800a5f4 <_ZN8DataFifo3popEP7RawData+0x62>
		*dt = Mem[Tail];
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	6838      	ldr	r0, [r7, #0]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	212c      	movs	r1, #44	; 0x2c
 800a5b2:	fb01 f303 	mul.w	r3, r1, r3
 800a5b6:	4413      	add	r3, r2
 800a5b8:	3308      	adds	r3, #8
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	461d      	mov	r5, r3
 800a5be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a5ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		if (++Tail == FIFO_SIZE)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	605a      	str	r2, [r3, #4]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	2b40      	cmp	r3, #64	; 0x40
 800a5de:	bf0c      	ite	eq
 800a5e0:	2301      	moveq	r3, #1
 800a5e2:	2300      	movne	r3, #0
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d002      	beq.n	800a5f0 <_ZN8DataFifo3popEP7RawData+0x5e>
			Tail = 0;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	605a      	str	r2, [r3, #4]
		return true;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e000      	b.n	800a5f6 <_ZN8DataFifo3popEP7RawData+0x64>
	} else
		return false;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	370c      	adds	r7, #12
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bcb0      	pop	{r4, r5, r7}
 800a5fe:	4770      	bx	lr

0800a600 <_Z11InitRawDataP7RawData>:
		bd300000, //uint8_t BaudRate;
		31, //uint8_t TxPower;
		paMode1, //PAMode
		};

void InitRawData(RawData *D) {
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
	memset(D, 0, sizeof(RawData));
 800a608:	222c      	movs	r2, #44	; 0x2c
 800a60a:	2100      	movs	r1, #0
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 ff1e 	bl	800b44e <memset>
	getPrecTime(&D->tick, &D->mick);
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	3304      	adds	r3, #4
 800a618:	4619      	mov	r1, r3
 800a61a:	4610      	mov	r0, r2
 800a61c:	f7ff ff54 	bl	800a4c8 <_Z11getPrecTimePmPh>
	D->frameNr = recFrameCnt++;
 800a620:	4b05      	ldr	r3, [pc, #20]	; (800a638 <_Z11InitRawDataP7RawData+0x38>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	1c5a      	adds	r2, r3, #1
 800a626:	4904      	ldr	r1, [pc, #16]	; (800a638 <_Z11InitRawDataP7RawData+0x38>)
 800a628:	600a      	str	r2, [r1, #0]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	6093      	str	r3, [r2, #8]

}
 800a62e:	bf00      	nop
 800a630:	3708      	adds	r7, #8
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	200020a4 	.word	0x200020a4

0800a63c <RfmInit>:
	dataFifo.push(&D);
	if (mDebug > 3)
		printf("\r\nFrRAD: len=%u", len);
}

extern "C" void RfmInit() {
 800a63c:	b580      	push	{r7, lr}
 800a63e:	af00      	add	r7, sp, #0
	//RFM69::setOnReciveEvent(&OnDataRecivedProc);
	RFM69::Init(&DefaultCfg);
 800a640:	4802      	ldr	r0, [pc, #8]	; (800a64c <RfmInit+0x10>)
 800a642:	f7fd fdf5 	bl	8008230 <_ZN5RFM694InitEPK6RFMCfg>
}
 800a646:	bf00      	nop
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	2000017c 	.word	0x2000017c

0800a650 <_Z9ShellMainc>:
/*
 extern "C" uint32_t get_data_size();
 extern "C" uint32_t get_heep_used();
 extern "C" uint32_t get_heep_free();
 */
void ShellMain(char key) {
 800a650:	b580      	push	{r7, lr}
 800a652:	b090      	sub	sp, #64	; 0x40
 800a654:	af00      	add	r7, sp, #0
 800a656:	4603      	mov	r3, r0
 800a658:	71fb      	strb	r3, [r7, #7]

	switch (key) {
 800a65a:	79fb      	ldrb	r3, [r7, #7]
 800a65c:	3b31      	subs	r3, #49	; 0x31
 800a65e:	2b44      	cmp	r3, #68	; 0x44
 800a660:	f200 8150 	bhi.w	800a904 <_Z9ShellMainc+0x2b4>
 800a664:	a201      	add	r2, pc, #4	; (adr r2, 800a66c <_Z9ShellMainc+0x1c>)
 800a666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66a:	bf00      	nop
 800a66c:	0800a7d7 	.word	0x0800a7d7
 800a670:	0800a8c9 	.word	0x0800a8c9
 800a674:	0800a905 	.word	0x0800a905
 800a678:	0800a905 	.word	0x0800a905
 800a67c:	0800a905 	.word	0x0800a905
 800a680:	0800a905 	.word	0x0800a905
 800a684:	0800a905 	.word	0x0800a905
 800a688:	0800a905 	.word	0x0800a905
 800a68c:	0800a905 	.word	0x0800a905
 800a690:	0800a905 	.word	0x0800a905
 800a694:	0800a905 	.word	0x0800a905
 800a698:	0800a905 	.word	0x0800a905
 800a69c:	0800a905 	.word	0x0800a905
 800a6a0:	0800a905 	.word	0x0800a905
 800a6a4:	0800a905 	.word	0x0800a905
 800a6a8:	0800a905 	.word	0x0800a905
 800a6ac:	0800a905 	.word	0x0800a905
 800a6b0:	0800a905 	.word	0x0800a905
 800a6b4:	0800a905 	.word	0x0800a905
 800a6b8:	0800a7b3 	.word	0x0800a7b3
 800a6bc:	0800a905 	.word	0x0800a905
 800a6c0:	0800a905 	.word	0x0800a905
 800a6c4:	0800a905 	.word	0x0800a905
 800a6c8:	0800a905 	.word	0x0800a905
 800a6cc:	0800a905 	.word	0x0800a905
 800a6d0:	0800a905 	.word	0x0800a905
 800a6d4:	0800a905 	.word	0x0800a905
 800a6d8:	0800a905 	.word	0x0800a905
 800a6dc:	0800a905 	.word	0x0800a905
 800a6e0:	0800a905 	.word	0x0800a905
 800a6e4:	0800a905 	.word	0x0800a905
 800a6e8:	0800a905 	.word	0x0800a905
 800a6ec:	0800a905 	.word	0x0800a905
 800a6f0:	0800a905 	.word	0x0800a905
 800a6f4:	0800a905 	.word	0x0800a905
 800a6f8:	0800a905 	.word	0x0800a905
 800a6fc:	0800a7bb 	.word	0x0800a7bb
 800a700:	0800a905 	.word	0x0800a905
 800a704:	0800a905 	.word	0x0800a905
 800a708:	0800a905 	.word	0x0800a905
 800a70c:	0800a905 	.word	0x0800a905
 800a710:	0800a905 	.word	0x0800a905
 800a714:	0800a905 	.word	0x0800a905
 800a718:	0800a905 	.word	0x0800a905
 800a71c:	0800a905 	.word	0x0800a905
 800a720:	0800a905 	.word	0x0800a905
 800a724:	0800a905 	.word	0x0800a905
 800a728:	0800a905 	.word	0x0800a905
 800a72c:	0800a905 	.word	0x0800a905
 800a730:	0800a905 	.word	0x0800a905
 800a734:	0800a905 	.word	0x0800a905
 800a738:	0800a905 	.word	0x0800a905
 800a73c:	0800a905 	.word	0x0800a905
 800a740:	0800a905 	.word	0x0800a905
 800a744:	0800a781 	.word	0x0800a781
 800a748:	0800a905 	.word	0x0800a905
 800a74c:	0800a905 	.word	0x0800a905
 800a750:	0800a905 	.word	0x0800a905
 800a754:	0800a905 	.word	0x0800a905
 800a758:	0800a905 	.word	0x0800a905
 800a75c:	0800a93d 	.word	0x0800a93d
 800a760:	0800a905 	.word	0x0800a905
 800a764:	0800a905 	.word	0x0800a905
 800a768:	0800a905 	.word	0x0800a905
 800a76c:	0800a905 	.word	0x0800a905
 800a770:	0800a905 	.word	0x0800a905
 800a774:	0800a905 	.word	0x0800a905
 800a778:	0800a905 	.word	0x0800a905
 800a77c:	0800a7c9 	.word	0x0800a7c9
	case 'g':
		if (++mDebug == 5)
 800a780:	4b71      	ldr	r3, [pc, #452]	; (800a948 <_Z9ShellMainc+0x2f8>)
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	3301      	adds	r3, #1
 800a786:	b2da      	uxtb	r2, r3
 800a788:	4b6f      	ldr	r3, [pc, #444]	; (800a948 <_Z9ShellMainc+0x2f8>)
 800a78a:	701a      	strb	r2, [r3, #0]
 800a78c:	4b6e      	ldr	r3, [pc, #440]	; (800a948 <_Z9ShellMainc+0x2f8>)
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	2b05      	cmp	r3, #5
 800a792:	bf0c      	ite	eq
 800a794:	2301      	moveq	r3, #1
 800a796:	2300      	movne	r3, #0
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d002      	beq.n	800a7a4 <_Z9ShellMainc+0x154>
			mDebug = 0;
 800a79e:	4b6a      	ldr	r3, [pc, #424]	; (800a948 <_Z9ShellMainc+0x2f8>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	701a      	strb	r2, [r3, #0]
		printf("Debug=%u\r\n", mDebug);
 800a7a4:	4b68      	ldr	r3, [pc, #416]	; (800a948 <_Z9ShellMainc+0x2f8>)
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4868      	ldr	r0, [pc, #416]	; (800a94c <_Z9ShellMainc+0x2fc>)
 800a7ac:	f000 fe58 	bl	800b460 <iprintf>
		break;
 800a7b0:	e0c5      	b.n	800a93e <_Z9ShellMainc+0x2ee>
	case 'D':
		shelType = shRFM;
 800a7b2:	4b67      	ldr	r3, [pc, #412]	; (800a950 <_Z9ShellMainc+0x300>)
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	701a      	strb	r2, [r3, #0]
		break;
 800a7b8:	e0c1      	b.n	800a93e <_Z9ShellMainc+0x2ee>
		 uDbg->printf("HeepFree=%u\r\n", get_heep_free());

		 */
		break;
	case 'U':
		printf("Usb disconnect\r\n");
 800a7ba:	4866      	ldr	r0, [pc, #408]	; (800a954 <_Z9ShellMainc+0x304>)
 800a7bc:	f000 fed8 	bl	800b570 <puts>
		setUsbConnect(0);
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	f7ff fb77 	bl	8009eb4 <_Z13setUsbConnecth>
		break;
 800a7c6:	e0ba      	b.n	800a93e <_Z9ShellMainc+0x2ee>
	case 'u':
		printf("Usb connect\r\n");
 800a7c8:	4863      	ldr	r0, [pc, #396]	; (800a958 <_Z9ShellMainc+0x308>)
 800a7ca:	f000 fed1 	bl	800b570 <puts>
		setUsbConnect(1);
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	f7ff fb70 	bl	8009eb4 <_Z13setUsbConnecth>
		break;
 800a7d4:	e0b3      	b.n	800a93e <_Z9ShellMainc+0x2ee>
	case '1': {
		printf("Push 6 packets\r\n");
 800a7d6:	4861      	ldr	r0, [pc, #388]	; (800a95c <_Z9ShellMainc+0x30c>)
 800a7d8:	f000 feca 	bl	800b570 <puts>
		RawData dt;

		InitRawData(&dt);
 800a7dc:	f107 030c 	add.w	r3, r7, #12
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7ff ff0d 	bl	800a600 <_Z11InitRawDataP7RawData>
		dt.data[0] = 1;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	763b      	strb	r3, [r7, #24]
		dataFifo.push(&dt);
 800a7ea:	f107 030c 	add.w	r3, r7, #12
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	485b      	ldr	r0, [pc, #364]	; (800a960 <_Z9ShellMainc+0x310>)
 800a7f2:	f7ff fe95 	bl	800a520 <_ZN8DataFifo4pushEPK7RawData>
		HAL_Delay(5);
 800a7f6:	2005      	movs	r0, #5
 800a7f8:	f7f6 fd44 	bl	8001284 <HAL_Delay>

		InitRawData(&dt);
 800a7fc:	f107 030c 	add.w	r3, r7, #12
 800a800:	4618      	mov	r0, r3
 800a802:	f7ff fefd 	bl	800a600 <_Z11InitRawDataP7RawData>
		dt.data[0] = 2;
 800a806:	2302      	movs	r3, #2
 800a808:	763b      	strb	r3, [r7, #24]
		dataFifo.push(&dt);
 800a80a:	f107 030c 	add.w	r3, r7, #12
 800a80e:	4619      	mov	r1, r3
 800a810:	4853      	ldr	r0, [pc, #332]	; (800a960 <_Z9ShellMainc+0x310>)
 800a812:	f7ff fe85 	bl	800a520 <_ZN8DataFifo4pushEPK7RawData>
		HAL_Delay(5);
 800a816:	2005      	movs	r0, #5
 800a818:	f7f6 fd34 	bl	8001284 <HAL_Delay>

		InitRawData(&dt);
 800a81c:	f107 030c 	add.w	r3, r7, #12
 800a820:	4618      	mov	r0, r3
 800a822:	f7ff feed 	bl	800a600 <_Z11InitRawDataP7RawData>
		dt.data[0] = 3;
 800a826:	2303      	movs	r3, #3
 800a828:	763b      	strb	r3, [r7, #24]
		dataFifo.push(&dt);
 800a82a:	f107 030c 	add.w	r3, r7, #12
 800a82e:	4619      	mov	r1, r3
 800a830:	484b      	ldr	r0, [pc, #300]	; (800a960 <_Z9ShellMainc+0x310>)
 800a832:	f7ff fe75 	bl	800a520 <_ZN8DataFifo4pushEPK7RawData>
		for (volatile int i = 0; i < 2000; i++) {
 800a836:	2300      	movs	r3, #0
 800a838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a83a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a83c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800a840:	4293      	cmp	r3, r2
 800a842:	bfd4      	ite	le
 800a844:	2301      	movle	r3, #1
 800a846:	2300      	movgt	r3, #0
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <_Z9ShellMainc+0x206>
 800a84e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a850:	3301      	adds	r3, #1
 800a852:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a854:	e7f1      	b.n	800a83a <_Z9ShellMainc+0x1ea>

		}

		InitRawData(&dt);
 800a856:	f107 030c 	add.w	r3, r7, #12
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7ff fed0 	bl	800a600 <_Z11InitRawDataP7RawData>
		dt.data[0] = 4;
 800a860:	2304      	movs	r3, #4
 800a862:	763b      	strb	r3, [r7, #24]
		dataFifo.push(&dt);
 800a864:	f107 030c 	add.w	r3, r7, #12
 800a868:	4619      	mov	r1, r3
 800a86a:	483d      	ldr	r0, [pc, #244]	; (800a960 <_Z9ShellMainc+0x310>)
 800a86c:	f7ff fe58 	bl	800a520 <_ZN8DataFifo4pushEPK7RawData>

		InitRawData(&dt);
 800a870:	f107 030c 	add.w	r3, r7, #12
 800a874:	4618      	mov	r0, r3
 800a876:	f7ff fec3 	bl	800a600 <_Z11InitRawDataP7RawData>
		dt.data[0] = 5;
 800a87a:	2305      	movs	r3, #5
 800a87c:	763b      	strb	r3, [r7, #24]
		dataFifo.push(&dt);
 800a87e:	f107 030c 	add.w	r3, r7, #12
 800a882:	4619      	mov	r1, r3
 800a884:	4836      	ldr	r0, [pc, #216]	; (800a960 <_Z9ShellMainc+0x310>)
 800a886:	f7ff fe4b 	bl	800a520 <_ZN8DataFifo4pushEPK7RawData>
		for (volatile int i = 0; i < 200; i++) {
 800a88a:	2300      	movs	r3, #0
 800a88c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a890:	2bc7      	cmp	r3, #199	; 0xc7
 800a892:	bfd4      	ite	le
 800a894:	2301      	movle	r3, #1
 800a896:	2300      	movgt	r3, #0
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <_Z9ShellMainc+0x256>
 800a89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8a4:	e7f3      	b.n	800a88e <_Z9ShellMainc+0x23e>

		}

		InitRawData(&dt);
 800a8a6:	f107 030c 	add.w	r3, r7, #12
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff fea8 	bl	800a600 <_Z11InitRawDataP7RawData>
		dt.data[0] = 6;
 800a8b0:	2306      	movs	r3, #6
 800a8b2:	763b      	strb	r3, [r7, #24]
		dataFifo.push(&dt);
 800a8b4:	f107 030c 	add.w	r3, r7, #12
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	4829      	ldr	r0, [pc, #164]	; (800a960 <_Z9ShellMainc+0x310>)
 800a8bc:	f7ff fe30 	bl	800a520 <_ZN8DataFifo4pushEPK7RawData>

		printf("Send data 6; delay 5,2\r\n");
 800a8c0:	4828      	ldr	r0, [pc, #160]	; (800a964 <_Z9ShellMainc+0x314>)
 800a8c2:	f000 fe55 	bl	800b570 <puts>
	}
		break;
 800a8c6:	e03a      	b.n	800a93e <_Z9ShellMainc+0x2ee>
	case '2': {
		printf("Push 2 packets - 20 bytes\r\n");
 800a8c8:	4827      	ldr	r0, [pc, #156]	; (800a968 <_Z9ShellMainc+0x318>)
 800a8ca:	f000 fe51 	bl	800b570 <puts>
		RawData dt;

		InitRawData(&dt);
 800a8ce:	f107 030c 	add.w	r3, r7, #12
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7ff fe94 	bl	800a600 <_Z11InitRawDataP7RawData>
		dt.len = 20;
 800a8d8:	2314      	movs	r3, #20
 800a8da:	74fb      	strb	r3, [r7, #19]
		dataFifo.push(&dt);
 800a8dc:	f107 030c 	add.w	r3, r7, #12
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	481f      	ldr	r0, [pc, #124]	; (800a960 <_Z9ShellMainc+0x310>)
 800a8e4:	f7ff fe1c 	bl	800a520 <_ZN8DataFifo4pushEPK7RawData>
		InitRawData(&dt);
 800a8e8:	f107 030c 	add.w	r3, r7, #12
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7ff fe87 	bl	800a600 <_Z11InitRawDataP7RawData>
		dt.len = 20;
 800a8f2:	2314      	movs	r3, #20
 800a8f4:	74fb      	strb	r3, [r7, #19]
		dataFifo.push(&dt);
 800a8f6:	f107 030c 	add.w	r3, r7, #12
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	4818      	ldr	r0, [pc, #96]	; (800a960 <_Z9ShellMainc+0x310>)
 800a8fe:	f7ff fe0f 	bl	800a520 <_ZN8DataFifo4pushEPK7RawData>

	}
		break;
 800a902:	e01c      	b.n	800a93e <_Z9ShellMainc+0x2ee>

	default:
		printf("\r\nSz-Skaner\r\nHDW:%u, %u.%03u \r\n------------------\r\n", 1, mVer.ver, mVer.rev);
 800a904:	4b19      	ldr	r3, [pc, #100]	; (800a96c <_Z9ShellMainc+0x31c>)
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	461a      	mov	r2, r3
 800a90a:	4b18      	ldr	r3, [pc, #96]	; (800a96c <_Z9ShellMainc+0x31c>)
 800a90c:	885b      	ldrh	r3, [r3, #2]
 800a90e:	2101      	movs	r1, #1
 800a910:	4817      	ldr	r0, [pc, #92]	; (800a970 <_Z9ShellMainc+0x320>)
 800a912:	f000 fda5 	bl	800b460 <iprintf>

		printf("D > RFM Menu\r\n");
 800a916:	4817      	ldr	r0, [pc, #92]	; (800a974 <_Z9ShellMainc+0x324>)
 800a918:	f000 fe2a 	bl	800b570 <puts>
		printf("g - debugLevel\r\n");
 800a91c:	4816      	ldr	r0, [pc, #88]	; (800a978 <_Z9ShellMainc+0x328>)
 800a91e:	f000 fe27 	bl	800b570 <puts>
		printf("m - pamiec info\r\n");
 800a922:	4816      	ldr	r0, [pc, #88]	; (800a97c <_Z9ShellMainc+0x32c>)
 800a924:	f000 fe24 	bl	800b570 <puts>
		printf("u/U - connect/disconnect USB\r\n");
 800a928:	4815      	ldr	r0, [pc, #84]	; (800a980 <_Z9ShellMainc+0x330>)
 800a92a:	f000 fe21 	bl	800b570 <puts>
		printf("1 - send test data 6x6\r\n");
 800a92e:	4815      	ldr	r0, [pc, #84]	; (800a984 <_Z9ShellMainc+0x334>)
 800a930:	f000 fe1e 	bl	800b570 <puts>
		printf("2 - send test data 2x20\r\n");
 800a934:	4814      	ldr	r0, [pc, #80]	; (800a988 <_Z9ShellMainc+0x338>)
 800a936:	f000 fe1b 	bl	800b570 <puts>

		break;
 800a93a:	e000      	b.n	800a93e <_Z9ShellMainc+0x2ee>
		break;
 800a93c:	bf00      	nop

	}
}
 800a93e:	bf00      	nop
 800a940:	3740      	adds	r7, #64	; 0x40
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	20000554 	.word	0x20000554
 800a94c:	0800cf18 	.word	0x0800cf18
 800a950:	200020a8 	.word	0x200020a8
 800a954:	0800cf24 	.word	0x0800cf24
 800a958:	0800cf34 	.word	0x0800cf34
 800a95c:	0800cf44 	.word	0x0800cf44
 800a960:	2000159c 	.word	0x2000159c
 800a964:	0800cf54 	.word	0x0800cf54
 800a968:	0800cf6c 	.word	0x0800cf6c
 800a96c:	20000558 	.word	0x20000558
 800a970:	0800cf88 	.word	0x0800cf88
 800a974:	0800cfbc 	.word	0x0800cfbc
 800a978:	0800cfcc 	.word	0x0800cfcc
 800a97c:	0800cfdc 	.word	0x0800cfdc
 800a980:	0800cff0 	.word	0x0800cff0
 800a984:	0800d010 	.word	0x0800d010
 800a988:	0800d028 	.word	0x0800d028

0800a98c <_Z5Shellc>:
void Shell(char key) {
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	4603      	mov	r3, r0
 800a994:	71fb      	strb	r3, [r7, #7]
	if (key == 0xff) {
 800a996:	79fb      	ldrb	r3, [r7, #7]
 800a998:	2bff      	cmp	r3, #255	; 0xff
 800a99a:	d01d      	beq.n	800a9d8 <_Z5Shellc+0x4c>
		return;
	}
	printf("%c\r\n", key);
 800a99c:	79fb      	ldrb	r3, [r7, #7]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	480f      	ldr	r0, [pc, #60]	; (800a9e0 <_Z5Shellc+0x54>)
 800a9a2:	f000 fd5d 	bl	800b460 <iprintf>
	switch (shelType) {
 800a9a6:	4b0f      	ldr	r3, [pc, #60]	; (800a9e4 <_Z5Shellc+0x58>)
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d10a      	bne.n	800a9c4 <_Z5Shellc+0x38>
	case shRFM:
		if (RFM69::shell(key))
 800a9ae:	79fb      	ldrb	r3, [r7, #7]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fe facb 	bl	8008f4c <_ZN5RFM695shellEc>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d008      	beq.n	800a9ce <_Z5Shellc+0x42>
			shelType = shMAIN;
 800a9bc:	4b09      	ldr	r3, [pc, #36]	; (800a9e4 <_Z5Shellc+0x58>)
 800a9be:	2200      	movs	r2, #0
 800a9c0:	701a      	strb	r2, [r3, #0]
		break;
 800a9c2:	e004      	b.n	800a9ce <_Z5Shellc+0x42>
	default:
		ShellMain(key);
 800a9c4:	79fb      	ldrb	r3, [r7, #7]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7ff fe42 	bl	800a650 <_Z9ShellMainc>
		break;
 800a9cc:	e000      	b.n	800a9d0 <_Z5Shellc+0x44>
		break;
 800a9ce:	bf00      	nop
	}
	printf(">");
 800a9d0:	203e      	movs	r0, #62	; 0x3e
 800a9d2:	f000 fd5d 	bl	800b490 <putchar>
 800a9d6:	e000      	b.n	800a9da <_Z5Shellc+0x4e>
		return;
 800a9d8:	bf00      	nop
}
 800a9da:	3708      	adds	r7, #8
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	0800d044 	.word	0x0800d044
 800a9e4:	200020a8 	.word	0x200020a8

0800a9e8 <_Z12reciveFromPCv>:
		uint8_t buf[8];
	};
	RFMCfg Radio;
} PcCfg;

void reciveFromPC() {
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b09c      	sub	sp, #112	; 0x70
 800a9ec:	af00      	add	r7, sp, #0
	uint8_t pcBuf[PC_MSG_LEN];

	int len = UsbDev::getFrame(pcBuf, sizeof(pcBuf));
 800a9ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a9f2:	2128      	movs	r1, #40	; 0x28
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f000 fbbd 	bl	800b174 <_ZN6UsbDev8getFrameEPhi>
 800a9fa:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (len > 1) {
 800a9fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	dd5e      	ble.n	800aac0 <_Z12reciveFromPCv+0xd8>
		switch (pcBuf[0]) {
 800aa02:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d025      	beq.n	800aa56 <_Z12reciveFromPCv+0x6e>
 800aa0a:	2b03      	cmp	r3, #3
 800aa0c:	d039      	beq.n	800aa82 <_Z12reciveFromPCv+0x9a>
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d144      	bne.n	800aa9c <_Z12reciveFromPCv+0xb4>
		case nuRADIO_CFG: {
			printf("Konfiguracja, n=%d\r\n", len);
 800aa12:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800aa14:	482c      	ldr	r0, [pc, #176]	; (800aac8 <_Z12reciveFromPCv+0xe0>)
 800aa16:	f000 fd23 	bl	800b460 <iprintf>

			PcCfg pcCfg;
			memcpy(&pcCfg, &pcBuf[1], sizeof(pcCfg));
 800aa1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aa1e:	1c59      	adds	r1, r3, #1
 800aa20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa24:	2210      	movs	r2, #16
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 fd06 	bl	800b438 <memcpy>

			ledBottomMode = pcCfg.ledBottomMode;
 800aa2c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800aa30:	461a      	mov	r2, r3
 800aa32:	4b26      	ldr	r3, [pc, #152]	; (800aacc <_Z12reciveFromPCv+0xe4>)
 800aa34:	601a      	str	r2, [r3, #0]
			RFM69::Init(&pcCfg.Radio);
 800aa36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa3a:	3308      	adds	r3, #8
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fd fbf7 	bl	8008230 <_ZN5RFM694InitEPK6RFMCfg>
			setLed2(1);
 800aa42:	2001      	movs	r0, #1
 800aa44:	f7ff fa1a 	bl	8009e7c <_Z7setLed2h>
			HAL_Delay(50);
 800aa48:	2032      	movs	r0, #50	; 0x32
 800aa4a:	f7f6 fc1b 	bl	8001284 <HAL_Delay>
			setLed2(0);
 800aa4e:	2000      	movs	r0, #0
 800aa50:	f7ff fa14 	bl	8009e7c <_Z7setLed2h>
		}
			break;
 800aa54:	e022      	b.n	800aa9c <_Z12reciveFromPCv+0xb4>
		case nuRADIO_DATA: {
			uint8_t slotNr = pcBuf[1];
 800aa56:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aa5a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			len -= 2;
 800aa5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa60:	3b02      	subs	r3, #2
 800aa62:	66fb      	str	r3, [r7, #108]	; 0x6c
			printf("Dane do wysłania, n=%d\r\n", len);
 800aa64:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800aa66:	481a      	ldr	r0, [pc, #104]	; (800aad0 <_Z12reciveFromPCv+0xe8>)
 800aa68:	f000 fcfa 	bl	800b460 <iprintf>
			RFM69::sendPacket(slotNr, &pcBuf[2], len);
 800aa6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa6e:	b2da      	uxtb	r2, r3
 800aa70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800aa74:	1c99      	adds	r1, r3, #2
 800aa76:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fd ffdc 	bl	8008a38 <_ZN5RFM6910sendPacketEhPKvh>
		}
			break;
 800aa80:	e00c      	b.n	800aa9c <_Z12reciveFromPCv+0xb4>
		case nuRED_PULSE:
			printf("Led pulse\r\n");
 800aa82:	4814      	ldr	r0, [pc, #80]	; (800aad4 <_Z12reciveFromPCv+0xec>)
 800aa84:	f000 fd74 	bl	800b570 <puts>
			setLed2(1);
 800aa88:	2001      	movs	r0, #1
 800aa8a:	f7ff f9f7 	bl	8009e7c <_Z7setLed2h>
			HAL_Delay(100);
 800aa8e:	2064      	movs	r0, #100	; 0x64
 800aa90:	f7f6 fbf8 	bl	8001284 <HAL_Delay>
			setLed2(0);
 800aa94:	2000      	movs	r0, #0
 800aa96:	f7ff f9f1 	bl	8009e7c <_Z7setLed2h>
			break;
 800aa9a:	bf00      	nop
		}

		// wysłanie potwierdzenia do PC-ta
		RawData D;
		InitRawData(&D);
 800aa9c:	1d3b      	adds	r3, r7, #4
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7ff fdae 	bl	800a600 <_Z11InitRawDataP7RawData>
		D.len = 1;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	72fb      	strb	r3, [r7, #11]
		D.data[0] = pcBuf[0];
 800aaa8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aaac:	743b      	strb	r3, [r7, #16]
		D.RSSI_Hd = 0;
 800aaae:	2300      	movs	r3, #0
 800aab0:	72bb      	strb	r3, [r7, #10]
		D.sender = 15;
 800aab2:	230f      	movs	r3, #15
 800aab4:	727b      	strb	r3, [r7, #9]
		dataFifo.push(&D);
 800aab6:	1d3b      	adds	r3, r7, #4
 800aab8:	4619      	mov	r1, r3
 800aaba:	4807      	ldr	r0, [pc, #28]	; (800aad8 <_Z12reciveFromPCv+0xf0>)
 800aabc:	f7ff fd30 	bl	800a520 <_ZN8DataFifo4pushEPK7RawData>
	}
}
 800aac0:	bf00      	nop
 800aac2:	3770      	adds	r7, #112	; 0x70
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	0800d04c 	.word	0x0800d04c
 800aacc:	20001590 	.word	0x20001590
 800aad0:	0800d064 	.word	0x0800d064
 800aad4:	0800d080 	.word	0x0800d080
 800aad8:	2000159c 	.word	0x2000159c

0800aadc <_Z13ReadRadioDatav>:

void ReadRadioData() {
 800aadc:	b580      	push	{r7, lr}
 800aade:	b08c      	sub	sp, #48	; 0x30
 800aae0:	af00      	add	r7, sp, #0
	RawData D;

	InitRawData(&D);
 800aae2:	463b      	mov	r3, r7
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7ff fd8b 	bl	800a600 <_Z11InitRawDataP7RawData>

	int len = RFM69::recVar.DataLen;
 800aaea:	4b18      	ldr	r3, [pc, #96]	; (800ab4c <_Z13ReadRadioDatav+0x70>)
 800aaec:	785b      	ldrb	r3, [r3, #1]
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	D.len = len;
 800aaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	71fb      	strb	r3, [r7, #7]
	if (len > 32) {
 800aaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafa:	2b20      	cmp	r3, #32
 800aafc:	dd01      	ble.n	800ab02 <_Z13ReadRadioDatav+0x26>
		len = 32;
 800aafe:	2320      	movs	r3, #32
 800ab00:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	memcpy(D.data, RFM69::recVar.DataBuf, len);
 800ab02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab04:	463b      	mov	r3, r7
 800ab06:	330c      	adds	r3, #12
 800ab08:	4911      	ldr	r1, [pc, #68]	; (800ab50 <_Z13ReadRadioDatav+0x74>)
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 fc94 	bl	800b438 <memcpy>

	D.RSSI_Hd = RFM69::recVar.RSSI;
 800ab10:	4b0e      	ldr	r3, [pc, #56]	; (800ab4c <_Z13ReadRadioDatav+0x70>)
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7f5 ffcd 	bl	8000ab4 <__aeabi_f2uiz>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	71bb      	strb	r3, [r7, #6]
	D.sender = RFM69::recVar.SenderID;
 800ab20:	4b0a      	ldr	r3, [pc, #40]	; (800ab4c <_Z13ReadRadioDatav+0x70>)
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	717b      	strb	r3, [r7, #5]
	dataFifo.push(&D);
 800ab28:	463b      	mov	r3, r7
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	4809      	ldr	r0, [pc, #36]	; (800ab54 <_Z13ReadRadioDatav+0x78>)
 800ab2e:	f7ff fcf7 	bl	800a520 <_ZN8DataFifo4pushEPK7RawData>
	if (mDebug > 3)
 800ab32:	4b09      	ldr	r3, [pc, #36]	; (800ab58 <_Z13ReadRadioDatav+0x7c>)
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d903      	bls.n	800ab42 <_Z13ReadRadioDatav+0x66>
		printf("\r\nFrRAD: len=%u", len);
 800ab3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab3c:	4807      	ldr	r0, [pc, #28]	; (800ab5c <_Z13ReadRadioDatav+0x80>)
 800ab3e:	f000 fc8f 	bl	800b460 <iprintf>

}
 800ab42:	bf00      	nop
 800ab44:	3730      	adds	r7, #48	; 0x30
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20000268 	.word	0x20000268
 800ab50:	20000274 	.word	0x20000274
 800ab54:	2000159c 	.word	0x2000159c
 800ab58:	20000554 	.word	0x20000554
 800ab5c:	0800cef0 	.word	0x0800cef0

0800ab60 <uMain>:

extern "C" void uMain(void) {
 800ab60:	b590      	push	{r4, r7, lr}
 800ab62:	b08f      	sub	sp, #60	; 0x3c
 800ab64:	af00      	add	r7, sp, #0

	DbgUart::Init();
 800ab66:	f7ff f9c1 	bl	8009eec <_ZN7DbgUart4InitEv>

	loadSoftVer(&mVer, &DevLabel[0x10]);
 800ab6a:	4954      	ldr	r1, [pc, #336]	; (800acbc <uMain+0x15c>)
 800ab6c:	4854      	ldr	r0, [pc, #336]	; (800acc0 <uMain+0x160>)
 800ab6e:	f7ff f8db 	bl	8009d28 <_Z11loadSoftVerP7VerInfoPKc>

	SPI_1::Init();
 800ab72:	f7fd fab5 	bl	80080e0 <_ZN5SPI_14InitEv>
	//MX_SPI2_Init();
	UsbDev::init();
 800ab76:	f000 fab9 	bl	800b0ec <_ZN6UsbDev4initEv>
	dataFifo.init();
 800ab7a:	4852      	ldr	r0, [pc, #328]	; (800acc4 <uMain+0x164>)
 800ab7c:	f7ff fcc1 	bl	800a502 <_ZN8DataFifo4initEv>

	bool startOK = true;
 800ab80:	2301      	movs	r3, #1
 800ab82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	for (int i = 0; i < 6; i++) {
 800ab86:	2300      	movs	r3, #0
 800ab88:	637b      	str	r3, [r7, #52]	; 0x34
 800ab8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab8c:	2b05      	cmp	r3, #5
 800ab8e:	dc17      	bgt.n	800abc0 <uMain+0x60>
		HAL_Delay(50);
 800ab90:	2032      	movs	r0, #50	; 0x32
 800ab92:	f7f6 fb77 	bl	8001284 <HAL_Delay>
		setBottomLed(i, true);
 800ab96:	2101      	movs	r1, #1
 800ab98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab9a:	f7ff fb41 	bl	800a220 <_Z12setBottomLedib>
		setLed2(1);
 800ab9e:	2001      	movs	r0, #1
 800aba0:	f7ff f96c 	bl	8009e7c <_Z7setLed2h>
		HAL_Delay(50);
 800aba4:	2032      	movs	r0, #50	; 0x32
 800aba6:	f7f6 fb6d 	bl	8001284 <HAL_Delay>
		setLed2(0);
 800abaa:	2000      	movs	r0, #0
 800abac:	f7ff f966 	bl	8009e7c <_Z7setLed2h>
		setBottomLed(i, false);
 800abb0:	2100      	movs	r1, #0
 800abb2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800abb4:	f7ff fb34 	bl	800a220 <_Z12setBottomLedib>
	for (int i = 0; i < 6; i++) {
 800abb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abba:	3301      	adds	r3, #1
 800abbc:	637b      	str	r3, [r7, #52]	; 0x34
 800abbe:	e7e4      	b.n	800ab8a <uMain+0x2a>
	}

	printf("\r\n\n\nRFM69-Skaner\r\n-----------------\r\n>");
 800abc0:	4841      	ldr	r0, [pc, #260]	; (800acc8 <uMain+0x168>)
 800abc2:	f000 fc4d 	bl	800b460 <iprintf>
	printf("ver:%u.%03u\r\n", mVer.ver, mVer.rev);
 800abc6:	4b3e      	ldr	r3, [pc, #248]	; (800acc0 <uMain+0x160>)
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	4619      	mov	r1, r3
 800abcc:	4b3c      	ldr	r3, [pc, #240]	; (800acc0 <uMain+0x160>)
 800abce:	885b      	ldrh	r3, [r3, #2]
 800abd0:	461a      	mov	r2, r3
 800abd2:	483e      	ldr	r0, [pc, #248]	; (800accc <uMain+0x16c>)
 800abd4:	f000 fc44 	bl	800b460 <iprintf>
	printf("Options:0x%02X 0x%02X\r\n", //
			(int) HAL_FLASHEx_OBGetUserData(OB_DATA_ADDRESS_DATA0), //
 800abd8:	483d      	ldr	r0, [pc, #244]	; (800acd0 <uMain+0x170>)
 800abda:	f7f6 fcf9 	bl	80015d0 <HAL_FLASHEx_OBGetUserData>
 800abde:	4603      	mov	r3, r0
	printf("Options:0x%02X 0x%02X\r\n", //
 800abe0:	461c      	mov	r4, r3
			(int) HAL_FLASHEx_OBGetUserData(OB_DATA_ADDRESS_DATA1));
 800abe2:	483c      	ldr	r0, [pc, #240]	; (800acd4 <uMain+0x174>)
 800abe4:	f7f6 fcf4 	bl	80015d0 <HAL_FLASHEx_OBGetUserData>
 800abe8:	4603      	mov	r3, r0
	printf("Options:0x%02X 0x%02X\r\n", //
 800abea:	461a      	mov	r2, r3
 800abec:	4621      	mov	r1, r4
 800abee:	483a      	ldr	r0, [pc, #232]	; (800acd8 <uMain+0x178>)
 800abf0:	f000 fc36 	bl	800b460 <iprintf>

	RfmInit();
 800abf4:	f7ff fd22 	bl	800a63c <RfmInit>
	if (startOK)
 800abf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d003      	beq.n	800ac08 <uMain+0xa8>
		setLed2(0);
 800ac00:	2000      	movs	r0, #0
 800ac02:	f7ff f93b 	bl	8009e7c <_Z7setLed2h>
 800ac06:	e002      	b.n	800ac0e <uMain+0xae>
	else
		setLed2(1);
 800ac08:	2001      	movs	r0, #1
 800ac0a:	f7ff f937 	bl	8009e7c <_Z7setLed2h>

	setUsbConnect(1);
 800ac0e:	2001      	movs	r0, #1
 800ac10:	f7ff f950 	bl	8009eb4 <_Z13setUsbConnecth>

	uint32_t led2Tm = 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	633b      	str	r3, [r7, #48]	; 0x30
	while (1) {
		tickLed1();
 800ac18:	f7ff fad0 	bl	800a1bc <_Z8tickLed1v>
		tickledSpod();
 800ac1c:	f7ff fb4a 	bl	800a2b4 <_Z11tickledSpodv>

		if (led2Tm != 0) {
 800ac20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d010      	beq.n	800ac48 <uMain+0xe8>
			if (HAL_GetTick() - led2Tm > 50) {
 800ac26:	f7f6 fb23 	bl	8001270 <HAL_GetTick>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2e:	1ad3      	subs	r3, r2, r3
 800ac30:	2b32      	cmp	r3, #50	; 0x32
 800ac32:	bf8c      	ite	hi
 800ac34:	2301      	movhi	r3, #1
 800ac36:	2300      	movls	r3, #0
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d004      	beq.n	800ac48 <uMain+0xe8>
				led2Tm = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	633b      	str	r3, [r7, #48]	; 0x30
				setLed2(0);
 800ac42:	2000      	movs	r0, #0
 800ac44:	f7ff f91a 	bl	8009e7c <_Z7setLed2h>
			}
		}

		char key;
		if (DbgUart::getCh(&key)) {
 800ac48:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7ff f9d3 	bl	8009ff8 <_ZN7DbgUart5getChEPc>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d004      	beq.n	800ac62 <uMain+0x102>
			Shell(key);
 800ac58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7ff fe95 	bl	800a98c <_Z5Shellc>
		}
		RFM69::tick();
 800ac62:	f7fe f96d 	bl	8008f40 <_ZN5RFM694tickEv>
		if (RFM69::isNewFrame()) {
 800ac66:	f7fe f959 	bl	8008f1c <_ZN5RFM6910isNewFrameEv>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d007      	beq.n	800ac80 <uMain+0x120>
			setLed2(1);
 800ac70:	2001      	movs	r0, #1
 800ac72:	f7ff f903 	bl	8009e7c <_Z7setLed2h>
			led2Tm = HAL_GetTick();
 800ac76:	f7f6 fafb 	bl	8001270 <HAL_GetTick>
 800ac7a:	6338      	str	r0, [r7, #48]	; 0x30
			ReadRadioData();
 800ac7c:	f7ff ff2e 	bl	800aadc <_Z13ReadRadioDatav>
		}

		if (UsbDev::isTransmiterRdy()) {
 800ac80:	f000 fba4 	bl	800b3cc <_ZN6UsbDev15isTransmiterRdyEv>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d015      	beq.n	800acb6 <uMain+0x156>
			RawData dt;
			if (dataFifo.pop(&dt)) {
 800ac8a:	463b      	mov	r3, r7
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	480d      	ldr	r0, [pc, #52]	; (800acc4 <uMain+0x164>)
 800ac90:	f7ff fc7f 	bl	800a592 <_ZN8DataFifo3popEP7RawData>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00d      	beq.n	800acb6 <uMain+0x156>
				if (mDebug > 3)
 800ac9a:	4b10      	ldr	r3, [pc, #64]	; (800acdc <uMain+0x17c>)
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	2b03      	cmp	r3, #3
 800aca0:	d905      	bls.n	800acae <uMain+0x14e>
					printf("\r\nToUSB: nr=%u L=%u", dt.frameNr, dt.len);
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	79fa      	ldrb	r2, [r7, #7]
 800aca6:	4619      	mov	r1, r3
 800aca8:	480d      	ldr	r0, [pc, #52]	; (800ace0 <uMain+0x180>)
 800acaa:	f000 fbd9 	bl	800b460 <iprintf>
				UsbDev::Transmit(&dt);
 800acae:	463b      	mov	r3, r7
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 fb07 	bl	800b2c4 <_ZN6UsbDev8TransmitEP7RawData>
			}
		}
		reciveFromPC();
 800acb6:	f7ff fe97 	bl	800a9e8 <_Z12reciveFromPCv>

	}
 800acba:	e7ad      	b.n	800ac18 <uMain+0xb8>
 800acbc:	08000120 	.word	0x08000120
 800acc0:	20000558 	.word	0x20000558
 800acc4:	2000159c 	.word	0x2000159c
 800acc8:	0800d08c 	.word	0x0800d08c
 800accc:	0800d0b4 	.word	0x0800d0b4
 800acd0:	1ffff804 	.word	0x1ffff804
 800acd4:	1ffff806 	.word	0x1ffff806
 800acd8:	0800d0c4 	.word	0x0800d0c4
 800acdc:	20000554 	.word	0x20000554
 800ace0:	0800d0dc 	.word	0x0800d0dc

0800ace4 <getHexNibble>:
uint8_t UsbDev::txBuffer[SEND_BUF_SIZE];

#define STX  0x02
#define ETX  0x03

extern "C" uint8_t getHexNibble(uint8_t ch, uint8_t *dt) {
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	4603      	mov	r3, r0
 800acec:	6039      	str	r1, [r7, #0]
 800acee:	71fb      	strb	r3, [r7, #7]
	if (ch >= '0' && ch <= '9')
 800acf0:	79fb      	ldrb	r3, [r7, #7]
 800acf2:	2b2f      	cmp	r3, #47	; 0x2f
 800acf4:	d908      	bls.n	800ad08 <getHexNibble+0x24>
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	2b39      	cmp	r3, #57	; 0x39
 800acfa:	d805      	bhi.n	800ad08 <getHexNibble+0x24>
		*dt = ch - '0';
 800acfc:	79fb      	ldrb	r3, [r7, #7]
 800acfe:	3b30      	subs	r3, #48	; 0x30
 800ad00:	b2da      	uxtb	r2, r3
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	701a      	strb	r2, [r3, #0]
 800ad06:	e019      	b.n	800ad3c <getHexNibble+0x58>
	else if (ch >= 'A' && ch <= 'F')
 800ad08:	79fb      	ldrb	r3, [r7, #7]
 800ad0a:	2b40      	cmp	r3, #64	; 0x40
 800ad0c:	d908      	bls.n	800ad20 <getHexNibble+0x3c>
 800ad0e:	79fb      	ldrb	r3, [r7, #7]
 800ad10:	2b46      	cmp	r3, #70	; 0x46
 800ad12:	d805      	bhi.n	800ad20 <getHexNibble+0x3c>
		*dt = 10 + ch - 'A';
 800ad14:	79fb      	ldrb	r3, [r7, #7]
 800ad16:	3b37      	subs	r3, #55	; 0x37
 800ad18:	b2da      	uxtb	r2, r3
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	701a      	strb	r2, [r3, #0]
 800ad1e:	e00d      	b.n	800ad3c <getHexNibble+0x58>
	else if (ch >= 'a' && ch <= 'f')
 800ad20:	79fb      	ldrb	r3, [r7, #7]
 800ad22:	2b60      	cmp	r3, #96	; 0x60
 800ad24:	d908      	bls.n	800ad38 <getHexNibble+0x54>
 800ad26:	79fb      	ldrb	r3, [r7, #7]
 800ad28:	2b66      	cmp	r3, #102	; 0x66
 800ad2a:	d805      	bhi.n	800ad38 <getHexNibble+0x54>
		*dt = 10 + ch - 'a';
 800ad2c:	79fb      	ldrb	r3, [r7, #7]
 800ad2e:	3b57      	subs	r3, #87	; 0x57
 800ad30:	b2da      	uxtb	r2, r3
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	701a      	strb	r2, [r3, #0]
 800ad36:	e001      	b.n	800ad3c <getHexNibble+0x58>
	else
		return false;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	e000      	b.n	800ad3e <getHexNibble+0x5a>
	return true;
 800ad3c:	2301      	movs	r3, #1
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	370c      	adds	r7, #12
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bc80      	pop	{r7}
 800ad46:	4770      	bx	lr

0800ad48 <getHexByte>:

extern "C" uint8_t getHexByte(const char *src, uint8_t *dt) {
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
	uint8_t b1, b2;
	if (!getHexNibble(*src++, &b1))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	1c5a      	adds	r2, r3, #1
 800ad56:	607a      	str	r2, [r7, #4]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	f107 020f 	add.w	r2, r7, #15
 800ad5e:	4611      	mov	r1, r2
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7ff ffbf 	bl	800ace4 <getHexNibble>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	bf0c      	ite	eq
 800ad6c:	2301      	moveq	r3, #1
 800ad6e:	2300      	movne	r3, #0
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <getHexByte+0x32>
		return false;
 800ad76:	2300      	movs	r3, #0
 800ad78:	e01c      	b.n	800adb4 <getHexByte+0x6c>
	if (!getHexNibble(*src, &b2))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	f107 020e 	add.w	r2, r7, #14
 800ad82:	4611      	mov	r1, r2
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7ff ffad 	bl	800ace4 <getHexNibble>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	bf0c      	ite	eq
 800ad90:	2301      	moveq	r3, #1
 800ad92:	2300      	movne	r3, #0
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d001      	beq.n	800ad9e <getHexByte+0x56>
		return false;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e00a      	b.n	800adb4 <getHexByte+0x6c>
	*dt = (b1 << 4) | b2;
 800ad9e:	7bfb      	ldrb	r3, [r7, #15]
 800ada0:	011b      	lsls	r3, r3, #4
 800ada2:	b25a      	sxtb	r2, r3
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
 800ada6:	b25b      	sxtb	r3, r3
 800ada8:	4313      	orrs	r3, r2
 800adaa:	b25b      	sxtb	r3, r3
 800adac:	b2da      	uxtb	r2, r3
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	701a      	strb	r2, [r3, #0]
	return true;
 800adb2:	2301      	movs	r3, #1
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <getHexWord>:

extern "C" uint8_t getHexWord(const char *src, uint16_t *w) {
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
	uint8_t b1, b2;
	if (!getHexByte(src, &b1))
 800adc6:	f107 030f 	add.w	r3, r7, #15
 800adca:	4619      	mov	r1, r3
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f7ff ffbb 	bl	800ad48 <getHexByte>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	bf0c      	ite	eq
 800add8:	2301      	moveq	r3, #1
 800adda:	2300      	movne	r3, #0
 800addc:	b2db      	uxtb	r3, r3
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d001      	beq.n	800ade6 <getHexWord+0x2a>
		return false;
 800ade2:	2300      	movs	r3, #0
 800ade4:	e01d      	b.n	800ae22 <getHexWord+0x66>
	src += 2;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	3302      	adds	r3, #2
 800adea:	607b      	str	r3, [r7, #4]
	if (!getHexByte(src, &b2))
 800adec:	f107 030e 	add.w	r3, r7, #14
 800adf0:	4619      	mov	r1, r3
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f7ff ffa8 	bl	800ad48 <getHexByte>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	bf0c      	ite	eq
 800adfe:	2301      	moveq	r3, #1
 800ae00:	2300      	movne	r3, #0
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d001      	beq.n	800ae0c <getHexWord+0x50>
		return false;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	e00a      	b.n	800ae22 <getHexWord+0x66>
	*w = b1 << 8 | b2;
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
 800ae0e:	021b      	lsls	r3, r3, #8
 800ae10:	b21a      	sxth	r2, r3
 800ae12:	7bbb      	ldrb	r3, [r7, #14]
 800ae14:	b21b      	sxth	r3, r3
 800ae16:	4313      	orrs	r3, r2
 800ae18:	b21b      	sxth	r3, r3
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	801a      	strh	r2, [r3, #0]
	return true;
 800ae20:	2301      	movs	r3, #1
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <getHexBuf>:

extern "C" uint8_t getHexBuf(const char *src, int len, uint8_t *dst, int max) {
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b084      	sub	sp, #16
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	60f8      	str	r0, [r7, #12]
 800ae32:	60b9      	str	r1, [r7, #8]
 800ae34:	607a      	str	r2, [r7, #4]
 800ae36:	603b      	str	r3, [r7, #0]
	while (max > 0 && len > 0) {
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	dd1d      	ble.n	800ae7a <getHexBuf+0x50>
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	dd1a      	ble.n	800ae7a <getHexBuf+0x50>
		if (!getHexByte(src, dst)) {
 800ae44:	6879      	ldr	r1, [r7, #4]
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f7ff ff7e 	bl	800ad48 <getHexByte>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	bf0c      	ite	eq
 800ae52:	2301      	moveq	r3, #1
 800ae54:	2300      	movne	r3, #0
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d001      	beq.n	800ae60 <getHexBuf+0x36>
			return false;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	e00d      	b.n	800ae7c <getHexBuf+0x52>
		}
		src += 2;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	3302      	adds	r3, #2
 800ae64:	60fb      	str	r3, [r7, #12]
		len -= 2;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	3b02      	subs	r3, #2
 800ae6a:	60bb      	str	r3, [r7, #8]
		dst++;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	607b      	str	r3, [r7, #4]
		max--;
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	3b01      	subs	r3, #1
 800ae76:	603b      	str	r3, [r7, #0]
	while (max > 0 && len > 0) {
 800ae78:	e7de      	b.n	800ae38 <getHexBuf+0xe>
	}
	return true;
 800ae7a:	2301      	movs	r3, #1
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3710      	adds	r7, #16
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <putHexByte>:

const char HexTab[] = "0123456789ABCDEF";
extern "C" uint8_t putHexByte(char *txt, uint8_t b) {
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	70fb      	strb	r3, [r7, #3]
	txt[0] = HexTab[(b >> 4) & 0x0f];
 800ae90:	78fb      	ldrb	r3, [r7, #3]
 800ae92:	091b      	lsrs	r3, r3, #4
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	461a      	mov	r2, r3
 800ae98:	4b08      	ldr	r3, [pc, #32]	; (800aebc <putHexByte+0x38>)
 800ae9a:	5c9a      	ldrb	r2, [r3, r2]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	701a      	strb	r2, [r3, #0]
	txt[1] = HexTab[b & 0x0f];
 800aea0:	78fb      	ldrb	r3, [r7, #3]
 800aea2:	f003 020f 	and.w	r2, r3, #15
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	4904      	ldr	r1, [pc, #16]	; (800aebc <putHexByte+0x38>)
 800aeac:	5c8a      	ldrb	r2, [r1, r2]
 800aeae:	701a      	strb	r2, [r3, #0]
	return 2;
 800aeb0:	2302      	movs	r3, #2
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	370c      	adds	r7, #12
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bc80      	pop	{r7}
 800aeba:	4770      	bx	lr
 800aebc:	0800d2c4 	.word	0x0800d2c4

0800aec0 <putHexWord>:

extern "C" uint8_t putHexWord(char *txt, uint16_t w) {
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	807b      	strh	r3, [r7, #2]
	putHexByte(txt, w >> 8);
 800aecc:	887b      	ldrh	r3, [r7, #2]
 800aece:	121b      	asrs	r3, r3, #8
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	4619      	mov	r1, r3
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7ff ffd5 	bl	800ae84 <putHexByte>
	txt += 2;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	3302      	adds	r3, #2
 800aede:	607b      	str	r3, [r7, #4]
	putHexByte(txt, w);
 800aee0:	887b      	ldrh	r3, [r7, #2]
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	4619      	mov	r1, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7ff ffcc 	bl	800ae84 <putHexByte>
	return 4;
 800aeec:	2304      	movs	r3, #4
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <_ZN6RxData4pushEh>:

bool RxData::push(uint8_t dt) {
 800aef6:	b480      	push	{r7}
 800aef8:	b085      	sub	sp, #20
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
 800aefe:	460b      	mov	r3, r1
 800af00:	70fb      	strb	r3, [r7, #3]

	mNewData = true;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204

	uint16_t h = mHead;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800af10:	81fb      	strh	r3, [r7, #14]
	if (++h == RECIVE_BUF_SIZE)
 800af12:	89fb      	ldrh	r3, [r7, #14]
 800af14:	3301      	adds	r3, #1
 800af16:	81fb      	strh	r3, [r7, #14]
 800af18:	89fb      	ldrh	r3, [r7, #14]
 800af1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af1e:	bf0c      	ite	eq
 800af20:	2301      	moveq	r3, #1
 800af22:	2300      	movne	r3, #0
 800af24:	b2db      	uxtb	r3, r3
 800af26:	2b00      	cmp	r3, #0
 800af28:	d001      	beq.n	800af2e <_ZN6RxData4pushEh+0x38>
		h = 0;
 800af2a:	2300      	movs	r3, #0
 800af2c:	81fb      	strh	r3, [r7, #14]
	if (h != mTail) {
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800af34:	89fa      	ldrh	r2, [r7, #14]
 800af36:	429a      	cmp	r2, r3
 800af38:	d00c      	beq.n	800af54 <_ZN6RxData4pushEh+0x5e>
		buf[mHead] = dt;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800af40:	4619      	mov	r1, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	78fa      	ldrb	r2, [r7, #3]
 800af46:	545a      	strb	r2, [r3, r1]
		mHead = h;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	89fa      	ldrh	r2, [r7, #14]
 800af4c:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
		return true;
 800af50:	2301      	movs	r3, #1
 800af52:	e000      	b.n	800af56 <_ZN6RxData4pushEh+0x60>
	} else
		return false;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bc80      	pop	{r7}
 800af5e:	4770      	bx	lr

0800af60 <_ZN6RxData3popEPh>:

bool RxData::pop(uint8_t *dt) {
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
	if (mTail != mHead) {
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8b3 2202 	ldrh.w	r2, [r3, #514]	; 0x202
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800af76:	429a      	cmp	r2, r3
 800af78:	d020      	beq.n	800afbc <_ZN6RxData3popEPh+0x5c>
		*dt = buf[mTail];
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800af80:	461a      	mov	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	5c9a      	ldrb	r2, [r3, r2]
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	701a      	strb	r2, [r3, #0]
		if (++mTail == RECIVE_BUF_SIZE)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800af90:	3301      	adds	r3, #1
 800af92:	b29a      	uxth	r2, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800afa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afa4:	bf0c      	ite	eq
 800afa6:	2301      	moveq	r3, #1
 800afa8:	2300      	movne	r3, #0
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	2b00      	cmp	r3, #0
 800afae:	d003      	beq.n	800afb8 <_ZN6RxData3popEPh+0x58>
			mTail = 0;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
		return true;
 800afb8:	2301      	movs	r3, #1
 800afba:	e000      	b.n	800afbe <_ZN6RxData3popEPh+0x5e>

	} else
		return false;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	370c      	adds	r7, #12
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bc80      	pop	{r7}
 800afc6:	4770      	bx	lr

0800afc8 <_ZN6RxData8getFrameEPci>:

int RxData::getFrame(char *frame, int max) {
 800afc8:	b580      	push	{r7, lr}
 800afca:	b08a      	sub	sp, #40	; 0x28
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
	bool fnd = false;
 800afd4:	2300      	movs	r3, #0
 800afd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int frameLen = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	623b      	str	r3, [r7, #32]
	if (mNewData) {
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d06f      	beq.n	800b0c8 <_ZN6RxData8getFrameEPci+0x100>

		bool tooLong = false;
 800afe8:	2300      	movs	r3, #0
 800afea:	77fb      	strb	r3, [r7, #31]

		bool cp = false;
 800afec:	2300      	movs	r3, #0
 800afee:	77bb      	strb	r3, [r7, #30]
		uint16_t memTail = mTail;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800aff6:	82fb      	strh	r3, [r7, #22]
		uint8_t a;
		while (pop(&a)) {
 800aff8:	f107 0315 	add.w	r3, r7, #21
 800affc:	4619      	mov	r1, r3
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f7ff ffae 	bl	800af60 <_ZN6RxData3popEPh>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d022      	beq.n	800b050 <_ZN6RxData8getFrameEPci+0x88>

			if (a == STX) {
 800b00a:	7d7b      	ldrb	r3, [r7, #21]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d104      	bne.n	800b01a <_ZN6RxData8getFrameEPci+0x52>
				frameLen = 0;
 800b010:	2300      	movs	r3, #0
 800b012:	623b      	str	r3, [r7, #32]
				cp = true;
 800b014:	2301      	movs	r3, #1
 800b016:	77bb      	strb	r3, [r7, #30]
 800b018:	e7ee      	b.n	800aff8 <_ZN6RxData8getFrameEPci+0x30>
			} else if (a == ETX) {
 800b01a:	7d7b      	ldrb	r3, [r7, #21]
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	d103      	bne.n	800b028 <_ZN6RxData8getFrameEPci+0x60>
				fnd = true;
 800b020:	2301      	movs	r3, #1
 800b022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800b026:	e013      	b.n	800b050 <_ZN6RxData8getFrameEPci+0x88>
			} else {
				if (cp) {
 800b028:	7fbb      	ldrb	r3, [r7, #30]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d0e4      	beq.n	800aff8 <_ZN6RxData8getFrameEPci+0x30>
					//zabezpieczenie jakby by� pakiet, kt�ry nie mie�ci si� w buforze rxFrame
					if (frameLen < max - 1) {
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	3b01      	subs	r3, #1
 800b032:	6a3a      	ldr	r2, [r7, #32]
 800b034:	429a      	cmp	r2, r3
 800b036:	da08      	bge.n	800b04a <_ZN6RxData8getFrameEPci+0x82>
						frame[frameLen++] = a;
 800b038:	6a3b      	ldr	r3, [r7, #32]
 800b03a:	1c5a      	adds	r2, r3, #1
 800b03c:	623a      	str	r2, [r7, #32]
 800b03e:	461a      	mov	r2, r3
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	4413      	add	r3, r2
 800b044:	7d7a      	ldrb	r2, [r7, #21]
 800b046:	701a      	strb	r2, [r3, #0]
 800b048:	e7d6      	b.n	800aff8 <_ZN6RxData8getFrameEPci+0x30>
					} else
						tooLong = true;
 800b04a:	2301      	movs	r3, #1
 800b04c:	77fb      	strb	r3, [r7, #31]
		while (pop(&a)) {
 800b04e:	e7d3      	b.n	800aff8 <_ZN6RxData8getFrameEPci+0x30>

				}
			}
		}
		if (!fnd) {
 800b050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b054:	f083 0301 	eor.w	r3, r3, #1
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d022      	beq.n	800b0a4 <_ZN6RxData8getFrameEPci+0xdc>
			mTail = memTail;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	8afa      	ldrh	r2, [r7, #22]
 800b062:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
			int h = mHead;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800b06c:	61bb      	str	r3, [r7, #24]
			if (++h == RECIVE_BUF_SIZE) {
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	3301      	adds	r3, #1
 800b072:	61bb      	str	r3, [r7, #24]
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b07a:	bf0c      	ite	eq
 800b07c:	2301      	moveq	r3, #1
 800b07e:	2300      	movne	r3, #0
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b00      	cmp	r3, #0
 800b084:	d001      	beq.n	800b08a <_ZN6RxData8getFrameEPci+0xc2>
				h = 0;
 800b086:	2300      	movs	r3, #0
 800b088:	61bb      	str	r3, [r7, #24]
			}
			if (h == mTail) {
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800b090:	461a      	mov	r2, r3
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	4293      	cmp	r3, r2
 800b096:	d105      	bne.n	800b0a4 <_ZN6RxData8getFrameEPci+0xdc>
				//pe�ny bufor, ale w nim nie ma ramki
				mTail = mHead;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f8b3 2200 	ldrh.w	r2, [r3, #512]	; 0x200
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
			}
		}
		if (mTail == mHead) {
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8b3 2202 	ldrh.w	r2, [r3, #514]	; 0x202
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d103      	bne.n	800b0bc <_ZN6RxData8getFrameEPci+0xf4>
			mNewData = false;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
		if (tooLong)
 800b0bc:	7ffb      	ldrb	r3, [r7, #31]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d002      	beq.n	800b0c8 <_ZN6RxData8getFrameEPci+0x100>
			fnd = false;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	if (fnd) {
 800b0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d006      	beq.n	800b0de <_ZN6RxData8getFrameEPci+0x116>
		frame[frameLen] = 0;
 800b0d0:	6a3b      	ldr	r3, [r7, #32]
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	701a      	strb	r2, [r3, #0]
		return frameLen;
 800b0da:	6a3b      	ldr	r3, [r7, #32]
 800b0dc:	e001      	b.n	800b0e2 <_ZN6RxData8getFrameEPci+0x11a>
	} else
		return -1;
 800b0de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3728      	adds	r7, #40	; 0x28
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
	...

0800b0ec <_ZN6UsbDev4initEv>:

void UsbDev::init() {
 800b0ec:	b480      	push	{r7}
 800b0ee:	af00      	add	r7, sp, #0
	rxData.mNewData = false;
 800b0f0:	4b03      	ldr	r3, [pc, #12]	; (800b100 <_ZN6UsbDev4initEv+0x14>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 800b0f8:	bf00      	nop
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bc80      	pop	{r7}
 800b0fe:	4770      	bx	lr
 800b100:	200020ac 	.word	0x200020ac

0800b104 <CDC_UserOnReciveData>:

extern "C" void CDC_UserOnReciveData(uint8_t *Buf, uint32_t Len) {
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
	UsbDev::OnReciveData(Buf, Len);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 f805 	bl	800b120 <_ZN6UsbDev12OnReciveDataEPhm>
}
 800b116:	bf00      	nop
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
	...

0800b120 <_ZN6UsbDev12OnReciveDataEPhm>:

int usbfifoFullCnt;

void UsbDev::OnReciveData(uint8_t *Buf, uint32_t Len) {
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < Len; i++) {
 800b12a:	2300      	movs	r3, #0
 800b12c:	60fb      	str	r3, [r7, #12]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	429a      	cmp	r2, r3
 800b134:	d216      	bcs.n	800b164 <_ZN6UsbDev12OnReciveDataEPhm+0x44>
		if (!rxData.push(Buf[i])) {
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	4413      	add	r3, r2
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	4619      	mov	r1, r3
 800b140:	480a      	ldr	r0, [pc, #40]	; (800b16c <_ZN6UsbDev12OnReciveDataEPhm+0x4c>)
 800b142:	f7ff fed8 	bl	800aef6 <_ZN6RxData4pushEh>
 800b146:	4603      	mov	r3, r0
 800b148:	f083 0301 	eor.w	r3, r3, #1
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d004      	beq.n	800b15c <_ZN6UsbDev12OnReciveDataEPhm+0x3c>
			usbfifoFullCnt++;
 800b152:	4b07      	ldr	r3, [pc, #28]	; (800b170 <_ZN6UsbDev12OnReciveDataEPhm+0x50>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	3301      	adds	r3, #1
 800b158:	4a05      	ldr	r2, [pc, #20]	; (800b170 <_ZN6UsbDev12OnReciveDataEPhm+0x50>)
 800b15a:	6013      	str	r3, [r2, #0]
	for (uint32_t i = 0; i < Len; i++) {
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	3301      	adds	r3, #1
 800b160:	60fb      	str	r3, [r7, #12]
 800b162:	e7e4      	b.n	800b12e <_ZN6UsbDev12OnReciveDataEPhm+0xe>
		}
	}
}
 800b164:	bf00      	nop
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	200020ac 	.word	0x200020ac
 800b170:	200024b4 	.word	0x200024b4

0800b174 <_ZN6UsbDev8getFrameEPhi>:

// je�li jest bufor funkcja zwraca d�ugosc danych w buforze
// je�li nie ma danych, zwraca -1

int UsbDev::getFrame(uint8_t *binFrame, int binMax) {
 800b174:	b580      	push	{r7, lr}
 800b176:	b098      	sub	sp, #96	; 0x60
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
	char rxFrame[RECIVE_FRAME_SIZE];
	int oLen = -1;
 800b17e:	f04f 33ff 	mov.w	r3, #4294967295
 800b182:	65fb      	str	r3, [r7, #92]	; 0x5c

	int len = rxData.getFrame(rxFrame, sizeof(rxFrame));
 800b184:	f107 0308 	add.w	r3, r7, #8
 800b188:	2250      	movs	r2, #80	; 0x50
 800b18a:	4619      	mov	r1, r3
 800b18c:	4809      	ldr	r0, [pc, #36]	; (800b1b4 <_ZN6UsbDev8getFrameEPhi+0x40>)
 800b18e:	f7ff ff1b 	bl	800afc8 <_ZN6RxData8getFrameEPci>
 800b192:	65b8      	str	r0, [r7, #88]	; 0x58
	if (len > 0) {
 800b194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b196:	2b00      	cmp	r3, #0
 800b198:	dd07      	ble.n	800b1aa <_ZN6UsbDev8getFrameEPhi+0x36>
		oLen = translateFrame(binFrame, binMax, rxFrame, len);
 800b19a:	f107 0208 	add.w	r2, r7, #8
 800b19e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1a0:	6839      	ldr	r1, [r7, #0]
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f808 	bl	800b1b8 <_ZN6UsbDev14translateFrameEPhiPci>
 800b1a8:	65f8      	str	r0, [r7, #92]	; 0x5c
	}
	return oLen;
 800b1aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3760      	adds	r7, #96	; 0x60
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	200020ac 	.word	0x200020ac

0800b1b8 <_ZN6UsbDev14translateFrameEPhiPci>:

int UsbDev::translateFrame(uint8_t *binFrame, int binMax, char *txtFR, int len) {
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b088      	sub	sp, #32
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	607a      	str	r2, [r7, #4]
 800b1c4:	603b      	str	r3, [r7, #0]
	if (len < 6) {
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2b05      	cmp	r3, #5
 800b1ca:	dc04      	bgt.n	800b1d6 <_ZN6UsbDev14translateFrameEPhiPci+0x1e>
		printf("Error, frame too short\r\n");
 800b1cc:	4837      	ldr	r0, [pc, #220]	; (800b2ac <_ZN6UsbDev14translateFrameEPhiPci+0xf4>)
 800b1ce:	f000 f9cf 	bl	800b570 <puts>
		return false;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	e065      	b.n	800b2a2 <_ZN6UsbDev14translateFrameEPhiPci+0xea>
	}

	uint16_t suma = 0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	83fb      	strh	r3, [r7, #30]
	for (int i = 0; i < len - 4; i++) {
 800b1da:	2300      	movs	r3, #0
 800b1dc:	61bb      	str	r3, [r7, #24]
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	3b04      	subs	r3, #4
 800b1e2:	69ba      	ldr	r2, [r7, #24]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	da0b      	bge.n	800b200 <_ZN6UsbDev14translateFrameEPhiPci+0x48>
		suma += (uint8_t) (txtFR[i]);
 800b1e8:	69bb      	ldr	r3, [r7, #24]
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	8bfb      	ldrh	r3, [r7, #30]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	83fb      	strh	r3, [r7, #30]
	for (int i = 0; i < len - 4; i++) {
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	61bb      	str	r3, [r7, #24]
 800b1fe:	e7ee      	b.n	800b1de <_ZN6UsbDev14translateFrameEPhiPci+0x26>
	}
	uint16_t suma2;
	bool q1 = getHexWord(&txtFR[len - 4], &suma2);
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	3b04      	subs	r3, #4
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	4413      	add	r3, r2
 800b208:	f107 0214 	add.w	r2, r7, #20
 800b20c:	4611      	mov	r1, r2
 800b20e:	4618      	mov	r0, r3
 800b210:	f7ff fdd4 	bl	800adbc <getHexWord>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	bf14      	ite	ne
 800b21a:	2301      	movne	r3, #1
 800b21c:	2300      	moveq	r3, #0
 800b21e:	75fb      	strb	r3, [r7, #23]
	if (!q1)
 800b220:	7dfb      	ldrb	r3, [r7, #23]
 800b222:	f083 0301 	eor.w	r3, r3, #1
 800b226:	b2db      	uxtb	r3, r3
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <_ZN6UsbDev14translateFrameEPhiPci+0x7a>
		printf("Error, HexFormat \r\n");
 800b22c:	4820      	ldr	r0, [pc, #128]	; (800b2b0 <_ZN6UsbDev14translateFrameEPhiPci+0xf8>)
 800b22e:	f000 f99f 	bl	800b570 <puts>

	if (mDebug >= 3) {
 800b232:	4b20      	ldr	r3, [pc, #128]	; (800b2b4 <_ZN6UsbDev14translateFrameEPhiPci+0xfc>)
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	2b02      	cmp	r3, #2
 800b238:	d908      	bls.n	800b24c <_ZN6UsbDev14translateFrameEPhiPci+0x94>
		printf("H>:");
 800b23a:	481f      	ldr	r0, [pc, #124]	; (800b2b8 <_ZN6UsbDev14translateFrameEPhiPci+0x100>)
 800b23c:	f000 f910 	bl	800b460 <iprintf>
		printf(txtFR);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f90d 	bl	800b460 <iprintf>
		printf("\r\n");
 800b246:	481d      	ldr	r0, [pc, #116]	; (800b2bc <_ZN6UsbDev14translateFrameEPhiPci+0x104>)
 800b248:	f000 f992 	bl	800b570 <puts>
	}

	if (suma != suma2) {
 800b24c:	8abb      	ldrh	r3, [r7, #20]
 800b24e:	8bfa      	ldrh	r2, [r7, #30]
 800b250:	429a      	cmp	r2, r3
 800b252:	d008      	beq.n	800b266 <_ZN6UsbDev14translateFrameEPhiPci+0xae>
		printf("Error, suma=%04X suma2=%04X\r\n", suma, suma2);
 800b254:	8bfb      	ldrh	r3, [r7, #30]
 800b256:	8aba      	ldrh	r2, [r7, #20]
 800b258:	4619      	mov	r1, r3
 800b25a:	4819      	ldr	r0, [pc, #100]	; (800b2c0 <_ZN6UsbDev14translateFrameEPhiPci+0x108>)
 800b25c:	f000 f900 	bl	800b460 <iprintf>
		return -1;
 800b260:	f04f 33ff 	mov.w	r3, #4294967295
 800b264:	e01d      	b.n	800b2a2 <_ZN6UsbDev14translateFrameEPhiPci+0xea>
	}
	memset(binFrame, 0, binMax);
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	461a      	mov	r2, r3
 800b26a:	2100      	movs	r1, #0
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f000 f8ee 	bl	800b44e <memset>
	len -= 4;
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	3b04      	subs	r3, #4
 800b276:	603b      	str	r3, [r7, #0]
	if (getHexBuf(txtFR, len, binFrame, binMax))
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f7ff fdd3 	bl	800ae2a <getHexBuf>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	bf14      	ite	ne
 800b28a:	2301      	movne	r3, #1
 800b28c:	2300      	moveq	r3, #0
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	2b00      	cmp	r3, #0
 800b292:	d004      	beq.n	800b29e <_ZN6UsbDev14translateFrameEPhiPci+0xe6>
		return len / 2;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	0fda      	lsrs	r2, r3, #31
 800b298:	4413      	add	r3, r2
 800b29a:	105b      	asrs	r3, r3, #1
 800b29c:	e001      	b.n	800b2a2 <_ZN6UsbDev14translateFrameEPhiPci+0xea>
	else
		return -1;
 800b29e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3720      	adds	r7, #32
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	0800d0f0 	.word	0x0800d0f0
 800b2b0:	0800d108 	.word	0x0800d108
 800b2b4:	20000554 	.word	0x20000554
 800b2b8:	0800d11c 	.word	0x0800d11c
 800b2bc:	0800d120 	.word	0x0800d120
 800b2c0:	0800d124 	.word	0x0800d124

0800b2c4 <_ZN6UsbDev8TransmitEP7RawData>:

bool UsbDev::Transmit(RawData *pFrame) {
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b088      	sub	sp, #32
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]

	int ptr = 0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	61fb      	str	r3, [r7, #28]
	mBuffer[ptr++] = STX;
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	1c5a      	adds	r2, r3, #1
 800b2d4:	61fa      	str	r2, [r7, #28]
 800b2d6:	4a3a      	ldr	r2, [pc, #232]	; (800b3c0 <_ZN6UsbDev8TransmitEP7RawData+0xfc>)
 800b2d8:	2102      	movs	r1, #2
 800b2da:	54d1      	strb	r1, [r2, r3]
	uint8_t *p = (uint8_t*) pFrame;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	61bb      	str	r3, [r7, #24]

	int n = pFrame->len;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	79db      	ldrb	r3, [r3, #7]
 800b2e4:	617b      	str	r3, [r7, #20]
	if (n > MAX_RAW_DATA_LEN)
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	2b20      	cmp	r3, #32
 800b2ea:	dd01      	ble.n	800b2f0 <_ZN6UsbDev8TransmitEP7RawData+0x2c>
		n = MAX_RAW_DATA_LEN;
 800b2ec:	2320      	movs	r3, #32
 800b2ee:	617b      	str	r3, [r7, #20]
	n += 12;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	330c      	adds	r3, #12
 800b2f4:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < n; i++) {
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	613b      	str	r3, [r7, #16]
 800b2fa:	693a      	ldr	r2, [r7, #16]
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	da12      	bge.n	800b328 <_ZN6UsbDev8TransmitEP7RawData+0x64>
		ptr += putHexByte(&mBuffer[ptr], *p++);
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	4a2e      	ldr	r2, [pc, #184]	; (800b3c0 <_ZN6UsbDev8TransmitEP7RawData+0xfc>)
 800b306:	1898      	adds	r0, r3, r2
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	1c5a      	adds	r2, r3, #1
 800b30c:	61ba      	str	r2, [r7, #24]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	4619      	mov	r1, r3
 800b312:	f7ff fdb7 	bl	800ae84 <putHexByte>
 800b316:	4603      	mov	r3, r0
 800b318:	461a      	mov	r2, r3
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	4413      	add	r3, r2
 800b31e:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < n; i++) {
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	3301      	adds	r3, #1
 800b324:	613b      	str	r3, [r7, #16]
 800b326:	e7e8      	b.n	800b2fa <_ZN6UsbDev8TransmitEP7RawData+0x36>
	}

	uint16_t suma = 0;
 800b328:	2300      	movs	r3, #0
 800b32a:	81fb      	strh	r3, [r7, #14]
	for (int i = 1; i < ptr; i++) {
 800b32c:	2301      	movs	r3, #1
 800b32e:	60bb      	str	r3, [r7, #8]
 800b330:	68ba      	ldr	r2, [r7, #8]
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	429a      	cmp	r2, r3
 800b336:	da0b      	bge.n	800b350 <_ZN6UsbDev8TransmitEP7RawData+0x8c>
		suma += mBuffer[i];
 800b338:	4a21      	ldr	r2, [pc, #132]	; (800b3c0 <_ZN6UsbDev8TransmitEP7RawData+0xfc>)
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	4413      	add	r3, r2
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	b29a      	uxth	r2, r3
 800b342:	89fb      	ldrh	r3, [r7, #14]
 800b344:	4413      	add	r3, r2
 800b346:	81fb      	strh	r3, [r7, #14]
	for (int i = 1; i < ptr; i++) {
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	3301      	adds	r3, #1
 800b34c:	60bb      	str	r3, [r7, #8]
 800b34e:	e7ef      	b.n	800b330 <_ZN6UsbDev8TransmitEP7RawData+0x6c>
	}

	ptr += putHexWord(&mBuffer[ptr], suma);
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	4a1b      	ldr	r2, [pc, #108]	; (800b3c0 <_ZN6UsbDev8TransmitEP7RawData+0xfc>)
 800b354:	4413      	add	r3, r2
 800b356:	89fa      	ldrh	r2, [r7, #14]
 800b358:	4611      	mov	r1, r2
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7ff fdb0 	bl	800aec0 <putHexWord>
 800b360:	4603      	mov	r3, r0
 800b362:	461a      	mov	r2, r3
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	4413      	add	r3, r2
 800b368:	61fb      	str	r3, [r7, #28]
	mBuffer[ptr++] = ETX;
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	1c5a      	adds	r2, r3, #1
 800b36e:	61fa      	str	r2, [r7, #28]
 800b370:	4a13      	ldr	r2, [pc, #76]	; (800b3c0 <_ZN6UsbDev8TransmitEP7RawData+0xfc>)
 800b372:	2103      	movs	r1, #3
 800b374:	54d1      	strb	r1, [r2, r3]
	mBuffer[ptr++] = '\r';
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	1c5a      	adds	r2, r3, #1
 800b37a:	61fa      	str	r2, [r7, #28]
 800b37c:	4a10      	ldr	r2, [pc, #64]	; (800b3c0 <_ZN6UsbDev8TransmitEP7RawData+0xfc>)
 800b37e:	210d      	movs	r1, #13
 800b380:	54d1      	strb	r1, [r2, r3]
	mBuffer[ptr++] = '\n';
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	1c5a      	adds	r2, r3, #1
 800b386:	61fa      	str	r2, [r7, #28]
 800b388:	4a0d      	ldr	r2, [pc, #52]	; (800b3c0 <_ZN6UsbDev8TransmitEP7RawData+0xfc>)
 800b38a:	210a      	movs	r1, #10
 800b38c:	54d1      	strb	r1, [r2, r3]
	if (mDebug > 3)
 800b38e:	4b0d      	ldr	r3, [pc, #52]	; (800b3c4 <_ZN6UsbDev8TransmitEP7RawData+0x100>)
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	2b03      	cmp	r3, #3
 800b394:	d903      	bls.n	800b39e <_ZN6UsbDev8TransmitEP7RawData+0xda>
		printf(" ptr=%u", ptr);
 800b396:	69f9      	ldr	r1, [r7, #28]
 800b398:	480b      	ldr	r0, [pc, #44]	; (800b3c8 <_ZN6UsbDev8TransmitEP7RawData+0x104>)
 800b39a:	f000 f861 	bl	800b460 <iprintf>

	return (CDC_Transmit_FS((uint8_t*) mBuffer, ptr) == USBD_OK);
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	4806      	ldr	r0, [pc, #24]	; (800b3c0 <_ZN6UsbDev8TransmitEP7RawData+0xfc>)
 800b3a6:	f7fe f857 	bl	8009458 <CDC_Transmit_FS>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	bf0c      	ite	eq
 800b3b0:	2301      	moveq	r3, #1
 800b3b2:	2300      	movne	r3, #0
 800b3b4:	b2db      	uxtb	r3, r3
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3720      	adds	r7, #32
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	200022b4 	.word	0x200022b4
 800b3c4:	20000554 	.word	0x20000554
 800b3c8:	0800d144 	.word	0x0800d144

0800b3cc <_ZN6UsbDev15isTransmiterRdyEv>:

bool UsbDev::isTransmiterRdy() {
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	af00      	add	r7, sp, #0

	return CDC_IsTransmiterRdy();
 800b3d0:	f7fd ff80 	bl	80092d4 <CDC_IsTransmiterRdy>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	bf14      	ite	ne
 800b3da:	2301      	movne	r3, #1
 800b3dc:	2300      	moveq	r3, #0
 800b3de:	b2db      	uxtb	r3, r3
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <__errno>:
 800b3e4:	4b01      	ldr	r3, [pc, #4]	; (800b3ec <__errno+0x8>)
 800b3e6:	6818      	ldr	r0, [r3, #0]
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	20000184 	.word	0x20000184

0800b3f0 <__libc_init_array>:
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	2500      	movs	r5, #0
 800b3f4:	4e0c      	ldr	r6, [pc, #48]	; (800b428 <__libc_init_array+0x38>)
 800b3f6:	4c0d      	ldr	r4, [pc, #52]	; (800b42c <__libc_init_array+0x3c>)
 800b3f8:	1ba4      	subs	r4, r4, r6
 800b3fa:	10a4      	asrs	r4, r4, #2
 800b3fc:	42a5      	cmp	r5, r4
 800b3fe:	d109      	bne.n	800b414 <__libc_init_array+0x24>
 800b400:	f001 fa4e 	bl	800c8a0 <_init>
 800b404:	2500      	movs	r5, #0
 800b406:	4e0a      	ldr	r6, [pc, #40]	; (800b430 <__libc_init_array+0x40>)
 800b408:	4c0a      	ldr	r4, [pc, #40]	; (800b434 <__libc_init_array+0x44>)
 800b40a:	1ba4      	subs	r4, r4, r6
 800b40c:	10a4      	asrs	r4, r4, #2
 800b40e:	42a5      	cmp	r5, r4
 800b410:	d105      	bne.n	800b41e <__libc_init_array+0x2e>
 800b412:	bd70      	pop	{r4, r5, r6, pc}
 800b414:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b418:	4798      	blx	r3
 800b41a:	3501      	adds	r5, #1
 800b41c:	e7ee      	b.n	800b3fc <__libc_init_array+0xc>
 800b41e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b422:	4798      	blx	r3
 800b424:	3501      	adds	r5, #1
 800b426:	e7f2      	b.n	800b40e <__libc_init_array+0x1e>
 800b428:	0800d370 	.word	0x0800d370
 800b42c:	0800d370 	.word	0x0800d370
 800b430:	0800d370 	.word	0x0800d370
 800b434:	0800d374 	.word	0x0800d374

0800b438 <memcpy>:
 800b438:	b510      	push	{r4, lr}
 800b43a:	1e43      	subs	r3, r0, #1
 800b43c:	440a      	add	r2, r1
 800b43e:	4291      	cmp	r1, r2
 800b440:	d100      	bne.n	800b444 <memcpy+0xc>
 800b442:	bd10      	pop	{r4, pc}
 800b444:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b448:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b44c:	e7f7      	b.n	800b43e <memcpy+0x6>

0800b44e <memset>:
 800b44e:	4603      	mov	r3, r0
 800b450:	4402      	add	r2, r0
 800b452:	4293      	cmp	r3, r2
 800b454:	d100      	bne.n	800b458 <memset+0xa>
 800b456:	4770      	bx	lr
 800b458:	f803 1b01 	strb.w	r1, [r3], #1
 800b45c:	e7f9      	b.n	800b452 <memset+0x4>
	...

0800b460 <iprintf>:
 800b460:	b40f      	push	{r0, r1, r2, r3}
 800b462:	4b0a      	ldr	r3, [pc, #40]	; (800b48c <iprintf+0x2c>)
 800b464:	b513      	push	{r0, r1, r4, lr}
 800b466:	681c      	ldr	r4, [r3, #0]
 800b468:	b124      	cbz	r4, 800b474 <iprintf+0x14>
 800b46a:	69a3      	ldr	r3, [r4, #24]
 800b46c:	b913      	cbnz	r3, 800b474 <iprintf+0x14>
 800b46e:	4620      	mov	r0, r4
 800b470:	f000 fb18 	bl	800baa4 <__sinit>
 800b474:	ab05      	add	r3, sp, #20
 800b476:	9a04      	ldr	r2, [sp, #16]
 800b478:	68a1      	ldr	r1, [r4, #8]
 800b47a:	4620      	mov	r0, r4
 800b47c:	9301      	str	r3, [sp, #4]
 800b47e:	f000 fe27 	bl	800c0d0 <_vfiprintf_r>
 800b482:	b002      	add	sp, #8
 800b484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b488:	b004      	add	sp, #16
 800b48a:	4770      	bx	lr
 800b48c:	20000184 	.word	0x20000184

0800b490 <putchar>:
 800b490:	b538      	push	{r3, r4, r5, lr}
 800b492:	4b08      	ldr	r3, [pc, #32]	; (800b4b4 <putchar+0x24>)
 800b494:	4605      	mov	r5, r0
 800b496:	681c      	ldr	r4, [r3, #0]
 800b498:	b124      	cbz	r4, 800b4a4 <putchar+0x14>
 800b49a:	69a3      	ldr	r3, [r4, #24]
 800b49c:	b913      	cbnz	r3, 800b4a4 <putchar+0x14>
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f000 fb00 	bl	800baa4 <__sinit>
 800b4a4:	68a2      	ldr	r2, [r4, #8]
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4ae:	f001 b8ad 	b.w	800c60c <_putc_r>
 800b4b2:	bf00      	nop
 800b4b4:	20000184 	.word	0x20000184

0800b4b8 <_puts_r>:
 800b4b8:	b570      	push	{r4, r5, r6, lr}
 800b4ba:	460e      	mov	r6, r1
 800b4bc:	4605      	mov	r5, r0
 800b4be:	b118      	cbz	r0, 800b4c8 <_puts_r+0x10>
 800b4c0:	6983      	ldr	r3, [r0, #24]
 800b4c2:	b90b      	cbnz	r3, 800b4c8 <_puts_r+0x10>
 800b4c4:	f000 faee 	bl	800baa4 <__sinit>
 800b4c8:	69ab      	ldr	r3, [r5, #24]
 800b4ca:	68ac      	ldr	r4, [r5, #8]
 800b4cc:	b913      	cbnz	r3, 800b4d4 <_puts_r+0x1c>
 800b4ce:	4628      	mov	r0, r5
 800b4d0:	f000 fae8 	bl	800baa4 <__sinit>
 800b4d4:	4b23      	ldr	r3, [pc, #140]	; (800b564 <_puts_r+0xac>)
 800b4d6:	429c      	cmp	r4, r3
 800b4d8:	d117      	bne.n	800b50a <_puts_r+0x52>
 800b4da:	686c      	ldr	r4, [r5, #4]
 800b4dc:	89a3      	ldrh	r3, [r4, #12]
 800b4de:	071b      	lsls	r3, r3, #28
 800b4e0:	d51d      	bpl.n	800b51e <_puts_r+0x66>
 800b4e2:	6923      	ldr	r3, [r4, #16]
 800b4e4:	b1db      	cbz	r3, 800b51e <_puts_r+0x66>
 800b4e6:	3e01      	subs	r6, #1
 800b4e8:	68a3      	ldr	r3, [r4, #8]
 800b4ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	60a3      	str	r3, [r4, #8]
 800b4f2:	b9e9      	cbnz	r1, 800b530 <_puts_r+0x78>
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	da2e      	bge.n	800b556 <_puts_r+0x9e>
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	210a      	movs	r1, #10
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	f000 f921 	bl	800b744 <__swbuf_r>
 800b502:	3001      	adds	r0, #1
 800b504:	d011      	beq.n	800b52a <_puts_r+0x72>
 800b506:	200a      	movs	r0, #10
 800b508:	e011      	b.n	800b52e <_puts_r+0x76>
 800b50a:	4b17      	ldr	r3, [pc, #92]	; (800b568 <_puts_r+0xb0>)
 800b50c:	429c      	cmp	r4, r3
 800b50e:	d101      	bne.n	800b514 <_puts_r+0x5c>
 800b510:	68ac      	ldr	r4, [r5, #8]
 800b512:	e7e3      	b.n	800b4dc <_puts_r+0x24>
 800b514:	4b15      	ldr	r3, [pc, #84]	; (800b56c <_puts_r+0xb4>)
 800b516:	429c      	cmp	r4, r3
 800b518:	bf08      	it	eq
 800b51a:	68ec      	ldreq	r4, [r5, #12]
 800b51c:	e7de      	b.n	800b4dc <_puts_r+0x24>
 800b51e:	4621      	mov	r1, r4
 800b520:	4628      	mov	r0, r5
 800b522:	f000 f961 	bl	800b7e8 <__swsetup_r>
 800b526:	2800      	cmp	r0, #0
 800b528:	d0dd      	beq.n	800b4e6 <_puts_r+0x2e>
 800b52a:	f04f 30ff 	mov.w	r0, #4294967295
 800b52e:	bd70      	pop	{r4, r5, r6, pc}
 800b530:	2b00      	cmp	r3, #0
 800b532:	da04      	bge.n	800b53e <_puts_r+0x86>
 800b534:	69a2      	ldr	r2, [r4, #24]
 800b536:	429a      	cmp	r2, r3
 800b538:	dc06      	bgt.n	800b548 <_puts_r+0x90>
 800b53a:	290a      	cmp	r1, #10
 800b53c:	d004      	beq.n	800b548 <_puts_r+0x90>
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	1c5a      	adds	r2, r3, #1
 800b542:	6022      	str	r2, [r4, #0]
 800b544:	7019      	strb	r1, [r3, #0]
 800b546:	e7cf      	b.n	800b4e8 <_puts_r+0x30>
 800b548:	4622      	mov	r2, r4
 800b54a:	4628      	mov	r0, r5
 800b54c:	f000 f8fa 	bl	800b744 <__swbuf_r>
 800b550:	3001      	adds	r0, #1
 800b552:	d1c9      	bne.n	800b4e8 <_puts_r+0x30>
 800b554:	e7e9      	b.n	800b52a <_puts_r+0x72>
 800b556:	200a      	movs	r0, #10
 800b558:	6823      	ldr	r3, [r4, #0]
 800b55a:	1c5a      	adds	r2, r3, #1
 800b55c:	6022      	str	r2, [r4, #0]
 800b55e:	7018      	strb	r0, [r3, #0]
 800b560:	e7e5      	b.n	800b52e <_puts_r+0x76>
 800b562:	bf00      	nop
 800b564:	0800d2fc 	.word	0x0800d2fc
 800b568:	0800d31c 	.word	0x0800d31c
 800b56c:	0800d2dc 	.word	0x0800d2dc

0800b570 <puts>:
 800b570:	4b02      	ldr	r3, [pc, #8]	; (800b57c <puts+0xc>)
 800b572:	4601      	mov	r1, r0
 800b574:	6818      	ldr	r0, [r3, #0]
 800b576:	f7ff bf9f 	b.w	800b4b8 <_puts_r>
 800b57a:	bf00      	nop
 800b57c:	20000184 	.word	0x20000184

0800b580 <setvbuf>:
 800b580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b584:	461d      	mov	r5, r3
 800b586:	4b51      	ldr	r3, [pc, #324]	; (800b6cc <setvbuf+0x14c>)
 800b588:	4604      	mov	r4, r0
 800b58a:	681e      	ldr	r6, [r3, #0]
 800b58c:	460f      	mov	r7, r1
 800b58e:	4690      	mov	r8, r2
 800b590:	b126      	cbz	r6, 800b59c <setvbuf+0x1c>
 800b592:	69b3      	ldr	r3, [r6, #24]
 800b594:	b913      	cbnz	r3, 800b59c <setvbuf+0x1c>
 800b596:	4630      	mov	r0, r6
 800b598:	f000 fa84 	bl	800baa4 <__sinit>
 800b59c:	4b4c      	ldr	r3, [pc, #304]	; (800b6d0 <setvbuf+0x150>)
 800b59e:	429c      	cmp	r4, r3
 800b5a0:	d152      	bne.n	800b648 <setvbuf+0xc8>
 800b5a2:	6874      	ldr	r4, [r6, #4]
 800b5a4:	f1b8 0f02 	cmp.w	r8, #2
 800b5a8:	d006      	beq.n	800b5b8 <setvbuf+0x38>
 800b5aa:	f1b8 0f01 	cmp.w	r8, #1
 800b5ae:	f200 8089 	bhi.w	800b6c4 <setvbuf+0x144>
 800b5b2:	2d00      	cmp	r5, #0
 800b5b4:	f2c0 8086 	blt.w	800b6c4 <setvbuf+0x144>
 800b5b8:	4621      	mov	r1, r4
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f000 fa08 	bl	800b9d0 <_fflush_r>
 800b5c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5c2:	b141      	cbz	r1, 800b5d6 <setvbuf+0x56>
 800b5c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5c8:	4299      	cmp	r1, r3
 800b5ca:	d002      	beq.n	800b5d2 <setvbuf+0x52>
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	f000 fb5f 	bl	800bc90 <_free_r>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	6363      	str	r3, [r4, #52]	; 0x34
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	61a3      	str	r3, [r4, #24]
 800b5da:	6063      	str	r3, [r4, #4]
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	061b      	lsls	r3, r3, #24
 800b5e0:	d503      	bpl.n	800b5ea <setvbuf+0x6a>
 800b5e2:	6921      	ldr	r1, [r4, #16]
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	f000 fb53 	bl	800bc90 <_free_r>
 800b5ea:	89a3      	ldrh	r3, [r4, #12]
 800b5ec:	f1b8 0f02 	cmp.w	r8, #2
 800b5f0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b5f4:	f023 0303 	bic.w	r3, r3, #3
 800b5f8:	81a3      	strh	r3, [r4, #12]
 800b5fa:	d05d      	beq.n	800b6b8 <setvbuf+0x138>
 800b5fc:	ab01      	add	r3, sp, #4
 800b5fe:	466a      	mov	r2, sp
 800b600:	4621      	mov	r1, r4
 800b602:	4630      	mov	r0, r6
 800b604:	f000 fad8 	bl	800bbb8 <__swhatbuf_r>
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	4318      	orrs	r0, r3
 800b60c:	81a0      	strh	r0, [r4, #12]
 800b60e:	bb2d      	cbnz	r5, 800b65c <setvbuf+0xdc>
 800b610:	9d00      	ldr	r5, [sp, #0]
 800b612:	4628      	mov	r0, r5
 800b614:	f000 fb34 	bl	800bc80 <malloc>
 800b618:	4607      	mov	r7, r0
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d14e      	bne.n	800b6bc <setvbuf+0x13c>
 800b61e:	f8dd 9000 	ldr.w	r9, [sp]
 800b622:	45a9      	cmp	r9, r5
 800b624:	d13c      	bne.n	800b6a0 <setvbuf+0x120>
 800b626:	f04f 30ff 	mov.w	r0, #4294967295
 800b62a:	89a3      	ldrh	r3, [r4, #12]
 800b62c:	f043 0302 	orr.w	r3, r3, #2
 800b630:	81a3      	strh	r3, [r4, #12]
 800b632:	2300      	movs	r3, #0
 800b634:	60a3      	str	r3, [r4, #8]
 800b636:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b63a:	6023      	str	r3, [r4, #0]
 800b63c:	6123      	str	r3, [r4, #16]
 800b63e:	2301      	movs	r3, #1
 800b640:	6163      	str	r3, [r4, #20]
 800b642:	b003      	add	sp, #12
 800b644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b648:	4b22      	ldr	r3, [pc, #136]	; (800b6d4 <setvbuf+0x154>)
 800b64a:	429c      	cmp	r4, r3
 800b64c:	d101      	bne.n	800b652 <setvbuf+0xd2>
 800b64e:	68b4      	ldr	r4, [r6, #8]
 800b650:	e7a8      	b.n	800b5a4 <setvbuf+0x24>
 800b652:	4b21      	ldr	r3, [pc, #132]	; (800b6d8 <setvbuf+0x158>)
 800b654:	429c      	cmp	r4, r3
 800b656:	bf08      	it	eq
 800b658:	68f4      	ldreq	r4, [r6, #12]
 800b65a:	e7a3      	b.n	800b5a4 <setvbuf+0x24>
 800b65c:	2f00      	cmp	r7, #0
 800b65e:	d0d8      	beq.n	800b612 <setvbuf+0x92>
 800b660:	69b3      	ldr	r3, [r6, #24]
 800b662:	b913      	cbnz	r3, 800b66a <setvbuf+0xea>
 800b664:	4630      	mov	r0, r6
 800b666:	f000 fa1d 	bl	800baa4 <__sinit>
 800b66a:	f1b8 0f01 	cmp.w	r8, #1
 800b66e:	bf08      	it	eq
 800b670:	89a3      	ldrheq	r3, [r4, #12]
 800b672:	6027      	str	r7, [r4, #0]
 800b674:	bf04      	itt	eq
 800b676:	f043 0301 	orreq.w	r3, r3, #1
 800b67a:	81a3      	strheq	r3, [r4, #12]
 800b67c:	89a3      	ldrh	r3, [r4, #12]
 800b67e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800b682:	f013 0008 	ands.w	r0, r3, #8
 800b686:	d01b      	beq.n	800b6c0 <setvbuf+0x140>
 800b688:	f013 0001 	ands.w	r0, r3, #1
 800b68c:	f04f 0300 	mov.w	r3, #0
 800b690:	bf1f      	itttt	ne
 800b692:	426d      	negne	r5, r5
 800b694:	60a3      	strne	r3, [r4, #8]
 800b696:	61a5      	strne	r5, [r4, #24]
 800b698:	4618      	movne	r0, r3
 800b69a:	bf08      	it	eq
 800b69c:	60a5      	streq	r5, [r4, #8]
 800b69e:	e7d0      	b.n	800b642 <setvbuf+0xc2>
 800b6a0:	4648      	mov	r0, r9
 800b6a2:	f000 faed 	bl	800bc80 <malloc>
 800b6a6:	4607      	mov	r7, r0
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	d0bc      	beq.n	800b626 <setvbuf+0xa6>
 800b6ac:	89a3      	ldrh	r3, [r4, #12]
 800b6ae:	464d      	mov	r5, r9
 800b6b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6b4:	81a3      	strh	r3, [r4, #12]
 800b6b6:	e7d3      	b.n	800b660 <setvbuf+0xe0>
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	e7b6      	b.n	800b62a <setvbuf+0xaa>
 800b6bc:	46a9      	mov	r9, r5
 800b6be:	e7f5      	b.n	800b6ac <setvbuf+0x12c>
 800b6c0:	60a0      	str	r0, [r4, #8]
 800b6c2:	e7be      	b.n	800b642 <setvbuf+0xc2>
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c8:	e7bb      	b.n	800b642 <setvbuf+0xc2>
 800b6ca:	bf00      	nop
 800b6cc:	20000184 	.word	0x20000184
 800b6d0:	0800d2fc 	.word	0x0800d2fc
 800b6d4:	0800d31c 	.word	0x0800d31c
 800b6d8:	0800d2dc 	.word	0x0800d2dc

0800b6dc <sniprintf>:
 800b6dc:	b40c      	push	{r2, r3}
 800b6de:	b530      	push	{r4, r5, lr}
 800b6e0:	4b17      	ldr	r3, [pc, #92]	; (800b740 <sniprintf+0x64>)
 800b6e2:	1e0c      	subs	r4, r1, #0
 800b6e4:	b09d      	sub	sp, #116	; 0x74
 800b6e6:	681d      	ldr	r5, [r3, #0]
 800b6e8:	da08      	bge.n	800b6fc <sniprintf+0x20>
 800b6ea:	238b      	movs	r3, #139	; 0x8b
 800b6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f0:	602b      	str	r3, [r5, #0]
 800b6f2:	b01d      	add	sp, #116	; 0x74
 800b6f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6f8:	b002      	add	sp, #8
 800b6fa:	4770      	bx	lr
 800b6fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b700:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b704:	bf0c      	ite	eq
 800b706:	4623      	moveq	r3, r4
 800b708:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b70c:	9304      	str	r3, [sp, #16]
 800b70e:	9307      	str	r3, [sp, #28]
 800b710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b714:	9002      	str	r0, [sp, #8]
 800b716:	9006      	str	r0, [sp, #24]
 800b718:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b71c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b71e:	ab21      	add	r3, sp, #132	; 0x84
 800b720:	a902      	add	r1, sp, #8
 800b722:	4628      	mov	r0, r5
 800b724:	9301      	str	r3, [sp, #4]
 800b726:	f000 fbb3 	bl	800be90 <_svfiprintf_r>
 800b72a:	1c43      	adds	r3, r0, #1
 800b72c:	bfbc      	itt	lt
 800b72e:	238b      	movlt	r3, #139	; 0x8b
 800b730:	602b      	strlt	r3, [r5, #0]
 800b732:	2c00      	cmp	r4, #0
 800b734:	d0dd      	beq.n	800b6f2 <sniprintf+0x16>
 800b736:	2200      	movs	r2, #0
 800b738:	9b02      	ldr	r3, [sp, #8]
 800b73a:	701a      	strb	r2, [r3, #0]
 800b73c:	e7d9      	b.n	800b6f2 <sniprintf+0x16>
 800b73e:	bf00      	nop
 800b740:	20000184 	.word	0x20000184

0800b744 <__swbuf_r>:
 800b744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b746:	460e      	mov	r6, r1
 800b748:	4614      	mov	r4, r2
 800b74a:	4605      	mov	r5, r0
 800b74c:	b118      	cbz	r0, 800b756 <__swbuf_r+0x12>
 800b74e:	6983      	ldr	r3, [r0, #24]
 800b750:	b90b      	cbnz	r3, 800b756 <__swbuf_r+0x12>
 800b752:	f000 f9a7 	bl	800baa4 <__sinit>
 800b756:	4b21      	ldr	r3, [pc, #132]	; (800b7dc <__swbuf_r+0x98>)
 800b758:	429c      	cmp	r4, r3
 800b75a:	d12a      	bne.n	800b7b2 <__swbuf_r+0x6e>
 800b75c:	686c      	ldr	r4, [r5, #4]
 800b75e:	69a3      	ldr	r3, [r4, #24]
 800b760:	60a3      	str	r3, [r4, #8]
 800b762:	89a3      	ldrh	r3, [r4, #12]
 800b764:	071a      	lsls	r2, r3, #28
 800b766:	d52e      	bpl.n	800b7c6 <__swbuf_r+0x82>
 800b768:	6923      	ldr	r3, [r4, #16]
 800b76a:	b363      	cbz	r3, 800b7c6 <__swbuf_r+0x82>
 800b76c:	6923      	ldr	r3, [r4, #16]
 800b76e:	6820      	ldr	r0, [r4, #0]
 800b770:	b2f6      	uxtb	r6, r6
 800b772:	1ac0      	subs	r0, r0, r3
 800b774:	6963      	ldr	r3, [r4, #20]
 800b776:	4637      	mov	r7, r6
 800b778:	4283      	cmp	r3, r0
 800b77a:	dc04      	bgt.n	800b786 <__swbuf_r+0x42>
 800b77c:	4621      	mov	r1, r4
 800b77e:	4628      	mov	r0, r5
 800b780:	f000 f926 	bl	800b9d0 <_fflush_r>
 800b784:	bb28      	cbnz	r0, 800b7d2 <__swbuf_r+0x8e>
 800b786:	68a3      	ldr	r3, [r4, #8]
 800b788:	3001      	adds	r0, #1
 800b78a:	3b01      	subs	r3, #1
 800b78c:	60a3      	str	r3, [r4, #8]
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	1c5a      	adds	r2, r3, #1
 800b792:	6022      	str	r2, [r4, #0]
 800b794:	701e      	strb	r6, [r3, #0]
 800b796:	6963      	ldr	r3, [r4, #20]
 800b798:	4283      	cmp	r3, r0
 800b79a:	d004      	beq.n	800b7a6 <__swbuf_r+0x62>
 800b79c:	89a3      	ldrh	r3, [r4, #12]
 800b79e:	07db      	lsls	r3, r3, #31
 800b7a0:	d519      	bpl.n	800b7d6 <__swbuf_r+0x92>
 800b7a2:	2e0a      	cmp	r6, #10
 800b7a4:	d117      	bne.n	800b7d6 <__swbuf_r+0x92>
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	f000 f911 	bl	800b9d0 <_fflush_r>
 800b7ae:	b190      	cbz	r0, 800b7d6 <__swbuf_r+0x92>
 800b7b0:	e00f      	b.n	800b7d2 <__swbuf_r+0x8e>
 800b7b2:	4b0b      	ldr	r3, [pc, #44]	; (800b7e0 <__swbuf_r+0x9c>)
 800b7b4:	429c      	cmp	r4, r3
 800b7b6:	d101      	bne.n	800b7bc <__swbuf_r+0x78>
 800b7b8:	68ac      	ldr	r4, [r5, #8]
 800b7ba:	e7d0      	b.n	800b75e <__swbuf_r+0x1a>
 800b7bc:	4b09      	ldr	r3, [pc, #36]	; (800b7e4 <__swbuf_r+0xa0>)
 800b7be:	429c      	cmp	r4, r3
 800b7c0:	bf08      	it	eq
 800b7c2:	68ec      	ldreq	r4, [r5, #12]
 800b7c4:	e7cb      	b.n	800b75e <__swbuf_r+0x1a>
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	f000 f80d 	bl	800b7e8 <__swsetup_r>
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d0cc      	beq.n	800b76c <__swbuf_r+0x28>
 800b7d2:	f04f 37ff 	mov.w	r7, #4294967295
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	0800d2fc 	.word	0x0800d2fc
 800b7e0:	0800d31c 	.word	0x0800d31c
 800b7e4:	0800d2dc 	.word	0x0800d2dc

0800b7e8 <__swsetup_r>:
 800b7e8:	4b32      	ldr	r3, [pc, #200]	; (800b8b4 <__swsetup_r+0xcc>)
 800b7ea:	b570      	push	{r4, r5, r6, lr}
 800b7ec:	681d      	ldr	r5, [r3, #0]
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	460c      	mov	r4, r1
 800b7f2:	b125      	cbz	r5, 800b7fe <__swsetup_r+0x16>
 800b7f4:	69ab      	ldr	r3, [r5, #24]
 800b7f6:	b913      	cbnz	r3, 800b7fe <__swsetup_r+0x16>
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	f000 f953 	bl	800baa4 <__sinit>
 800b7fe:	4b2e      	ldr	r3, [pc, #184]	; (800b8b8 <__swsetup_r+0xd0>)
 800b800:	429c      	cmp	r4, r3
 800b802:	d10f      	bne.n	800b824 <__swsetup_r+0x3c>
 800b804:	686c      	ldr	r4, [r5, #4]
 800b806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	0715      	lsls	r5, r2, #28
 800b80e:	d42c      	bmi.n	800b86a <__swsetup_r+0x82>
 800b810:	06d0      	lsls	r0, r2, #27
 800b812:	d411      	bmi.n	800b838 <__swsetup_r+0x50>
 800b814:	2209      	movs	r2, #9
 800b816:	6032      	str	r2, [r6, #0]
 800b818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b81c:	81a3      	strh	r3, [r4, #12]
 800b81e:	f04f 30ff 	mov.w	r0, #4294967295
 800b822:	e03e      	b.n	800b8a2 <__swsetup_r+0xba>
 800b824:	4b25      	ldr	r3, [pc, #148]	; (800b8bc <__swsetup_r+0xd4>)
 800b826:	429c      	cmp	r4, r3
 800b828:	d101      	bne.n	800b82e <__swsetup_r+0x46>
 800b82a:	68ac      	ldr	r4, [r5, #8]
 800b82c:	e7eb      	b.n	800b806 <__swsetup_r+0x1e>
 800b82e:	4b24      	ldr	r3, [pc, #144]	; (800b8c0 <__swsetup_r+0xd8>)
 800b830:	429c      	cmp	r4, r3
 800b832:	bf08      	it	eq
 800b834:	68ec      	ldreq	r4, [r5, #12]
 800b836:	e7e6      	b.n	800b806 <__swsetup_r+0x1e>
 800b838:	0751      	lsls	r1, r2, #29
 800b83a:	d512      	bpl.n	800b862 <__swsetup_r+0x7a>
 800b83c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b83e:	b141      	cbz	r1, 800b852 <__swsetup_r+0x6a>
 800b840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b844:	4299      	cmp	r1, r3
 800b846:	d002      	beq.n	800b84e <__swsetup_r+0x66>
 800b848:	4630      	mov	r0, r6
 800b84a:	f000 fa21 	bl	800bc90 <_free_r>
 800b84e:	2300      	movs	r3, #0
 800b850:	6363      	str	r3, [r4, #52]	; 0x34
 800b852:	89a3      	ldrh	r3, [r4, #12]
 800b854:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b858:	81a3      	strh	r3, [r4, #12]
 800b85a:	2300      	movs	r3, #0
 800b85c:	6063      	str	r3, [r4, #4]
 800b85e:	6923      	ldr	r3, [r4, #16]
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	89a3      	ldrh	r3, [r4, #12]
 800b864:	f043 0308 	orr.w	r3, r3, #8
 800b868:	81a3      	strh	r3, [r4, #12]
 800b86a:	6923      	ldr	r3, [r4, #16]
 800b86c:	b94b      	cbnz	r3, 800b882 <__swsetup_r+0x9a>
 800b86e:	89a3      	ldrh	r3, [r4, #12]
 800b870:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b878:	d003      	beq.n	800b882 <__swsetup_r+0x9a>
 800b87a:	4621      	mov	r1, r4
 800b87c:	4630      	mov	r0, r6
 800b87e:	f000 f9bf 	bl	800bc00 <__smakebuf_r>
 800b882:	89a2      	ldrh	r2, [r4, #12]
 800b884:	f012 0301 	ands.w	r3, r2, #1
 800b888:	d00c      	beq.n	800b8a4 <__swsetup_r+0xbc>
 800b88a:	2300      	movs	r3, #0
 800b88c:	60a3      	str	r3, [r4, #8]
 800b88e:	6963      	ldr	r3, [r4, #20]
 800b890:	425b      	negs	r3, r3
 800b892:	61a3      	str	r3, [r4, #24]
 800b894:	6923      	ldr	r3, [r4, #16]
 800b896:	b953      	cbnz	r3, 800b8ae <__swsetup_r+0xc6>
 800b898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b89c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b8a0:	d1ba      	bne.n	800b818 <__swsetup_r+0x30>
 800b8a2:	bd70      	pop	{r4, r5, r6, pc}
 800b8a4:	0792      	lsls	r2, r2, #30
 800b8a6:	bf58      	it	pl
 800b8a8:	6963      	ldrpl	r3, [r4, #20]
 800b8aa:	60a3      	str	r3, [r4, #8]
 800b8ac:	e7f2      	b.n	800b894 <__swsetup_r+0xac>
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	e7f7      	b.n	800b8a2 <__swsetup_r+0xba>
 800b8b2:	bf00      	nop
 800b8b4:	20000184 	.word	0x20000184
 800b8b8:	0800d2fc 	.word	0x0800d2fc
 800b8bc:	0800d31c 	.word	0x0800d31c
 800b8c0:	0800d2dc 	.word	0x0800d2dc

0800b8c4 <__sflush_r>:
 800b8c4:	898a      	ldrh	r2, [r1, #12]
 800b8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	0710      	lsls	r0, r2, #28
 800b8ce:	460c      	mov	r4, r1
 800b8d0:	d458      	bmi.n	800b984 <__sflush_r+0xc0>
 800b8d2:	684b      	ldr	r3, [r1, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	dc05      	bgt.n	800b8e4 <__sflush_r+0x20>
 800b8d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	dc02      	bgt.n	800b8e4 <__sflush_r+0x20>
 800b8de:	2000      	movs	r0, #0
 800b8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8e6:	2e00      	cmp	r6, #0
 800b8e8:	d0f9      	beq.n	800b8de <__sflush_r+0x1a>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8f0:	682f      	ldr	r7, [r5, #0]
 800b8f2:	6a21      	ldr	r1, [r4, #32]
 800b8f4:	602b      	str	r3, [r5, #0]
 800b8f6:	d032      	beq.n	800b95e <__sflush_r+0x9a>
 800b8f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8fa:	89a3      	ldrh	r3, [r4, #12]
 800b8fc:	075a      	lsls	r2, r3, #29
 800b8fe:	d505      	bpl.n	800b90c <__sflush_r+0x48>
 800b900:	6863      	ldr	r3, [r4, #4]
 800b902:	1ac0      	subs	r0, r0, r3
 800b904:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b906:	b10b      	cbz	r3, 800b90c <__sflush_r+0x48>
 800b908:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b90a:	1ac0      	subs	r0, r0, r3
 800b90c:	2300      	movs	r3, #0
 800b90e:	4602      	mov	r2, r0
 800b910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b912:	6a21      	ldr	r1, [r4, #32]
 800b914:	4628      	mov	r0, r5
 800b916:	47b0      	blx	r6
 800b918:	1c43      	adds	r3, r0, #1
 800b91a:	89a3      	ldrh	r3, [r4, #12]
 800b91c:	d106      	bne.n	800b92c <__sflush_r+0x68>
 800b91e:	6829      	ldr	r1, [r5, #0]
 800b920:	291d      	cmp	r1, #29
 800b922:	d848      	bhi.n	800b9b6 <__sflush_r+0xf2>
 800b924:	4a29      	ldr	r2, [pc, #164]	; (800b9cc <__sflush_r+0x108>)
 800b926:	40ca      	lsrs	r2, r1
 800b928:	07d6      	lsls	r6, r2, #31
 800b92a:	d544      	bpl.n	800b9b6 <__sflush_r+0xf2>
 800b92c:	2200      	movs	r2, #0
 800b92e:	6062      	str	r2, [r4, #4]
 800b930:	6922      	ldr	r2, [r4, #16]
 800b932:	04d9      	lsls	r1, r3, #19
 800b934:	6022      	str	r2, [r4, #0]
 800b936:	d504      	bpl.n	800b942 <__sflush_r+0x7e>
 800b938:	1c42      	adds	r2, r0, #1
 800b93a:	d101      	bne.n	800b940 <__sflush_r+0x7c>
 800b93c:	682b      	ldr	r3, [r5, #0]
 800b93e:	b903      	cbnz	r3, 800b942 <__sflush_r+0x7e>
 800b940:	6560      	str	r0, [r4, #84]	; 0x54
 800b942:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b944:	602f      	str	r7, [r5, #0]
 800b946:	2900      	cmp	r1, #0
 800b948:	d0c9      	beq.n	800b8de <__sflush_r+0x1a>
 800b94a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b94e:	4299      	cmp	r1, r3
 800b950:	d002      	beq.n	800b958 <__sflush_r+0x94>
 800b952:	4628      	mov	r0, r5
 800b954:	f000 f99c 	bl	800bc90 <_free_r>
 800b958:	2000      	movs	r0, #0
 800b95a:	6360      	str	r0, [r4, #52]	; 0x34
 800b95c:	e7c0      	b.n	800b8e0 <__sflush_r+0x1c>
 800b95e:	2301      	movs	r3, #1
 800b960:	4628      	mov	r0, r5
 800b962:	47b0      	blx	r6
 800b964:	1c41      	adds	r1, r0, #1
 800b966:	d1c8      	bne.n	800b8fa <__sflush_r+0x36>
 800b968:	682b      	ldr	r3, [r5, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d0c5      	beq.n	800b8fa <__sflush_r+0x36>
 800b96e:	2b1d      	cmp	r3, #29
 800b970:	d001      	beq.n	800b976 <__sflush_r+0xb2>
 800b972:	2b16      	cmp	r3, #22
 800b974:	d101      	bne.n	800b97a <__sflush_r+0xb6>
 800b976:	602f      	str	r7, [r5, #0]
 800b978:	e7b1      	b.n	800b8de <__sflush_r+0x1a>
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b980:	81a3      	strh	r3, [r4, #12]
 800b982:	e7ad      	b.n	800b8e0 <__sflush_r+0x1c>
 800b984:	690f      	ldr	r7, [r1, #16]
 800b986:	2f00      	cmp	r7, #0
 800b988:	d0a9      	beq.n	800b8de <__sflush_r+0x1a>
 800b98a:	0793      	lsls	r3, r2, #30
 800b98c:	bf18      	it	ne
 800b98e:	2300      	movne	r3, #0
 800b990:	680e      	ldr	r6, [r1, #0]
 800b992:	bf08      	it	eq
 800b994:	694b      	ldreq	r3, [r1, #20]
 800b996:	eba6 0807 	sub.w	r8, r6, r7
 800b99a:	600f      	str	r7, [r1, #0]
 800b99c:	608b      	str	r3, [r1, #8]
 800b99e:	f1b8 0f00 	cmp.w	r8, #0
 800b9a2:	dd9c      	ble.n	800b8de <__sflush_r+0x1a>
 800b9a4:	4643      	mov	r3, r8
 800b9a6:	463a      	mov	r2, r7
 800b9a8:	6a21      	ldr	r1, [r4, #32]
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b9ae:	47b0      	blx	r6
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	dc06      	bgt.n	800b9c2 <__sflush_r+0xfe>
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ba:	81a3      	strh	r3, [r4, #12]
 800b9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c0:	e78e      	b.n	800b8e0 <__sflush_r+0x1c>
 800b9c2:	4407      	add	r7, r0
 800b9c4:	eba8 0800 	sub.w	r8, r8, r0
 800b9c8:	e7e9      	b.n	800b99e <__sflush_r+0xda>
 800b9ca:	bf00      	nop
 800b9cc:	20400001 	.word	0x20400001

0800b9d0 <_fflush_r>:
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	690b      	ldr	r3, [r1, #16]
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	460c      	mov	r4, r1
 800b9d8:	b1db      	cbz	r3, 800ba12 <_fflush_r+0x42>
 800b9da:	b118      	cbz	r0, 800b9e4 <_fflush_r+0x14>
 800b9dc:	6983      	ldr	r3, [r0, #24]
 800b9de:	b90b      	cbnz	r3, 800b9e4 <_fflush_r+0x14>
 800b9e0:	f000 f860 	bl	800baa4 <__sinit>
 800b9e4:	4b0c      	ldr	r3, [pc, #48]	; (800ba18 <_fflush_r+0x48>)
 800b9e6:	429c      	cmp	r4, r3
 800b9e8:	d109      	bne.n	800b9fe <_fflush_r+0x2e>
 800b9ea:	686c      	ldr	r4, [r5, #4]
 800b9ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9f0:	b17b      	cbz	r3, 800ba12 <_fflush_r+0x42>
 800b9f2:	4621      	mov	r1, r4
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9fa:	f7ff bf63 	b.w	800b8c4 <__sflush_r>
 800b9fe:	4b07      	ldr	r3, [pc, #28]	; (800ba1c <_fflush_r+0x4c>)
 800ba00:	429c      	cmp	r4, r3
 800ba02:	d101      	bne.n	800ba08 <_fflush_r+0x38>
 800ba04:	68ac      	ldr	r4, [r5, #8]
 800ba06:	e7f1      	b.n	800b9ec <_fflush_r+0x1c>
 800ba08:	4b05      	ldr	r3, [pc, #20]	; (800ba20 <_fflush_r+0x50>)
 800ba0a:	429c      	cmp	r4, r3
 800ba0c:	bf08      	it	eq
 800ba0e:	68ec      	ldreq	r4, [r5, #12]
 800ba10:	e7ec      	b.n	800b9ec <_fflush_r+0x1c>
 800ba12:	2000      	movs	r0, #0
 800ba14:	bd38      	pop	{r3, r4, r5, pc}
 800ba16:	bf00      	nop
 800ba18:	0800d2fc 	.word	0x0800d2fc
 800ba1c:	0800d31c 	.word	0x0800d31c
 800ba20:	0800d2dc 	.word	0x0800d2dc

0800ba24 <std>:
 800ba24:	2300      	movs	r3, #0
 800ba26:	b510      	push	{r4, lr}
 800ba28:	4604      	mov	r4, r0
 800ba2a:	e9c0 3300 	strd	r3, r3, [r0]
 800ba2e:	6083      	str	r3, [r0, #8]
 800ba30:	8181      	strh	r1, [r0, #12]
 800ba32:	6643      	str	r3, [r0, #100]	; 0x64
 800ba34:	81c2      	strh	r2, [r0, #14]
 800ba36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba3a:	6183      	str	r3, [r0, #24]
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	2208      	movs	r2, #8
 800ba40:	305c      	adds	r0, #92	; 0x5c
 800ba42:	f7ff fd04 	bl	800b44e <memset>
 800ba46:	4b05      	ldr	r3, [pc, #20]	; (800ba5c <std+0x38>)
 800ba48:	6224      	str	r4, [r4, #32]
 800ba4a:	6263      	str	r3, [r4, #36]	; 0x24
 800ba4c:	4b04      	ldr	r3, [pc, #16]	; (800ba60 <std+0x3c>)
 800ba4e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba50:	4b04      	ldr	r3, [pc, #16]	; (800ba64 <std+0x40>)
 800ba52:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba54:	4b04      	ldr	r3, [pc, #16]	; (800ba68 <std+0x44>)
 800ba56:	6323      	str	r3, [r4, #48]	; 0x30
 800ba58:	bd10      	pop	{r4, pc}
 800ba5a:	bf00      	nop
 800ba5c:	0800c699 	.word	0x0800c699
 800ba60:	0800c6bb 	.word	0x0800c6bb
 800ba64:	0800c6f3 	.word	0x0800c6f3
 800ba68:	0800c717 	.word	0x0800c717

0800ba6c <_cleanup_r>:
 800ba6c:	4901      	ldr	r1, [pc, #4]	; (800ba74 <_cleanup_r+0x8>)
 800ba6e:	f000 b885 	b.w	800bb7c <_fwalk_reent>
 800ba72:	bf00      	nop
 800ba74:	0800b9d1 	.word	0x0800b9d1

0800ba78 <__sfmoreglue>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	2568      	movs	r5, #104	; 0x68
 800ba7c:	1e4a      	subs	r2, r1, #1
 800ba7e:	4355      	muls	r5, r2
 800ba80:	460e      	mov	r6, r1
 800ba82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba86:	f000 f94f 	bl	800bd28 <_malloc_r>
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	b140      	cbz	r0, 800baa0 <__sfmoreglue+0x28>
 800ba8e:	2100      	movs	r1, #0
 800ba90:	e9c0 1600 	strd	r1, r6, [r0]
 800ba94:	300c      	adds	r0, #12
 800ba96:	60a0      	str	r0, [r4, #8]
 800ba98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba9c:	f7ff fcd7 	bl	800b44e <memset>
 800baa0:	4620      	mov	r0, r4
 800baa2:	bd70      	pop	{r4, r5, r6, pc}

0800baa4 <__sinit>:
 800baa4:	6983      	ldr	r3, [r0, #24]
 800baa6:	b510      	push	{r4, lr}
 800baa8:	4604      	mov	r4, r0
 800baaa:	bb33      	cbnz	r3, 800bafa <__sinit+0x56>
 800baac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bab0:	6503      	str	r3, [r0, #80]	; 0x50
 800bab2:	4b12      	ldr	r3, [pc, #72]	; (800bafc <__sinit+0x58>)
 800bab4:	4a12      	ldr	r2, [pc, #72]	; (800bb00 <__sinit+0x5c>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	6282      	str	r2, [r0, #40]	; 0x28
 800baba:	4298      	cmp	r0, r3
 800babc:	bf04      	itt	eq
 800babe:	2301      	moveq	r3, #1
 800bac0:	6183      	streq	r3, [r0, #24]
 800bac2:	f000 f81f 	bl	800bb04 <__sfp>
 800bac6:	6060      	str	r0, [r4, #4]
 800bac8:	4620      	mov	r0, r4
 800baca:	f000 f81b 	bl	800bb04 <__sfp>
 800bace:	60a0      	str	r0, [r4, #8]
 800bad0:	4620      	mov	r0, r4
 800bad2:	f000 f817 	bl	800bb04 <__sfp>
 800bad6:	2200      	movs	r2, #0
 800bad8:	60e0      	str	r0, [r4, #12]
 800bada:	2104      	movs	r1, #4
 800badc:	6860      	ldr	r0, [r4, #4]
 800bade:	f7ff ffa1 	bl	800ba24 <std>
 800bae2:	2201      	movs	r2, #1
 800bae4:	2109      	movs	r1, #9
 800bae6:	68a0      	ldr	r0, [r4, #8]
 800bae8:	f7ff ff9c 	bl	800ba24 <std>
 800baec:	2202      	movs	r2, #2
 800baee:	2112      	movs	r1, #18
 800baf0:	68e0      	ldr	r0, [r4, #12]
 800baf2:	f7ff ff97 	bl	800ba24 <std>
 800baf6:	2301      	movs	r3, #1
 800baf8:	61a3      	str	r3, [r4, #24]
 800bafa:	bd10      	pop	{r4, pc}
 800bafc:	0800d2d8 	.word	0x0800d2d8
 800bb00:	0800ba6d 	.word	0x0800ba6d

0800bb04 <__sfp>:
 800bb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb06:	4b1b      	ldr	r3, [pc, #108]	; (800bb74 <__sfp+0x70>)
 800bb08:	4607      	mov	r7, r0
 800bb0a:	681e      	ldr	r6, [r3, #0]
 800bb0c:	69b3      	ldr	r3, [r6, #24]
 800bb0e:	b913      	cbnz	r3, 800bb16 <__sfp+0x12>
 800bb10:	4630      	mov	r0, r6
 800bb12:	f7ff ffc7 	bl	800baa4 <__sinit>
 800bb16:	3648      	adds	r6, #72	; 0x48
 800bb18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	d503      	bpl.n	800bb28 <__sfp+0x24>
 800bb20:	6833      	ldr	r3, [r6, #0]
 800bb22:	b133      	cbz	r3, 800bb32 <__sfp+0x2e>
 800bb24:	6836      	ldr	r6, [r6, #0]
 800bb26:	e7f7      	b.n	800bb18 <__sfp+0x14>
 800bb28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb2c:	b16d      	cbz	r5, 800bb4a <__sfp+0x46>
 800bb2e:	3468      	adds	r4, #104	; 0x68
 800bb30:	e7f4      	b.n	800bb1c <__sfp+0x18>
 800bb32:	2104      	movs	r1, #4
 800bb34:	4638      	mov	r0, r7
 800bb36:	f7ff ff9f 	bl	800ba78 <__sfmoreglue>
 800bb3a:	6030      	str	r0, [r6, #0]
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d1f1      	bne.n	800bb24 <__sfp+0x20>
 800bb40:	230c      	movs	r3, #12
 800bb42:	4604      	mov	r4, r0
 800bb44:	603b      	str	r3, [r7, #0]
 800bb46:	4620      	mov	r0, r4
 800bb48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb4a:	4b0b      	ldr	r3, [pc, #44]	; (800bb78 <__sfp+0x74>)
 800bb4c:	6665      	str	r5, [r4, #100]	; 0x64
 800bb4e:	e9c4 5500 	strd	r5, r5, [r4]
 800bb52:	60a5      	str	r5, [r4, #8]
 800bb54:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bb58:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bb5c:	2208      	movs	r2, #8
 800bb5e:	4629      	mov	r1, r5
 800bb60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb64:	f7ff fc73 	bl	800b44e <memset>
 800bb68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bb6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bb70:	e7e9      	b.n	800bb46 <__sfp+0x42>
 800bb72:	bf00      	nop
 800bb74:	0800d2d8 	.word	0x0800d2d8
 800bb78:	ffff0001 	.word	0xffff0001

0800bb7c <_fwalk_reent>:
 800bb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb80:	4680      	mov	r8, r0
 800bb82:	4689      	mov	r9, r1
 800bb84:	2600      	movs	r6, #0
 800bb86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb8a:	b914      	cbnz	r4, 800bb92 <_fwalk_reent+0x16>
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb92:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800bb96:	3f01      	subs	r7, #1
 800bb98:	d501      	bpl.n	800bb9e <_fwalk_reent+0x22>
 800bb9a:	6824      	ldr	r4, [r4, #0]
 800bb9c:	e7f5      	b.n	800bb8a <_fwalk_reent+0xe>
 800bb9e:	89ab      	ldrh	r3, [r5, #12]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d907      	bls.n	800bbb4 <_fwalk_reent+0x38>
 800bba4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	d003      	beq.n	800bbb4 <_fwalk_reent+0x38>
 800bbac:	4629      	mov	r1, r5
 800bbae:	4640      	mov	r0, r8
 800bbb0:	47c8      	blx	r9
 800bbb2:	4306      	orrs	r6, r0
 800bbb4:	3568      	adds	r5, #104	; 0x68
 800bbb6:	e7ee      	b.n	800bb96 <_fwalk_reent+0x1a>

0800bbb8 <__swhatbuf_r>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	460e      	mov	r6, r1
 800bbbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbc0:	b096      	sub	sp, #88	; 0x58
 800bbc2:	2900      	cmp	r1, #0
 800bbc4:	4614      	mov	r4, r2
 800bbc6:	461d      	mov	r5, r3
 800bbc8:	da07      	bge.n	800bbda <__swhatbuf_r+0x22>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	602b      	str	r3, [r5, #0]
 800bbce:	89b3      	ldrh	r3, [r6, #12]
 800bbd0:	061a      	lsls	r2, r3, #24
 800bbd2:	d410      	bmi.n	800bbf6 <__swhatbuf_r+0x3e>
 800bbd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbd8:	e00e      	b.n	800bbf8 <__swhatbuf_r+0x40>
 800bbda:	466a      	mov	r2, sp
 800bbdc:	f000 fdc2 	bl	800c764 <_fstat_r>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	dbf2      	blt.n	800bbca <__swhatbuf_r+0x12>
 800bbe4:	9a01      	ldr	r2, [sp, #4]
 800bbe6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bbea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bbee:	425a      	negs	r2, r3
 800bbf0:	415a      	adcs	r2, r3
 800bbf2:	602a      	str	r2, [r5, #0]
 800bbf4:	e7ee      	b.n	800bbd4 <__swhatbuf_r+0x1c>
 800bbf6:	2340      	movs	r3, #64	; 0x40
 800bbf8:	2000      	movs	r0, #0
 800bbfa:	6023      	str	r3, [r4, #0]
 800bbfc:	b016      	add	sp, #88	; 0x58
 800bbfe:	bd70      	pop	{r4, r5, r6, pc}

0800bc00 <__smakebuf_r>:
 800bc00:	898b      	ldrh	r3, [r1, #12]
 800bc02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc04:	079d      	lsls	r5, r3, #30
 800bc06:	4606      	mov	r6, r0
 800bc08:	460c      	mov	r4, r1
 800bc0a:	d507      	bpl.n	800bc1c <__smakebuf_r+0x1c>
 800bc0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc10:	6023      	str	r3, [r4, #0]
 800bc12:	6123      	str	r3, [r4, #16]
 800bc14:	2301      	movs	r3, #1
 800bc16:	6163      	str	r3, [r4, #20]
 800bc18:	b002      	add	sp, #8
 800bc1a:	bd70      	pop	{r4, r5, r6, pc}
 800bc1c:	ab01      	add	r3, sp, #4
 800bc1e:	466a      	mov	r2, sp
 800bc20:	f7ff ffca 	bl	800bbb8 <__swhatbuf_r>
 800bc24:	9900      	ldr	r1, [sp, #0]
 800bc26:	4605      	mov	r5, r0
 800bc28:	4630      	mov	r0, r6
 800bc2a:	f000 f87d 	bl	800bd28 <_malloc_r>
 800bc2e:	b948      	cbnz	r0, 800bc44 <__smakebuf_r+0x44>
 800bc30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc34:	059a      	lsls	r2, r3, #22
 800bc36:	d4ef      	bmi.n	800bc18 <__smakebuf_r+0x18>
 800bc38:	f023 0303 	bic.w	r3, r3, #3
 800bc3c:	f043 0302 	orr.w	r3, r3, #2
 800bc40:	81a3      	strh	r3, [r4, #12]
 800bc42:	e7e3      	b.n	800bc0c <__smakebuf_r+0xc>
 800bc44:	4b0d      	ldr	r3, [pc, #52]	; (800bc7c <__smakebuf_r+0x7c>)
 800bc46:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	6020      	str	r0, [r4, #0]
 800bc4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc50:	81a3      	strh	r3, [r4, #12]
 800bc52:	9b00      	ldr	r3, [sp, #0]
 800bc54:	6120      	str	r0, [r4, #16]
 800bc56:	6163      	str	r3, [r4, #20]
 800bc58:	9b01      	ldr	r3, [sp, #4]
 800bc5a:	b15b      	cbz	r3, 800bc74 <__smakebuf_r+0x74>
 800bc5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc60:	4630      	mov	r0, r6
 800bc62:	f000 fd91 	bl	800c788 <_isatty_r>
 800bc66:	b128      	cbz	r0, 800bc74 <__smakebuf_r+0x74>
 800bc68:	89a3      	ldrh	r3, [r4, #12]
 800bc6a:	f023 0303 	bic.w	r3, r3, #3
 800bc6e:	f043 0301 	orr.w	r3, r3, #1
 800bc72:	81a3      	strh	r3, [r4, #12]
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	431d      	orrs	r5, r3
 800bc78:	81a5      	strh	r5, [r4, #12]
 800bc7a:	e7cd      	b.n	800bc18 <__smakebuf_r+0x18>
 800bc7c:	0800ba6d 	.word	0x0800ba6d

0800bc80 <malloc>:
 800bc80:	4b02      	ldr	r3, [pc, #8]	; (800bc8c <malloc+0xc>)
 800bc82:	4601      	mov	r1, r0
 800bc84:	6818      	ldr	r0, [r3, #0]
 800bc86:	f000 b84f 	b.w	800bd28 <_malloc_r>
 800bc8a:	bf00      	nop
 800bc8c:	20000184 	.word	0x20000184

0800bc90 <_free_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4605      	mov	r5, r0
 800bc94:	2900      	cmp	r1, #0
 800bc96:	d043      	beq.n	800bd20 <_free_r+0x90>
 800bc98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc9c:	1f0c      	subs	r4, r1, #4
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	bfb8      	it	lt
 800bca2:	18e4      	addlt	r4, r4, r3
 800bca4:	f000 fdb9 	bl	800c81a <__malloc_lock>
 800bca8:	4a1e      	ldr	r2, [pc, #120]	; (800bd24 <_free_r+0x94>)
 800bcaa:	6813      	ldr	r3, [r2, #0]
 800bcac:	4610      	mov	r0, r2
 800bcae:	b933      	cbnz	r3, 800bcbe <_free_r+0x2e>
 800bcb0:	6063      	str	r3, [r4, #4]
 800bcb2:	6014      	str	r4, [r2, #0]
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcba:	f000 bdaf 	b.w	800c81c <__malloc_unlock>
 800bcbe:	42a3      	cmp	r3, r4
 800bcc0:	d90b      	bls.n	800bcda <_free_r+0x4a>
 800bcc2:	6821      	ldr	r1, [r4, #0]
 800bcc4:	1862      	adds	r2, r4, r1
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	bf01      	itttt	eq
 800bcca:	681a      	ldreq	r2, [r3, #0]
 800bccc:	685b      	ldreq	r3, [r3, #4]
 800bcce:	1852      	addeq	r2, r2, r1
 800bcd0:	6022      	streq	r2, [r4, #0]
 800bcd2:	6063      	str	r3, [r4, #4]
 800bcd4:	6004      	str	r4, [r0, #0]
 800bcd6:	e7ed      	b.n	800bcb4 <_free_r+0x24>
 800bcd8:	4613      	mov	r3, r2
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	b10a      	cbz	r2, 800bce2 <_free_r+0x52>
 800bcde:	42a2      	cmp	r2, r4
 800bce0:	d9fa      	bls.n	800bcd8 <_free_r+0x48>
 800bce2:	6819      	ldr	r1, [r3, #0]
 800bce4:	1858      	adds	r0, r3, r1
 800bce6:	42a0      	cmp	r0, r4
 800bce8:	d10b      	bne.n	800bd02 <_free_r+0x72>
 800bcea:	6820      	ldr	r0, [r4, #0]
 800bcec:	4401      	add	r1, r0
 800bcee:	1858      	adds	r0, r3, r1
 800bcf0:	4282      	cmp	r2, r0
 800bcf2:	6019      	str	r1, [r3, #0]
 800bcf4:	d1de      	bne.n	800bcb4 <_free_r+0x24>
 800bcf6:	6810      	ldr	r0, [r2, #0]
 800bcf8:	6852      	ldr	r2, [r2, #4]
 800bcfa:	4401      	add	r1, r0
 800bcfc:	6019      	str	r1, [r3, #0]
 800bcfe:	605a      	str	r2, [r3, #4]
 800bd00:	e7d8      	b.n	800bcb4 <_free_r+0x24>
 800bd02:	d902      	bls.n	800bd0a <_free_r+0x7a>
 800bd04:	230c      	movs	r3, #12
 800bd06:	602b      	str	r3, [r5, #0]
 800bd08:	e7d4      	b.n	800bcb4 <_free_r+0x24>
 800bd0a:	6820      	ldr	r0, [r4, #0]
 800bd0c:	1821      	adds	r1, r4, r0
 800bd0e:	428a      	cmp	r2, r1
 800bd10:	bf01      	itttt	eq
 800bd12:	6811      	ldreq	r1, [r2, #0]
 800bd14:	6852      	ldreq	r2, [r2, #4]
 800bd16:	1809      	addeq	r1, r1, r0
 800bd18:	6021      	streq	r1, [r4, #0]
 800bd1a:	6062      	str	r2, [r4, #4]
 800bd1c:	605c      	str	r4, [r3, #4]
 800bd1e:	e7c9      	b.n	800bcb4 <_free_r+0x24>
 800bd20:	bd38      	pop	{r3, r4, r5, pc}
 800bd22:	bf00      	nop
 800bd24:	200024b8 	.word	0x200024b8

0800bd28 <_malloc_r>:
 800bd28:	b570      	push	{r4, r5, r6, lr}
 800bd2a:	1ccd      	adds	r5, r1, #3
 800bd2c:	f025 0503 	bic.w	r5, r5, #3
 800bd30:	3508      	adds	r5, #8
 800bd32:	2d0c      	cmp	r5, #12
 800bd34:	bf38      	it	cc
 800bd36:	250c      	movcc	r5, #12
 800bd38:	2d00      	cmp	r5, #0
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	db01      	blt.n	800bd42 <_malloc_r+0x1a>
 800bd3e:	42a9      	cmp	r1, r5
 800bd40:	d903      	bls.n	800bd4a <_malloc_r+0x22>
 800bd42:	230c      	movs	r3, #12
 800bd44:	6033      	str	r3, [r6, #0]
 800bd46:	2000      	movs	r0, #0
 800bd48:	bd70      	pop	{r4, r5, r6, pc}
 800bd4a:	f000 fd66 	bl	800c81a <__malloc_lock>
 800bd4e:	4a21      	ldr	r2, [pc, #132]	; (800bdd4 <_malloc_r+0xac>)
 800bd50:	6814      	ldr	r4, [r2, #0]
 800bd52:	4621      	mov	r1, r4
 800bd54:	b991      	cbnz	r1, 800bd7c <_malloc_r+0x54>
 800bd56:	4c20      	ldr	r4, [pc, #128]	; (800bdd8 <_malloc_r+0xb0>)
 800bd58:	6823      	ldr	r3, [r4, #0]
 800bd5a:	b91b      	cbnz	r3, 800bd64 <_malloc_r+0x3c>
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	f000 fc8b 	bl	800c678 <_sbrk_r>
 800bd62:	6020      	str	r0, [r4, #0]
 800bd64:	4629      	mov	r1, r5
 800bd66:	4630      	mov	r0, r6
 800bd68:	f000 fc86 	bl	800c678 <_sbrk_r>
 800bd6c:	1c43      	adds	r3, r0, #1
 800bd6e:	d124      	bne.n	800bdba <_malloc_r+0x92>
 800bd70:	230c      	movs	r3, #12
 800bd72:	4630      	mov	r0, r6
 800bd74:	6033      	str	r3, [r6, #0]
 800bd76:	f000 fd51 	bl	800c81c <__malloc_unlock>
 800bd7a:	e7e4      	b.n	800bd46 <_malloc_r+0x1e>
 800bd7c:	680b      	ldr	r3, [r1, #0]
 800bd7e:	1b5b      	subs	r3, r3, r5
 800bd80:	d418      	bmi.n	800bdb4 <_malloc_r+0x8c>
 800bd82:	2b0b      	cmp	r3, #11
 800bd84:	d90f      	bls.n	800bda6 <_malloc_r+0x7e>
 800bd86:	600b      	str	r3, [r1, #0]
 800bd88:	18cc      	adds	r4, r1, r3
 800bd8a:	50cd      	str	r5, [r1, r3]
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f000 fd45 	bl	800c81c <__malloc_unlock>
 800bd92:	f104 000b 	add.w	r0, r4, #11
 800bd96:	1d23      	adds	r3, r4, #4
 800bd98:	f020 0007 	bic.w	r0, r0, #7
 800bd9c:	1ac3      	subs	r3, r0, r3
 800bd9e:	d0d3      	beq.n	800bd48 <_malloc_r+0x20>
 800bda0:	425a      	negs	r2, r3
 800bda2:	50e2      	str	r2, [r4, r3]
 800bda4:	e7d0      	b.n	800bd48 <_malloc_r+0x20>
 800bda6:	684b      	ldr	r3, [r1, #4]
 800bda8:	428c      	cmp	r4, r1
 800bdaa:	bf16      	itet	ne
 800bdac:	6063      	strne	r3, [r4, #4]
 800bdae:	6013      	streq	r3, [r2, #0]
 800bdb0:	460c      	movne	r4, r1
 800bdb2:	e7eb      	b.n	800bd8c <_malloc_r+0x64>
 800bdb4:	460c      	mov	r4, r1
 800bdb6:	6849      	ldr	r1, [r1, #4]
 800bdb8:	e7cc      	b.n	800bd54 <_malloc_r+0x2c>
 800bdba:	1cc4      	adds	r4, r0, #3
 800bdbc:	f024 0403 	bic.w	r4, r4, #3
 800bdc0:	42a0      	cmp	r0, r4
 800bdc2:	d005      	beq.n	800bdd0 <_malloc_r+0xa8>
 800bdc4:	1a21      	subs	r1, r4, r0
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	f000 fc56 	bl	800c678 <_sbrk_r>
 800bdcc:	3001      	adds	r0, #1
 800bdce:	d0cf      	beq.n	800bd70 <_malloc_r+0x48>
 800bdd0:	6025      	str	r5, [r4, #0]
 800bdd2:	e7db      	b.n	800bd8c <_malloc_r+0x64>
 800bdd4:	200024b8 	.word	0x200024b8
 800bdd8:	200024bc 	.word	0x200024bc

0800bddc <__ssputs_r>:
 800bddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bde0:	688e      	ldr	r6, [r1, #8]
 800bde2:	4682      	mov	sl, r0
 800bde4:	429e      	cmp	r6, r3
 800bde6:	460c      	mov	r4, r1
 800bde8:	4690      	mov	r8, r2
 800bdea:	4699      	mov	r9, r3
 800bdec:	d837      	bhi.n	800be5e <__ssputs_r+0x82>
 800bdee:	898a      	ldrh	r2, [r1, #12]
 800bdf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdf4:	d031      	beq.n	800be5a <__ssputs_r+0x7e>
 800bdf6:	2302      	movs	r3, #2
 800bdf8:	6825      	ldr	r5, [r4, #0]
 800bdfa:	6909      	ldr	r1, [r1, #16]
 800bdfc:	1a6f      	subs	r7, r5, r1
 800bdfe:	6965      	ldr	r5, [r4, #20]
 800be00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be04:	fb95 f5f3 	sdiv	r5, r5, r3
 800be08:	f109 0301 	add.w	r3, r9, #1
 800be0c:	443b      	add	r3, r7
 800be0e:	429d      	cmp	r5, r3
 800be10:	bf38      	it	cc
 800be12:	461d      	movcc	r5, r3
 800be14:	0553      	lsls	r3, r2, #21
 800be16:	d530      	bpl.n	800be7a <__ssputs_r+0x9e>
 800be18:	4629      	mov	r1, r5
 800be1a:	f7ff ff85 	bl	800bd28 <_malloc_r>
 800be1e:	4606      	mov	r6, r0
 800be20:	b950      	cbnz	r0, 800be38 <__ssputs_r+0x5c>
 800be22:	230c      	movs	r3, #12
 800be24:	f04f 30ff 	mov.w	r0, #4294967295
 800be28:	f8ca 3000 	str.w	r3, [sl]
 800be2c:	89a3      	ldrh	r3, [r4, #12]
 800be2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be38:	463a      	mov	r2, r7
 800be3a:	6921      	ldr	r1, [r4, #16]
 800be3c:	f7ff fafc 	bl	800b438 <memcpy>
 800be40:	89a3      	ldrh	r3, [r4, #12]
 800be42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be4a:	81a3      	strh	r3, [r4, #12]
 800be4c:	6126      	str	r6, [r4, #16]
 800be4e:	443e      	add	r6, r7
 800be50:	6026      	str	r6, [r4, #0]
 800be52:	464e      	mov	r6, r9
 800be54:	6165      	str	r5, [r4, #20]
 800be56:	1bed      	subs	r5, r5, r7
 800be58:	60a5      	str	r5, [r4, #8]
 800be5a:	454e      	cmp	r6, r9
 800be5c:	d900      	bls.n	800be60 <__ssputs_r+0x84>
 800be5e:	464e      	mov	r6, r9
 800be60:	4632      	mov	r2, r6
 800be62:	4641      	mov	r1, r8
 800be64:	6820      	ldr	r0, [r4, #0]
 800be66:	f000 fcbf 	bl	800c7e8 <memmove>
 800be6a:	68a3      	ldr	r3, [r4, #8]
 800be6c:	2000      	movs	r0, #0
 800be6e:	1b9b      	subs	r3, r3, r6
 800be70:	60a3      	str	r3, [r4, #8]
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	441e      	add	r6, r3
 800be76:	6026      	str	r6, [r4, #0]
 800be78:	e7dc      	b.n	800be34 <__ssputs_r+0x58>
 800be7a:	462a      	mov	r2, r5
 800be7c:	f000 fccf 	bl	800c81e <_realloc_r>
 800be80:	4606      	mov	r6, r0
 800be82:	2800      	cmp	r0, #0
 800be84:	d1e2      	bne.n	800be4c <__ssputs_r+0x70>
 800be86:	6921      	ldr	r1, [r4, #16]
 800be88:	4650      	mov	r0, sl
 800be8a:	f7ff ff01 	bl	800bc90 <_free_r>
 800be8e:	e7c8      	b.n	800be22 <__ssputs_r+0x46>

0800be90 <_svfiprintf_r>:
 800be90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be94:	461d      	mov	r5, r3
 800be96:	898b      	ldrh	r3, [r1, #12]
 800be98:	b09d      	sub	sp, #116	; 0x74
 800be9a:	061f      	lsls	r7, r3, #24
 800be9c:	4680      	mov	r8, r0
 800be9e:	460c      	mov	r4, r1
 800bea0:	4616      	mov	r6, r2
 800bea2:	d50f      	bpl.n	800bec4 <_svfiprintf_r+0x34>
 800bea4:	690b      	ldr	r3, [r1, #16]
 800bea6:	b96b      	cbnz	r3, 800bec4 <_svfiprintf_r+0x34>
 800bea8:	2140      	movs	r1, #64	; 0x40
 800beaa:	f7ff ff3d 	bl	800bd28 <_malloc_r>
 800beae:	6020      	str	r0, [r4, #0]
 800beb0:	6120      	str	r0, [r4, #16]
 800beb2:	b928      	cbnz	r0, 800bec0 <_svfiprintf_r+0x30>
 800beb4:	230c      	movs	r3, #12
 800beb6:	f8c8 3000 	str.w	r3, [r8]
 800beba:	f04f 30ff 	mov.w	r0, #4294967295
 800bebe:	e0c8      	b.n	800c052 <_svfiprintf_r+0x1c2>
 800bec0:	2340      	movs	r3, #64	; 0x40
 800bec2:	6163      	str	r3, [r4, #20]
 800bec4:	2300      	movs	r3, #0
 800bec6:	9309      	str	r3, [sp, #36]	; 0x24
 800bec8:	2320      	movs	r3, #32
 800beca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bece:	2330      	movs	r3, #48	; 0x30
 800bed0:	f04f 0b01 	mov.w	fp, #1
 800bed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bed8:	9503      	str	r5, [sp, #12]
 800beda:	4637      	mov	r7, r6
 800bedc:	463d      	mov	r5, r7
 800bede:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bee2:	b10b      	cbz	r3, 800bee8 <_svfiprintf_r+0x58>
 800bee4:	2b25      	cmp	r3, #37	; 0x25
 800bee6:	d13e      	bne.n	800bf66 <_svfiprintf_r+0xd6>
 800bee8:	ebb7 0a06 	subs.w	sl, r7, r6
 800beec:	d00b      	beq.n	800bf06 <_svfiprintf_r+0x76>
 800beee:	4653      	mov	r3, sl
 800bef0:	4632      	mov	r2, r6
 800bef2:	4621      	mov	r1, r4
 800bef4:	4640      	mov	r0, r8
 800bef6:	f7ff ff71 	bl	800bddc <__ssputs_r>
 800befa:	3001      	adds	r0, #1
 800befc:	f000 80a4 	beq.w	800c048 <_svfiprintf_r+0x1b8>
 800bf00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf02:	4453      	add	r3, sl
 800bf04:	9309      	str	r3, [sp, #36]	; 0x24
 800bf06:	783b      	ldrb	r3, [r7, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	f000 809d 	beq.w	800c048 <_svfiprintf_r+0x1b8>
 800bf0e:	2300      	movs	r3, #0
 800bf10:	f04f 32ff 	mov.w	r2, #4294967295
 800bf14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf18:	9304      	str	r3, [sp, #16]
 800bf1a:	9307      	str	r3, [sp, #28]
 800bf1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf20:	931a      	str	r3, [sp, #104]	; 0x68
 800bf22:	462f      	mov	r7, r5
 800bf24:	2205      	movs	r2, #5
 800bf26:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bf2a:	4850      	ldr	r0, [pc, #320]	; (800c06c <_svfiprintf_r+0x1dc>)
 800bf2c:	f000 fc4e 	bl	800c7cc <memchr>
 800bf30:	9b04      	ldr	r3, [sp, #16]
 800bf32:	b9d0      	cbnz	r0, 800bf6a <_svfiprintf_r+0xda>
 800bf34:	06d9      	lsls	r1, r3, #27
 800bf36:	bf44      	itt	mi
 800bf38:	2220      	movmi	r2, #32
 800bf3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf3e:	071a      	lsls	r2, r3, #28
 800bf40:	bf44      	itt	mi
 800bf42:	222b      	movmi	r2, #43	; 0x2b
 800bf44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf48:	782a      	ldrb	r2, [r5, #0]
 800bf4a:	2a2a      	cmp	r2, #42	; 0x2a
 800bf4c:	d015      	beq.n	800bf7a <_svfiprintf_r+0xea>
 800bf4e:	462f      	mov	r7, r5
 800bf50:	2000      	movs	r0, #0
 800bf52:	250a      	movs	r5, #10
 800bf54:	9a07      	ldr	r2, [sp, #28]
 800bf56:	4639      	mov	r1, r7
 800bf58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf5c:	3b30      	subs	r3, #48	; 0x30
 800bf5e:	2b09      	cmp	r3, #9
 800bf60:	d94d      	bls.n	800bffe <_svfiprintf_r+0x16e>
 800bf62:	b1b8      	cbz	r0, 800bf94 <_svfiprintf_r+0x104>
 800bf64:	e00f      	b.n	800bf86 <_svfiprintf_r+0xf6>
 800bf66:	462f      	mov	r7, r5
 800bf68:	e7b8      	b.n	800bedc <_svfiprintf_r+0x4c>
 800bf6a:	4a40      	ldr	r2, [pc, #256]	; (800c06c <_svfiprintf_r+0x1dc>)
 800bf6c:	463d      	mov	r5, r7
 800bf6e:	1a80      	subs	r0, r0, r2
 800bf70:	fa0b f000 	lsl.w	r0, fp, r0
 800bf74:	4318      	orrs	r0, r3
 800bf76:	9004      	str	r0, [sp, #16]
 800bf78:	e7d3      	b.n	800bf22 <_svfiprintf_r+0x92>
 800bf7a:	9a03      	ldr	r2, [sp, #12]
 800bf7c:	1d11      	adds	r1, r2, #4
 800bf7e:	6812      	ldr	r2, [r2, #0]
 800bf80:	9103      	str	r1, [sp, #12]
 800bf82:	2a00      	cmp	r2, #0
 800bf84:	db01      	blt.n	800bf8a <_svfiprintf_r+0xfa>
 800bf86:	9207      	str	r2, [sp, #28]
 800bf88:	e004      	b.n	800bf94 <_svfiprintf_r+0x104>
 800bf8a:	4252      	negs	r2, r2
 800bf8c:	f043 0302 	orr.w	r3, r3, #2
 800bf90:	9207      	str	r2, [sp, #28]
 800bf92:	9304      	str	r3, [sp, #16]
 800bf94:	783b      	ldrb	r3, [r7, #0]
 800bf96:	2b2e      	cmp	r3, #46	; 0x2e
 800bf98:	d10c      	bne.n	800bfb4 <_svfiprintf_r+0x124>
 800bf9a:	787b      	ldrb	r3, [r7, #1]
 800bf9c:	2b2a      	cmp	r3, #42	; 0x2a
 800bf9e:	d133      	bne.n	800c008 <_svfiprintf_r+0x178>
 800bfa0:	9b03      	ldr	r3, [sp, #12]
 800bfa2:	3702      	adds	r7, #2
 800bfa4:	1d1a      	adds	r2, r3, #4
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	9203      	str	r2, [sp, #12]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	bfb8      	it	lt
 800bfae:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfb2:	9305      	str	r3, [sp, #20]
 800bfb4:	4d2e      	ldr	r5, [pc, #184]	; (800c070 <_svfiprintf_r+0x1e0>)
 800bfb6:	2203      	movs	r2, #3
 800bfb8:	7839      	ldrb	r1, [r7, #0]
 800bfba:	4628      	mov	r0, r5
 800bfbc:	f000 fc06 	bl	800c7cc <memchr>
 800bfc0:	b138      	cbz	r0, 800bfd2 <_svfiprintf_r+0x142>
 800bfc2:	2340      	movs	r3, #64	; 0x40
 800bfc4:	1b40      	subs	r0, r0, r5
 800bfc6:	fa03 f000 	lsl.w	r0, r3, r0
 800bfca:	9b04      	ldr	r3, [sp, #16]
 800bfcc:	3701      	adds	r7, #1
 800bfce:	4303      	orrs	r3, r0
 800bfd0:	9304      	str	r3, [sp, #16]
 800bfd2:	7839      	ldrb	r1, [r7, #0]
 800bfd4:	2206      	movs	r2, #6
 800bfd6:	4827      	ldr	r0, [pc, #156]	; (800c074 <_svfiprintf_r+0x1e4>)
 800bfd8:	1c7e      	adds	r6, r7, #1
 800bfda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfde:	f000 fbf5 	bl	800c7cc <memchr>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d038      	beq.n	800c058 <_svfiprintf_r+0x1c8>
 800bfe6:	4b24      	ldr	r3, [pc, #144]	; (800c078 <_svfiprintf_r+0x1e8>)
 800bfe8:	bb13      	cbnz	r3, 800c030 <_svfiprintf_r+0x1a0>
 800bfea:	9b03      	ldr	r3, [sp, #12]
 800bfec:	3307      	adds	r3, #7
 800bfee:	f023 0307 	bic.w	r3, r3, #7
 800bff2:	3308      	adds	r3, #8
 800bff4:	9303      	str	r3, [sp, #12]
 800bff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bff8:	444b      	add	r3, r9
 800bffa:	9309      	str	r3, [sp, #36]	; 0x24
 800bffc:	e76d      	b.n	800beda <_svfiprintf_r+0x4a>
 800bffe:	fb05 3202 	mla	r2, r5, r2, r3
 800c002:	2001      	movs	r0, #1
 800c004:	460f      	mov	r7, r1
 800c006:	e7a6      	b.n	800bf56 <_svfiprintf_r+0xc6>
 800c008:	2300      	movs	r3, #0
 800c00a:	250a      	movs	r5, #10
 800c00c:	4619      	mov	r1, r3
 800c00e:	3701      	adds	r7, #1
 800c010:	9305      	str	r3, [sp, #20]
 800c012:	4638      	mov	r0, r7
 800c014:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c018:	3a30      	subs	r2, #48	; 0x30
 800c01a:	2a09      	cmp	r2, #9
 800c01c:	d903      	bls.n	800c026 <_svfiprintf_r+0x196>
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d0c8      	beq.n	800bfb4 <_svfiprintf_r+0x124>
 800c022:	9105      	str	r1, [sp, #20]
 800c024:	e7c6      	b.n	800bfb4 <_svfiprintf_r+0x124>
 800c026:	fb05 2101 	mla	r1, r5, r1, r2
 800c02a:	2301      	movs	r3, #1
 800c02c:	4607      	mov	r7, r0
 800c02e:	e7f0      	b.n	800c012 <_svfiprintf_r+0x182>
 800c030:	ab03      	add	r3, sp, #12
 800c032:	9300      	str	r3, [sp, #0]
 800c034:	4622      	mov	r2, r4
 800c036:	4b11      	ldr	r3, [pc, #68]	; (800c07c <_svfiprintf_r+0x1ec>)
 800c038:	a904      	add	r1, sp, #16
 800c03a:	4640      	mov	r0, r8
 800c03c:	f3af 8000 	nop.w
 800c040:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c044:	4681      	mov	r9, r0
 800c046:	d1d6      	bne.n	800bff6 <_svfiprintf_r+0x166>
 800c048:	89a3      	ldrh	r3, [r4, #12]
 800c04a:	065b      	lsls	r3, r3, #25
 800c04c:	f53f af35 	bmi.w	800beba <_svfiprintf_r+0x2a>
 800c050:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c052:	b01d      	add	sp, #116	; 0x74
 800c054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c058:	ab03      	add	r3, sp, #12
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	4622      	mov	r2, r4
 800c05e:	4b07      	ldr	r3, [pc, #28]	; (800c07c <_svfiprintf_r+0x1ec>)
 800c060:	a904      	add	r1, sp, #16
 800c062:	4640      	mov	r0, r8
 800c064:	f000 f9c0 	bl	800c3e8 <_printf_i>
 800c068:	e7ea      	b.n	800c040 <_svfiprintf_r+0x1b0>
 800c06a:	bf00      	nop
 800c06c:	0800d33c 	.word	0x0800d33c
 800c070:	0800d342 	.word	0x0800d342
 800c074:	0800d346 	.word	0x0800d346
 800c078:	00000000 	.word	0x00000000
 800c07c:	0800bddd 	.word	0x0800bddd

0800c080 <__sfputc_r>:
 800c080:	6893      	ldr	r3, [r2, #8]
 800c082:	b410      	push	{r4}
 800c084:	3b01      	subs	r3, #1
 800c086:	2b00      	cmp	r3, #0
 800c088:	6093      	str	r3, [r2, #8]
 800c08a:	da07      	bge.n	800c09c <__sfputc_r+0x1c>
 800c08c:	6994      	ldr	r4, [r2, #24]
 800c08e:	42a3      	cmp	r3, r4
 800c090:	db01      	blt.n	800c096 <__sfputc_r+0x16>
 800c092:	290a      	cmp	r1, #10
 800c094:	d102      	bne.n	800c09c <__sfputc_r+0x1c>
 800c096:	bc10      	pop	{r4}
 800c098:	f7ff bb54 	b.w	800b744 <__swbuf_r>
 800c09c:	6813      	ldr	r3, [r2, #0]
 800c09e:	1c58      	adds	r0, r3, #1
 800c0a0:	6010      	str	r0, [r2, #0]
 800c0a2:	7019      	strb	r1, [r3, #0]
 800c0a4:	4608      	mov	r0, r1
 800c0a6:	bc10      	pop	{r4}
 800c0a8:	4770      	bx	lr

0800c0aa <__sfputs_r>:
 800c0aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ac:	4606      	mov	r6, r0
 800c0ae:	460f      	mov	r7, r1
 800c0b0:	4614      	mov	r4, r2
 800c0b2:	18d5      	adds	r5, r2, r3
 800c0b4:	42ac      	cmp	r4, r5
 800c0b6:	d101      	bne.n	800c0bc <__sfputs_r+0x12>
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	e007      	b.n	800c0cc <__sfputs_r+0x22>
 800c0bc:	463a      	mov	r2, r7
 800c0be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	f7ff ffdc 	bl	800c080 <__sfputc_r>
 800c0c8:	1c43      	adds	r3, r0, #1
 800c0ca:	d1f3      	bne.n	800c0b4 <__sfputs_r+0xa>
 800c0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c0d0 <_vfiprintf_r>:
 800c0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d4:	460c      	mov	r4, r1
 800c0d6:	b09d      	sub	sp, #116	; 0x74
 800c0d8:	4617      	mov	r7, r2
 800c0da:	461d      	mov	r5, r3
 800c0dc:	4606      	mov	r6, r0
 800c0de:	b118      	cbz	r0, 800c0e8 <_vfiprintf_r+0x18>
 800c0e0:	6983      	ldr	r3, [r0, #24]
 800c0e2:	b90b      	cbnz	r3, 800c0e8 <_vfiprintf_r+0x18>
 800c0e4:	f7ff fcde 	bl	800baa4 <__sinit>
 800c0e8:	4b7c      	ldr	r3, [pc, #496]	; (800c2dc <_vfiprintf_r+0x20c>)
 800c0ea:	429c      	cmp	r4, r3
 800c0ec:	d158      	bne.n	800c1a0 <_vfiprintf_r+0xd0>
 800c0ee:	6874      	ldr	r4, [r6, #4]
 800c0f0:	89a3      	ldrh	r3, [r4, #12]
 800c0f2:	0718      	lsls	r0, r3, #28
 800c0f4:	d55e      	bpl.n	800c1b4 <_vfiprintf_r+0xe4>
 800c0f6:	6923      	ldr	r3, [r4, #16]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d05b      	beq.n	800c1b4 <_vfiprintf_r+0xe4>
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c100:	2320      	movs	r3, #32
 800c102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c106:	2330      	movs	r3, #48	; 0x30
 800c108:	f04f 0b01 	mov.w	fp, #1
 800c10c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c110:	9503      	str	r5, [sp, #12]
 800c112:	46b8      	mov	r8, r7
 800c114:	4645      	mov	r5, r8
 800c116:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c11a:	b10b      	cbz	r3, 800c120 <_vfiprintf_r+0x50>
 800c11c:	2b25      	cmp	r3, #37	; 0x25
 800c11e:	d154      	bne.n	800c1ca <_vfiprintf_r+0xfa>
 800c120:	ebb8 0a07 	subs.w	sl, r8, r7
 800c124:	d00b      	beq.n	800c13e <_vfiprintf_r+0x6e>
 800c126:	4653      	mov	r3, sl
 800c128:	463a      	mov	r2, r7
 800c12a:	4621      	mov	r1, r4
 800c12c:	4630      	mov	r0, r6
 800c12e:	f7ff ffbc 	bl	800c0aa <__sfputs_r>
 800c132:	3001      	adds	r0, #1
 800c134:	f000 80c2 	beq.w	800c2bc <_vfiprintf_r+0x1ec>
 800c138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c13a:	4453      	add	r3, sl
 800c13c:	9309      	str	r3, [sp, #36]	; 0x24
 800c13e:	f898 3000 	ldrb.w	r3, [r8]
 800c142:	2b00      	cmp	r3, #0
 800c144:	f000 80ba 	beq.w	800c2bc <_vfiprintf_r+0x1ec>
 800c148:	2300      	movs	r3, #0
 800c14a:	f04f 32ff 	mov.w	r2, #4294967295
 800c14e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c152:	9304      	str	r3, [sp, #16]
 800c154:	9307      	str	r3, [sp, #28]
 800c156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c15a:	931a      	str	r3, [sp, #104]	; 0x68
 800c15c:	46a8      	mov	r8, r5
 800c15e:	2205      	movs	r2, #5
 800c160:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c164:	485e      	ldr	r0, [pc, #376]	; (800c2e0 <_vfiprintf_r+0x210>)
 800c166:	f000 fb31 	bl	800c7cc <memchr>
 800c16a:	9b04      	ldr	r3, [sp, #16]
 800c16c:	bb78      	cbnz	r0, 800c1ce <_vfiprintf_r+0xfe>
 800c16e:	06d9      	lsls	r1, r3, #27
 800c170:	bf44      	itt	mi
 800c172:	2220      	movmi	r2, #32
 800c174:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c178:	071a      	lsls	r2, r3, #28
 800c17a:	bf44      	itt	mi
 800c17c:	222b      	movmi	r2, #43	; 0x2b
 800c17e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c182:	782a      	ldrb	r2, [r5, #0]
 800c184:	2a2a      	cmp	r2, #42	; 0x2a
 800c186:	d02a      	beq.n	800c1de <_vfiprintf_r+0x10e>
 800c188:	46a8      	mov	r8, r5
 800c18a:	2000      	movs	r0, #0
 800c18c:	250a      	movs	r5, #10
 800c18e:	9a07      	ldr	r2, [sp, #28]
 800c190:	4641      	mov	r1, r8
 800c192:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c196:	3b30      	subs	r3, #48	; 0x30
 800c198:	2b09      	cmp	r3, #9
 800c19a:	d969      	bls.n	800c270 <_vfiprintf_r+0x1a0>
 800c19c:	b360      	cbz	r0, 800c1f8 <_vfiprintf_r+0x128>
 800c19e:	e024      	b.n	800c1ea <_vfiprintf_r+0x11a>
 800c1a0:	4b50      	ldr	r3, [pc, #320]	; (800c2e4 <_vfiprintf_r+0x214>)
 800c1a2:	429c      	cmp	r4, r3
 800c1a4:	d101      	bne.n	800c1aa <_vfiprintf_r+0xda>
 800c1a6:	68b4      	ldr	r4, [r6, #8]
 800c1a8:	e7a2      	b.n	800c0f0 <_vfiprintf_r+0x20>
 800c1aa:	4b4f      	ldr	r3, [pc, #316]	; (800c2e8 <_vfiprintf_r+0x218>)
 800c1ac:	429c      	cmp	r4, r3
 800c1ae:	bf08      	it	eq
 800c1b0:	68f4      	ldreq	r4, [r6, #12]
 800c1b2:	e79d      	b.n	800c0f0 <_vfiprintf_r+0x20>
 800c1b4:	4621      	mov	r1, r4
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	f7ff fb16 	bl	800b7e8 <__swsetup_r>
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	d09d      	beq.n	800c0fc <_vfiprintf_r+0x2c>
 800c1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c4:	b01d      	add	sp, #116	; 0x74
 800c1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ca:	46a8      	mov	r8, r5
 800c1cc:	e7a2      	b.n	800c114 <_vfiprintf_r+0x44>
 800c1ce:	4a44      	ldr	r2, [pc, #272]	; (800c2e0 <_vfiprintf_r+0x210>)
 800c1d0:	4645      	mov	r5, r8
 800c1d2:	1a80      	subs	r0, r0, r2
 800c1d4:	fa0b f000 	lsl.w	r0, fp, r0
 800c1d8:	4318      	orrs	r0, r3
 800c1da:	9004      	str	r0, [sp, #16]
 800c1dc:	e7be      	b.n	800c15c <_vfiprintf_r+0x8c>
 800c1de:	9a03      	ldr	r2, [sp, #12]
 800c1e0:	1d11      	adds	r1, r2, #4
 800c1e2:	6812      	ldr	r2, [r2, #0]
 800c1e4:	9103      	str	r1, [sp, #12]
 800c1e6:	2a00      	cmp	r2, #0
 800c1e8:	db01      	blt.n	800c1ee <_vfiprintf_r+0x11e>
 800c1ea:	9207      	str	r2, [sp, #28]
 800c1ec:	e004      	b.n	800c1f8 <_vfiprintf_r+0x128>
 800c1ee:	4252      	negs	r2, r2
 800c1f0:	f043 0302 	orr.w	r3, r3, #2
 800c1f4:	9207      	str	r2, [sp, #28]
 800c1f6:	9304      	str	r3, [sp, #16]
 800c1f8:	f898 3000 	ldrb.w	r3, [r8]
 800c1fc:	2b2e      	cmp	r3, #46	; 0x2e
 800c1fe:	d10e      	bne.n	800c21e <_vfiprintf_r+0x14e>
 800c200:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c204:	2b2a      	cmp	r3, #42	; 0x2a
 800c206:	d138      	bne.n	800c27a <_vfiprintf_r+0x1aa>
 800c208:	9b03      	ldr	r3, [sp, #12]
 800c20a:	f108 0802 	add.w	r8, r8, #2
 800c20e:	1d1a      	adds	r2, r3, #4
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	9203      	str	r2, [sp, #12]
 800c214:	2b00      	cmp	r3, #0
 800c216:	bfb8      	it	lt
 800c218:	f04f 33ff 	movlt.w	r3, #4294967295
 800c21c:	9305      	str	r3, [sp, #20]
 800c21e:	4d33      	ldr	r5, [pc, #204]	; (800c2ec <_vfiprintf_r+0x21c>)
 800c220:	2203      	movs	r2, #3
 800c222:	f898 1000 	ldrb.w	r1, [r8]
 800c226:	4628      	mov	r0, r5
 800c228:	f000 fad0 	bl	800c7cc <memchr>
 800c22c:	b140      	cbz	r0, 800c240 <_vfiprintf_r+0x170>
 800c22e:	2340      	movs	r3, #64	; 0x40
 800c230:	1b40      	subs	r0, r0, r5
 800c232:	fa03 f000 	lsl.w	r0, r3, r0
 800c236:	9b04      	ldr	r3, [sp, #16]
 800c238:	f108 0801 	add.w	r8, r8, #1
 800c23c:	4303      	orrs	r3, r0
 800c23e:	9304      	str	r3, [sp, #16]
 800c240:	f898 1000 	ldrb.w	r1, [r8]
 800c244:	2206      	movs	r2, #6
 800c246:	482a      	ldr	r0, [pc, #168]	; (800c2f0 <_vfiprintf_r+0x220>)
 800c248:	f108 0701 	add.w	r7, r8, #1
 800c24c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c250:	f000 fabc 	bl	800c7cc <memchr>
 800c254:	2800      	cmp	r0, #0
 800c256:	d037      	beq.n	800c2c8 <_vfiprintf_r+0x1f8>
 800c258:	4b26      	ldr	r3, [pc, #152]	; (800c2f4 <_vfiprintf_r+0x224>)
 800c25a:	bb1b      	cbnz	r3, 800c2a4 <_vfiprintf_r+0x1d4>
 800c25c:	9b03      	ldr	r3, [sp, #12]
 800c25e:	3307      	adds	r3, #7
 800c260:	f023 0307 	bic.w	r3, r3, #7
 800c264:	3308      	adds	r3, #8
 800c266:	9303      	str	r3, [sp, #12]
 800c268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c26a:	444b      	add	r3, r9
 800c26c:	9309      	str	r3, [sp, #36]	; 0x24
 800c26e:	e750      	b.n	800c112 <_vfiprintf_r+0x42>
 800c270:	fb05 3202 	mla	r2, r5, r2, r3
 800c274:	2001      	movs	r0, #1
 800c276:	4688      	mov	r8, r1
 800c278:	e78a      	b.n	800c190 <_vfiprintf_r+0xc0>
 800c27a:	2300      	movs	r3, #0
 800c27c:	250a      	movs	r5, #10
 800c27e:	4619      	mov	r1, r3
 800c280:	f108 0801 	add.w	r8, r8, #1
 800c284:	9305      	str	r3, [sp, #20]
 800c286:	4640      	mov	r0, r8
 800c288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c28c:	3a30      	subs	r2, #48	; 0x30
 800c28e:	2a09      	cmp	r2, #9
 800c290:	d903      	bls.n	800c29a <_vfiprintf_r+0x1ca>
 800c292:	2b00      	cmp	r3, #0
 800c294:	d0c3      	beq.n	800c21e <_vfiprintf_r+0x14e>
 800c296:	9105      	str	r1, [sp, #20]
 800c298:	e7c1      	b.n	800c21e <_vfiprintf_r+0x14e>
 800c29a:	fb05 2101 	mla	r1, r5, r1, r2
 800c29e:	2301      	movs	r3, #1
 800c2a0:	4680      	mov	r8, r0
 800c2a2:	e7f0      	b.n	800c286 <_vfiprintf_r+0x1b6>
 800c2a4:	ab03      	add	r3, sp, #12
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	4622      	mov	r2, r4
 800c2aa:	4b13      	ldr	r3, [pc, #76]	; (800c2f8 <_vfiprintf_r+0x228>)
 800c2ac:	a904      	add	r1, sp, #16
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	f3af 8000 	nop.w
 800c2b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c2b8:	4681      	mov	r9, r0
 800c2ba:	d1d5      	bne.n	800c268 <_vfiprintf_r+0x198>
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	065b      	lsls	r3, r3, #25
 800c2c0:	f53f af7e 	bmi.w	800c1c0 <_vfiprintf_r+0xf0>
 800c2c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2c6:	e77d      	b.n	800c1c4 <_vfiprintf_r+0xf4>
 800c2c8:	ab03      	add	r3, sp, #12
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	4622      	mov	r2, r4
 800c2ce:	4b0a      	ldr	r3, [pc, #40]	; (800c2f8 <_vfiprintf_r+0x228>)
 800c2d0:	a904      	add	r1, sp, #16
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f000 f888 	bl	800c3e8 <_printf_i>
 800c2d8:	e7ec      	b.n	800c2b4 <_vfiprintf_r+0x1e4>
 800c2da:	bf00      	nop
 800c2dc:	0800d2fc 	.word	0x0800d2fc
 800c2e0:	0800d33c 	.word	0x0800d33c
 800c2e4:	0800d31c 	.word	0x0800d31c
 800c2e8:	0800d2dc 	.word	0x0800d2dc
 800c2ec:	0800d342 	.word	0x0800d342
 800c2f0:	0800d346 	.word	0x0800d346
 800c2f4:	00000000 	.word	0x00000000
 800c2f8:	0800c0ab 	.word	0x0800c0ab

0800c2fc <_printf_common>:
 800c2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c300:	4691      	mov	r9, r2
 800c302:	461f      	mov	r7, r3
 800c304:	688a      	ldr	r2, [r1, #8]
 800c306:	690b      	ldr	r3, [r1, #16]
 800c308:	4606      	mov	r6, r0
 800c30a:	4293      	cmp	r3, r2
 800c30c:	bfb8      	it	lt
 800c30e:	4613      	movlt	r3, r2
 800c310:	f8c9 3000 	str.w	r3, [r9]
 800c314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c318:	460c      	mov	r4, r1
 800c31a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c31e:	b112      	cbz	r2, 800c326 <_printf_common+0x2a>
 800c320:	3301      	adds	r3, #1
 800c322:	f8c9 3000 	str.w	r3, [r9]
 800c326:	6823      	ldr	r3, [r4, #0]
 800c328:	0699      	lsls	r1, r3, #26
 800c32a:	bf42      	ittt	mi
 800c32c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c330:	3302      	addmi	r3, #2
 800c332:	f8c9 3000 	strmi.w	r3, [r9]
 800c336:	6825      	ldr	r5, [r4, #0]
 800c338:	f015 0506 	ands.w	r5, r5, #6
 800c33c:	d107      	bne.n	800c34e <_printf_common+0x52>
 800c33e:	f104 0a19 	add.w	sl, r4, #25
 800c342:	68e3      	ldr	r3, [r4, #12]
 800c344:	f8d9 2000 	ldr.w	r2, [r9]
 800c348:	1a9b      	subs	r3, r3, r2
 800c34a:	42ab      	cmp	r3, r5
 800c34c:	dc29      	bgt.n	800c3a2 <_printf_common+0xa6>
 800c34e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c352:	6822      	ldr	r2, [r4, #0]
 800c354:	3300      	adds	r3, #0
 800c356:	bf18      	it	ne
 800c358:	2301      	movne	r3, #1
 800c35a:	0692      	lsls	r2, r2, #26
 800c35c:	d42e      	bmi.n	800c3bc <_printf_common+0xc0>
 800c35e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c362:	4639      	mov	r1, r7
 800c364:	4630      	mov	r0, r6
 800c366:	47c0      	blx	r8
 800c368:	3001      	adds	r0, #1
 800c36a:	d021      	beq.n	800c3b0 <_printf_common+0xb4>
 800c36c:	6823      	ldr	r3, [r4, #0]
 800c36e:	68e5      	ldr	r5, [r4, #12]
 800c370:	f003 0306 	and.w	r3, r3, #6
 800c374:	2b04      	cmp	r3, #4
 800c376:	bf18      	it	ne
 800c378:	2500      	movne	r5, #0
 800c37a:	f8d9 2000 	ldr.w	r2, [r9]
 800c37e:	f04f 0900 	mov.w	r9, #0
 800c382:	bf08      	it	eq
 800c384:	1aad      	subeq	r5, r5, r2
 800c386:	68a3      	ldr	r3, [r4, #8]
 800c388:	6922      	ldr	r2, [r4, #16]
 800c38a:	bf08      	it	eq
 800c38c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c390:	4293      	cmp	r3, r2
 800c392:	bfc4      	itt	gt
 800c394:	1a9b      	subgt	r3, r3, r2
 800c396:	18ed      	addgt	r5, r5, r3
 800c398:	341a      	adds	r4, #26
 800c39a:	454d      	cmp	r5, r9
 800c39c:	d11a      	bne.n	800c3d4 <_printf_common+0xd8>
 800c39e:	2000      	movs	r0, #0
 800c3a0:	e008      	b.n	800c3b4 <_printf_common+0xb8>
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	4652      	mov	r2, sl
 800c3a6:	4639      	mov	r1, r7
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	47c0      	blx	r8
 800c3ac:	3001      	adds	r0, #1
 800c3ae:	d103      	bne.n	800c3b8 <_printf_common+0xbc>
 800c3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3b8:	3501      	adds	r5, #1
 800c3ba:	e7c2      	b.n	800c342 <_printf_common+0x46>
 800c3bc:	2030      	movs	r0, #48	; 0x30
 800c3be:	18e1      	adds	r1, r4, r3
 800c3c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3c4:	1c5a      	adds	r2, r3, #1
 800c3c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3ca:	4422      	add	r2, r4
 800c3cc:	3302      	adds	r3, #2
 800c3ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3d2:	e7c4      	b.n	800c35e <_printf_common+0x62>
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	4622      	mov	r2, r4
 800c3d8:	4639      	mov	r1, r7
 800c3da:	4630      	mov	r0, r6
 800c3dc:	47c0      	blx	r8
 800c3de:	3001      	adds	r0, #1
 800c3e0:	d0e6      	beq.n	800c3b0 <_printf_common+0xb4>
 800c3e2:	f109 0901 	add.w	r9, r9, #1
 800c3e6:	e7d8      	b.n	800c39a <_printf_common+0x9e>

0800c3e8 <_printf_i>:
 800c3e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c3f0:	460c      	mov	r4, r1
 800c3f2:	7e09      	ldrb	r1, [r1, #24]
 800c3f4:	b085      	sub	sp, #20
 800c3f6:	296e      	cmp	r1, #110	; 0x6e
 800c3f8:	4617      	mov	r7, r2
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	4698      	mov	r8, r3
 800c3fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c400:	f000 80b3 	beq.w	800c56a <_printf_i+0x182>
 800c404:	d822      	bhi.n	800c44c <_printf_i+0x64>
 800c406:	2963      	cmp	r1, #99	; 0x63
 800c408:	d036      	beq.n	800c478 <_printf_i+0x90>
 800c40a:	d80a      	bhi.n	800c422 <_printf_i+0x3a>
 800c40c:	2900      	cmp	r1, #0
 800c40e:	f000 80b9 	beq.w	800c584 <_printf_i+0x19c>
 800c412:	2958      	cmp	r1, #88	; 0x58
 800c414:	f000 8083 	beq.w	800c51e <_printf_i+0x136>
 800c418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c41c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c420:	e032      	b.n	800c488 <_printf_i+0xa0>
 800c422:	2964      	cmp	r1, #100	; 0x64
 800c424:	d001      	beq.n	800c42a <_printf_i+0x42>
 800c426:	2969      	cmp	r1, #105	; 0x69
 800c428:	d1f6      	bne.n	800c418 <_printf_i+0x30>
 800c42a:	6820      	ldr	r0, [r4, #0]
 800c42c:	6813      	ldr	r3, [r2, #0]
 800c42e:	0605      	lsls	r5, r0, #24
 800c430:	f103 0104 	add.w	r1, r3, #4
 800c434:	d52a      	bpl.n	800c48c <_printf_i+0xa4>
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	6011      	str	r1, [r2, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	da03      	bge.n	800c446 <_printf_i+0x5e>
 800c43e:	222d      	movs	r2, #45	; 0x2d
 800c440:	425b      	negs	r3, r3
 800c442:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c446:	486f      	ldr	r0, [pc, #444]	; (800c604 <_printf_i+0x21c>)
 800c448:	220a      	movs	r2, #10
 800c44a:	e039      	b.n	800c4c0 <_printf_i+0xd8>
 800c44c:	2973      	cmp	r1, #115	; 0x73
 800c44e:	f000 809d 	beq.w	800c58c <_printf_i+0x1a4>
 800c452:	d808      	bhi.n	800c466 <_printf_i+0x7e>
 800c454:	296f      	cmp	r1, #111	; 0x6f
 800c456:	d020      	beq.n	800c49a <_printf_i+0xb2>
 800c458:	2970      	cmp	r1, #112	; 0x70
 800c45a:	d1dd      	bne.n	800c418 <_printf_i+0x30>
 800c45c:	6823      	ldr	r3, [r4, #0]
 800c45e:	f043 0320 	orr.w	r3, r3, #32
 800c462:	6023      	str	r3, [r4, #0]
 800c464:	e003      	b.n	800c46e <_printf_i+0x86>
 800c466:	2975      	cmp	r1, #117	; 0x75
 800c468:	d017      	beq.n	800c49a <_printf_i+0xb2>
 800c46a:	2978      	cmp	r1, #120	; 0x78
 800c46c:	d1d4      	bne.n	800c418 <_printf_i+0x30>
 800c46e:	2378      	movs	r3, #120	; 0x78
 800c470:	4865      	ldr	r0, [pc, #404]	; (800c608 <_printf_i+0x220>)
 800c472:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c476:	e055      	b.n	800c524 <_printf_i+0x13c>
 800c478:	6813      	ldr	r3, [r2, #0]
 800c47a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c47e:	1d19      	adds	r1, r3, #4
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	6011      	str	r1, [r2, #0]
 800c484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c488:	2301      	movs	r3, #1
 800c48a:	e08c      	b.n	800c5a6 <_printf_i+0x1be>
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c492:	6011      	str	r1, [r2, #0]
 800c494:	bf18      	it	ne
 800c496:	b21b      	sxthne	r3, r3
 800c498:	e7cf      	b.n	800c43a <_printf_i+0x52>
 800c49a:	6813      	ldr	r3, [r2, #0]
 800c49c:	6825      	ldr	r5, [r4, #0]
 800c49e:	1d18      	adds	r0, r3, #4
 800c4a0:	6010      	str	r0, [r2, #0]
 800c4a2:	0628      	lsls	r0, r5, #24
 800c4a4:	d501      	bpl.n	800c4aa <_printf_i+0xc2>
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	e002      	b.n	800c4b0 <_printf_i+0xc8>
 800c4aa:	0668      	lsls	r0, r5, #25
 800c4ac:	d5fb      	bpl.n	800c4a6 <_printf_i+0xbe>
 800c4ae:	881b      	ldrh	r3, [r3, #0]
 800c4b0:	296f      	cmp	r1, #111	; 0x6f
 800c4b2:	bf14      	ite	ne
 800c4b4:	220a      	movne	r2, #10
 800c4b6:	2208      	moveq	r2, #8
 800c4b8:	4852      	ldr	r0, [pc, #328]	; (800c604 <_printf_i+0x21c>)
 800c4ba:	2100      	movs	r1, #0
 800c4bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4c0:	6865      	ldr	r5, [r4, #4]
 800c4c2:	2d00      	cmp	r5, #0
 800c4c4:	60a5      	str	r5, [r4, #8]
 800c4c6:	f2c0 8095 	blt.w	800c5f4 <_printf_i+0x20c>
 800c4ca:	6821      	ldr	r1, [r4, #0]
 800c4cc:	f021 0104 	bic.w	r1, r1, #4
 800c4d0:	6021      	str	r1, [r4, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d13d      	bne.n	800c552 <_printf_i+0x16a>
 800c4d6:	2d00      	cmp	r5, #0
 800c4d8:	f040 808e 	bne.w	800c5f8 <_printf_i+0x210>
 800c4dc:	4665      	mov	r5, ip
 800c4de:	2a08      	cmp	r2, #8
 800c4e0:	d10b      	bne.n	800c4fa <_printf_i+0x112>
 800c4e2:	6823      	ldr	r3, [r4, #0]
 800c4e4:	07db      	lsls	r3, r3, #31
 800c4e6:	d508      	bpl.n	800c4fa <_printf_i+0x112>
 800c4e8:	6923      	ldr	r3, [r4, #16]
 800c4ea:	6862      	ldr	r2, [r4, #4]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	bfde      	ittt	le
 800c4f0:	2330      	movle	r3, #48	; 0x30
 800c4f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4fa:	ebac 0305 	sub.w	r3, ip, r5
 800c4fe:	6123      	str	r3, [r4, #16]
 800c500:	f8cd 8000 	str.w	r8, [sp]
 800c504:	463b      	mov	r3, r7
 800c506:	aa03      	add	r2, sp, #12
 800c508:	4621      	mov	r1, r4
 800c50a:	4630      	mov	r0, r6
 800c50c:	f7ff fef6 	bl	800c2fc <_printf_common>
 800c510:	3001      	adds	r0, #1
 800c512:	d14d      	bne.n	800c5b0 <_printf_i+0x1c8>
 800c514:	f04f 30ff 	mov.w	r0, #4294967295
 800c518:	b005      	add	sp, #20
 800c51a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c51e:	4839      	ldr	r0, [pc, #228]	; (800c604 <_printf_i+0x21c>)
 800c520:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c524:	6813      	ldr	r3, [r2, #0]
 800c526:	6821      	ldr	r1, [r4, #0]
 800c528:	1d1d      	adds	r5, r3, #4
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	6015      	str	r5, [r2, #0]
 800c52e:	060a      	lsls	r2, r1, #24
 800c530:	d50b      	bpl.n	800c54a <_printf_i+0x162>
 800c532:	07ca      	lsls	r2, r1, #31
 800c534:	bf44      	itt	mi
 800c536:	f041 0120 	orrmi.w	r1, r1, #32
 800c53a:	6021      	strmi	r1, [r4, #0]
 800c53c:	b91b      	cbnz	r3, 800c546 <_printf_i+0x15e>
 800c53e:	6822      	ldr	r2, [r4, #0]
 800c540:	f022 0220 	bic.w	r2, r2, #32
 800c544:	6022      	str	r2, [r4, #0]
 800c546:	2210      	movs	r2, #16
 800c548:	e7b7      	b.n	800c4ba <_printf_i+0xd2>
 800c54a:	064d      	lsls	r5, r1, #25
 800c54c:	bf48      	it	mi
 800c54e:	b29b      	uxthmi	r3, r3
 800c550:	e7ef      	b.n	800c532 <_printf_i+0x14a>
 800c552:	4665      	mov	r5, ip
 800c554:	fbb3 f1f2 	udiv	r1, r3, r2
 800c558:	fb02 3311 	mls	r3, r2, r1, r3
 800c55c:	5cc3      	ldrb	r3, [r0, r3]
 800c55e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c562:	460b      	mov	r3, r1
 800c564:	2900      	cmp	r1, #0
 800c566:	d1f5      	bne.n	800c554 <_printf_i+0x16c>
 800c568:	e7b9      	b.n	800c4de <_printf_i+0xf6>
 800c56a:	6813      	ldr	r3, [r2, #0]
 800c56c:	6825      	ldr	r5, [r4, #0]
 800c56e:	1d18      	adds	r0, r3, #4
 800c570:	6961      	ldr	r1, [r4, #20]
 800c572:	6010      	str	r0, [r2, #0]
 800c574:	0628      	lsls	r0, r5, #24
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	d501      	bpl.n	800c57e <_printf_i+0x196>
 800c57a:	6019      	str	r1, [r3, #0]
 800c57c:	e002      	b.n	800c584 <_printf_i+0x19c>
 800c57e:	066a      	lsls	r2, r5, #25
 800c580:	d5fb      	bpl.n	800c57a <_printf_i+0x192>
 800c582:	8019      	strh	r1, [r3, #0]
 800c584:	2300      	movs	r3, #0
 800c586:	4665      	mov	r5, ip
 800c588:	6123      	str	r3, [r4, #16]
 800c58a:	e7b9      	b.n	800c500 <_printf_i+0x118>
 800c58c:	6813      	ldr	r3, [r2, #0]
 800c58e:	1d19      	adds	r1, r3, #4
 800c590:	6011      	str	r1, [r2, #0]
 800c592:	681d      	ldr	r5, [r3, #0]
 800c594:	6862      	ldr	r2, [r4, #4]
 800c596:	2100      	movs	r1, #0
 800c598:	4628      	mov	r0, r5
 800c59a:	f000 f917 	bl	800c7cc <memchr>
 800c59e:	b108      	cbz	r0, 800c5a4 <_printf_i+0x1bc>
 800c5a0:	1b40      	subs	r0, r0, r5
 800c5a2:	6060      	str	r0, [r4, #4]
 800c5a4:	6863      	ldr	r3, [r4, #4]
 800c5a6:	6123      	str	r3, [r4, #16]
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5ae:	e7a7      	b.n	800c500 <_printf_i+0x118>
 800c5b0:	6923      	ldr	r3, [r4, #16]
 800c5b2:	462a      	mov	r2, r5
 800c5b4:	4639      	mov	r1, r7
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	47c0      	blx	r8
 800c5ba:	3001      	adds	r0, #1
 800c5bc:	d0aa      	beq.n	800c514 <_printf_i+0x12c>
 800c5be:	6823      	ldr	r3, [r4, #0]
 800c5c0:	079b      	lsls	r3, r3, #30
 800c5c2:	d413      	bmi.n	800c5ec <_printf_i+0x204>
 800c5c4:	68e0      	ldr	r0, [r4, #12]
 800c5c6:	9b03      	ldr	r3, [sp, #12]
 800c5c8:	4298      	cmp	r0, r3
 800c5ca:	bfb8      	it	lt
 800c5cc:	4618      	movlt	r0, r3
 800c5ce:	e7a3      	b.n	800c518 <_printf_i+0x130>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	464a      	mov	r2, r9
 800c5d4:	4639      	mov	r1, r7
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	47c0      	blx	r8
 800c5da:	3001      	adds	r0, #1
 800c5dc:	d09a      	beq.n	800c514 <_printf_i+0x12c>
 800c5de:	3501      	adds	r5, #1
 800c5e0:	68e3      	ldr	r3, [r4, #12]
 800c5e2:	9a03      	ldr	r2, [sp, #12]
 800c5e4:	1a9b      	subs	r3, r3, r2
 800c5e6:	42ab      	cmp	r3, r5
 800c5e8:	dcf2      	bgt.n	800c5d0 <_printf_i+0x1e8>
 800c5ea:	e7eb      	b.n	800c5c4 <_printf_i+0x1dc>
 800c5ec:	2500      	movs	r5, #0
 800c5ee:	f104 0919 	add.w	r9, r4, #25
 800c5f2:	e7f5      	b.n	800c5e0 <_printf_i+0x1f8>
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1ac      	bne.n	800c552 <_printf_i+0x16a>
 800c5f8:	7803      	ldrb	r3, [r0, #0]
 800c5fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c602:	e76c      	b.n	800c4de <_printf_i+0xf6>
 800c604:	0800d34d 	.word	0x0800d34d
 800c608:	0800d35e 	.word	0x0800d35e

0800c60c <_putc_r>:
 800c60c:	b570      	push	{r4, r5, r6, lr}
 800c60e:	460d      	mov	r5, r1
 800c610:	4614      	mov	r4, r2
 800c612:	4606      	mov	r6, r0
 800c614:	b118      	cbz	r0, 800c61e <_putc_r+0x12>
 800c616:	6983      	ldr	r3, [r0, #24]
 800c618:	b90b      	cbnz	r3, 800c61e <_putc_r+0x12>
 800c61a:	f7ff fa43 	bl	800baa4 <__sinit>
 800c61e:	4b13      	ldr	r3, [pc, #76]	; (800c66c <_putc_r+0x60>)
 800c620:	429c      	cmp	r4, r3
 800c622:	d112      	bne.n	800c64a <_putc_r+0x3e>
 800c624:	6874      	ldr	r4, [r6, #4]
 800c626:	68a3      	ldr	r3, [r4, #8]
 800c628:	3b01      	subs	r3, #1
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	60a3      	str	r3, [r4, #8]
 800c62e:	da16      	bge.n	800c65e <_putc_r+0x52>
 800c630:	69a2      	ldr	r2, [r4, #24]
 800c632:	4293      	cmp	r3, r2
 800c634:	db02      	blt.n	800c63c <_putc_r+0x30>
 800c636:	b2eb      	uxtb	r3, r5
 800c638:	2b0a      	cmp	r3, #10
 800c63a:	d110      	bne.n	800c65e <_putc_r+0x52>
 800c63c:	4622      	mov	r2, r4
 800c63e:	4629      	mov	r1, r5
 800c640:	4630      	mov	r0, r6
 800c642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c646:	f7ff b87d 	b.w	800b744 <__swbuf_r>
 800c64a:	4b09      	ldr	r3, [pc, #36]	; (800c670 <_putc_r+0x64>)
 800c64c:	429c      	cmp	r4, r3
 800c64e:	d101      	bne.n	800c654 <_putc_r+0x48>
 800c650:	68b4      	ldr	r4, [r6, #8]
 800c652:	e7e8      	b.n	800c626 <_putc_r+0x1a>
 800c654:	4b07      	ldr	r3, [pc, #28]	; (800c674 <_putc_r+0x68>)
 800c656:	429c      	cmp	r4, r3
 800c658:	bf08      	it	eq
 800c65a:	68f4      	ldreq	r4, [r6, #12]
 800c65c:	e7e3      	b.n	800c626 <_putc_r+0x1a>
 800c65e:	6823      	ldr	r3, [r4, #0]
 800c660:	b2e8      	uxtb	r0, r5
 800c662:	1c5a      	adds	r2, r3, #1
 800c664:	6022      	str	r2, [r4, #0]
 800c666:	701d      	strb	r5, [r3, #0]
 800c668:	bd70      	pop	{r4, r5, r6, pc}
 800c66a:	bf00      	nop
 800c66c:	0800d2fc 	.word	0x0800d2fc
 800c670:	0800d31c 	.word	0x0800d31c
 800c674:	0800d2dc 	.word	0x0800d2dc

0800c678 <_sbrk_r>:
 800c678:	b538      	push	{r3, r4, r5, lr}
 800c67a:	2300      	movs	r3, #0
 800c67c:	4c05      	ldr	r4, [pc, #20]	; (800c694 <_sbrk_r+0x1c>)
 800c67e:	4605      	mov	r5, r0
 800c680:	4608      	mov	r0, r1
 800c682:	6023      	str	r3, [r4, #0]
 800c684:	f7f4 fd3a 	bl	80010fc <_sbrk>
 800c688:	1c43      	adds	r3, r0, #1
 800c68a:	d102      	bne.n	800c692 <_sbrk_r+0x1a>
 800c68c:	6823      	ldr	r3, [r4, #0]
 800c68e:	b103      	cbz	r3, 800c692 <_sbrk_r+0x1a>
 800c690:	602b      	str	r3, [r5, #0]
 800c692:	bd38      	pop	{r3, r4, r5, pc}
 800c694:	20003574 	.word	0x20003574

0800c698 <__sread>:
 800c698:	b510      	push	{r4, lr}
 800c69a:	460c      	mov	r4, r1
 800c69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a0:	f000 f8e4 	bl	800c86c <_read_r>
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	bfab      	itete	ge
 800c6a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6aa:	89a3      	ldrhlt	r3, [r4, #12]
 800c6ac:	181b      	addge	r3, r3, r0
 800c6ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6b2:	bfac      	ite	ge
 800c6b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6b6:	81a3      	strhlt	r3, [r4, #12]
 800c6b8:	bd10      	pop	{r4, pc}

0800c6ba <__swrite>:
 800c6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6be:	461f      	mov	r7, r3
 800c6c0:	898b      	ldrh	r3, [r1, #12]
 800c6c2:	4605      	mov	r5, r0
 800c6c4:	05db      	lsls	r3, r3, #23
 800c6c6:	460c      	mov	r4, r1
 800c6c8:	4616      	mov	r6, r2
 800c6ca:	d505      	bpl.n	800c6d8 <__swrite+0x1e>
 800c6cc:	2302      	movs	r3, #2
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d4:	f000 f868 	bl	800c7a8 <_lseek_r>
 800c6d8:	89a3      	ldrh	r3, [r4, #12]
 800c6da:	4632      	mov	r2, r6
 800c6dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6e0:	81a3      	strh	r3, [r4, #12]
 800c6e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6e6:	463b      	mov	r3, r7
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ee:	f000 b817 	b.w	800c720 <_write_r>

0800c6f2 <__sseek>:
 800c6f2:	b510      	push	{r4, lr}
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6fa:	f000 f855 	bl	800c7a8 <_lseek_r>
 800c6fe:	1c43      	adds	r3, r0, #1
 800c700:	89a3      	ldrh	r3, [r4, #12]
 800c702:	bf15      	itete	ne
 800c704:	6560      	strne	r0, [r4, #84]	; 0x54
 800c706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c70a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c70e:	81a3      	strheq	r3, [r4, #12]
 800c710:	bf18      	it	ne
 800c712:	81a3      	strhne	r3, [r4, #12]
 800c714:	bd10      	pop	{r4, pc}

0800c716 <__sclose>:
 800c716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c71a:	f000 b813 	b.w	800c744 <_close_r>
	...

0800c720 <_write_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4605      	mov	r5, r0
 800c724:	4608      	mov	r0, r1
 800c726:	4611      	mov	r1, r2
 800c728:	2200      	movs	r2, #0
 800c72a:	4c05      	ldr	r4, [pc, #20]	; (800c740 <_write_r+0x20>)
 800c72c:	6022      	str	r2, [r4, #0]
 800c72e:	461a      	mov	r2, r3
 800c730:	f7fd fd34 	bl	800a19c <_write>
 800c734:	1c43      	adds	r3, r0, #1
 800c736:	d102      	bne.n	800c73e <_write_r+0x1e>
 800c738:	6823      	ldr	r3, [r4, #0]
 800c73a:	b103      	cbz	r3, 800c73e <_write_r+0x1e>
 800c73c:	602b      	str	r3, [r5, #0]
 800c73e:	bd38      	pop	{r3, r4, r5, pc}
 800c740:	20003574 	.word	0x20003574

0800c744 <_close_r>:
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	2300      	movs	r3, #0
 800c748:	4c05      	ldr	r4, [pc, #20]	; (800c760 <_close_r+0x1c>)
 800c74a:	4605      	mov	r5, r0
 800c74c:	4608      	mov	r0, r1
 800c74e:	6023      	str	r3, [r4, #0]
 800c750:	f7f4 fca3 	bl	800109a <_close>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d102      	bne.n	800c75e <_close_r+0x1a>
 800c758:	6823      	ldr	r3, [r4, #0]
 800c75a:	b103      	cbz	r3, 800c75e <_close_r+0x1a>
 800c75c:	602b      	str	r3, [r5, #0]
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	20003574 	.word	0x20003574

0800c764 <_fstat_r>:
 800c764:	b538      	push	{r3, r4, r5, lr}
 800c766:	2300      	movs	r3, #0
 800c768:	4c06      	ldr	r4, [pc, #24]	; (800c784 <_fstat_r+0x20>)
 800c76a:	4605      	mov	r5, r0
 800c76c:	4608      	mov	r0, r1
 800c76e:	4611      	mov	r1, r2
 800c770:	6023      	str	r3, [r4, #0]
 800c772:	f7f4 fc9d 	bl	80010b0 <_fstat>
 800c776:	1c43      	adds	r3, r0, #1
 800c778:	d102      	bne.n	800c780 <_fstat_r+0x1c>
 800c77a:	6823      	ldr	r3, [r4, #0]
 800c77c:	b103      	cbz	r3, 800c780 <_fstat_r+0x1c>
 800c77e:	602b      	str	r3, [r5, #0]
 800c780:	bd38      	pop	{r3, r4, r5, pc}
 800c782:	bf00      	nop
 800c784:	20003574 	.word	0x20003574

0800c788 <_isatty_r>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	2300      	movs	r3, #0
 800c78c:	4c05      	ldr	r4, [pc, #20]	; (800c7a4 <_isatty_r+0x1c>)
 800c78e:	4605      	mov	r5, r0
 800c790:	4608      	mov	r0, r1
 800c792:	6023      	str	r3, [r4, #0]
 800c794:	f7f4 fc9b 	bl	80010ce <_isatty>
 800c798:	1c43      	adds	r3, r0, #1
 800c79a:	d102      	bne.n	800c7a2 <_isatty_r+0x1a>
 800c79c:	6823      	ldr	r3, [r4, #0]
 800c79e:	b103      	cbz	r3, 800c7a2 <_isatty_r+0x1a>
 800c7a0:	602b      	str	r3, [r5, #0]
 800c7a2:	bd38      	pop	{r3, r4, r5, pc}
 800c7a4:	20003574 	.word	0x20003574

0800c7a8 <_lseek_r>:
 800c7a8:	b538      	push	{r3, r4, r5, lr}
 800c7aa:	4605      	mov	r5, r0
 800c7ac:	4608      	mov	r0, r1
 800c7ae:	4611      	mov	r1, r2
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	4c05      	ldr	r4, [pc, #20]	; (800c7c8 <_lseek_r+0x20>)
 800c7b4:	6022      	str	r2, [r4, #0]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	f7f4 fc93 	bl	80010e2 <_lseek>
 800c7bc:	1c43      	adds	r3, r0, #1
 800c7be:	d102      	bne.n	800c7c6 <_lseek_r+0x1e>
 800c7c0:	6823      	ldr	r3, [r4, #0]
 800c7c2:	b103      	cbz	r3, 800c7c6 <_lseek_r+0x1e>
 800c7c4:	602b      	str	r3, [r5, #0]
 800c7c6:	bd38      	pop	{r3, r4, r5, pc}
 800c7c8:	20003574 	.word	0x20003574

0800c7cc <memchr>:
 800c7cc:	b510      	push	{r4, lr}
 800c7ce:	b2c9      	uxtb	r1, r1
 800c7d0:	4402      	add	r2, r0
 800c7d2:	4290      	cmp	r0, r2
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	d101      	bne.n	800c7dc <memchr+0x10>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	e003      	b.n	800c7e4 <memchr+0x18>
 800c7dc:	781c      	ldrb	r4, [r3, #0]
 800c7de:	3001      	adds	r0, #1
 800c7e0:	428c      	cmp	r4, r1
 800c7e2:	d1f6      	bne.n	800c7d2 <memchr+0x6>
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	bd10      	pop	{r4, pc}

0800c7e8 <memmove>:
 800c7e8:	4288      	cmp	r0, r1
 800c7ea:	b510      	push	{r4, lr}
 800c7ec:	eb01 0302 	add.w	r3, r1, r2
 800c7f0:	d807      	bhi.n	800c802 <memmove+0x1a>
 800c7f2:	1e42      	subs	r2, r0, #1
 800c7f4:	4299      	cmp	r1, r3
 800c7f6:	d00a      	beq.n	800c80e <memmove+0x26>
 800c7f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c800:	e7f8      	b.n	800c7f4 <memmove+0xc>
 800c802:	4283      	cmp	r3, r0
 800c804:	d9f5      	bls.n	800c7f2 <memmove+0xa>
 800c806:	1881      	adds	r1, r0, r2
 800c808:	1ad2      	subs	r2, r2, r3
 800c80a:	42d3      	cmn	r3, r2
 800c80c:	d100      	bne.n	800c810 <memmove+0x28>
 800c80e:	bd10      	pop	{r4, pc}
 800c810:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c814:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c818:	e7f7      	b.n	800c80a <memmove+0x22>

0800c81a <__malloc_lock>:
 800c81a:	4770      	bx	lr

0800c81c <__malloc_unlock>:
 800c81c:	4770      	bx	lr

0800c81e <_realloc_r>:
 800c81e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c820:	4607      	mov	r7, r0
 800c822:	4614      	mov	r4, r2
 800c824:	460e      	mov	r6, r1
 800c826:	b921      	cbnz	r1, 800c832 <_realloc_r+0x14>
 800c828:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c82c:	4611      	mov	r1, r2
 800c82e:	f7ff ba7b 	b.w	800bd28 <_malloc_r>
 800c832:	b922      	cbnz	r2, 800c83e <_realloc_r+0x20>
 800c834:	f7ff fa2c 	bl	800bc90 <_free_r>
 800c838:	4625      	mov	r5, r4
 800c83a:	4628      	mov	r0, r5
 800c83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c83e:	f000 f827 	bl	800c890 <_malloc_usable_size_r>
 800c842:	42a0      	cmp	r0, r4
 800c844:	d20f      	bcs.n	800c866 <_realloc_r+0x48>
 800c846:	4621      	mov	r1, r4
 800c848:	4638      	mov	r0, r7
 800c84a:	f7ff fa6d 	bl	800bd28 <_malloc_r>
 800c84e:	4605      	mov	r5, r0
 800c850:	2800      	cmp	r0, #0
 800c852:	d0f2      	beq.n	800c83a <_realloc_r+0x1c>
 800c854:	4631      	mov	r1, r6
 800c856:	4622      	mov	r2, r4
 800c858:	f7fe fdee 	bl	800b438 <memcpy>
 800c85c:	4631      	mov	r1, r6
 800c85e:	4638      	mov	r0, r7
 800c860:	f7ff fa16 	bl	800bc90 <_free_r>
 800c864:	e7e9      	b.n	800c83a <_realloc_r+0x1c>
 800c866:	4635      	mov	r5, r6
 800c868:	e7e7      	b.n	800c83a <_realloc_r+0x1c>
	...

0800c86c <_read_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	4605      	mov	r5, r0
 800c870:	4608      	mov	r0, r1
 800c872:	4611      	mov	r1, r2
 800c874:	2200      	movs	r2, #0
 800c876:	4c05      	ldr	r4, [pc, #20]	; (800c88c <_read_r+0x20>)
 800c878:	6022      	str	r2, [r4, #0]
 800c87a:	461a      	mov	r2, r3
 800c87c:	f7f4 fbf0 	bl	8001060 <_read>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d102      	bne.n	800c88a <_read_r+0x1e>
 800c884:	6823      	ldr	r3, [r4, #0]
 800c886:	b103      	cbz	r3, 800c88a <_read_r+0x1e>
 800c888:	602b      	str	r3, [r5, #0]
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	20003574 	.word	0x20003574

0800c890 <_malloc_usable_size_r>:
 800c890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c894:	1f18      	subs	r0, r3, #4
 800c896:	2b00      	cmp	r3, #0
 800c898:	bfbc      	itt	lt
 800c89a:	580b      	ldrlt	r3, [r1, r0]
 800c89c:	18c0      	addlt	r0, r0, r3
 800c89e:	4770      	bx	lr

0800c8a0 <_init>:
 800c8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8a2:	bf00      	nop
 800c8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8a6:	bc08      	pop	{r3}
 800c8a8:	469e      	mov	lr, r3
 800c8aa:	4770      	bx	lr

0800c8ac <_fini>:
 800c8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ae:	bf00      	nop
 800c8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8b2:	bc08      	pop	{r3}
 800c8b4:	469e      	mov	lr, r3
 800c8b6:	4770      	bx	lr
