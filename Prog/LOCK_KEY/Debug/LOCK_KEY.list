
LOCK_KEY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .label        00000094  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00002f4c  08000154  08000154  00010154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000d8  080030a0  080030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08003178  08003178  00020010  2**0
                  CONTENTS
  5 .ARM          00000008  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08003180  08003180  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000010  20000000  08003188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000020c  20000010  08003198  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000304  2000021c  08003198  0002021c  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001048a  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000299a  00000000  00000000  000304c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c30  00000000  00000000  00032e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c48  00000000  00000000  00033a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000111d4  00000000  00000000  000346d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000b06e  00000000  00000000  000458ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00069a2b  00000000  00000000  0005091a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000ba345  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ea4  00000000  00000000  000ba3c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_loc    000097f4  00000000  00000000  000bc264  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000154 <__do_global_dtors_aux>:
 8000154:	b510      	push	{r4, lr}
 8000156:	4c06      	ldr	r4, [pc, #24]	; (8000170 <__do_global_dtors_aux+0x1c>)
 8000158:	7823      	ldrb	r3, [r4, #0]
 800015a:	2b00      	cmp	r3, #0
 800015c:	d107      	bne.n	800016e <__do_global_dtors_aux+0x1a>
 800015e:	4b05      	ldr	r3, [pc, #20]	; (8000174 <__do_global_dtors_aux+0x20>)
 8000160:	2b00      	cmp	r3, #0
 8000162:	d002      	beq.n	800016a <__do_global_dtors_aux+0x16>
 8000164:	4804      	ldr	r0, [pc, #16]	; (8000178 <__do_global_dtors_aux+0x24>)
 8000166:	e000      	b.n	800016a <__do_global_dtors_aux+0x16>
 8000168:	bf00      	nop
 800016a:	2301      	movs	r3, #1
 800016c:	7023      	strb	r3, [r4, #0]
 800016e:	bd10      	pop	{r4, pc}
 8000170:	20000010 	.word	0x20000010
 8000174:	00000000 	.word	0x00000000
 8000178:	08003088 	.word	0x08003088

0800017c <frame_dummy>:
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <frame_dummy+0x14>)
 800017e:	b510      	push	{r4, lr}
 8000180:	2b00      	cmp	r3, #0
 8000182:	d003      	beq.n	800018c <frame_dummy+0x10>
 8000184:	4903      	ldr	r1, [pc, #12]	; (8000194 <frame_dummy+0x18>)
 8000186:	4804      	ldr	r0, [pc, #16]	; (8000198 <frame_dummy+0x1c>)
 8000188:	e000      	b.n	800018c <frame_dummy+0x10>
 800018a:	bf00      	nop
 800018c:	bd10      	pop	{r4, pc}
 800018e:	46c0      	nop			; (mov r8, r8)
 8000190:	00000000 	.word	0x00000000
 8000194:	20000014 	.word	0x20000014
 8000198:	08003088 	.word	0x08003088

0800019c <__udivsi3>:
 800019c:	2200      	movs	r2, #0
 800019e:	0843      	lsrs	r3, r0, #1
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d374      	bcc.n	800028e <__udivsi3+0xf2>
 80001a4:	0903      	lsrs	r3, r0, #4
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d35f      	bcc.n	800026a <__udivsi3+0xce>
 80001aa:	0a03      	lsrs	r3, r0, #8
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d344      	bcc.n	800023a <__udivsi3+0x9e>
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d328      	bcc.n	8000208 <__udivsi3+0x6c>
 80001b6:	0c03      	lsrs	r3, r0, #16
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d30d      	bcc.n	80001d8 <__udivsi3+0x3c>
 80001bc:	22ff      	movs	r2, #255	; 0xff
 80001be:	0209      	lsls	r1, r1, #8
 80001c0:	ba12      	rev	r2, r2
 80001c2:	0c03      	lsrs	r3, r0, #16
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d302      	bcc.n	80001ce <__udivsi3+0x32>
 80001c8:	1212      	asrs	r2, r2, #8
 80001ca:	0209      	lsls	r1, r1, #8
 80001cc:	d065      	beq.n	800029a <__udivsi3+0xfe>
 80001ce:	0b03      	lsrs	r3, r0, #12
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d319      	bcc.n	8000208 <__udivsi3+0x6c>
 80001d4:	e000      	b.n	80001d8 <__udivsi3+0x3c>
 80001d6:	0a09      	lsrs	r1, r1, #8
 80001d8:	0bc3      	lsrs	r3, r0, #15
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x46>
 80001de:	03cb      	lsls	r3, r1, #15
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0b83      	lsrs	r3, r0, #14
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x52>
 80001ea:	038b      	lsls	r3, r1, #14
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0b43      	lsrs	r3, r0, #13
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__udivsi3+0x5e>
 80001f6:	034b      	lsls	r3, r1, #13
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	0b03      	lsrs	r3, r0, #12
 80001fe:	428b      	cmp	r3, r1
 8000200:	d301      	bcc.n	8000206 <__udivsi3+0x6a>
 8000202:	030b      	lsls	r3, r1, #12
 8000204:	1ac0      	subs	r0, r0, r3
 8000206:	4152      	adcs	r2, r2
 8000208:	0ac3      	lsrs	r3, r0, #11
 800020a:	428b      	cmp	r3, r1
 800020c:	d301      	bcc.n	8000212 <__udivsi3+0x76>
 800020e:	02cb      	lsls	r3, r1, #11
 8000210:	1ac0      	subs	r0, r0, r3
 8000212:	4152      	adcs	r2, r2
 8000214:	0a83      	lsrs	r3, r0, #10
 8000216:	428b      	cmp	r3, r1
 8000218:	d301      	bcc.n	800021e <__udivsi3+0x82>
 800021a:	028b      	lsls	r3, r1, #10
 800021c:	1ac0      	subs	r0, r0, r3
 800021e:	4152      	adcs	r2, r2
 8000220:	0a43      	lsrs	r3, r0, #9
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x8e>
 8000226:	024b      	lsls	r3, r1, #9
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d301      	bcc.n	8000236 <__udivsi3+0x9a>
 8000232:	020b      	lsls	r3, r1, #8
 8000234:	1ac0      	subs	r0, r0, r3
 8000236:	4152      	adcs	r2, r2
 8000238:	d2cd      	bcs.n	80001d6 <__udivsi3+0x3a>
 800023a:	09c3      	lsrs	r3, r0, #7
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xa8>
 8000240:	01cb      	lsls	r3, r1, #7
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	0983      	lsrs	r3, r0, #6
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__udivsi3+0xb4>
 800024c:	018b      	lsls	r3, r1, #6
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	0943      	lsrs	r3, r0, #5
 8000254:	428b      	cmp	r3, r1
 8000256:	d301      	bcc.n	800025c <__udivsi3+0xc0>
 8000258:	014b      	lsls	r3, r1, #5
 800025a:	1ac0      	subs	r0, r0, r3
 800025c:	4152      	adcs	r2, r2
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__udivsi3+0xcc>
 8000264:	010b      	lsls	r3, r1, #4
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	08c3      	lsrs	r3, r0, #3
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__udivsi3+0xd8>
 8000270:	00cb      	lsls	r3, r1, #3
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0883      	lsrs	r3, r0, #2
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__udivsi3+0xe4>
 800027c:	008b      	lsls	r3, r1, #2
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0843      	lsrs	r3, r0, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__udivsi3+0xf0>
 8000288:	004b      	lsls	r3, r1, #1
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	1a41      	subs	r1, r0, r1
 8000290:	d200      	bcs.n	8000294 <__udivsi3+0xf8>
 8000292:	4601      	mov	r1, r0
 8000294:	4152      	adcs	r2, r2
 8000296:	4610      	mov	r0, r2
 8000298:	4770      	bx	lr
 800029a:	e7ff      	b.n	800029c <__udivsi3+0x100>
 800029c:	b501      	push	{r0, lr}
 800029e:	2000      	movs	r0, #0
 80002a0:	f000 f806 	bl	80002b0 <__aeabi_idiv0>
 80002a4:	bd02      	pop	{r1, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_uidivmod>:
 80002a8:	2900      	cmp	r1, #0
 80002aa:	d0f7      	beq.n	800029c <__udivsi3+0x100>
 80002ac:	e776      	b.n	800019c <__udivsi3>
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_idiv0>:
 80002b0:	4770      	bx	lr
 80002b2:	46c0      	nop			; (mov r8, r8)

080002b4 <__aeabi_uldivmod>:
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d111      	bne.n	80002dc <__aeabi_uldivmod+0x28>
 80002b8:	2a00      	cmp	r2, #0
 80002ba:	d10f      	bne.n	80002dc <__aeabi_uldivmod+0x28>
 80002bc:	2900      	cmp	r1, #0
 80002be:	d100      	bne.n	80002c2 <__aeabi_uldivmod+0xe>
 80002c0:	2800      	cmp	r0, #0
 80002c2:	d002      	beq.n	80002ca <__aeabi_uldivmod+0x16>
 80002c4:	2100      	movs	r1, #0
 80002c6:	43c9      	mvns	r1, r1
 80002c8:	1c08      	adds	r0, r1, #0
 80002ca:	b407      	push	{r0, r1, r2}
 80002cc:	4802      	ldr	r0, [pc, #8]	; (80002d8 <__aeabi_uldivmod+0x24>)
 80002ce:	a102      	add	r1, pc, #8	; (adr r1, 80002d8 <__aeabi_uldivmod+0x24>)
 80002d0:	1840      	adds	r0, r0, r1
 80002d2:	9002      	str	r0, [sp, #8]
 80002d4:	bd03      	pop	{r0, r1, pc}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	ffffffd9 	.word	0xffffffd9
 80002dc:	b403      	push	{r0, r1}
 80002de:	4668      	mov	r0, sp
 80002e0:	b501      	push	{r0, lr}
 80002e2:	9802      	ldr	r0, [sp, #8]
 80002e4:	f000 f806 	bl	80002f4 <__udivmoddi4>
 80002e8:	9b01      	ldr	r3, [sp, #4]
 80002ea:	469e      	mov	lr, r3
 80002ec:	b002      	add	sp, #8
 80002ee:	bc0c      	pop	{r2, r3}
 80002f0:	4770      	bx	lr
 80002f2:	46c0      	nop			; (mov r8, r8)

080002f4 <__udivmoddi4>:
 80002f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f6:	464f      	mov	r7, r9
 80002f8:	4646      	mov	r6, r8
 80002fa:	46d6      	mov	lr, sl
 80002fc:	b5c0      	push	{r6, r7, lr}
 80002fe:	0004      	movs	r4, r0
 8000300:	b082      	sub	sp, #8
 8000302:	000d      	movs	r5, r1
 8000304:	4691      	mov	r9, r2
 8000306:	4698      	mov	r8, r3
 8000308:	428b      	cmp	r3, r1
 800030a:	d82f      	bhi.n	800036c <__udivmoddi4+0x78>
 800030c:	d02c      	beq.n	8000368 <__udivmoddi4+0x74>
 800030e:	4641      	mov	r1, r8
 8000310:	4648      	mov	r0, r9
 8000312:	f000 f8b1 	bl	8000478 <__clzdi2>
 8000316:	0029      	movs	r1, r5
 8000318:	0006      	movs	r6, r0
 800031a:	0020      	movs	r0, r4
 800031c:	f000 f8ac 	bl	8000478 <__clzdi2>
 8000320:	1a33      	subs	r3, r6, r0
 8000322:	469c      	mov	ip, r3
 8000324:	3b20      	subs	r3, #32
 8000326:	469a      	mov	sl, r3
 8000328:	d500      	bpl.n	800032c <__udivmoddi4+0x38>
 800032a:	e076      	b.n	800041a <__udivmoddi4+0x126>
 800032c:	464b      	mov	r3, r9
 800032e:	4652      	mov	r2, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001f      	movs	r7, r3
 8000334:	464b      	mov	r3, r9
 8000336:	4662      	mov	r2, ip
 8000338:	4093      	lsls	r3, r2
 800033a:	001e      	movs	r6, r3
 800033c:	42af      	cmp	r7, r5
 800033e:	d828      	bhi.n	8000392 <__udivmoddi4+0x9e>
 8000340:	d025      	beq.n	800038e <__udivmoddi4+0x9a>
 8000342:	4653      	mov	r3, sl
 8000344:	1ba4      	subs	r4, r4, r6
 8000346:	41bd      	sbcs	r5, r7
 8000348:	2b00      	cmp	r3, #0
 800034a:	da00      	bge.n	800034e <__udivmoddi4+0x5a>
 800034c:	e07b      	b.n	8000446 <__udivmoddi4+0x152>
 800034e:	2200      	movs	r2, #0
 8000350:	2300      	movs	r3, #0
 8000352:	9200      	str	r2, [sp, #0]
 8000354:	9301      	str	r3, [sp, #4]
 8000356:	2301      	movs	r3, #1
 8000358:	4652      	mov	r2, sl
 800035a:	4093      	lsls	r3, r2
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2301      	movs	r3, #1
 8000360:	4662      	mov	r2, ip
 8000362:	4093      	lsls	r3, r2
 8000364:	9300      	str	r3, [sp, #0]
 8000366:	e018      	b.n	800039a <__udivmoddi4+0xa6>
 8000368:	4282      	cmp	r2, r0
 800036a:	d9d0      	bls.n	800030e <__udivmoddi4+0x1a>
 800036c:	2200      	movs	r2, #0
 800036e:	2300      	movs	r3, #0
 8000370:	9200      	str	r2, [sp, #0]
 8000372:	9301      	str	r3, [sp, #4]
 8000374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <__udivmoddi4+0x8a>
 800037a:	601c      	str	r4, [r3, #0]
 800037c:	605d      	str	r5, [r3, #4]
 800037e:	9800      	ldr	r0, [sp, #0]
 8000380:	9901      	ldr	r1, [sp, #4]
 8000382:	b002      	add	sp, #8
 8000384:	bc1c      	pop	{r2, r3, r4}
 8000386:	4690      	mov	r8, r2
 8000388:	4699      	mov	r9, r3
 800038a:	46a2      	mov	sl, r4
 800038c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038e:	42a3      	cmp	r3, r4
 8000390:	d9d7      	bls.n	8000342 <__udivmoddi4+0x4e>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4663      	mov	r3, ip
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0e9      	beq.n	8000374 <__udivmoddi4+0x80>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	4698      	mov	r8, r3
 80003a4:	4641      	mov	r1, r8
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	430a      	orrs	r2, r1
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	4666      	mov	r6, ip
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xda>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xc4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xde>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0xe8>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xbc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xda>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	4653      	mov	r3, sl
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db23      	blt.n	8000432 <__udivmoddi4+0x13e>
 80003ea:	002b      	movs	r3, r5
 80003ec:	4652      	mov	r2, sl
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	4664      	mov	r4, ip
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	4653      	mov	r3, sl
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2d      	blt.n	800045c <__udivmoddi4+0x168>
 8000400:	0026      	movs	r6, r4
 8000402:	4657      	mov	r7, sl
 8000404:	40be      	lsls	r6, r7
 8000406:	0033      	movs	r3, r6
 8000408:	0026      	movs	r6, r4
 800040a:	4667      	mov	r7, ip
 800040c:	40be      	lsls	r6, r7
 800040e:	0032      	movs	r2, r6
 8000410:	1a80      	subs	r0, r0, r2
 8000412:	4199      	sbcs	r1, r3
 8000414:	9000      	str	r0, [sp, #0]
 8000416:	9101      	str	r1, [sp, #4]
 8000418:	e7ac      	b.n	8000374 <__udivmoddi4+0x80>
 800041a:	4662      	mov	r2, ip
 800041c:	2320      	movs	r3, #32
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	464a      	mov	r2, r9
 8000422:	40da      	lsrs	r2, r3
 8000424:	4661      	mov	r1, ip
 8000426:	0013      	movs	r3, r2
 8000428:	4642      	mov	r2, r8
 800042a:	408a      	lsls	r2, r1
 800042c:	0017      	movs	r7, r2
 800042e:	431f      	orrs	r7, r3
 8000430:	e780      	b.n	8000334 <__udivmoddi4+0x40>
 8000432:	4662      	mov	r2, ip
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4666      	mov	r6, ip
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4313      	orrs	r3, r2
 8000444:	e7d4      	b.n	80003f0 <__udivmoddi4+0xfc>
 8000446:	4662      	mov	r2, ip
 8000448:	2320      	movs	r3, #32
 800044a:	2100      	movs	r1, #0
 800044c:	1a9b      	subs	r3, r3, r2
 800044e:	2200      	movs	r2, #0
 8000450:	9100      	str	r1, [sp, #0]
 8000452:	9201      	str	r2, [sp, #4]
 8000454:	2201      	movs	r2, #1
 8000456:	40da      	lsrs	r2, r3
 8000458:	9201      	str	r2, [sp, #4]
 800045a:	e780      	b.n	800035e <__udivmoddi4+0x6a>
 800045c:	2320      	movs	r3, #32
 800045e:	4662      	mov	r2, ip
 8000460:	0026      	movs	r6, r4
 8000462:	1a9b      	subs	r3, r3, r2
 8000464:	40de      	lsrs	r6, r3
 8000466:	002f      	movs	r7, r5
 8000468:	46b0      	mov	r8, r6
 800046a:	4666      	mov	r6, ip
 800046c:	40b7      	lsls	r7, r6
 800046e:	4646      	mov	r6, r8
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7c8      	b.n	8000408 <__udivmoddi4+0x114>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	1c08      	adds	r0, r1, #0
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	; (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b530      	push	{r4, r5, lr}
 80004ce:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d0:	2234      	movs	r2, #52	; 0x34
 80004d2:	2100      	movs	r1, #0
 80004d4:	a80b      	add	r0, sp, #44	; 0x2c
 80004d6:	f002 fdce 	bl	8003076 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004da:	2214      	movs	r2, #20
 80004dc:	2100      	movs	r1, #0
 80004de:	a806      	add	r0, sp, #24
 80004e0:	f002 fdc9 	bl	8003076 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e4:	2218      	movs	r2, #24
 80004e6:	2100      	movs	r1, #0
 80004e8:	4668      	mov	r0, sp
 80004ea:	f002 fdc4 	bl	8003076 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ee:	4916      	ldr	r1, [pc, #88]	; (8000548 <SystemClock_Config+0x7c>)
 80004f0:	680b      	ldr	r3, [r1, #0]
 80004f2:	4a16      	ldr	r2, [pc, #88]	; (800054c <SystemClock_Config+0x80>)
 80004f4:	401a      	ands	r2, r3
 80004f6:	2380      	movs	r3, #128	; 0x80
 80004f8:	011b      	lsls	r3, r3, #4
 80004fa:	4313      	orrs	r3, r2
 80004fc:	600b      	str	r3, [r1, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004fe:	2502      	movs	r5, #2
 8000500:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000502:	2301      	movs	r3, #1
 8000504:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000506:	330f      	adds	r3, #15
 8000508:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050a:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800050c:	2400      	movs	r4, #0
 800050e:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	02db      	lsls	r3, r3, #11
 8000514:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000516:	2380      	movs	r3, #128	; 0x80
 8000518:	03db      	lsls	r3, r3, #15
 800051a:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051c:	a80b      	add	r0, sp, #44	; 0x2c
 800051e:	f000 fd9d 	bl	800105c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000522:	230f      	movs	r3, #15
 8000524:	9306      	str	r3, [sp, #24]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000526:	3b0c      	subs	r3, #12
 8000528:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052a:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052c:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800052e:	940a      	str	r4, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000530:	2101      	movs	r1, #1
 8000532:	a806      	add	r0, sp, #24
 8000534:	f001 f844 	bl	80015c0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000538:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800053a:	9402      	str	r4, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053c:	4668      	mov	r0, sp
 800053e:	f001 f941 	bl	80017c4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000542:	b019      	add	sp, #100	; 0x64
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	40007000 	.word	0x40007000
 800054c:	ffffe7ff 	.word	0xffffe7ff

08000550 <main>:
{
 8000550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000552:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000554:	f000 f992 	bl	800087c <HAL_Init>
  SystemClock_Config();
 8000558:	f7ff ffb8 	bl	80004cc <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	2214      	movs	r2, #20
 800055e:	2100      	movs	r1, #0
 8000560:	a805      	add	r0, sp, #20
 8000562:	f002 fd88 	bl	8003076 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000566:	4b37      	ldr	r3, [pc, #220]	; (8000644 <main+0xf4>)
 8000568:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800056a:	2204      	movs	r2, #4
 800056c:	4311      	orrs	r1, r2
 800056e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000570:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000572:	400a      	ands	r2, r1
 8000574:	9201      	str	r2, [sp, #4]
 8000576:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800057a:	2501      	movs	r5, #1
 800057c:	432a      	orrs	r2, r5
 800057e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000582:	402b      	ands	r3, r5
 8000584:	9302      	str	r3, [sp, #8]
 8000586:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_SET);
 8000588:	24c0      	movs	r4, #192	; 0xc0
 800058a:	0224      	lsls	r4, r4, #8
 800058c:	4f2e      	ldr	r7, [pc, #184]	; (8000648 <main+0xf8>)
 800058e:	2201      	movs	r2, #1
 8000590:	0021      	movs	r1, r4
 8000592:	0038      	movs	r0, r7
 8000594:	f000 fd04 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SYG_IRQ_GPIO_Port, SYG_IRQ_Pin, GPIO_PIN_RESET);
 8000598:	26a0      	movs	r6, #160	; 0xa0
 800059a:	05f6      	lsls	r6, r6, #23
 800059c:	2200      	movs	r2, #0
 800059e:	2110      	movs	r1, #16
 80005a0:	0030      	movs	r0, r6
 80005a2:	f000 fcfd 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80005a6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2400      	movs	r4, #0
 80005ac:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b0:	a905      	add	r1, sp, #20
 80005b2:	0038      	movs	r0, r7
 80005b4:	f000 fc24 	bl	8000e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYG_IRQ_Pin */
  GPIO_InitStruct.Pin = SYG_IRQ_Pin;
 80005b8:	2310      	movs	r3, #16
 80005ba:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SYG_IRQ_GPIO_Port, &GPIO_InitStruct);
 80005c2:	a905      	add	r1, sp, #20
 80005c4:	0030      	movs	r0, r6
 80005c6:	f000 fc1b 	bl	8000e00 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80005ca:	4820      	ldr	r0, [pc, #128]	; (800064c <main+0xfc>)
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <main+0x100>)
 80005ce:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 80005d0:	2396      	movs	r3, #150	; 0x96
 80005d2:	019b      	lsls	r3, r3, #6
 80005d4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80005d6:	2680      	movs	r6, #128	; 0x80
 80005d8:	0176      	lsls	r6, r6, #5
 80005da:	6086      	str	r6, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005dc:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80005de:	23c0      	movs	r3, #192	; 0xc0
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e4:	230c      	movs	r3, #12
 80005e6:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e8:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ea:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ec:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ee:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f0:	f002 f864 	bl	80026bc <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005f4:	2210      	movs	r2, #16
 80005f6:	2100      	movs	r1, #0
 80005f8:	a805      	add	r0, sp, #20
 80005fa:	f002 fd3c 	bl	8003076 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005fe:	2208      	movs	r2, #8
 8000600:	2100      	movs	r1, #0
 8000602:	a803      	add	r0, sp, #12
 8000604:	f002 fd37 	bl	8003076 <memset>
  htim2.Instance = TIM2;
 8000608:	4d12      	ldr	r5, [pc, #72]	; (8000654 <main+0x104>)
 800060a:	2380      	movs	r3, #128	; 0x80
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 320;
 8000610:	23a0      	movs	r3, #160	; 0xa0
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	606b      	str	r3, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000616:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 99;
 8000618:	3bdd      	subs	r3, #221	; 0xdd
 800061a:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061c:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800061e:	331d      	adds	r3, #29
 8000620:	616b      	str	r3, [r5, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000622:	0028      	movs	r0, r5
 8000624:	f001 f9e2 	bl	80019ec <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000628:	9605      	str	r6, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800062a:	a905      	add	r1, sp, #20
 800062c:	0028      	movs	r0, r5
 800062e:	f001 fa09 	bl	8001a44 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000632:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000634:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000636:	a903      	add	r1, sp, #12
 8000638:	0028      	movs	r0, r5
 800063a:	f001 fb50 	bl	8001cde <HAL_TIMEx_MasterConfigSynchronization>
  uMain();
 800063e:	f002 fc5b 	bl	8002ef8 <uMain>
 8000642:	e7fe      	b.n	8000642 <main+0xf2>
 8000644:	40021000 	.word	0x40021000
 8000648:	50000800 	.word	0x50000800
 800064c:	200000c4 	.word	0x200000c4
 8000650:	40004400 	.word	0x40004400
 8000654:	20000088 	.word	0x20000088

08000658 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_MspInit+0x18>)
 800065a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800065c:	2101      	movs	r1, #1
 800065e:	430a      	orrs	r2, r1
 8000660:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000664:	2280      	movs	r2, #128	; 0x80
 8000666:	0552      	lsls	r2, r2, #21
 8000668:	430a      	orrs	r2, r1
 800066a:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066c:	4770      	bx	lr
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	40021000 	.word	0x40021000

08000674 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000674:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM2)
 8000676:	2380      	movs	r3, #128	; 0x80
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	6802      	ldr	r2, [r0, #0]
 800067c:	429a      	cmp	r2, r3
 800067e:	d000      	beq.n	8000682 <HAL_TIM_Base_MspInit+0xe>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000680:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000682:	4a06      	ldr	r2, [pc, #24]	; (800069c <HAL_TIM_Base_MspInit+0x28>)
 8000684:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000686:	2101      	movs	r1, #1
 8000688:	430b      	orrs	r3, r1
 800068a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800068c:	2200      	movs	r2, #0
 800068e:	200f      	movs	r0, #15
 8000690:	f000 f91a 	bl	80008c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000694:	200f      	movs	r0, #15
 8000696:	f000 f94b 	bl	8000930 <HAL_NVIC_EnableIRQ>
}
 800069a:	e7f1      	b.n	8000680 <HAL_TIM_Base_MspInit+0xc>
 800069c:	40021000 	.word	0x40021000

080006a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	2214      	movs	r2, #20
 80006a8:	2100      	movs	r1, #0
 80006aa:	a801      	add	r0, sp, #4
 80006ac:	f002 fce3 	bl	8003076 <memset>
  if(huart->Instance==USART2)
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <HAL_UART_MspInit+0x78>)
 80006b2:	6822      	ldr	r2, [r4, #0]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d001      	beq.n	80006bc <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006b8:	b006      	add	sp, #24
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <HAL_UART_MspInit+0x7c>)
 80006be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	0292      	lsls	r2, r2, #10
 80006c4:	430a      	orrs	r2, r1
 80006c6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80006ca:	2201      	movs	r2, #1
 80006cc:	4311      	orrs	r1, r2
 80006ce:	62d9      	str	r1, [r3, #44]	; 0x2c
 80006d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d2:	4013      	ands	r3, r2
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d8:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2602      	movs	r6, #2
 80006dc:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006de:	2503      	movs	r5, #3
 80006e0:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	24a0      	movs	r4, #160	; 0xa0
 80006e4:	05e4      	lsls	r4, r4, #23
 80006e6:	a901      	add	r1, sp, #4
 80006e8:	0020      	movs	r0, r4
 80006ea:	f000 fb89 	bl	8000e00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006ee:	2304      	movs	r3, #4
 80006f0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2200      	movs	r2, #0
 80006f6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80006fa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	a901      	add	r1, sp, #4
 80006fe:	0020      	movs	r0, r4
 8000700:	f000 fb7e 	bl	8000e00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	2102      	movs	r1, #2
 8000708:	201c      	movs	r0, #28
 800070a:	f000 f8dd 	bl	80008c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800070e:	201c      	movs	r0, #28
 8000710:	f000 f90e 	bl	8000930 <HAL_NVIC_EnableIRQ>
}
 8000714:	e7d0      	b.n	80006b8 <HAL_UART_MspInit+0x18>
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	40004400 	.word	0x40004400
 800071c:	40021000 	.word	0x40021000

08000720 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000720:	4770      	bx	lr

08000722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler>

08000724 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000724:	4770      	bx	lr

08000726 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000726:	4770      	bx	lr

08000728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000728:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072a:	f000 f8bb 	bl	80008a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072e:	bd10      	pop	{r4, pc}

08000730 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000730:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000732:	4802      	ldr	r0, [pc, #8]	; (800073c <TIM2_IRQHandler+0xc>)
 8000734:	f001 fa42 	bl	8001bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000738:	bd10      	pop	{r4, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	20000088 	.word	0x20000088

08000740 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000740:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000742:	4802      	ldr	r0, [pc, #8]	; (800074c <USART2_IRQHandler+0xc>)
 8000744:	f001 fca0 	bl	8002088 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000748:	bd10      	pop	{r4, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	200000c4 	.word	0x200000c4

08000750 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <SystemInit+0x44>)
 8000752:	6819      	ldr	r1, [r3, #0]
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	430a      	orrs	r2, r1
 800075a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800075c:	68da      	ldr	r2, [r3, #12]
 800075e:	490e      	ldr	r1, [pc, #56]	; (8000798 <SystemInit+0x48>)
 8000760:	400a      	ands	r2, r1
 8000762:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	490d      	ldr	r1, [pc, #52]	; (800079c <SystemInit+0x4c>)
 8000768:	400a      	ands	r2, r1
 800076a:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800076c:	689a      	ldr	r2, [r3, #8]
 800076e:	2101      	movs	r1, #1
 8000770:	438a      	bics	r2, r1
 8000772:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	490a      	ldr	r1, [pc, #40]	; (80007a0 <SystemInit+0x50>)
 8000778:	400a      	ands	r2, r1
 800077a:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800077c:	68da      	ldr	r2, [r3, #12]
 800077e:	4909      	ldr	r1, [pc, #36]	; (80007a4 <SystemInit+0x54>)
 8000780:	400a      	ands	r2, r1
 8000782:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <SystemInit+0x58>)
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	0512      	lsls	r2, r2, #20
 800078e:	609a      	str	r2, [r3, #8]
#endif
}
 8000790:	4770      	bx	lr
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	40021000 	.word	0x40021000
 8000798:	88ff400c 	.word	0x88ff400c
 800079c:	fef6fff6 	.word	0xfef6fff6
 80007a0:	fffbffff 	.word	0xfffbffff
 80007a4:	ff02ffff 	.word	0xff02ffff
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80007ac:	4813      	ldr	r0, [pc, #76]	; (80007fc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80007ae:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80007b0:	4813      	ldr	r0, [pc, #76]	; (8000800 <LoopForever+0x6>)
    LDR R1, [R0]
 80007b2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80007b4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80007b6:	4a13      	ldr	r2, [pc, #76]	; (8000804 <LoopForever+0xa>)
    CMP R1, R2
 80007b8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80007ba:	d105      	bne.n	80007c8 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80007bc:	4812      	ldr	r0, [pc, #72]	; (8000808 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80007be:	4913      	ldr	r1, [pc, #76]	; (800080c <LoopForever+0x12>)
    STR R1, [R0]
 80007c0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80007c2:	4813      	ldr	r0, [pc, #76]	; (8000810 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80007c4:	4913      	ldr	r1, [pc, #76]	; (8000814 <LoopForever+0x1a>)
    STR R1, [R0]
 80007c6:	6001      	str	r1, [r0, #0]

080007c8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80007c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007ca:	e003      	b.n	80007d4 <LoopCopyDataInit>

080007cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <LoopForever+0x1e>)
  ldr  r3, [r3, r1]
 80007ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007d2:	3104      	adds	r1, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80007d4:	4811      	ldr	r0, [pc, #68]	; (800081c <LoopForever+0x22>)
  ldr  r3, =_edata
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <LoopForever+0x26>)
  adds  r2, r0, r1
 80007d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007dc:	d3f6      	bcc.n	80007cc <CopyDataInit>
  ldr  r2, =_sbss
 80007de:	4a11      	ldr	r2, [pc, #68]	; (8000824 <LoopForever+0x2a>)
  b  LoopFillZerobss
 80007e0:	e002      	b.n	80007e8 <LoopFillZerobss>

080007e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80007e2:	2300      	movs	r3, #0
  str  r3, [r2]
 80007e4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e6:	3204      	adds	r2, #4

080007e8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <LoopForever+0x2e>)
  cmp  r2, r3
 80007ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80007ec:	d3f9      	bcc.n	80007e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007ee:	f7ff ffaf 	bl	8000750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f2:	f002 fc13 	bl	800301c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007f6:	f7ff feab 	bl	8000550 <main>

080007fa <LoopForever>:

LoopForever:
    b LoopForever
 80007fa:	e7fe      	b.n	80007fa <LoopForever>
   ldr   r0, =_estack
 80007fc:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000800:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000804:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000808:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 800080c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000810:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000814:	00000000 	.word	0x00000000
  ldr  r3, =_sidata
 8000818:	08003188 	.word	0x08003188
  ldr  r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000820:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000824:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000828:	2000021c 	.word	0x2000021c

0800082c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC1_COMP_IRQHandler>
	...

08000830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b510      	push	{r4, lr}
 8000832:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <HAL_InitTick+0x40>)
 8000836:	7819      	ldrb	r1, [r3, #0]
 8000838:	20fa      	movs	r0, #250	; 0xfa
 800083a:	0080      	lsls	r0, r0, #2
 800083c:	f7ff fcae 	bl	800019c <__udivsi3>
 8000840:	0001      	movs	r1, r0
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_InitTick+0x44>)
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	f7ff fca9 	bl	800019c <__udivsi3>
 800084a:	f000 f87b 	bl	8000944 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000850:	2800      	cmp	r0, #0
 8000852:	d101      	bne.n	8000858 <HAL_InitTick+0x28>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000854:	2c03      	cmp	r4, #3
 8000856:	d901      	bls.n	800085c <HAL_InitTick+0x2c>
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000858:	0018      	movs	r0, r3
 800085a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085c:	3001      	adds	r0, #1
 800085e:	2200      	movs	r2, #0
 8000860:	0021      	movs	r1, r4
 8000862:	4240      	negs	r0, r0
 8000864:	f000 f830 	bl	80008c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <HAL_InitTick+0x48>)
 800086a:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
 800086e:	e7f3      	b.n	8000858 <HAL_InitTick+0x28>
 8000870:	20000004 	.word	0x20000004
 8000874:	20000000 	.word	0x20000000
 8000878:	20000008 	.word	0x20000008

0800087c <HAL_Init>:
{
 800087c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_Init+0x24>)
 8000880:	6813      	ldr	r3, [r2, #0]
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	430b      	orrs	r3, r1
 8000886:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000888:	2003      	movs	r0, #3
 800088a:	f7ff ffd1 	bl	8000830 <HAL_InitTick>
 800088e:	1e04      	subs	r4, r0, #0
 8000890:	d002      	beq.n	8000898 <HAL_Init+0x1c>
    status = HAL_ERROR;
 8000892:	2401      	movs	r4, #1
}
 8000894:	0020      	movs	r0, r4
 8000896:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000898:	f7ff fede 	bl	8000658 <HAL_MspInit>
 800089c:	e7fa      	b.n	8000894 <HAL_Init+0x18>
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40022000 	.word	0x40022000

080008a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80008a4:	4a03      	ldr	r2, [pc, #12]	; (80008b4 <HAL_IncTick+0x10>)
 80008a6:	6811      	ldr	r1, [r2, #0]
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <HAL_IncTick+0x14>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	185b      	adds	r3, r3, r1
 80008ae:	6013      	str	r3, [r2, #0]
}
 80008b0:	4770      	bx	lr
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	20000144 	.word	0x20000144
 80008b8:	20000004 	.word	0x20000004

080008bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008bc:	4b01      	ldr	r3, [pc, #4]	; (80008c4 <HAL_GetTick+0x8>)
 80008be:	6818      	ldr	r0, [r3, #0]
}
 80008c0:	4770      	bx	lr
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	20000144 	.word	0x20000144

080008c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008c8:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80008ca:	2800      	cmp	r0, #0
 80008cc:	db14      	blt.n	80008f8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ce:	0883      	lsrs	r3, r0, #2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <HAL_NVIC_SetPriority+0x60>)
 80008d4:	4694      	mov	ip, r2
 80008d6:	4463      	add	r3, ip
 80008d8:	26c0      	movs	r6, #192	; 0xc0
 80008da:	00b6      	lsls	r6, r6, #2
 80008dc:	599d      	ldr	r5, [r3, r6]
 80008de:	2403      	movs	r4, #3
 80008e0:	4020      	ands	r0, r4
 80008e2:	00c0      	lsls	r0, r0, #3
 80008e4:	22ff      	movs	r2, #255	; 0xff
 80008e6:	0014      	movs	r4, r2
 80008e8:	4084      	lsls	r4, r0
 80008ea:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ec:	0189      	lsls	r1, r1, #6
 80008ee:	400a      	ands	r2, r1
 80008f0:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f2:	432a      	orrs	r2, r5
 80008f4:	519a      	str	r2, [r3, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f8:	b2c0      	uxtb	r0, r0
 80008fa:	230f      	movs	r3, #15
 80008fc:	4003      	ands	r3, r0
 80008fe:	3b08      	subs	r3, #8
 8000900:	089b      	lsrs	r3, r3, #2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	4a09      	ldr	r2, [pc, #36]	; (800092c <HAL_NVIC_SetPriority+0x64>)
 8000906:	4694      	mov	ip, r2
 8000908:	4463      	add	r3, ip
 800090a:	69dd      	ldr	r5, [r3, #28]
 800090c:	2203      	movs	r2, #3
 800090e:	4010      	ands	r0, r2
 8000910:	00c0      	lsls	r0, r0, #3
 8000912:	24ff      	movs	r4, #255	; 0xff
 8000914:	0022      	movs	r2, r4
 8000916:	4082      	lsls	r2, r0
 8000918:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800091a:	0189      	lsls	r1, r1, #6
 800091c:	400c      	ands	r4, r1
 800091e:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000920:	432c      	orrs	r4, r5
 8000922:	61dc      	str	r4, [r3, #28]
 8000924:	e7e7      	b.n	80008f6 <HAL_NVIC_SetPriority+0x2e>
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	e000e100 	.word	0xe000e100
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000930:	231f      	movs	r3, #31
 8000932:	4018      	ands	r0, r3
 8000934:	3b1e      	subs	r3, #30
 8000936:	4083      	lsls	r3, r0
 8000938:	4a01      	ldr	r2, [pc, #4]	; (8000940 <HAL_NVIC_EnableIRQ+0x10>)
 800093a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800093c:	4770      	bx	lr
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	e000e100 	.word	0xe000e100

08000944 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000944:	1e43      	subs	r3, r0, #1
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_SYSTICK_Config+0x2c>)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000948:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800094a:	4293      	cmp	r3, r2
 800094c:	d80e      	bhi.n	800096c <HAL_SYSTICK_Config+0x28>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094e:	4a09      	ldr	r2, [pc, #36]	; (8000974 <HAL_SYSTICK_Config+0x30>)
 8000950:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000952:	4809      	ldr	r0, [pc, #36]	; (8000978 <HAL_SYSTICK_Config+0x34>)
 8000954:	6a03      	ldr	r3, [r0, #32]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	21c0      	movs	r1, #192	; 0xc0
 800095c:	0609      	lsls	r1, r1, #24
 800095e:	430b      	orrs	r3, r1
 8000960:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000962:	2300      	movs	r3, #0
 8000964:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000966:	3307      	adds	r3, #7
 8000968:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800096a:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800096c:	4770      	bx	lr
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	00ffffff 	.word	0x00ffffff
 8000974:	e000e010 	.word	0xe000e010
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800097c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800097e:	2325      	movs	r3, #37	; 0x25
 8000980:	5cc3      	ldrb	r3, [r0, r3]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d003      	beq.n	800098e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000986:	2304      	movs	r3, #4
 8000988:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 800098a:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 800098c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800098e:	6802      	ldr	r2, [r0, #0]
 8000990:	6813      	ldr	r3, [r2, #0]
 8000992:	210e      	movs	r1, #14
 8000994:	438b      	bics	r3, r1
 8000996:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000998:	6801      	ldr	r1, [r0, #0]
 800099a:	680a      	ldr	r2, [r1, #0]
 800099c:	2301      	movs	r3, #1
 800099e:	439a      	bics	r2, r3
 80009a0:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80009a2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80009a4:	221c      	movs	r2, #28
 80009a6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80009a8:	4022      	ands	r2, r4
 80009aa:	001c      	movs	r4, r3
 80009ac:	4094      	lsls	r4, r2
 80009ae:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80009b0:	2225      	movs	r2, #37	; 0x25
 80009b2:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80009b4:	3323      	adds	r3, #35	; 0x23
 80009b6:	2200      	movs	r2, #0
 80009b8:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 80009ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <HAL_DMA_Abort_IT+0x4a>
      hdma->XferAbortCallback(hdma);
 80009c0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80009c2:	2000      	movs	r0, #0
 80009c4:	e7e2      	b.n	800098c <HAL_DMA_Abort_IT+0x10>
 80009c6:	2000      	movs	r0, #0
 80009c8:	e7e0      	b.n	800098c <HAL_DMA_Abort_IT+0x10>
	...

080009cc <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80009cc:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <FLASH_SetErrorCode+0xac>)
 80009ce:	699a      	ldr	r2, [r3, #24]
  uint32_t flags = 0;
 80009d0:	2300      	movs	r3, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80009d2:	05d2      	lsls	r2, r2, #23
 80009d4:	d506      	bpl.n	80009e4 <FLASH_SetErrorCode+0x18>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80009d6:	4a29      	ldr	r2, [pc, #164]	; (8000a7c <FLASH_SetErrorCode+0xb0>)
 80009d8:	6953      	ldr	r3, [r2, #20]
 80009da:	2102      	movs	r1, #2
 80009dc:	430b      	orrs	r3, r1
 80009de:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	005b      	lsls	r3, r3, #1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80009e4:	4a24      	ldr	r2, [pc, #144]	; (8000a78 <FLASH_SetErrorCode+0xac>)
 80009e6:	6992      	ldr	r2, [r2, #24]
 80009e8:	0592      	lsls	r2, r2, #22
 80009ea:	d507      	bpl.n	80009fc <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80009ec:	4923      	ldr	r1, [pc, #140]	; (8000a7c <FLASH_SetErrorCode+0xb0>)
 80009ee:	694a      	ldr	r2, [r1, #20]
 80009f0:	2001      	movs	r0, #1
 80009f2:	4302      	orrs	r2, r0
 80009f4:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_PGAERR;
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	0092      	lsls	r2, r2, #2
 80009fa:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80009fc:	4a1e      	ldr	r2, [pc, #120]	; (8000a78 <FLASH_SetErrorCode+0xac>)
 80009fe:	6992      	ldr	r2, [r2, #24]
 8000a00:	0552      	lsls	r2, r2, #21
 8000a02:	d507      	bpl.n	8000a14 <FLASH_SetErrorCode+0x48>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8000a04:	491d      	ldr	r1, [pc, #116]	; (8000a7c <FLASH_SetErrorCode+0xb0>)
 8000a06:	694a      	ldr	r2, [r1, #20]
 8000a08:	2008      	movs	r0, #8
 8000a0a:	4302      	orrs	r2, r0
 8000a0c:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_SIZERR;
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	00d2      	lsls	r2, r2, #3
 8000a12:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000a14:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <FLASH_SetErrorCode+0xac>)
 8000a16:	6992      	ldr	r2, [r2, #24]
 8000a18:	0512      	lsls	r2, r2, #20
 8000a1a:	d507      	bpl.n	8000a2c <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000a1c:	4917      	ldr	r1, [pc, #92]	; (8000a7c <FLASH_SetErrorCode+0xb0>)
 8000a1e:	694a      	ldr	r2, [r1, #20]
 8000a20:	2004      	movs	r0, #4
 8000a22:	4302      	orrs	r2, r0
 8000a24:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	4313      	orrs	r3, r2
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8000a2c:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <FLASH_SetErrorCode+0xac>)
 8000a2e:	6992      	ldr	r2, [r2, #24]
 8000a30:	0492      	lsls	r2, r2, #18
 8000a32:	d507      	bpl.n	8000a44 <FLASH_SetErrorCode+0x78>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000a34:	4911      	ldr	r1, [pc, #68]	; (8000a7c <FLASH_SetErrorCode+0xb0>)
 8000a36:	694a      	ldr	r2, [r1, #20]
 8000a38:	2010      	movs	r0, #16
 8000a3a:	4302      	orrs	r2, r0
 8000a3c:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_RDERR;
 8000a3e:	2280      	movs	r2, #128	; 0x80
 8000a40:	0192      	lsls	r2, r2, #6
 8000a42:	4313      	orrs	r3, r2
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8000a44:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <FLASH_SetErrorCode+0xac>)
 8000a46:	6992      	ldr	r2, [r2, #24]
 8000a48:	0392      	lsls	r2, r2, #14
 8000a4a:	d505      	bpl.n	8000a58 <FLASH_SetErrorCode+0x8c>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <FLASH_SetErrorCode+0xb0>)
 8000a4e:	6942      	ldr	r2, [r0, #20]
 8000a50:	2120      	movs	r1, #32
 8000a52:	430a      	orrs	r2, r1
 8000a54:	6142      	str	r2, [r0, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8000a56:	430b      	orrs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <FLASH_SetErrorCode+0xac>)
 8000a5a:	6992      	ldr	r2, [r2, #24]
 8000a5c:	03d2      	lsls	r2, r2, #15
 8000a5e:	d507      	bpl.n	8000a70 <FLASH_SetErrorCode+0xa4>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8000a60:	4906      	ldr	r1, [pc, #24]	; (8000a7c <FLASH_SetErrorCode+0xb0>)
 8000a62:	694a      	ldr	r2, [r1, #20]
 8000a64:	2040      	movs	r0, #64	; 0x40
 8000a66:	4302      	orrs	r2, r0
 8000a68:	614a      	str	r2, [r1, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	0252      	lsls	r2, r2, #9
 8000a6e:	4313      	orrs	r3, r2
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000a70:	4a01      	ldr	r2, [pc, #4]	; (8000a78 <FLASH_SetErrorCode+0xac>)
 8000a72:	6193      	str	r3, [r2, #24]
}  
 8000a74:	4770      	bx	lr
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	40022000 	.word	0x40022000
 8000a7c:	20000148 	.word	0x20000148

08000a80 <HAL_FLASH_OB_Unlock>:
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_OPTLOCK))
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_FLASH_OB_Unlock+0x34>)
 8000a82:	685b      	ldr	r3, [r3, #4]
    return HAL_ERROR;
 8000a84:	2001      	movs	r0, #1
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_OPTLOCK))
 8000a86:	075b      	lsls	r3, r3, #29
 8000a88:	d513      	bpl.n	8000ab2 <HAL_FLASH_OB_Unlock+0x32>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000a8a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8e:	b672      	cpsid	i
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_FLASH_OB_Unlock+0x34>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	07db      	lsls	r3, r3, #31
 8000a96:	d504      	bpl.n	8000aa2 <HAL_FLASH_OB_Unlock+0x22>
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_FLASH_OB_Unlock+0x34>)
 8000a9a:	4907      	ldr	r1, [pc, #28]	; (8000ab8 <HAL_FLASH_OB_Unlock+0x38>)
 8000a9c:	60d9      	str	r1, [r3, #12]
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8000a9e:	4907      	ldr	r1, [pc, #28]	; (8000abc <HAL_FLASH_OB_Unlock+0x3c>)
 8000aa0:	60d9      	str	r1, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <HAL_FLASH_OB_Unlock+0x34>)
 8000aa4:	4906      	ldr	r1, [pc, #24]	; (8000ac0 <HAL_FLASH_OB_Unlock+0x40>)
 8000aa6:	6159      	str	r1, [r3, #20]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8000aa8:	4906      	ldr	r1, [pc, #24]	; (8000ac4 <HAL_FLASH_OB_Unlock+0x44>)
 8000aaa:	6159      	str	r1, [r3, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000aac:	f382 8810 	msr	PRIMASK, r2
  return HAL_OK;  
 8000ab0:	2000      	movs	r0, #0
}
 8000ab2:	4770      	bx	lr
 8000ab4:	40022000 	.word	0x40022000
 8000ab8:	89abcdef 	.word	0x89abcdef
 8000abc:	02030405 	.word	0x02030405
 8000ac0:	fbead9c8 	.word	0xfbead9c8
 8000ac4:	24252627 	.word	0x24252627

08000ac8 <HAL_FLASH_OB_Lock>:
  SET_BIT(FLASH->PECR, FLASH_PECR_OPTLOCK);
 8000ac8:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <HAL_FLASH_OB_Lock+0x10>)
 8000aca:	6853      	ldr	r3, [r2, #4]
 8000acc:	2104      	movs	r1, #4
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	6053      	str	r3, [r2, #4]
}
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40022000 	.word	0x40022000

08000adc <FLASH_WaitForLastOperation>:
{
 8000adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ade:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff feec 	bl	80008bc <HAL_GetTick>
 8000ae4:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000ae6:	4e1d      	ldr	r6, [pc, #116]	; (8000b5c <FLASH_WaitForLastOperation+0x80>)
 8000ae8:	2501      	movs	r5, #1
 8000aea:	69b3      	ldr	r3, [r6, #24]
 8000aec:	421d      	tst	r5, r3
 8000aee:	d00a      	beq.n	8000b06 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8000af0:	1c63      	adds	r3, r4, #1
 8000af2:	d0fa      	beq.n	8000aea <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000af4:	2c00      	cmp	r4, #0
 8000af6:	d02e      	beq.n	8000b56 <FLASH_WaitForLastOperation+0x7a>
 8000af8:	f7ff fee0 	bl	80008bc <HAL_GetTick>
 8000afc:	1bc0      	subs	r0, r0, r7
 8000afe:	42a0      	cmp	r0, r4
 8000b00:	d9f3      	bls.n	8000aea <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8000b02:	2003      	movs	r0, #3
 8000b04:	e026      	b.n	8000b54 <FLASH_WaitForLastOperation+0x78>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <FLASH_WaitForLastOperation+0x80>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	079b      	lsls	r3, r3, #30
 8000b0c:	d502      	bpl.n	8000b14 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <FLASH_WaitForLastOperation+0x80>)
 8000b10:	2202      	movs	r2, #2
 8000b12:	619a      	str	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <FLASH_WaitForLastOperation+0x80>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	05db      	lsls	r3, r3, #23
 8000b1a:	d418      	bmi.n	8000b4e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <FLASH_WaitForLastOperation+0x80>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8000b20:	059b      	lsls	r3, r3, #22
 8000b22:	d414      	bmi.n	8000b4e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <FLASH_WaitForLastOperation+0x80>)
 8000b26:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8000b28:	055b      	lsls	r3, r3, #21
 8000b2a:	d410      	bmi.n	8000b4e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <FLASH_WaitForLastOperation+0x80>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8000b30:	051b      	lsls	r3, r3, #20
 8000b32:	d40c      	bmi.n	8000b4e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <FLASH_WaitForLastOperation+0x80>)
 8000b36:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8000b38:	049b      	lsls	r3, r3, #18
 8000b3a:	d408      	bmi.n	8000b4e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <FLASH_WaitForLastOperation+0x80>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8000b40:	039b      	lsls	r3, r3, #14
 8000b42:	d404      	bmi.n	8000b4e <FLASH_WaitForLastOperation+0x72>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <FLASH_WaitForLastOperation+0x80>)
 8000b46:	699b      	ldr	r3, [r3, #24]
  return HAL_OK;
 8000b48:	2000      	movs	r0, #0
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8000b4a:	03db      	lsls	r3, r3, #15
 8000b4c:	d502      	bpl.n	8000b54 <FLASH_WaitForLastOperation+0x78>
    FLASH_SetErrorCode();
 8000b4e:	f7ff ff3d 	bl	80009cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000b52:	2001      	movs	r0, #1
}
 8000b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8000b56:	2003      	movs	r0, #3
 8000b58:	e7fc      	b.n	8000b54 <FLASH_WaitForLastOperation+0x78>
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	40022000 	.word	0x40022000

08000b60 <FLASH_OB_ProtectedSectorsConfig>:
  *        @arg @ref OB_WRPSTATE_DISABLE
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef FLASH_OB_ProtectedSectorsConfig(uint32_t Sector, uint32_t NewState)
#endif
{
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	0004      	movs	r4, r0
 8000b64:	000d      	movs	r5, r1
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t WRP_Data = 0;
  uint32_t OB_WRP = Sector;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b66:	4811      	ldr	r0, [pc, #68]	; (8000bac <FLASH_OB_ProtectedSectorsConfig+0x4c>)
 8000b68:	f7ff ffb8 	bl	8000adc <FLASH_WaitForLastOperation>
 
  if(status == HAL_OK)
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d110      	bne.n	8000b92 <FLASH_OB_ProtectedSectorsConfig+0x32>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <FLASH_OB_ProtectedSectorsConfig+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]

    /* Update WRP only if at least 1 selected sector */
    if (OB_WRP != 0x00000000U)
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d00b      	beq.n	8000b92 <FLASH_OB_ProtectedSectorsConfig+0x32>
    {
      if ((OB_WRP & WRP_MASK_LOW) != 0x00000000U)
 8000b7a:	0423      	lsls	r3, r4, #16
 8000b7c:	d009      	beq.n	8000b92 <FLASH_OB_ProtectedSectorsConfig+0x32>
      {
        if (NewState != OB_WRPSTATE_DISABLE)
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d10b      	bne.n	8000b9a <FLASH_OB_ProtectedSectorsConfig+0x3a>
          WRP_Data = (uint16_t)(((OB_WRP & WRP_MASK_LOW) | OB->WRP01));
          OB->WRP01 = (uint32_t)(~(WRP_Data) << 16U) | (WRP_Data);
        }             
        else
        {
          WRP_Data = (uint16_t)(~OB_WRP & (WRP_MASK_LOW & OB->WRP01));
 8000b82:	490c      	ldr	r1, [pc, #48]	; (8000bb4 <FLASH_OB_ProtectedSectorsConfig+0x54>)
 8000b84:	688b      	ldr	r3, [r1, #8]
 8000b86:	43a3      	bics	r3, r4
 8000b88:	b29b      	uxth	r3, r3
          OB->WRP01 =  (uint32_t)((~WRP_Data) << 16U) | (WRP_Data);
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	0412      	lsls	r2, r2, #16
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	608b      	str	r3, [r1, #8]
      }
    }
#endif /* STM32L071xx || STM32L072xx || STM32L073xx || STM32L081xx || STM32L082xx || STM32L083xx */
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <FLASH_OB_ProtectedSectorsConfig+0x4c>)
 8000b94:	f7ff ffa2 	bl	8000adc <FLASH_WaitForLastOperation>

  /* Return the write protection operation Status */
  return status;      
}
 8000b98:	bd70      	pop	{r4, r5, r6, pc}
          WRP_Data = (uint16_t)(((OB_WRP & WRP_MASK_LOW) | OB->WRP01));
 8000b9a:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <FLASH_OB_ProtectedSectorsConfig+0x54>)
 8000b9c:	6893      	ldr	r3, [r2, #8]
 8000b9e:	431c      	orrs	r4, r3
 8000ba0:	b2a4      	uxth	r4, r4
          OB->WRP01 = (uint32_t)(~(WRP_Data) << 16U) | (WRP_Data);
 8000ba2:	43e3      	mvns	r3, r4
 8000ba4:	041b      	lsls	r3, r3, #16
 8000ba6:	431c      	orrs	r4, r3
 8000ba8:	6094      	str	r4, [r2, #8]
 8000baa:	e7f2      	b.n	8000b92 <FLASH_OB_ProtectedSectorsConfig+0x32>
 8000bac:	0000c350 	.word	0x0000c350
 8000bb0:	20000148 	.word	0x20000148
 8000bb4:	1ff80000 	.word	0x1ff80000

08000bb8 <HAL_FLASHEx_OBProgram>:
{
 8000bb8:	b570      	push	{r4, r5, r6, lr}
 8000bba:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8000bbc:	4b4e      	ldr	r3, [pc, #312]	; (8000cf8 <HAL_FLASHEx_OBProgram+0x140>)
 8000bbe:	7c1b      	ldrb	r3, [r3, #16]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d100      	bne.n	8000bc6 <HAL_FLASHEx_OBProgram+0xe>
 8000bc4:	e095      	b.n	8000cf2 <HAL_FLASHEx_OBProgram+0x13a>
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	4a4b      	ldr	r2, [pc, #300]	; (8000cf8 <HAL_FLASHEx_OBProgram+0x140>)
 8000bca:	7413      	strb	r3, [r2, #16]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000bcc:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8000bce:	6822      	ldr	r2, [r4, #0]
 8000bd0:	421a      	tst	r2, r3
 8000bd2:	d10f      	bne.n	8000bf4 <HAL_FLASHEx_OBProgram+0x3c>
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	079b      	lsls	r3, r3, #30
 8000bd8:	d416      	bmi.n	8000c08 <HAL_FLASHEx_OBProgram+0x50>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	075b      	lsls	r3, r3, #29
 8000bde:	d432      	bmi.n	8000c46 <HAL_FLASHEx_OBProgram+0x8e>
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8000be0:	6823      	ldr	r3, [r4, #0]
 8000be2:	071b      	lsls	r3, r3, #28
 8000be4:	d44e      	bmi.n	8000c84 <HAL_FLASHEx_OBProgram+0xcc>
  if ((pOBInit->OptionType & OPTIONBYTE_BOOT_BIT1) == OPTIONBYTE_BOOT_BIT1)
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	06db      	lsls	r3, r3, #27
 8000bea:	d469      	bmi.n	8000cc0 <HAL_FLASHEx_OBProgram+0x108>
  __HAL_UNLOCK(&pFlash);
 8000bec:	4b42      	ldr	r3, [pc, #264]	; (8000cf8 <HAL_FLASHEx_OBProgram+0x140>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	741a      	strb	r2, [r3, #16]
}
 8000bf2:	bd70      	pop	{r4, r5, r6, pc}
    status = FLASH_OB_ProtectedSectorsConfig(pOBInit->WRPSector, pOBInit->WRPState);
 8000bf4:	6861      	ldr	r1, [r4, #4]
 8000bf6:	68a0      	ldr	r0, [r4, #8]
 8000bf8:	f7ff ffb2 	bl	8000b60 <FLASH_OB_ProtectedSectorsConfig>
    if (status != HAL_OK)
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	d0e9      	beq.n	8000bd4 <HAL_FLASHEx_OBProgram+0x1c>
      __HAL_UNLOCK(&pFlash);
 8000c00:	4b3d      	ldr	r3, [pc, #244]	; (8000cf8 <HAL_FLASHEx_OBProgram+0x140>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	741a      	strb	r2, [r3, #16]
      return status;
 8000c06:	e7f4      	b.n	8000bf2 <HAL_FLASHEx_OBProgram+0x3a>
    status = FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 8000c08:	7b26      	ldrb	r6, [r4, #12]
  tmp1 = (uint32_t)(OB->RDP & FLASH_OPTR_RDPROT);
 8000c0a:	4b3c      	ldr	r3, [pc, #240]	; (8000cfc <HAL_FLASHEx_OBProgram+0x144>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
    tmp3 = (uint32_t)(OB->RDP & FLASH_OPTR_WPRMOD);
 8000c0e:	681d      	ldr	r5, [r3, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c10:	483b      	ldr	r0, [pc, #236]	; (8000d00 <HAL_FLASHEx_OBProgram+0x148>)
 8000c12:	f7ff ff63 	bl	8000adc <FLASH_WaitForLastOperation>
    if(status == HAL_OK)
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d003      	beq.n	8000c22 <HAL_FLASHEx_OBProgram+0x6a>
      __HAL_UNLOCK(&pFlash);
 8000c1a:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <HAL_FLASHEx_OBProgram+0x140>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	741a      	strb	r2, [r3, #16]
      return status;
 8000c20:	e7e7      	b.n	8000bf2 <HAL_FLASHEx_OBProgram+0x3a>
    tmp3 = (uint32_t)(OB->RDP & FLASH_OPTR_WPRMOD);
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	401d      	ands	r5, r3
    tmp1 = (~((uint32_t)(OB_RDP | tmp3)));
 8000c28:	4335      	orrs	r5, r6
      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c2a:	4b33      	ldr	r3, [pc, #204]	; (8000cf8 <HAL_FLASHEx_OBProgram+0x140>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
    tmp1 = (~((uint32_t)(OB_RDP | tmp3)));
 8000c30:	43eb      	mvns	r3, r5
    tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)(OB_RDP | tmp3)));
 8000c32:	041b      	lsls	r3, r3, #16
 8000c34:	431d      	orrs	r5, r3
      OB->RDP = tmp2;
 8000c36:	4b31      	ldr	r3, [pc, #196]	; (8000cfc <HAL_FLASHEx_OBProgram+0x144>)
 8000c38:	601d      	str	r5, [r3, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c3a:	4831      	ldr	r0, [pc, #196]	; (8000d00 <HAL_FLASHEx_OBProgram+0x148>)
 8000c3c:	f7ff ff4e 	bl	8000adc <FLASH_WaitForLastOperation>
    if (status != HAL_OK)
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d0ca      	beq.n	8000bda <HAL_FLASHEx_OBProgram+0x22>
 8000c44:	e7e9      	b.n	8000c1a <HAL_FLASHEx_OBProgram+0x62>
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW, 
 8000c46:	7ba6      	ldrb	r6, [r4, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Get the User Option byte register */
  tmp1 = OB->USER & ((~FLASH_OPTR_USER) >> 16U);
 8000c48:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <HAL_FLASHEx_OBProgram+0x144>)
 8000c4a:	685d      	ldr	r5, [r3, #4]
  /* Calculate the user option byte to write */ 
  tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(OB_STDBY) | tmp1))) << 16U);
  tmp |= ((uint32_t)(OB_IWDG) | ((uint32_t)OB_STOP) | (uint32_t)(OB_STDBY) | tmp1);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c4c:	482c      	ldr	r0, [pc, #176]	; (8000d00 <HAL_FLASHEx_OBProgram+0x148>)
 8000c4e:	f7ff ff45 	bl	8000adc <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_FLASHEx_OBProgram+0xa6>
      __HAL_UNLOCK(&pFlash);
 8000c56:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <HAL_FLASHEx_OBProgram+0x140>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	741a      	strb	r2, [r3, #16]
      return status;
 8000c5c:	e7c9      	b.n	8000bf2 <HAL_FLASHEx_OBProgram+0x3a>
  tmp1 = OB->USER & ((~FLASH_OPTR_USER) >> 16U);
 8000c5e:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <HAL_FLASHEx_OBProgram+0x14c>)
 8000c60:	401d      	ands	r5, r3
  tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(OB_STDBY) | tmp1))) << 16U);
 8000c62:	2370      	movs	r3, #112	; 0x70
 8000c64:	4033      	ands	r3, r6
 8000c66:	431d      	orrs	r5, r3
  {  
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c68:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <HAL_FLASHEx_OBProgram+0x140>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(OB_STDBY) | tmp1))) << 16U);
 8000c6e:	43eb      	mvns	r3, r5
 8000c70:	041b      	lsls	r3, r3, #16
  tmp |= ((uint32_t)(OB_IWDG) | ((uint32_t)OB_STOP) | (uint32_t)(OB_STDBY) | tmp1);
 8000c72:	431d      	orrs	r5, r3

    /* Write the User Option Byte */
    OB->USER = tmp;
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <HAL_FLASHEx_OBProgram+0x144>)
 8000c76:	605d      	str	r5, [r3, #4]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c78:	4821      	ldr	r0, [pc, #132]	; (8000d00 <HAL_FLASHEx_OBProgram+0x148>)
 8000c7a:	f7ff ff2f 	bl	8000adc <FLASH_WaitForLastOperation>
    if (status != HAL_OK)
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d0ae      	beq.n	8000be0 <HAL_FLASHEx_OBProgram+0x28>
 8000c82:	e7e8      	b.n	8000c56 <HAL_FLASHEx_OBProgram+0x9e>
    status = FLASH_OB_BORConfig(pOBInit->BORLevel);
 8000c84:	7b66      	ldrb	r6, [r4, #13]
  tmp1 = OB->USER & ((~FLASH_OPTR_BOR_LEV) >> 16U);
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <HAL_FLASHEx_OBProgram+0x144>)
 8000c88:	685d      	ldr	r5, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c8a:	481d      	ldr	r0, [pc, #116]	; (8000d00 <HAL_FLASHEx_OBProgram+0x148>)
 8000c8c:	f7ff ff26 	bl	8000adc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d003      	beq.n	8000c9c <HAL_FLASHEx_OBProgram+0xe4>
      __HAL_UNLOCK(&pFlash);
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <HAL_FLASHEx_OBProgram+0x140>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	741a      	strb	r2, [r3, #16]
      return status;
 8000c9a:	e7aa      	b.n	8000bf2 <HAL_FLASHEx_OBProgram+0x3a>
  tmp1 = OB->USER & ((~FLASH_OPTR_BOR_LEV) >> 16U);
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <HAL_FLASHEx_OBProgram+0x150>)
 8000c9e:	401d      	ands	r5, r3
  tmp = (uint32_t)~((OB_BOR | tmp1)) << 16U;
 8000ca0:	4335      	orrs	r5, r6
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_FLASHEx_OBProgram+0x140>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
  tmp = (uint32_t)~((OB_BOR | tmp1)) << 16U;
 8000ca8:	43eb      	mvns	r3, r5
 8000caa:	041b      	lsls	r3, r3, #16
  tmp |= (OB_BOR | tmp1);
 8000cac:	431d      	orrs	r5, r3
    OB->USER = tmp;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <HAL_FLASHEx_OBProgram+0x144>)
 8000cb0:	605d      	str	r5, [r3, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cb2:	4813      	ldr	r0, [pc, #76]	; (8000d00 <HAL_FLASHEx_OBProgram+0x148>)
 8000cb4:	f7ff ff12 	bl	8000adc <FLASH_WaitForLastOperation>
    if (status != HAL_OK)
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	d100      	bne.n	8000cbe <HAL_FLASHEx_OBProgram+0x106>
 8000cbc:	e793      	b.n	8000be6 <HAL_FLASHEx_OBProgram+0x2e>
 8000cbe:	e7e9      	b.n	8000c94 <HAL_FLASHEx_OBProgram+0xdc>
    status = FLASH_OB_BOOTBit1Config(pOBInit->BOOTBit1Config);
 8000cc0:	7be4      	ldrb	r4, [r4, #15]
  tmp1 = OB->USER & ((~FLASH_OPTR_BOOT1) >> 16U);
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_FLASHEx_OBProgram+0x144>)
 8000cc4:	685d      	ldr	r5, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cc6:	480e      	ldr	r0, [pc, #56]	; (8000d00 <HAL_FLASHEx_OBProgram+0x148>)
 8000cc8:	f7ff ff08 	bl	8000adc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	d000      	beq.n	8000cd2 <HAL_FLASHEx_OBProgram+0x11a>
 8000cd0:	e78c      	b.n	8000bec <HAL_FLASHEx_OBProgram+0x34>
  uint32_t tmp = 0, tmp1 = 0, OB_Bits = ((uint32_t) OB_BootBit1) << 15;
 8000cd2:	03e4      	lsls	r4, r4, #15
  tmp1 = OB->USER & ((~FLASH_OPTR_BOOT1) >> 16U);
 8000cd4:	046d      	lsls	r5, r5, #17
 8000cd6:	0c6d      	lsrs	r5, r5, #17
  tmp = (~(OB_Bits | tmp1)) << 16U;
 8000cd8:	432c      	orrs	r4, r5
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <HAL_FLASHEx_OBProgram+0x140>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  tmp = (~(OB_Bits | tmp1)) << 16U;
 8000ce0:	43e3      	mvns	r3, r4
 8000ce2:	041b      	lsls	r3, r3, #16
  tmp |= OB_Bits | tmp1;
 8000ce4:	431c      	orrs	r4, r3
    OB->USER = tmp; 
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_FLASHEx_OBProgram+0x144>)
 8000ce8:	605c      	str	r4, [r3, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_FLASHEx_OBProgram+0x148>)
 8000cec:	f7ff fef6 	bl	8000adc <FLASH_WaitForLastOperation>
 8000cf0:	e77c      	b.n	8000bec <HAL_FLASHEx_OBProgram+0x34>
  __HAL_LOCK(&pFlash);
 8000cf2:	2002      	movs	r0, #2
 8000cf4:	e77d      	b.n	8000bf2 <HAL_FLASHEx_OBProgram+0x3a>
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	20000148 	.word	0x20000148
 8000cfc:	1ff80000 	.word	0x1ff80000
 8000d00:	0000c350 	.word	0x0000c350
 8000d04:	0000ff8f 	.word	0x0000ff8f
 8000d08:	0000fff0 	.word	0x0000fff0

08000d0c <HAL_FLASHEx_OBGetConfig>:
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	6003      	str	r3, [r0, #0]
  return (uint32_t)(FLASH->WRPR);
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_FLASHEx_OBGetConfig+0x38>)
 8000d12:	6a1a      	ldr	r2, [r3, #32]
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 8000d14:	6082      	str	r2, [r0, #8]
  uint8_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDPROT);
 8000d16:	69db      	ldr	r3, [r3, #28]
 8000d18:	b2db      	uxtb	r3, r3
  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8000d1a:	2baa      	cmp	r3, #170	; 0xaa
 8000d1c:	d001      	beq.n	8000d22 <HAL_FLASHEx_OBGetConfig+0x16>
 8000d1e:	2bcc      	cmp	r3, #204	; 0xcc
 8000d20:	d10e      	bne.n	8000d40 <HAL_FLASHEx_OBGetConfig+0x34>
  pOBInit->RDPLevel   = FLASH_OB_GetRDP();
 8000d22:	7303      	strb	r3, [r0, #12]
  return (uint8_t)((FLASH->OPTR & FLASH_OPTR_USER) >> 16U);
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_FLASHEx_OBGetConfig+0x38>)
 8000d26:	69d1      	ldr	r1, [r2, #28]
 8000d28:	0c09      	lsrs	r1, r1, #16
 8000d2a:	2370      	movs	r3, #112	; 0x70
 8000d2c:	400b      	ands	r3, r1
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8000d2e:	7383      	strb	r3, [r0, #14]
  return (uint8_t)((FLASH->OPTR & (uint32_t)FLASH_OPTR_BOR_LEV) >> 16U);
 8000d30:	69d3      	ldr	r3, [r2, #28]
 8000d32:	031b      	lsls	r3, r3, #12
 8000d34:	0f1b      	lsrs	r3, r3, #28
  pOBInit->BORLevel   = FLASH_OB_GetBOR();
 8000d36:	7343      	strb	r3, [r0, #13]
  return (FLASH->OPTR & FLASH_OPTR_BOOT1) >> FLASH_OPTR_BOOT1_Pos;
 8000d38:	69d3      	ldr	r3, [r2, #28]
 8000d3a:	0fdb      	lsrs	r3, r3, #31
  pOBInit->BOOTBit1Config = FLASH_OB_GetBOOTBit1();
 8000d3c:	73c3      	strb	r3, [r0, #15]
}
 8000d3e:	4770      	bx	lr
    return (OB_RDP_LEVEL_1);
 8000d40:	23bb      	movs	r3, #187	; 0xbb
 8000d42:	e7ee      	b.n	8000d22 <HAL_FLASHEx_OBGetConfig+0x16>
 8000d44:	40022000 	.word	0x40022000

08000d48 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
  return HAL_OK;  
 8000d4c:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8000d4e:	07db      	lsls	r3, r3, #31
 8000d50:	d50c      	bpl.n	8000d6c <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000d52:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8000d56:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 8000d5a:	4906      	ldr	r1, [pc, #24]	; (8000d74 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8000d5c:	60d9      	str	r1, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8000d5e:	4906      	ldr	r1, [pc, #24]	; (8000d78 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 8000d60:	60d9      	str	r1, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d62:	f382 8810 	msr	PRIMASK, r2
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8000d66:	685b      	ldr	r3, [r3, #4]
      return HAL_ERROR;
 8000d68:	3001      	adds	r0, #1
 8000d6a:	4018      	ands	r0, r3
}
 8000d6c:	4770      	bx	lr
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	40022000 	.word	0x40022000
 8000d74:	89abcdef 	.word	0x89abcdef
 8000d78:	02030405 	.word	0x02030405

08000d7c <HAL_FLASHEx_DATAEEPROM_Lock>:
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8000d7c:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
 8000d7e:	6853      	ldr	r3, [r2, #4]
 8000d80:	2101      	movs	r1, #1
 8000d82:	430b      	orrs	r3, r1
 8000d84:	6053      	str	r3, [r2, #4]
}
 8000d86:	2000      	movs	r0, #0
 8000d88:	4770      	bx	lr
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	40022000 	.word	0x40022000

08000d90 <HAL_FLASHEx_DATAEEPROM_Program>:
{
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	0004      	movs	r4, r0
 8000d94:	000e      	movs	r6, r1
 8000d96:	0015      	movs	r5, r2
  __HAL_LOCK(&pFlash);
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 8000d9a:	7c1b      	ldrb	r3, [r3, #16]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d01f      	beq.n	8000de0 <HAL_FLASHEx_DATAEEPROM_Program+0x50>
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	741a      	strb	r2, [r3, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000da6:	4810      	ldr	r0, [pc, #64]	; (8000de8 <HAL_FLASHEx_DATAEEPROM_Program+0x58>)
 8000da8:	f7ff fe98 	bl	8000adc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000dac:	2800      	cmp	r0, #0
 8000dae:	d10c      	bne.n	8000dca <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	615a      	str	r2, [r3, #20]
    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8000db6:	2c02      	cmp	r4, #2
 8000db8:	d006      	beq.n	8000dc8 <HAL_FLASHEx_DATAEEPROM_Program+0x38>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8000dba:	2c01      	cmp	r4, #1
 8000dbc:	d009      	beq.n	8000dd2 <HAL_FLASHEx_DATAEEPROM_Program+0x42>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8000dbe:	2c00      	cmp	r4, #0
 8000dc0:	d10a      	bne.n	8000dd8 <HAL_FLASHEx_DATAEEPROM_Program+0x48>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8000dc2:	b2ed      	uxtb	r5, r5
 8000dc4:	7035      	strb	r5, [r6, #0]
 8000dc6:	e000      	b.n	8000dca <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
      *(__IO uint32_t *)Address = Data;
 8000dc8:	6035      	str	r5, [r6, #0]
  __HAL_UNLOCK(&pFlash);
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_FLASHEx_DATAEEPROM_Program+0x54>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	741a      	strb	r2, [r3, #16]
}
 8000dd0:	bd70      	pop	{r4, r5, r6, pc}
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8000dd2:	b2ad      	uxth	r5, r5
 8000dd4:	8035      	strh	r5, [r6, #0]
 8000dd6:	e7f8      	b.n	8000dca <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <HAL_FLASHEx_DATAEEPROM_Program+0x58>)
 8000dda:	f7ff fe7f 	bl	8000adc <FLASH_WaitForLastOperation>
 8000dde:	e7f4      	b.n	8000dca <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
  __HAL_LOCK(&pFlash);
 8000de0:	2002      	movs	r0, #2
 8000de2:	e7f5      	b.n	8000dd0 <HAL_FLASHEx_DATAEEPROM_Program+0x40>
 8000de4:	20000148 	.word	0x20000148
 8000de8:	0000c350 	.word	0x0000c350

08000dec <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram>:
  SET_BIT(FLASH->PECR, FLASH_PECR_FIX);
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram+0x10>)
 8000dee:	6851      	ldr	r1, [r2, #4]
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	430b      	orrs	r3, r1
 8000df6:	6053      	str	r3, [r2, #4]
}
 8000df8:	4770      	bx	lr
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	46de      	mov	lr, fp
 8000e04:	4657      	mov	r7, sl
 8000e06:	464e      	mov	r6, r9
 8000e08:	4645      	mov	r5, r8
 8000e0a:	b5e0      	push	{r5, r6, r7, lr}
 8000e0c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e0e:	680a      	ldr	r2, [r1, #0]
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	d100      	bne.n	8000e16 <HAL_GPIO_Init+0x16>
 8000e14:	e0b2      	b.n	8000f7c <HAL_GPIO_Init+0x17c>
  uint32_t position = 0x00U;
 8000e16:	2400      	movs	r4, #0
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e18:	2301      	movs	r3, #1
 8000e1a:	4699      	mov	r9, r3

    if (iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e1c:	330f      	adds	r3, #15
 8000e1e:	469a      	mov	sl, r3
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e20:	3b0d      	subs	r3, #13
 8000e22:	4698      	mov	r8, r3
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e24:	4b59      	ldr	r3, [pc, #356]	; (8000f8c <HAL_GPIO_Init+0x18c>)
 8000e26:	18c3      	adds	r3, r0, r3
 8000e28:	425d      	negs	r5, r3
 8000e2a:	416b      	adcs	r3, r5
 8000e2c:	425b      	negs	r3, r3
 8000e2e:	9303      	str	r3, [sp, #12]
 8000e30:	e042      	b.n	8000eb8 <HAL_GPIO_Init+0xb8>
        temp = GPIOx->AFR[position >> 3U];
 8000e32:	08e5      	lsrs	r5, r4, #3
 8000e34:	00ad      	lsls	r5, r5, #2
 8000e36:	1945      	adds	r5, r0, r5
 8000e38:	9501      	str	r5, [sp, #4]
 8000e3a:	6a2d      	ldr	r5, [r5, #32]
 8000e3c:	46ac      	mov	ip, r5
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8000e3e:	2707      	movs	r7, #7
 8000e40:	4027      	ands	r7, r4
 8000e42:	00bf      	lsls	r7, r7, #2
 8000e44:	250f      	movs	r5, #15
 8000e46:	9702      	str	r7, [sp, #8]
 8000e48:	40bd      	lsls	r5, r7
 8000e4a:	46ab      	mov	fp, r5
 8000e4c:	4665      	mov	r5, ip
 8000e4e:	465f      	mov	r7, fp
 8000e50:	43bd      	bics	r5, r7
 8000e52:	46ac      	mov	ip, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e54:	690d      	ldr	r5, [r1, #16]
 8000e56:	9f02      	ldr	r7, [sp, #8]
 8000e58:	40bd      	lsls	r5, r7
 8000e5a:	002f      	movs	r7, r5
 8000e5c:	4665      	mov	r5, ip
 8000e5e:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3U] = temp;
 8000e60:	9d01      	ldr	r5, [sp, #4]
 8000e62:	622f      	str	r7, [r5, #32]
 8000e64:	e055      	b.n	8000f12 <HAL_GPIO_Init+0x112>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e66:	2500      	movs	r5, #0
 8000e68:	40b5      	lsls	r5, r6
 8000e6a:	4666      	mov	r6, ip
 8000e6c:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e6e:	609d      	str	r5, [r3, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e70:	4b47      	ldr	r3, [pc, #284]	; (8000f90 <HAL_GPIO_Init+0x190>)
 8000e72:	681b      	ldr	r3, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	43d5      	mvns	r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e76:	684e      	ldr	r6, [r1, #4]
 8000e78:	03f6      	lsls	r6, r6, #15
 8000e7a:	d477      	bmi.n	8000f6c <HAL_GPIO_Init+0x16c>
        temp &= ~((uint32_t)iocurrent);
 8000e7c:	402b      	ands	r3, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000e7e:	4e44      	ldr	r6, [pc, #272]	; (8000f90 <HAL_GPIO_Init+0x190>)
 8000e80:	6033      	str	r3, [r6, #0]

        temp = EXTI->EMR;
 8000e82:	6873      	ldr	r3, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e84:	684e      	ldr	r6, [r1, #4]
 8000e86:	03b6      	lsls	r6, r6, #14
 8000e88:	d472      	bmi.n	8000f70 <HAL_GPIO_Init+0x170>
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	402b      	ands	r3, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000e8c:	4e40      	ldr	r6, [pc, #256]	; (8000f90 <HAL_GPIO_Init+0x190>)
 8000e8e:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e90:	68b3      	ldr	r3, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e92:	684e      	ldr	r6, [r1, #4]
 8000e94:	02f6      	lsls	r6, r6, #11
 8000e96:	d46d      	bmi.n	8000f74 <HAL_GPIO_Init+0x174>
        temp &= ~((uint32_t)iocurrent);
 8000e98:	402b      	ands	r3, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000e9a:	4e3d      	ldr	r6, [pc, #244]	; (8000f90 <HAL_GPIO_Init+0x190>)
 8000e9c:	60b3      	str	r3, [r6, #8]

        temp = EXTI->FTSR;
 8000e9e:	68f3      	ldr	r3, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ea0:	684e      	ldr	r6, [r1, #4]
 8000ea2:	02b6      	lsls	r6, r6, #10
 8000ea4:	d468      	bmi.n	8000f78 <HAL_GPIO_Init+0x178>
        temp &= ~((uint32_t)iocurrent);
 8000ea6:	402b      	ands	r3, r5
 8000ea8:	001a      	movs	r2, r3
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <HAL_GPIO_Init+0x190>)
 8000eac:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000eae:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8000eb0:	680a      	ldr	r2, [r1, #0]
 8000eb2:	0013      	movs	r3, r2
 8000eb4:	40e3      	lsrs	r3, r4
 8000eb6:	d061      	beq.n	8000f7c <HAL_GPIO_Init+0x17c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000eb8:	464d      	mov	r5, r9
 8000eba:	40a5      	lsls	r5, r4
 8000ebc:	402a      	ands	r2, r5
    if (iocurrent)
 8000ebe:	d0f6      	beq.n	8000eae <HAL_GPIO_Init+0xae>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec0:	684b      	ldr	r3, [r1, #4]
 8000ec2:	4656      	mov	r6, sl
 8000ec4:	43b3      	bics	r3, r6
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d813      	bhi.n	8000ef4 <HAL_GPIO_Init+0xf4>
        temp = GPIOx->OSPEEDR;
 8000ecc:	6883      	ldr	r3, [r0, #8]
 8000ece:	0067      	lsls	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000ed0:	4646      	mov	r6, r8
 8000ed2:	40be      	lsls	r6, r7
 8000ed4:	43b3      	bics	r3, r6
 8000ed6:	001e      	movs	r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed8:	68cb      	ldr	r3, [r1, #12]
 8000eda:	40bb      	lsls	r3, r7
 8000edc:	4333      	orrs	r3, r6
        GPIOx->OSPEEDR = temp;
 8000ede:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ee0:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee2:	43ab      	bics	r3, r5
 8000ee4:	001d      	movs	r5, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ee6:	684b      	ldr	r3, [r1, #4]
 8000ee8:	091b      	lsrs	r3, r3, #4
 8000eea:	464e      	mov	r6, r9
 8000eec:	4033      	ands	r3, r6
 8000eee:	40a3      	lsls	r3, r4
 8000ef0:	432b      	orrs	r3, r5
        GPIOx->OTYPER = temp;
 8000ef2:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ef4:	68c7      	ldr	r7, [r0, #12]
 8000ef6:	0066      	lsls	r6, r4, #1
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ef8:	4643      	mov	r3, r8
 8000efa:	40b3      	lsls	r3, r6
 8000efc:	43db      	mvns	r3, r3
 8000efe:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f00:	688d      	ldr	r5, [r1, #8]
 8000f02:	40b5      	lsls	r5, r6
 8000f04:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000f06:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f08:	684d      	ldr	r5, [r1, #4]
 8000f0a:	4657      	mov	r7, sl
 8000f0c:	43bd      	bics	r5, r7
 8000f0e:	2d02      	cmp	r5, #2
 8000f10:	d08f      	beq.n	8000e32 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8000f12:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f14:	401d      	ands	r5, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f16:	684b      	ldr	r3, [r1, #4]
 8000f18:	4647      	mov	r7, r8
 8000f1a:	403b      	ands	r3, r7
 8000f1c:	40b3      	lsls	r3, r6
 8000f1e:	432b      	orrs	r3, r5
      GPIOx->MODER = temp;
 8000f20:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f22:	684b      	ldr	r3, [r1, #4]
 8000f24:	2580      	movs	r5, #128	; 0x80
 8000f26:	056d      	lsls	r5, r5, #21
 8000f28:	422b      	tst	r3, r5
 8000f2a:	d0c0      	beq.n	8000eae <HAL_GPIO_Init+0xae>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2c:	4d19      	ldr	r5, [pc, #100]	; (8000f94 <HAL_GPIO_Init+0x194>)
 8000f2e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f30:	464e      	mov	r6, r9
 8000f32:	4333      	orrs	r3, r6
 8000f34:	636b      	str	r3, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f36:	08a3      	lsrs	r3, r4, #2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4d17      	ldr	r5, [pc, #92]	; (8000f98 <HAL_GPIO_Init+0x198>)
 8000f3c:	46ac      	mov	ip, r5
 8000f3e:	4463      	add	r3, ip
 8000f40:	689d      	ldr	r5, [r3, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000f42:	4646      	mov	r6, r8
 8000f44:	4026      	ands	r6, r4
 8000f46:	00b6      	lsls	r6, r6, #2
 8000f48:	270f      	movs	r7, #15
 8000f4a:	40b7      	lsls	r7, r6
 8000f4c:	43bd      	bics	r5, r7
 8000f4e:	46ac      	mov	ip, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f50:	25a0      	movs	r5, #160	; 0xa0
 8000f52:	05ed      	lsls	r5, r5, #23
 8000f54:	42a8      	cmp	r0, r5
 8000f56:	d086      	beq.n	8000e66 <HAL_GPIO_Init+0x66>
 8000f58:	4d10      	ldr	r5, [pc, #64]	; (8000f9c <HAL_GPIO_Init+0x19c>)
 8000f5a:	42a8      	cmp	r0, r5
 8000f5c:	d004      	beq.n	8000f68 <HAL_GPIO_Init+0x168>
 8000f5e:	9d03      	ldr	r5, [sp, #12]
 8000f60:	4647      	mov	r7, r8
 8000f62:	43bd      	bics	r5, r7
 8000f64:	3506      	adds	r5, #6
 8000f66:	e77f      	b.n	8000e68 <HAL_GPIO_Init+0x68>
 8000f68:	2501      	movs	r5, #1
 8000f6a:	e77d      	b.n	8000e68 <HAL_GPIO_Init+0x68>
          temp |= iocurrent;
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	e786      	b.n	8000e7e <HAL_GPIO_Init+0x7e>
          temp |= iocurrent;
 8000f70:	4313      	orrs	r3, r2
 8000f72:	e78b      	b.n	8000e8c <HAL_GPIO_Init+0x8c>
          temp |= iocurrent;
 8000f74:	4313      	orrs	r3, r2
 8000f76:	e790      	b.n	8000e9a <HAL_GPIO_Init+0x9a>
          temp |= iocurrent;
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	e796      	b.n	8000eaa <HAL_GPIO_Init+0xaa>
  }
}
 8000f7c:	b005      	add	sp, #20
 8000f7e:	bc3c      	pop	{r2, r3, r4, r5}
 8000f80:	4690      	mov	r8, r2
 8000f82:	4699      	mov	r9, r3
 8000f84:	46a2      	mov	sl, r4
 8000f86:	46ab      	mov	fp, r5
 8000f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	affff800 	.word	0xaffff800
 8000f90:	40010400 	.word	0x40010400
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	50000400 	.word	0x50000400

08000fa0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	d101      	bne.n	8000fa8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8000fa4:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000fa6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000fa8:	6181      	str	r1, [r0, #24]
 8000faa:	e7fc      	b.n	8000fa6 <HAL_GPIO_WritePin+0x6>

08000fac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fac:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8000fae:	4b26      	ldr	r3, [pc, #152]	; (8001048 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000fb0:	68d9      	ldr	r1, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fb2:	230c      	movs	r3, #12
 8000fb4:	400b      	ands	r3, r1
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d043      	beq.n	8001042 <HAL_RCC_GetSysClockFreq+0x96>
 8000fba:	2b0c      	cmp	r3, #12
 8000fbc:	d014      	beq.n	8000fe8 <HAL_RCC_GetSysClockFreq+0x3c>
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d008      	beq.n	8000fd4 <HAL_RCC_GetSysClockFreq+0x28>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	041b      	lsls	r3, r3, #16
 8000fc8:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000fca:	3301      	adds	r3, #1
 8000fcc:	2080      	movs	r0, #128	; 0x80
 8000fce:	0200      	lsls	r0, r0, #8
 8000fd0:	4098      	lsls	r0, r3
      break;
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_GetSysClockFreq+0x3a>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000fd6:	6818      	ldr	r0, [r3, #0]
 8000fd8:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8000fda:	17c0      	asrs	r0, r0, #31
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HAL_RCC_GetSysClockFreq+0xa0>)
 8000fde:	4018      	ands	r0, r3
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000fe2:	469c      	mov	ip, r3
 8000fe4:	4460      	add	r0, ip
    }
  }
  return sysclockfreq;
}
 8000fe6:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000fe8:	028b      	lsls	r3, r1, #10
 8000fea:	0f1b      	lsrs	r3, r3, #28
 8000fec:	4a19      	ldr	r2, [pc, #100]	; (8001054 <HAL_RCC_GetSysClockFreq+0xa8>)
 8000fee:	5cd2      	ldrb	r2, [r2, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000ff0:	0209      	lsls	r1, r1, #8
 8000ff2:	0f89      	lsrs	r1, r1, #30
 8000ff4:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	03db      	lsls	r3, r3, #15
 8000ffc:	d40d      	bmi.n	800101a <HAL_RCC_GetSysClockFreq+0x6e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	06db      	lsls	r3, r3, #27
 8001004:	d513      	bpl.n	800102e <HAL_RCC_GetSysClockFreq+0x82>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001006:	0153      	lsls	r3, r2, #5
 8001008:	1a9b      	subs	r3, r3, r2
 800100a:	0198      	lsls	r0, r3, #6
 800100c:	1ac0      	subs	r0, r0, r3
 800100e:	00c0      	lsls	r0, r0, #3
 8001010:	1880      	adds	r0, r0, r2
 8001012:	0200      	lsls	r0, r0, #8
 8001014:	f7ff f8c2 	bl	800019c <__udivsi3>
 8001018:	e7e5      	b.n	8000fe6 <HAL_RCC_GetSysClockFreq+0x3a>
        pllvco = (HSE_VALUE * pllm) / plld;
 800101a:	0150      	lsls	r0, r2, #5
 800101c:	1a80      	subs	r0, r0, r2
 800101e:	0183      	lsls	r3, r0, #6
 8001020:	1a18      	subs	r0, r3, r0
 8001022:	00c0      	lsls	r0, r0, #3
 8001024:	1880      	adds	r0, r0, r2
 8001026:	0240      	lsls	r0, r0, #9
 8001028:	f7ff f8b8 	bl	800019c <__udivsi3>
 800102c:	e7db      	b.n	8000fe6 <HAL_RCC_GetSysClockFreq+0x3a>
         pllvco = (HSI_VALUE * pllm) / plld;
 800102e:	0153      	lsls	r3, r2, #5
 8001030:	1a9b      	subs	r3, r3, r2
 8001032:	0198      	lsls	r0, r3, #6
 8001034:	1ac0      	subs	r0, r0, r3
 8001036:	00c0      	lsls	r0, r0, #3
 8001038:	1880      	adds	r0, r0, r2
 800103a:	0280      	lsls	r0, r0, #10
 800103c:	f7ff f8ae 	bl	800019c <__udivsi3>
 8001040:	e7d1      	b.n	8000fe6 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_RCC_GetSysClockFreq+0xac>)
 8001044:	e7cf      	b.n	8000fe6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	40021000 	.word	0x40021000
 800104c:	ff48e500 	.word	0xff48e500
 8001050:	00f42400 	.word	0x00f42400
 8001054:	080030b8 	.word	0x080030b8
 8001058:	007a1200 	.word	0x007a1200

0800105c <HAL_RCC_OscConfig>:
{
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	46d6      	mov	lr, sl
 8001060:	464f      	mov	r7, r9
 8001062:	4646      	mov	r6, r8
 8001064:	b5c0      	push	{r6, r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 800106a:	d100      	bne.n	800106e <HAL_RCC_OscConfig+0x12>
 800106c:	e28e      	b.n	800158c <HAL_RCC_OscConfig+0x530>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800106e:	4bbf      	ldr	r3, [pc, #764]	; (800136c <HAL_RCC_OscConfig+0x310>)
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	250c      	movs	r5, #12
 8001074:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	2680      	movs	r6, #128	; 0x80
 800107a:	0276      	lsls	r6, r6, #9
 800107c:	4016      	ands	r6, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107e:	6803      	ldr	r3, [r0, #0]
 8001080:	07db      	lsls	r3, r3, #31
 8001082:	d53c      	bpl.n	80010fe <HAL_RCC_OscConfig+0xa2>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001084:	2d08      	cmp	r5, #8
 8001086:	d031      	beq.n	80010ec <HAL_RCC_OscConfig+0x90>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001088:	2d0c      	cmp	r5, #12
 800108a:	d02d      	beq.n	80010e8 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108c:	6863      	ldr	r3, [r4, #4]
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	0252      	lsls	r2, r2, #9
 8001092:	4293      	cmp	r3, r2
 8001094:	d05d      	beq.n	8001152 <HAL_RCC_OscConfig+0xf6>
 8001096:	22a0      	movs	r2, #160	; 0xa0
 8001098:	02d2      	lsls	r2, r2, #11
 800109a:	4293      	cmp	r3, r2
 800109c:	d060      	beq.n	8001160 <HAL_RCC_OscConfig+0x104>
 800109e:	49b3      	ldr	r1, [pc, #716]	; (800136c <HAL_RCC_OscConfig+0x310>)
 80010a0:	680b      	ldr	r3, [r1, #0]
 80010a2:	4ab3      	ldr	r2, [pc, #716]	; (8001370 <HAL_RCC_OscConfig+0x314>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	600b      	str	r3, [r1, #0]
 80010a8:	680b      	ldr	r3, [r1, #0]
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	0252      	lsls	r2, r2, #9
 80010ae:	4013      	ands	r3, r2
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	9b01      	ldr	r3, [sp, #4]
 80010b4:	680b      	ldr	r3, [r1, #0]
 80010b6:	4aaf      	ldr	r2, [pc, #700]	; (8001374 <HAL_RCC_OscConfig+0x318>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	600b      	str	r3, [r1, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010bc:	6863      	ldr	r3, [r4, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d05a      	beq.n	8001178 <HAL_RCC_OscConfig+0x11c>
        tickstart = HAL_GetTick();
 80010c2:	f7ff fbfb 	bl	80008bc <HAL_GetTick>
 80010c6:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010c8:	4ba8      	ldr	r3, [pc, #672]	; (800136c <HAL_RCC_OscConfig+0x310>)
 80010ca:	4698      	mov	r8, r3
 80010cc:	2780      	movs	r7, #128	; 0x80
 80010ce:	02bf      	lsls	r7, r7, #10
 80010d0:	4643      	mov	r3, r8
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	423b      	tst	r3, r7
 80010d6:	d112      	bne.n	80010fe <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fbf0 	bl	80008bc <HAL_GetTick>
 80010dc:	464b      	mov	r3, r9
 80010de:	1ac0      	subs	r0, r0, r3
 80010e0:	2864      	cmp	r0, #100	; 0x64
 80010e2:	d9f5      	bls.n	80010d0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80010e4:	2003      	movs	r0, #3
 80010e6:	e252      	b.n	800158e <HAL_RCC_OscConfig+0x532>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010e8:	2e00      	cmp	r6, #0
 80010ea:	d0cf      	beq.n	800108c <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ec:	4b9f      	ldr	r3, [pc, #636]	; (800136c <HAL_RCC_OscConfig+0x310>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	039b      	lsls	r3, r3, #14
 80010f2:	d504      	bpl.n	80010fe <HAL_RCC_OscConfig+0xa2>
        return HAL_ERROR;
 80010f4:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f6:	6863      	ldr	r3, [r4, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d100      	bne.n	80010fe <HAL_RCC_OscConfig+0xa2>
 80010fc:	e247      	b.n	800158e <HAL_RCC_OscConfig+0x532>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	079b      	lsls	r3, r3, #30
 8001102:	d573      	bpl.n	80011ec <HAL_RCC_OscConfig+0x190>
    hsi_state = RCC_OscInitStruct->HSIState;
 8001104:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001106:	069a      	lsls	r2, r3, #26
 8001108:	d505      	bpl.n	8001116 <HAL_RCC_OscConfig+0xba>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800110a:	4898      	ldr	r0, [pc, #608]	; (800136c <HAL_RCC_OscConfig+0x310>)
 800110c:	6802      	ldr	r2, [r0, #0]
 800110e:	2120      	movs	r1, #32
 8001110:	430a      	orrs	r2, r1
 8001112:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001114:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001116:	2d04      	cmp	r5, #4
 8001118:	d043      	beq.n	80011a2 <HAL_RCC_OscConfig+0x146>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800111a:	2d0c      	cmp	r5, #12
 800111c:	d03f      	beq.n	800119e <HAL_RCC_OscConfig+0x142>
      if(hsi_state != RCC_HSI_OFF)
 800111e:	2b00      	cmp	r3, #0
 8001120:	d100      	bne.n	8001124 <HAL_RCC_OscConfig+0xc8>
 8001122:	e0b9      	b.n	8001298 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001124:	4991      	ldr	r1, [pc, #580]	; (800136c <HAL_RCC_OscConfig+0x310>)
 8001126:	680a      	ldr	r2, [r1, #0]
 8001128:	2009      	movs	r0, #9
 800112a:	4382      	bics	r2, r0
 800112c:	4313      	orrs	r3, r2
 800112e:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8001130:	f7ff fbc4 	bl	80008bc <HAL_GetTick>
 8001134:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001136:	4f8d      	ldr	r7, [pc, #564]	; (800136c <HAL_RCC_OscConfig+0x310>)
 8001138:	2604      	movs	r6, #4
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	421e      	tst	r6, r3
 800113e:	d000      	beq.n	8001142 <HAL_RCC_OscConfig+0xe6>
 8001140:	e0a1      	b.n	8001286 <HAL_RCC_OscConfig+0x22a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001142:	f7ff fbbb 	bl	80008bc <HAL_GetTick>
 8001146:	4643      	mov	r3, r8
 8001148:	1ac0      	subs	r0, r0, r3
 800114a:	2802      	cmp	r0, #2
 800114c:	d9f5      	bls.n	800113a <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 800114e:	2003      	movs	r0, #3
 8001150:	e21d      	b.n	800158e <HAL_RCC_OscConfig+0x532>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001152:	4a86      	ldr	r2, [pc, #536]	; (800136c <HAL_RCC_OscConfig+0x310>)
 8001154:	6811      	ldr	r1, [r2, #0]
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	025b      	lsls	r3, r3, #9
 800115a:	430b      	orrs	r3, r1
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e7ad      	b.n	80010bc <HAL_RCC_OscConfig+0x60>
 8001160:	4b82      	ldr	r3, [pc, #520]	; (800136c <HAL_RCC_OscConfig+0x310>)
 8001162:	6819      	ldr	r1, [r3, #0]
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	02d2      	lsls	r2, r2, #11
 8001168:	430a      	orrs	r2, r1
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	6819      	ldr	r1, [r3, #0]
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	0252      	lsls	r2, r2, #9
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e7a1      	b.n	80010bc <HAL_RCC_OscConfig+0x60>
        tickstart = HAL_GetTick();
 8001178:	f7ff fba0 	bl	80008bc <HAL_GetTick>
 800117c:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800117e:	4b7b      	ldr	r3, [pc, #492]	; (800136c <HAL_RCC_OscConfig+0x310>)
 8001180:	4698      	mov	r8, r3
 8001182:	2780      	movs	r7, #128	; 0x80
 8001184:	02bf      	lsls	r7, r7, #10
 8001186:	4643      	mov	r3, r8
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	423b      	tst	r3, r7
 800118c:	d0b7      	beq.n	80010fe <HAL_RCC_OscConfig+0xa2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800118e:	f7ff fb95 	bl	80008bc <HAL_GetTick>
 8001192:	464b      	mov	r3, r9
 8001194:	1ac0      	subs	r0, r0, r3
 8001196:	2864      	cmp	r0, #100	; 0x64
 8001198:	d9f5      	bls.n	8001186 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800119a:	2003      	movs	r0, #3
 800119c:	e1f7      	b.n	800158e <HAL_RCC_OscConfig+0x532>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800119e:	2e00      	cmp	r6, #0
 80011a0:	d1bd      	bne.n	800111e <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80011a2:	4a72      	ldr	r2, [pc, #456]	; (800136c <HAL_RCC_OscConfig+0x310>)
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	0752      	lsls	r2, r2, #29
 80011a8:	d503      	bpl.n	80011b2 <HAL_RCC_OscConfig+0x156>
        return HAL_ERROR;
 80011aa:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d100      	bne.n	80011b2 <HAL_RCC_OscConfig+0x156>
 80011b0:	e1ed      	b.n	800158e <HAL_RCC_OscConfig+0x532>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b2:	4e6e      	ldr	r6, [pc, #440]	; (800136c <HAL_RCC_OscConfig+0x310>)
 80011b4:	6871      	ldr	r1, [r6, #4]
 80011b6:	6922      	ldr	r2, [r4, #16]
 80011b8:	0212      	lsls	r2, r2, #8
 80011ba:	486f      	ldr	r0, [pc, #444]	; (8001378 <HAL_RCC_OscConfig+0x31c>)
 80011bc:	4001      	ands	r1, r0
 80011be:	430a      	orrs	r2, r1
 80011c0:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011c2:	6832      	ldr	r2, [r6, #0]
 80011c4:	2109      	movs	r1, #9
 80011c6:	438a      	bics	r2, r1
 80011c8:	4313      	orrs	r3, r2
 80011ca:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011cc:	f7ff feee 	bl	8000fac <HAL_RCC_GetSysClockFreq>
 80011d0:	68f3      	ldr	r3, [r6, #12]
 80011d2:	061b      	lsls	r3, r3, #24
 80011d4:	0f1b      	lsrs	r3, r3, #28
 80011d6:	4a69      	ldr	r2, [pc, #420]	; (800137c <HAL_RCC_OscConfig+0x320>)
 80011d8:	5cd3      	ldrb	r3, [r2, r3]
 80011da:	40d8      	lsrs	r0, r3
 80011dc:	4b68      	ldr	r3, [pc, #416]	; (8001380 <HAL_RCC_OscConfig+0x324>)
 80011de:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f7ff fb25 	bl	8000830 <HAL_InitTick>
      if(status != HAL_OK)
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d000      	beq.n	80011ec <HAL_RCC_OscConfig+0x190>
 80011ea:	e1d0      	b.n	800158e <HAL_RCC_OscConfig+0x532>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	06db      	lsls	r3, r3, #27
 80011f0:	d52c      	bpl.n	800124c <HAL_RCC_OscConfig+0x1f0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80011f2:	2d00      	cmp	r5, #0
 80011f4:	d165      	bne.n	80012c2 <HAL_RCC_OscConfig+0x266>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011f6:	4b5d      	ldr	r3, [pc, #372]	; (800136c <HAL_RCC_OscConfig+0x310>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	059b      	lsls	r3, r3, #22
 80011fc:	d504      	bpl.n	8001208 <HAL_RCC_OscConfig+0x1ac>
        return HAL_ERROR;
 80011fe:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001200:	69a3      	ldr	r3, [r4, #24]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d100      	bne.n	8001208 <HAL_RCC_OscConfig+0x1ac>
 8001206:	e1c2      	b.n	800158e <HAL_RCC_OscConfig+0x532>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001208:	4b58      	ldr	r3, [pc, #352]	; (800136c <HAL_RCC_OscConfig+0x310>)
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	495d      	ldr	r1, [pc, #372]	; (8001384 <HAL_RCC_OscConfig+0x328>)
 800120e:	400a      	ands	r2, r1
 8001210:	6a21      	ldr	r1, [r4, #32]
 8001212:	430a      	orrs	r2, r1
 8001214:	605a      	str	r2, [r3, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001216:	6859      	ldr	r1, [r3, #4]
 8001218:	69e2      	ldr	r2, [r4, #28]
 800121a:	0612      	lsls	r2, r2, #24
 800121c:	0209      	lsls	r1, r1, #8
 800121e:	0a09      	lsrs	r1, r1, #8
 8001220:	430a      	orrs	r2, r1
 8001222:	605a      	str	r2, [r3, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001224:	68da      	ldr	r2, [r3, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001226:	6a23      	ldr	r3, [r4, #32]
 8001228:	0b59      	lsrs	r1, r3, #13
 800122a:	3101      	adds	r1, #1
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001232:	0612      	lsls	r2, r2, #24
 8001234:	0f12      	lsrs	r2, r2, #28
 8001236:	4951      	ldr	r1, [pc, #324]	; (800137c <HAL_RCC_OscConfig+0x320>)
 8001238:	5c8a      	ldrb	r2, [r1, r2]
 800123a:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800123c:	4a50      	ldr	r2, [pc, #320]	; (8001380 <HAL_RCC_OscConfig+0x324>)
 800123e:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001240:	2003      	movs	r0, #3
 8001242:	f7ff faf5 	bl	8000830 <HAL_InitTick>
        if(status != HAL_OK)
 8001246:	2800      	cmp	r0, #0
 8001248:	d000      	beq.n	800124c <HAL_RCC_OscConfig+0x1f0>
 800124a:	e1a0      	b.n	800158e <HAL_RCC_OscConfig+0x532>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	071b      	lsls	r3, r3, #28
 8001250:	d400      	bmi.n	8001254 <HAL_RCC_OscConfig+0x1f8>
 8001252:	e09b      	b.n	800138c <HAL_RCC_OscConfig+0x330>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001254:	6963      	ldr	r3, [r4, #20]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d072      	beq.n	8001340 <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_LSI_ENABLE();
 800125a:	4a44      	ldr	r2, [pc, #272]	; (800136c <HAL_RCC_OscConfig+0x310>)
 800125c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800125e:	2101      	movs	r1, #1
 8001260:	430b      	orrs	r3, r1
 8001262:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001264:	f7ff fb2a 	bl	80008bc <HAL_GetTick>
 8001268:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800126a:	4f40      	ldr	r7, [pc, #256]	; (800136c <HAL_RCC_OscConfig+0x310>)
 800126c:	2602      	movs	r6, #2
 800126e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001270:	421e      	tst	r6, r3
 8001272:	d000      	beq.n	8001276 <HAL_RCC_OscConfig+0x21a>
 8001274:	e08a      	b.n	800138c <HAL_RCC_OscConfig+0x330>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001276:	f7ff fb21 	bl	80008bc <HAL_GetTick>
 800127a:	4643      	mov	r3, r8
 800127c:	1ac0      	subs	r0, r0, r3
 800127e:	2802      	cmp	r0, #2
 8001280:	d9f5      	bls.n	800126e <HAL_RCC_OscConfig+0x212>
          return HAL_TIMEOUT;
 8001282:	2003      	movs	r0, #3
 8001284:	e183      	b.n	800158e <HAL_RCC_OscConfig+0x532>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001286:	4939      	ldr	r1, [pc, #228]	; (800136c <HAL_RCC_OscConfig+0x310>)
 8001288:	684a      	ldr	r2, [r1, #4]
 800128a:	6923      	ldr	r3, [r4, #16]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	483a      	ldr	r0, [pc, #232]	; (8001378 <HAL_RCC_OscConfig+0x31c>)
 8001290:	4002      	ands	r2, r0
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]
 8001296:	e7a9      	b.n	80011ec <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_DISABLE();
 8001298:	4a34      	ldr	r2, [pc, #208]	; (800136c <HAL_RCC_OscConfig+0x310>)
 800129a:	6813      	ldr	r3, [r2, #0]
 800129c:	2101      	movs	r1, #1
 800129e:	438b      	bics	r3, r1
 80012a0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80012a2:	f7ff fb0b 	bl	80008bc <HAL_GetTick>
 80012a6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012a8:	4f30      	ldr	r7, [pc, #192]	; (800136c <HAL_RCC_OscConfig+0x310>)
 80012aa:	2604      	movs	r6, #4
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	421e      	tst	r6, r3
 80012b0:	d09c      	beq.n	80011ec <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff fb03 	bl	80008bc <HAL_GetTick>
 80012b6:	4643      	mov	r3, r8
 80012b8:	1ac0      	subs	r0, r0, r3
 80012ba:	2802      	cmp	r0, #2
 80012bc:	d9f6      	bls.n	80012ac <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 80012be:	2003      	movs	r0, #3
 80012c0:	e165      	b.n	800158e <HAL_RCC_OscConfig+0x532>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012c2:	69a3      	ldr	r3, [r4, #24]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d025      	beq.n	8001314 <HAL_RCC_OscConfig+0x2b8>
        __HAL_RCC_MSI_ENABLE();
 80012c8:	4a28      	ldr	r2, [pc, #160]	; (800136c <HAL_RCC_OscConfig+0x310>)
 80012ca:	6811      	ldr	r1, [r2, #0]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	430b      	orrs	r3, r1
 80012d2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80012d4:	f7ff faf2 	bl	80008bc <HAL_GetTick>
 80012d8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012da:	4f24      	ldr	r7, [pc, #144]	; (800136c <HAL_RCC_OscConfig+0x310>)
 80012dc:	2680      	movs	r6, #128	; 0x80
 80012de:	00b6      	lsls	r6, r6, #2
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	4233      	tst	r3, r6
 80012e4:	d107      	bne.n	80012f6 <HAL_RCC_OscConfig+0x29a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012e6:	f7ff fae9 	bl	80008bc <HAL_GetTick>
 80012ea:	4643      	mov	r3, r8
 80012ec:	1ac0      	subs	r0, r0, r3
 80012ee:	2802      	cmp	r0, #2
 80012f0:	d9f6      	bls.n	80012e0 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 80012f2:	2003      	movs	r0, #3
 80012f4:	e14b      	b.n	800158e <HAL_RCC_OscConfig+0x532>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012f6:	491d      	ldr	r1, [pc, #116]	; (800136c <HAL_RCC_OscConfig+0x310>)
 80012f8:	684b      	ldr	r3, [r1, #4]
 80012fa:	4a22      	ldr	r2, [pc, #136]	; (8001384 <HAL_RCC_OscConfig+0x328>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	6a22      	ldr	r2, [r4, #32]
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001304:	684a      	ldr	r2, [r1, #4]
 8001306:	69e3      	ldr	r3, [r4, #28]
 8001308:	061b      	lsls	r3, r3, #24
 800130a:	0212      	lsls	r2, r2, #8
 800130c:	0a12      	lsrs	r2, r2, #8
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]
 8001312:	e79b      	b.n	800124c <HAL_RCC_OscConfig+0x1f0>
        __HAL_RCC_MSI_DISABLE();
 8001314:	4a15      	ldr	r2, [pc, #84]	; (800136c <HAL_RCC_OscConfig+0x310>)
 8001316:	6813      	ldr	r3, [r2, #0]
 8001318:	491b      	ldr	r1, [pc, #108]	; (8001388 <HAL_RCC_OscConfig+0x32c>)
 800131a:	400b      	ands	r3, r1
 800131c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800131e:	f7ff facd 	bl	80008bc <HAL_GetTick>
 8001322:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001324:	4f11      	ldr	r7, [pc, #68]	; (800136c <HAL_RCC_OscConfig+0x310>)
 8001326:	2680      	movs	r6, #128	; 0x80
 8001328:	00b6      	lsls	r6, r6, #2
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	4233      	tst	r3, r6
 800132e:	d08d      	beq.n	800124c <HAL_RCC_OscConfig+0x1f0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001330:	f7ff fac4 	bl	80008bc <HAL_GetTick>
 8001334:	4643      	mov	r3, r8
 8001336:	1ac0      	subs	r0, r0, r3
 8001338:	2802      	cmp	r0, #2
 800133a:	d9f6      	bls.n	800132a <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 800133c:	2003      	movs	r0, #3
 800133e:	e126      	b.n	800158e <HAL_RCC_OscConfig+0x532>
      __HAL_RCC_LSI_DISABLE();
 8001340:	4a0a      	ldr	r2, [pc, #40]	; (800136c <HAL_RCC_OscConfig+0x310>)
 8001342:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001344:	2101      	movs	r1, #1
 8001346:	438b      	bics	r3, r1
 8001348:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 800134a:	f7ff fab7 	bl	80008bc <HAL_GetTick>
 800134e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001350:	4f06      	ldr	r7, [pc, #24]	; (800136c <HAL_RCC_OscConfig+0x310>)
 8001352:	2602      	movs	r6, #2
 8001354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001356:	421e      	tst	r6, r3
 8001358:	d018      	beq.n	800138c <HAL_RCC_OscConfig+0x330>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135a:	f7ff faaf 	bl	80008bc <HAL_GetTick>
 800135e:	4643      	mov	r3, r8
 8001360:	1ac0      	subs	r0, r0, r3
 8001362:	2802      	cmp	r0, #2
 8001364:	d9f6      	bls.n	8001354 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8001366:	2003      	movs	r0, #3
 8001368:	e111      	b.n	800158e <HAL_RCC_OscConfig+0x532>
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	40021000 	.word	0x40021000
 8001370:	fffeffff 	.word	0xfffeffff
 8001374:	fffbffff 	.word	0xfffbffff
 8001378:	ffffe0ff 	.word	0xffffe0ff
 800137c:	080030a0 	.word	0x080030a0
 8001380:	20000000 	.word	0x20000000
 8001384:	ffff1fff 	.word	0xffff1fff
 8001388:	fffffeff 	.word	0xfffffeff
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800138c:	6823      	ldr	r3, [r4, #0]
 800138e:	075b      	lsls	r3, r3, #29
 8001390:	d400      	bmi.n	8001394 <HAL_RCC_OscConfig+0x338>
 8001392:	e085      	b.n	80014a0 <HAL_RCC_OscConfig+0x444>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001394:	4b82      	ldr	r3, [pc, #520]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 8001396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001398:	2200      	movs	r2, #0
 800139a:	4692      	mov	sl, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	d407      	bmi.n	80013b0 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a0:	4a7f      	ldr	r2, [pc, #508]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 80013a2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	055b      	lsls	r3, r3, #21
 80013a8:	430b      	orrs	r3, r1
 80013aa:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 80013ac:	2301      	movs	r3, #1
 80013ae:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b0:	4b7c      	ldr	r3, [pc, #496]	; (80015a4 <HAL_RCC_OscConfig+0x548>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	05db      	lsls	r3, r3, #23
 80013b6:	d510      	bpl.n	80013da <HAL_RCC_OscConfig+0x37e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b8:	68a3      	ldr	r3, [r4, #8]
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	0052      	lsls	r2, r2, #1
 80013be:	4293      	cmp	r3, r2
 80013c0:	d022      	beq.n	8001408 <HAL_RCC_OscConfig+0x3ac>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d13c      	bne.n	8001440 <HAL_RCC_OscConfig+0x3e4>
 80013c6:	4b76      	ldr	r3, [pc, #472]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 80013c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013ca:	4977      	ldr	r1, [pc, #476]	; (80015a8 <HAL_RCC_OscConfig+0x54c>)
 80013cc:	400a      	ands	r2, r1
 80013ce:	651a      	str	r2, [r3, #80]	; 0x50
 80013d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013d2:	4976      	ldr	r1, [pc, #472]	; (80015ac <HAL_RCC_OscConfig+0x550>)
 80013d4:	400a      	ands	r2, r1
 80013d6:	651a      	str	r2, [r3, #80]	; 0x50
 80013d8:	e01c      	b.n	8001414 <HAL_RCC_OscConfig+0x3b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013da:	4a72      	ldr	r2, [pc, #456]	; (80015a4 <HAL_RCC_OscConfig+0x548>)
 80013dc:	6811      	ldr	r1, [r2, #0]
 80013de:	2380      	movs	r3, #128	; 0x80
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	430b      	orrs	r3, r1
 80013e4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80013e6:	f7ff fa69 	bl	80008bc <HAL_GetTick>
 80013ea:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	4f6d      	ldr	r7, [pc, #436]	; (80015a4 <HAL_RCC_OscConfig+0x548>)
 80013ee:	2680      	movs	r6, #128	; 0x80
 80013f0:	0076      	lsls	r6, r6, #1
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	4233      	tst	r3, r6
 80013f6:	d1df      	bne.n	80013b8 <HAL_RCC_OscConfig+0x35c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f8:	f7ff fa60 	bl	80008bc <HAL_GetTick>
 80013fc:	4643      	mov	r3, r8
 80013fe:	1ac0      	subs	r0, r0, r3
 8001400:	2864      	cmp	r0, #100	; 0x64
 8001402:	d9f6      	bls.n	80013f2 <HAL_RCC_OscConfig+0x396>
          return HAL_TIMEOUT;
 8001404:	2003      	movs	r0, #3
 8001406:	e0c2      	b.n	800158e <HAL_RCC_OscConfig+0x532>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001408:	4a65      	ldr	r2, [pc, #404]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 800140a:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	430b      	orrs	r3, r1
 8001412:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001414:	68a3      	ldr	r3, [r4, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d02c      	beq.n	8001474 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 800141a:	f7ff fa4f 	bl	80008bc <HAL_GetTick>
 800141e:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001420:	4f5f      	ldr	r7, [pc, #380]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 8001422:	2680      	movs	r6, #128	; 0x80
 8001424:	00b6      	lsls	r6, r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001426:	4b62      	ldr	r3, [pc, #392]	; (80015b0 <HAL_RCC_OscConfig+0x554>)
 8001428:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800142a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800142c:	4233      	tst	r3, r6
 800142e:	d134      	bne.n	800149a <HAL_RCC_OscConfig+0x43e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001430:	f7ff fa44 	bl	80008bc <HAL_GetTick>
 8001434:	464b      	mov	r3, r9
 8001436:	1ac0      	subs	r0, r0, r3
 8001438:	4540      	cmp	r0, r8
 800143a:	d9f6      	bls.n	800142a <HAL_RCC_OscConfig+0x3ce>
          return HAL_TIMEOUT;
 800143c:	2003      	movs	r0, #3
 800143e:	e0a6      	b.n	800158e <HAL_RCC_OscConfig+0x532>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001440:	22a0      	movs	r2, #160	; 0xa0
 8001442:	00d2      	lsls	r2, r2, #3
 8001444:	4293      	cmp	r3, r2
 8001446:	d009      	beq.n	800145c <HAL_RCC_OscConfig+0x400>
 8001448:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 800144a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800144c:	4956      	ldr	r1, [pc, #344]	; (80015a8 <HAL_RCC_OscConfig+0x54c>)
 800144e:	400a      	ands	r2, r1
 8001450:	651a      	str	r2, [r3, #80]	; 0x50
 8001452:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001454:	4955      	ldr	r1, [pc, #340]	; (80015ac <HAL_RCC_OscConfig+0x550>)
 8001456:	400a      	ands	r2, r1
 8001458:	651a      	str	r2, [r3, #80]	; 0x50
 800145a:	e7db      	b.n	8001414 <HAL_RCC_OscConfig+0x3b8>
 800145c:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 800145e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001460:	3a01      	subs	r2, #1
 8001462:	3aff      	subs	r2, #255	; 0xff
 8001464:	430a      	orrs	r2, r1
 8001466:	651a      	str	r2, [r3, #80]	; 0x50
 8001468:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	0052      	lsls	r2, r2, #1
 800146e:	430a      	orrs	r2, r1
 8001470:	651a      	str	r2, [r3, #80]	; 0x50
 8001472:	e7cf      	b.n	8001414 <HAL_RCC_OscConfig+0x3b8>
      tickstart = HAL_GetTick();
 8001474:	f7ff fa22 	bl	80008bc <HAL_GetTick>
 8001478:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800147a:	4f49      	ldr	r7, [pc, #292]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 800147c:	2680      	movs	r6, #128	; 0x80
 800147e:	00b6      	lsls	r6, r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001480:	4b4b      	ldr	r3, [pc, #300]	; (80015b0 <HAL_RCC_OscConfig+0x554>)
 8001482:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001486:	4233      	tst	r3, r6
 8001488:	d007      	beq.n	800149a <HAL_RCC_OscConfig+0x43e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fa17 	bl	80008bc <HAL_GetTick>
 800148e:	464b      	mov	r3, r9
 8001490:	1ac0      	subs	r0, r0, r3
 8001492:	4540      	cmp	r0, r8
 8001494:	d9f6      	bls.n	8001484 <HAL_RCC_OscConfig+0x428>
          return HAL_TIMEOUT;
 8001496:	2003      	movs	r0, #3
 8001498:	e079      	b.n	800158e <HAL_RCC_OscConfig+0x532>
    if(pwrclkchanged == SET)
 800149a:	4653      	mov	r3, sl
 800149c:	2b01      	cmp	r3, #1
 800149e:	d01c      	beq.n	80014da <HAL_RCC_OscConfig+0x47e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 80014a2:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d072      	beq.n	800158e <HAL_RCC_OscConfig+0x532>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a8:	2d0c      	cmp	r5, #12
 80014aa:	d055      	beq.n	8001558 <HAL_RCC_OscConfig+0x4fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d01a      	beq.n	80014e6 <HAL_RCC_OscConfig+0x48a>
        __HAL_RCC_PLL_DISABLE();
 80014b0:	4a3b      	ldr	r2, [pc, #236]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 80014b2:	6813      	ldr	r3, [r2, #0]
 80014b4:	493f      	ldr	r1, [pc, #252]	; (80015b4 <HAL_RCC_OscConfig+0x558>)
 80014b6:	400b      	ands	r3, r1
 80014b8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80014ba:	f7ff f9ff 	bl	80008bc <HAL_GetTick>
 80014be:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014c0:	4d37      	ldr	r5, [pc, #220]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 80014c2:	2480      	movs	r4, #128	; 0x80
 80014c4:	04a4      	lsls	r4, r4, #18
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	4223      	tst	r3, r4
 80014ca:	d043      	beq.n	8001554 <HAL_RCC_OscConfig+0x4f8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff f9f6 	bl	80008bc <HAL_GetTick>
 80014d0:	1b80      	subs	r0, r0, r6
 80014d2:	2802      	cmp	r0, #2
 80014d4:	d9f7      	bls.n	80014c6 <HAL_RCC_OscConfig+0x46a>
            return HAL_TIMEOUT;
 80014d6:	2003      	movs	r0, #3
 80014d8:	e059      	b.n	800158e <HAL_RCC_OscConfig+0x532>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014da:	4a31      	ldr	r2, [pc, #196]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 80014dc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80014de:	4936      	ldr	r1, [pc, #216]	; (80015b8 <HAL_RCC_OscConfig+0x55c>)
 80014e0:	400b      	ands	r3, r1
 80014e2:	6393      	str	r3, [r2, #56]	; 0x38
 80014e4:	e7dc      	b.n	80014a0 <HAL_RCC_OscConfig+0x444>
        __HAL_RCC_PLL_DISABLE();
 80014e6:	4a2e      	ldr	r2, [pc, #184]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 80014e8:	6813      	ldr	r3, [r2, #0]
 80014ea:	4932      	ldr	r1, [pc, #200]	; (80015b4 <HAL_RCC_OscConfig+0x558>)
 80014ec:	400b      	ands	r3, r1
 80014ee:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80014f0:	f7ff f9e4 	bl	80008bc <HAL_GetTick>
 80014f4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014f6:	4e2a      	ldr	r6, [pc, #168]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 80014f8:	2580      	movs	r5, #128	; 0x80
 80014fa:	04ad      	lsls	r5, r5, #18
 80014fc:	6833      	ldr	r3, [r6, #0]
 80014fe:	422b      	tst	r3, r5
 8001500:	d006      	beq.n	8001510 <HAL_RCC_OscConfig+0x4b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff f9db 	bl	80008bc <HAL_GetTick>
 8001506:	1bc0      	subs	r0, r0, r7
 8001508:	2802      	cmp	r0, #2
 800150a:	d9f7      	bls.n	80014fc <HAL_RCC_OscConfig+0x4a0>
            return HAL_TIMEOUT;
 800150c:	2003      	movs	r0, #3
 800150e:	e03e      	b.n	800158e <HAL_RCC_OscConfig+0x532>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001510:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 8001512:	68d1      	ldr	r1, [r2, #12]
 8001514:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001516:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001518:	4303      	orrs	r3, r0
 800151a:	4828      	ldr	r0, [pc, #160]	; (80015bc <HAL_RCC_OscConfig+0x560>)
 800151c:	4001      	ands	r1, r0
 800151e:	430b      	orrs	r3, r1
 8001520:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001522:	430b      	orrs	r3, r1
 8001524:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8001526:	6811      	ldr	r1, [r2, #0]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	045b      	lsls	r3, r3, #17
 800152c:	430b      	orrs	r3, r1
 800152e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001530:	f7ff f9c4 	bl	80008bc <HAL_GetTick>
 8001534:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001536:	4d1a      	ldr	r5, [pc, #104]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 8001538:	2480      	movs	r4, #128	; 0x80
 800153a:	04a4      	lsls	r4, r4, #18
 800153c:	682b      	ldr	r3, [r5, #0]
 800153e:	4223      	tst	r3, r4
 8001540:	d106      	bne.n	8001550 <HAL_RCC_OscConfig+0x4f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001542:	f7ff f9bb 	bl	80008bc <HAL_GetTick>
 8001546:	1b80      	subs	r0, r0, r6
 8001548:	2802      	cmp	r0, #2
 800154a:	d9f7      	bls.n	800153c <HAL_RCC_OscConfig+0x4e0>
            return HAL_TIMEOUT;
 800154c:	2003      	movs	r0, #3
 800154e:	e01e      	b.n	800158e <HAL_RCC_OscConfig+0x532>
  return HAL_OK;
 8001550:	2000      	movs	r0, #0
 8001552:	e01c      	b.n	800158e <HAL_RCC_OscConfig+0x532>
 8001554:	2000      	movs	r0, #0
 8001556:	e01a      	b.n	800158e <HAL_RCC_OscConfig+0x532>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001558:	2b01      	cmp	r3, #1
 800155a:	d01e      	beq.n	800159a <HAL_RCC_OscConfig+0x53e>
        pll_config = RCC->CFGR;
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <HAL_RCC_OscConfig+0x544>)
 800155e:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	025b      	lsls	r3, r3, #9
 8001564:	4013      	ands	r3, r2
          return HAL_ERROR;
 8001566:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001568:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800156a:	428b      	cmp	r3, r1
 800156c:	d10f      	bne.n	800158e <HAL_RCC_OscConfig+0x532>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800156e:	23f0      	movs	r3, #240	; 0xf0
 8001570:	039b      	lsls	r3, r3, #14
 8001572:	4013      	ands	r3, r2
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001574:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001576:	428b      	cmp	r3, r1
 8001578:	d109      	bne.n	800158e <HAL_RCC_OscConfig+0x532>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800157a:	20c0      	movs	r0, #192	; 0xc0
 800157c:	0400      	lsls	r0, r0, #16
 800157e:	4002      	ands	r2, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001580:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001582:	1a10      	subs	r0, r2, r0
 8001584:	1e42      	subs	r2, r0, #1
 8001586:	4190      	sbcs	r0, r2
    return HAL_ERROR;
 8001588:	b2c0      	uxtb	r0, r0
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x532>
 800158c:	2001      	movs	r0, #1
}
 800158e:	b002      	add	sp, #8
 8001590:	bc1c      	pop	{r2, r3, r4}
 8001592:	4690      	mov	r8, r2
 8001594:	4699      	mov	r9, r3
 8001596:	46a2      	mov	sl, r4
 8001598:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800159a:	2001      	movs	r0, #1
 800159c:	e7f7      	b.n	800158e <HAL_RCC_OscConfig+0x532>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40007000 	.word	0x40007000
 80015a8:	fffffeff 	.word	0xfffffeff
 80015ac:	fffffbff 	.word	0xfffffbff
 80015b0:	00001388 	.word	0x00001388
 80015b4:	feffffff 	.word	0xfeffffff
 80015b8:	efffffff 	.word	0xefffffff
 80015bc:	ff02ffff 	.word	0xff02ffff

080015c0 <HAL_RCC_ClockConfig>:
{
 80015c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015c2:	46ce      	mov	lr, r9
 80015c4:	4647      	mov	r7, r8
 80015c6:	b580      	push	{r7, lr}
 80015c8:	0004      	movs	r4, r0
 80015ca:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80015cc:	2800      	cmp	r0, #0
 80015ce:	d100      	bne.n	80015d2 <HAL_RCC_ClockConfig+0x12>
 80015d0:	e0c5      	b.n	800175e <HAL_RCC_ClockConfig+0x19e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d2:	4b65      	ldr	r3, [pc, #404]	; (8001768 <HAL_RCC_ClockConfig+0x1a8>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	2301      	movs	r3, #1
 80015d8:	4013      	ands	r3, r2
 80015da:	428b      	cmp	r3, r1
 80015dc:	d20b      	bcs.n	80015f6 <HAL_RCC_ClockConfig+0x36>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015de:	4962      	ldr	r1, [pc, #392]	; (8001768 <HAL_RCC_ClockConfig+0x1a8>)
 80015e0:	680b      	ldr	r3, [r1, #0]
 80015e2:	2201      	movs	r2, #1
 80015e4:	4393      	bics	r3, r2
 80015e6:	432b      	orrs	r3, r5
 80015e8:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ea:	680b      	ldr	r3, [r1, #0]
 80015ec:	401a      	ands	r2, r3
      return HAL_ERROR;
 80015ee:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f0:	42aa      	cmp	r2, r5
 80015f2:	d000      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x36>
 80015f4:	e0b4      	b.n	8001760 <HAL_RCC_ClockConfig+0x1a0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f6:	6823      	ldr	r3, [r4, #0]
 80015f8:	079b      	lsls	r3, r3, #30
 80015fa:	d506      	bpl.n	800160a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015fc:	4a5b      	ldr	r2, [pc, #364]	; (800176c <HAL_RCC_ClockConfig+0x1ac>)
 80015fe:	68d3      	ldr	r3, [r2, #12]
 8001600:	21f0      	movs	r1, #240	; 0xf0
 8001602:	438b      	bics	r3, r1
 8001604:	68a1      	ldr	r1, [r4, #8]
 8001606:	430b      	orrs	r3, r1
 8001608:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	07db      	lsls	r3, r3, #31
 800160e:	d571      	bpl.n	80016f4 <HAL_RCC_ClockConfig+0x134>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001610:	6863      	ldr	r3, [r4, #4]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d009      	beq.n	800162a <HAL_RCC_ClockConfig+0x6a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001616:	2b03      	cmp	r3, #3
 8001618:	d02d      	beq.n	8001676 <HAL_RCC_ClockConfig+0xb6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800161a:	2b01      	cmp	r3, #1
 800161c:	d031      	beq.n	8001682 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800161e:	4a53      	ldr	r2, [pc, #332]	; (800176c <HAL_RCC_ClockConfig+0x1ac>)
 8001620:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 8001622:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001624:	0592      	lsls	r2, r2, #22
 8001626:	d406      	bmi.n	8001636 <HAL_RCC_ClockConfig+0x76>
 8001628:	e09a      	b.n	8001760 <HAL_RCC_ClockConfig+0x1a0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800162a:	4a50      	ldr	r2, [pc, #320]	; (800176c <HAL_RCC_ClockConfig+0x1ac>)
 800162c:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 800162e:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001630:	0392      	lsls	r2, r2, #14
 8001632:	d400      	bmi.n	8001636 <HAL_RCC_ClockConfig+0x76>
 8001634:	e094      	b.n	8001760 <HAL_RCC_ClockConfig+0x1a0>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001636:	494d      	ldr	r1, [pc, #308]	; (800176c <HAL_RCC_ClockConfig+0x1ac>)
 8001638:	68ca      	ldr	r2, [r1, #12]
 800163a:	2003      	movs	r0, #3
 800163c:	4382      	bics	r2, r0
 800163e:	4313      	orrs	r3, r2
 8001640:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 8001642:	f7ff f93b 	bl	80008bc <HAL_GetTick>
 8001646:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001648:	6863      	ldr	r3, [r4, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d01f      	beq.n	800168e <HAL_RCC_ClockConfig+0xce>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800164e:	2b03      	cmp	r3, #3
 8001650:	d02e      	beq.n	80016b0 <HAL_RCC_ClockConfig+0xf0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001652:	2b01      	cmp	r3, #1
 8001654:	d03d      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x112>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001656:	4b45      	ldr	r3, [pc, #276]	; (800176c <HAL_RCC_ClockConfig+0x1ac>)
 8001658:	4698      	mov	r8, r3
 800165a:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800165c:	4b44      	ldr	r3, [pc, #272]	; (8001770 <HAL_RCC_ClockConfig+0x1b0>)
 800165e:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001660:	4643      	mov	r3, r8
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	421f      	tst	r7, r3
 8001666:	d045      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x134>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001668:	f7ff f928 	bl	80008bc <HAL_GetTick>
 800166c:	1b80      	subs	r0, r0, r6
 800166e:	4548      	cmp	r0, r9
 8001670:	d9f6      	bls.n	8001660 <HAL_RCC_ClockConfig+0xa0>
          return HAL_TIMEOUT;
 8001672:	2003      	movs	r0, #3
 8001674:	e074      	b.n	8001760 <HAL_RCC_ClockConfig+0x1a0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001676:	4a3d      	ldr	r2, [pc, #244]	; (800176c <HAL_RCC_ClockConfig+0x1ac>)
 8001678:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 800167a:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800167c:	0192      	lsls	r2, r2, #6
 800167e:	d4da      	bmi.n	8001636 <HAL_RCC_ClockConfig+0x76>
 8001680:	e06e      	b.n	8001760 <HAL_RCC_ClockConfig+0x1a0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001682:	4a3a      	ldr	r2, [pc, #232]	; (800176c <HAL_RCC_ClockConfig+0x1ac>)
 8001684:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 8001686:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001688:	0752      	lsls	r2, r2, #29
 800168a:	d4d4      	bmi.n	8001636 <HAL_RCC_ClockConfig+0x76>
 800168c:	e068      	b.n	8001760 <HAL_RCC_ClockConfig+0x1a0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800168e:	4b37      	ldr	r3, [pc, #220]	; (800176c <HAL_RCC_ClockConfig+0x1ac>)
 8001690:	4698      	mov	r8, r3
 8001692:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001694:	4b36      	ldr	r3, [pc, #216]	; (8001770 <HAL_RCC_ClockConfig+0x1b0>)
 8001696:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001698:	4643      	mov	r3, r8
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	403b      	ands	r3, r7
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d028      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x134>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a2:	f7ff f90b 	bl	80008bc <HAL_GetTick>
 80016a6:	1b80      	subs	r0, r0, r6
 80016a8:	4548      	cmp	r0, r9
 80016aa:	d9f5      	bls.n	8001698 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80016ac:	2003      	movs	r0, #3
 80016ae:	e057      	b.n	8001760 <HAL_RCC_ClockConfig+0x1a0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b0:	4b2e      	ldr	r3, [pc, #184]	; (800176c <HAL_RCC_ClockConfig+0x1ac>)
 80016b2:	4698      	mov	r8, r3
 80016b4:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b6:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <HAL_RCC_ClockConfig+0x1b0>)
 80016b8:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ba:	4643      	mov	r3, r8
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	403b      	ands	r3, r7
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	d017      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x134>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c4:	f7ff f8fa 	bl	80008bc <HAL_GetTick>
 80016c8:	1b80      	subs	r0, r0, r6
 80016ca:	4548      	cmp	r0, r9
 80016cc:	d9f5      	bls.n	80016ba <HAL_RCC_ClockConfig+0xfa>
          return HAL_TIMEOUT;
 80016ce:	2003      	movs	r0, #3
 80016d0:	e046      	b.n	8001760 <HAL_RCC_ClockConfig+0x1a0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <HAL_RCC_ClockConfig+0x1ac>)
 80016d4:	4698      	mov	r8, r3
 80016d6:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	4b25      	ldr	r3, [pc, #148]	; (8001770 <HAL_RCC_ClockConfig+0x1b0>)
 80016da:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016dc:	4643      	mov	r3, r8
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	403b      	ands	r3, r7
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d006      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x134>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e6:	f7ff f8e9 	bl	80008bc <HAL_GetTick>
 80016ea:	1b80      	subs	r0, r0, r6
 80016ec:	4548      	cmp	r0, r9
 80016ee:	d9f5      	bls.n	80016dc <HAL_RCC_ClockConfig+0x11c>
          return HAL_TIMEOUT;
 80016f0:	2003      	movs	r0, #3
 80016f2:	e035      	b.n	8001760 <HAL_RCC_ClockConfig+0x1a0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_RCC_ClockConfig+0x1a8>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2301      	movs	r3, #1
 80016fa:	4013      	ands	r3, r2
 80016fc:	42ab      	cmp	r3, r5
 80016fe:	d90a      	bls.n	8001716 <HAL_RCC_ClockConfig+0x156>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001700:	4919      	ldr	r1, [pc, #100]	; (8001768 <HAL_RCC_ClockConfig+0x1a8>)
 8001702:	680b      	ldr	r3, [r1, #0]
 8001704:	2201      	movs	r2, #1
 8001706:	4393      	bics	r3, r2
 8001708:	432b      	orrs	r3, r5
 800170a:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170c:	680b      	ldr	r3, [r1, #0]
 800170e:	401a      	ands	r2, r3
      return HAL_ERROR;
 8001710:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	42aa      	cmp	r2, r5
 8001714:	d124      	bne.n	8001760 <HAL_RCC_ClockConfig+0x1a0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001716:	6823      	ldr	r3, [r4, #0]
 8001718:	075b      	lsls	r3, r3, #29
 800171a:	d506      	bpl.n	800172a <HAL_RCC_ClockConfig+0x16a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800171c:	4a13      	ldr	r2, [pc, #76]	; (800176c <HAL_RCC_ClockConfig+0x1ac>)
 800171e:	68d3      	ldr	r3, [r2, #12]
 8001720:	4914      	ldr	r1, [pc, #80]	; (8001774 <HAL_RCC_ClockConfig+0x1b4>)
 8001722:	400b      	ands	r3, r1
 8001724:	68e1      	ldr	r1, [r4, #12]
 8001726:	430b      	orrs	r3, r1
 8001728:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	071b      	lsls	r3, r3, #28
 800172e:	d507      	bpl.n	8001740 <HAL_RCC_ClockConfig+0x180>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001730:	490e      	ldr	r1, [pc, #56]	; (800176c <HAL_RCC_ClockConfig+0x1ac>)
 8001732:	68ca      	ldr	r2, [r1, #12]
 8001734:	6923      	ldr	r3, [r4, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	480f      	ldr	r0, [pc, #60]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 800173a:	4002      	ands	r2, r0
 800173c:	4313      	orrs	r3, r2
 800173e:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001740:	f7ff fc34 	bl	8000fac <HAL_RCC_GetSysClockFreq>
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_RCC_ClockConfig+0x1ac>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	061b      	lsls	r3, r3, #24
 800174a:	0f1b      	lsrs	r3, r3, #28
 800174c:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	40d8      	lsrs	r0, r3
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_RCC_ClockConfig+0x1c0>)
 8001754:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001756:	2003      	movs	r0, #3
 8001758:	f7ff f86a 	bl	8000830 <HAL_InitTick>
 800175c:	e000      	b.n	8001760 <HAL_RCC_ClockConfig+0x1a0>
    return HAL_ERROR;
 800175e:	2001      	movs	r0, #1
}
 8001760:	bc0c      	pop	{r2, r3}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001768:	40022000 	.word	0x40022000
 800176c:	40021000 	.word	0x40021000
 8001770:	00001388 	.word	0x00001388
 8001774:	fffff8ff 	.word	0xfffff8ff
 8001778:	ffffc7ff 	.word	0xffffc7ff
 800177c:	080030a0 	.word	0x080030a0
 8001780:	20000000 	.word	0x20000000

08001784 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	055b      	lsls	r3, r3, #21
 800178a:	0f5b      	lsrs	r3, r3, #29
 800178c:	4a03      	ldr	r2, [pc, #12]	; (800179c <HAL_RCC_GetPCLK1Freq+0x18>)
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	4a03      	ldr	r2, [pc, #12]	; (80017a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001792:	6810      	ldr	r0, [r2, #0]
 8001794:	40d8      	lsrs	r0, r3
}
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000
 800179c:	080030b0 	.word	0x080030b0
 80017a0:	20000000 	.word	0x20000000

080017a4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	049b      	lsls	r3, r3, #18
 80017aa:	0f5b      	lsrs	r3, r3, #29
 80017ac:	4a03      	ldr	r2, [pc, #12]	; (80017bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	4a03      	ldr	r2, [pc, #12]	; (80017c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80017b2:	6810      	ldr	r0, [r2, #0]
 80017b4:	40d8      	lsrs	r0, r3
}
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000
 80017bc:	080030b0 	.word	0x080030b0
 80017c0:	20000000 	.word	0x20000000

080017c4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	46ce      	mov	lr, r9
 80017c8:	4647      	mov	r7, r8
 80017ca:	b580      	push	{r7, lr}
 80017cc:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80017ce:	6803      	ldr	r3, [r0, #0]
 80017d0:	069b      	lsls	r3, r3, #26
 80017d2:	d400      	bmi.n	80017d6 <HAL_RCCEx_PeriphCLKConfig+0x12>
 80017d4:	e08a      	b.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d6:	4b68      	ldr	r3, [pc, #416]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80017d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80017da:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	d406      	bmi.n	80017ee <HAL_RCCEx_PeriphCLKConfig+0x2a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e0:	4a65      	ldr	r2, [pc, #404]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80017e2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	055b      	lsls	r3, r3, #21
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 80017ec:	3501      	adds	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ee:	4b63      	ldr	r3, [pc, #396]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	05db      	lsls	r3, r3, #23
 80017f4:	d51b      	bpl.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x6a>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80017f6:	4b60      	ldr	r3, [pc, #384]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80017f8:	681a      	ldr	r2, [r3, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80017fa:	6863      	ldr	r3, [r4, #4]
 80017fc:	21c0      	movs	r1, #192	; 0xc0
 80017fe:	0389      	lsls	r1, r1, #14
 8001800:	0018      	movs	r0, r3
 8001802:	4008      	ands	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001804:	400a      	ands	r2, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001806:	4290      	cmp	r0, r2
 8001808:	d03a      	beq.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0xbc>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800180a:	22c0      	movs	r2, #192	; 0xc0
 800180c:	0292      	lsls	r2, r2, #10
 800180e:	0019      	movs	r1, r3
 8001810:	4011      	ands	r1, r2
 8001812:	4291      	cmp	r1, r2
 8001814:	d022      	beq.n	800185c <HAL_RCCEx_PeriphCLKConfig+0x98>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001816:	4a58      	ldr	r2, [pc, #352]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001818:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800181a:	21c0      	movs	r1, #192	; 0xc0
 800181c:	0289      	lsls	r1, r1, #10
 800181e:	400a      	ands	r2, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001820:	d05a      	beq.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001822:	21c0      	movs	r1, #192	; 0xc0
 8001824:	0289      	lsls	r1, r1, #10
 8001826:	400b      	ands	r3, r1
 8001828:	4293      	cmp	r3, r2
 800182a:	d055      	beq.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800182c:	e031      	b.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0xce>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182e:	4a53      	ldr	r2, [pc, #332]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001830:	6811      	ldr	r1, [r2, #0]
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	430b      	orrs	r3, r1
 8001838:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800183a:	f7ff f83f 	bl	80008bc <HAL_GetTick>
 800183e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	4f4e      	ldr	r7, [pc, #312]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001842:	2680      	movs	r6, #128	; 0x80
 8001844:	0076      	lsls	r6, r6, #1
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	4233      	tst	r3, r6
 800184a:	d1d4      	bne.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184c:	f7ff f836 	bl	80008bc <HAL_GetTick>
 8001850:	4643      	mov	r3, r8
 8001852:	1ac0      	subs	r0, r0, r3
 8001854:	2864      	cmp	r0, #100	; 0x64
 8001856:	d9f6      	bls.n	8001846 <HAL_RCCEx_PeriphCLKConfig+0x82>
          return HAL_TIMEOUT;
 8001858:	2003      	movs	r0, #3
 800185a:	e070      	b.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800185c:	4a46      	ldr	r2, [pc, #280]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800185e:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8001860:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001862:	0392      	lsls	r2, r2, #14
 8001864:	d46b      	bmi.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x17a>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001866:	4a44      	ldr	r2, [pc, #272]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001868:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800186a:	21c0      	movs	r1, #192	; 0xc0
 800186c:	0289      	lsls	r1, r1, #10
 800186e:	400a      	ands	r2, r1
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001870:	d029      	beq.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
 8001872:	21c0      	movs	r1, #192	; 0xc0
 8001874:	0289      	lsls	r1, r1, #10
 8001876:	400b      	ands	r3, r1
 8001878:	429a      	cmp	r2, r3
 800187a:	d10a      	bne.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0xce>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800187c:	6863      	ldr	r3, [r4, #4]
 800187e:	e022      	b.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001880:	4a3d      	ldr	r2, [pc, #244]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001882:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001884:	21c0      	movs	r1, #192	; 0xc0
 8001886:	0289      	lsls	r1, r1, #10
 8001888:	400a      	ands	r2, r1
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800188a:	d015      	beq.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800188c:	400b      	ands	r3, r1
 800188e:	4293      	cmp	r3, r2
 8001890:	d012      	beq.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	069b      	lsls	r3, r3, #26
 8001896:	d50f      	bpl.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001898:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800189a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800189c:	4a38      	ldr	r2, [pc, #224]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800189e:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 80018a0:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80018a2:	2180      	movs	r1, #128	; 0x80
 80018a4:	0309      	lsls	r1, r1, #12
 80018a6:	4331      	orrs	r1, r6
 80018a8:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018aa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80018ac:	4e35      	ldr	r6, [pc, #212]	; (8001984 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80018ae:	4031      	ands	r1, r6
 80018b0:	6519      	str	r1, [r3, #80]	; 0x50
      RCC->CSR = temp_reg;
 80018b2:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80018b4:	05c3      	lsls	r3, r0, #23
 80018b6:	d446      	bmi.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x182>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018b8:	6863      	ldr	r3, [r4, #4]
 80018ba:	22c0      	movs	r2, #192	; 0xc0
 80018bc:	0292      	lsls	r2, r2, #10
 80018be:	0019      	movs	r1, r3
 80018c0:	4011      	ands	r1, r2
 80018c2:	4291      	cmp	r1, r2
 80018c4:	d108      	bne.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80018c6:	482c      	ldr	r0, [pc, #176]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80018c8:	6802      	ldr	r2, [r0, #0]
 80018ca:	492f      	ldr	r1, [pc, #188]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80018cc:	400a      	ands	r2, r1
 80018ce:	21c0      	movs	r1, #192	; 0xc0
 80018d0:	0389      	lsls	r1, r1, #14
 80018d2:	400b      	ands	r3, r1
 80018d4:	4313      	orrs	r3, r2
 80018d6:	6003      	str	r3, [r0, #0]
 80018d8:	4a27      	ldr	r2, [pc, #156]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80018da:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80018dc:	23c0      	movs	r3, #192	; 0xc0
 80018de:	029b      	lsls	r3, r3, #10
 80018e0:	6860      	ldr	r0, [r4, #4]
 80018e2:	4003      	ands	r3, r0
 80018e4:	430b      	orrs	r3, r1
 80018e6:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018e8:	2d01      	cmp	r5, #1
 80018ea:	d03f      	beq.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	079b      	lsls	r3, r3, #30
 80018f0:	d506      	bpl.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80018f2:	4a21      	ldr	r2, [pc, #132]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80018f4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80018f6:	210c      	movs	r1, #12
 80018f8:	438b      	bics	r3, r1
 80018fa:	68a1      	ldr	r1, [r4, #8]
 80018fc:	430b      	orrs	r3, r1
 80018fe:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	075b      	lsls	r3, r3, #29
 8001904:	d506      	bpl.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001906:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001908:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800190a:	4920      	ldr	r1, [pc, #128]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800190c:	400b      	ands	r3, r1
 800190e:	68e1      	ldr	r1, [r4, #12]
 8001910:	430b      	orrs	r3, r1
 8001912:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001914:	6823      	ldr	r3, [r4, #0]
 8001916:	071b      	lsls	r3, r3, #28
 8001918:	d506      	bpl.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800191a:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800191c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800191e:	491c      	ldr	r1, [pc, #112]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001920:	400b      	ands	r3, r1
 8001922:	6921      	ldr	r1, [r4, #16]
 8001924:	430b      	orrs	r3, r1
 8001926:	64d3      	str	r3, [r2, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8001928:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	061b      	lsls	r3, r3, #24
 800192e:	d506      	bpl.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x17a>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001930:	4a11      	ldr	r2, [pc, #68]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001932:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001934:	4917      	ldr	r1, [pc, #92]	; (8001994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001936:	400b      	ands	r3, r1
 8001938:	6961      	ldr	r1, [r4, #20]
 800193a:	430b      	orrs	r3, r1
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800193e:	bc0c      	pop	{r2, r3}
 8001940:	4690      	mov	r8, r2
 8001942:	4699      	mov	r9, r3
 8001944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8001946:	f7fe ffb9 	bl	80008bc <HAL_GetTick>
 800194a:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800194c:	4f0a      	ldr	r7, [pc, #40]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800194e:	2680      	movs	r6, #128	; 0x80
 8001950:	00b6      	lsls	r6, r6, #2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001954:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001958:	4233      	tst	r3, r6
 800195a:	d1ad      	bne.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7fe ffae 	bl	80008bc <HAL_GetTick>
 8001960:	464b      	mov	r3, r9
 8001962:	1ac0      	subs	r0, r0, r3
 8001964:	4540      	cmp	r0, r8
 8001966:	d9f6      	bls.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0x192>
            return HAL_TIMEOUT;
 8001968:	2003      	movs	r0, #3
 800196a:	e7e8      	b.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800196c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800196e:	490b      	ldr	r1, [pc, #44]	; (800199c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001970:	400b      	ands	r3, r1
 8001972:	6393      	str	r3, [r2, #56]	; 0x38
 8001974:	e7ba      	b.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x128>
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	40021000 	.word	0x40021000
 800197c:	40007000 	.word	0x40007000
 8001980:	fffcffff 	.word	0xfffcffff
 8001984:	fff7ffff 	.word	0xfff7ffff
 8001988:	ffcfffff 	.word	0xffcfffff
 800198c:	fffff3ff 	.word	0xfffff3ff
 8001990:	ffffcfff 	.word	0xffffcfff
 8001994:	fff3ffff 	.word	0xfff3ffff
 8001998:	00001388 	.word	0x00001388
 800199c:	efffffff 	.word	0xefffffff

080019a0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019a0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	05d2      	lsls	r2, r2, #23
 80019a6:	4290      	cmp	r0, r2
 80019a8:	d007      	beq.n	80019ba <TIM_Base_SetConfig+0x1a>
 80019aa:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <TIM_Base_SetConfig+0x44>)
 80019ac:	4290      	cmp	r0, r2
 80019ae:	d10c      	bne.n	80019ca <TIM_Base_SetConfig+0x2a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019b0:	2270      	movs	r2, #112	; 0x70
 80019b2:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80019b4:	684a      	ldr	r2, [r1, #4]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	e003      	b.n	80019c2 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019ba:	2270      	movs	r2, #112	; 0x70
 80019bc:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80019be:	684a      	ldr	r2, [r1, #4]
 80019c0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <TIM_Base_SetConfig+0x48>)
 80019c4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019c6:	68ca      	ldr	r2, [r1, #12]
 80019c8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019ca:	2280      	movs	r2, #128	; 0x80
 80019cc:	4393      	bics	r3, r2
 80019ce:	690a      	ldr	r2, [r1, #16]
 80019d0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80019d2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019d4:	688b      	ldr	r3, [r1, #8]
 80019d6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019d8:	680b      	ldr	r3, [r1, #0]
 80019da:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019dc:	2301      	movs	r3, #1
 80019de:	6143      	str	r3, [r0, #20]
}
 80019e0:	4770      	bx	lr
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	40010800 	.word	0x40010800
 80019e8:	fffffcff 	.word	0xfffffcff

080019ec <HAL_TIM_Base_Init>:
{
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80019f0:	d014      	beq.n	8001a1c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80019f2:	2339      	movs	r3, #57	; 0x39
 80019f4:	5cc3      	ldrb	r3, [r0, r3]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80019fa:	2539      	movs	r5, #57	; 0x39
 80019fc:	2302      	movs	r3, #2
 80019fe:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a00:	1d21      	adds	r1, r4, #4
 8001a02:	6820      	ldr	r0, [r4, #0]
 8001a04:	f7ff ffcc 	bl	80019a0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001a0c:	2000      	movs	r0, #0
}
 8001a0e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001a10:	3338      	adds	r3, #56	; 0x38
 8001a12:	2200      	movs	r2, #0
 8001a14:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001a16:	f7fe fe2d 	bl	8000674 <HAL_TIM_Base_MspInit>
 8001a1a:	e7ee      	b.n	80019fa <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	e7f6      	b.n	8001a0e <HAL_TIM_Base_Init+0x22>

08001a20 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a20:	6802      	ldr	r2, [r0, #0]
 8001a22:	68d3      	ldr	r3, [r2, #12]
 8001a24:	2101      	movs	r1, #1
 8001a26:	430b      	orrs	r3, r1
 8001a28:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a2a:	6802      	ldr	r2, [r0, #0]
 8001a2c:	6891      	ldr	r1, [r2, #8]
 8001a2e:	2307      	movs	r3, #7
 8001a30:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d003      	beq.n	8001a3e <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8001a36:	6813      	ldr	r3, [r2, #0]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	430b      	orrs	r3, r1
 8001a3c:	6013      	str	r3, [r2, #0]
}
 8001a3e:	2000      	movs	r0, #0
 8001a40:	4770      	bx	lr
	...

08001a44 <HAL_TIM_ConfigClockSource>:
{
 8001a44:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001a46:	2338      	movs	r3, #56	; 0x38
 8001a48:	5cc3      	ldrb	r3, [r0, r3]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d100      	bne.n	8001a50 <HAL_TIM_ConfigClockSource+0xc>
 8001a4e:	e0a8      	b.n	8001ba2 <HAL_TIM_ConfigClockSource+0x15e>
 8001a50:	2338      	movs	r3, #56	; 0x38
 8001a52:	2201      	movs	r2, #1
 8001a54:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8001a56:	3301      	adds	r3, #1
 8001a58:	3201      	adds	r2, #1
 8001a5a:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8001a5c:	6802      	ldr	r2, [r0, #0]
 8001a5e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a60:	4c51      	ldr	r4, [pc, #324]	; (8001ba8 <HAL_TIM_ConfigClockSource+0x164>)
 8001a62:	4023      	ands	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 8001a64:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001a66:	680b      	ldr	r3, [r1, #0]
 8001a68:	2b40      	cmp	r3, #64	; 0x40
 8001a6a:	d100      	bne.n	8001a6e <HAL_TIM_ConfigClockSource+0x2a>
 8001a6c:	e07f      	b.n	8001b6e <HAL_TIM_ConfigClockSource+0x12a>
 8001a6e:	d91b      	bls.n	8001aa8 <HAL_TIM_ConfigClockSource+0x64>
 8001a70:	2b60      	cmp	r3, #96	; 0x60
 8001a72:	d061      	beq.n	8001b38 <HAL_TIM_ConfigClockSource+0xf4>
 8001a74:	d92b      	bls.n	8001ace <HAL_TIM_ConfigClockSource+0x8a>
 8001a76:	2b70      	cmp	r3, #112	; 0x70
 8001a78:	d045      	beq.n	8001b06 <HAL_TIM_ConfigClockSource+0xc2>
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	0192      	lsls	r2, r2, #6
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d152      	bne.n	8001b28 <HAL_TIM_ConfigClockSource+0xe4>
      TIM_ETR_SetConfig(htim->Instance,
 8001a82:	6804      	ldr	r4, [r0, #0]
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001a84:	68a3      	ldr	r3, [r4, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a86:	4a49      	ldr	r2, [pc, #292]	; (8001bac <HAL_TIM_ConfigClockSource+0x168>)
 8001a88:	401a      	ands	r2, r3

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a8a:	688b      	ldr	r3, [r1, #8]
 8001a8c:	684d      	ldr	r5, [r1, #4]
 8001a8e:	432b      	orrs	r3, r5
 8001a90:	68c9      	ldr	r1, [r1, #12]
 8001a92:	0209      	lsls	r1, r1, #8
 8001a94:	430b      	orrs	r3, r1
 8001a96:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a98:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a9a:	6802      	ldr	r2, [r0, #0]
 8001a9c:	6891      	ldr	r1, [r2, #8]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	01db      	lsls	r3, r3, #7
 8001aa2:	430b      	orrs	r3, r1
 8001aa4:	6093      	str	r3, [r2, #8]
      break;
 8001aa6:	e03f      	b.n	8001b28 <HAL_TIM_ConfigClockSource+0xe4>
  switch (sClockSourceConfig->ClockSource)
 8001aa8:	2b10      	cmp	r3, #16
 8001aaa:	d007      	beq.n	8001abc <HAL_TIM_ConfigClockSource+0x78>
 8001aac:	d904      	bls.n	8001ab8 <HAL_TIM_ConfigClockSource+0x74>
 8001aae:	2b20      	cmp	r3, #32
 8001ab0:	d004      	beq.n	8001abc <HAL_TIM_ConfigClockSource+0x78>
 8001ab2:	2b30      	cmp	r3, #48	; 0x30
 8001ab4:	d002      	beq.n	8001abc <HAL_TIM_ConfigClockSource+0x78>
 8001ab6:	e037      	b.n	8001b28 <HAL_TIM_ConfigClockSource+0xe4>
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d135      	bne.n	8001b28 <HAL_TIM_ConfigClockSource+0xe4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001abc:	6801      	ldr	r1, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 8001abe:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ac0:	2470      	movs	r4, #112	; 0x70
 8001ac2:	43a2      	bics	r2, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ac4:	3c69      	subs	r4, #105	; 0x69
 8001ac6:	4323      	orrs	r3, r4
 8001ac8:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8001aca:	608b      	str	r3, [r1, #8]
 8001acc:	e02c      	b.n	8001b28 <HAL_TIM_ConfigClockSource+0xe4>
  switch (sClockSourceConfig->ClockSource)
 8001ace:	2b50      	cmp	r3, #80	; 0x50
 8001ad0:	d12a      	bne.n	8001b28 <HAL_TIM_ConfigClockSource+0xe4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ad2:	6803      	ldr	r3, [r0, #0]
 8001ad4:	684c      	ldr	r4, [r1, #4]
 8001ad6:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8001ad8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ada:	6a1d      	ldr	r5, [r3, #32]
 8001adc:	2601      	movs	r6, #1
 8001ade:	43b5      	bics	r5, r6
 8001ae0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ae2:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ae4:	36ef      	adds	r6, #239	; 0xef
 8001ae6:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001aec:	250a      	movs	r5, #10
 8001aee:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8001af0:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001af4:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001af6:	6802      	ldr	r2, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 8001af8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001afa:	2170      	movs	r1, #112	; 0x70
 8001afc:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001afe:	3919      	subs	r1, #25
 8001b00:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001b02:	6093      	str	r3, [r2, #8]
 8001b04:	e010      	b.n	8001b28 <HAL_TIM_ConfigClockSource+0xe4>
      TIM_ETR_SetConfig(htim->Instance,
 8001b06:	6804      	ldr	r4, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 8001b08:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b0a:	4a28      	ldr	r2, [pc, #160]	; (8001bac <HAL_TIM_ConfigClockSource+0x168>)
 8001b0c:	401a      	ands	r2, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b0e:	688b      	ldr	r3, [r1, #8]
 8001b10:	684d      	ldr	r5, [r1, #4]
 8001b12:	432b      	orrs	r3, r5
 8001b14:	68c9      	ldr	r1, [r1, #12]
 8001b16:	0209      	lsls	r1, r1, #8
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8001b1c:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001b1e:	6802      	ldr	r2, [r0, #0]
 8001b20:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b22:	2177      	movs	r1, #119	; 0x77
 8001b24:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8001b26:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001b28:	2339      	movs	r3, #57	; 0x39
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	2200      	movs	r2, #0
 8001b32:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001b34:	2000      	movs	r0, #0
}
 8001b36:	bd70      	pop	{r4, r5, r6, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b38:	6803      	ldr	r3, [r0, #0]
 8001b3a:	684a      	ldr	r2, [r1, #4]
 8001b3c:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b3e:	6a1c      	ldr	r4, [r3, #32]
 8001b40:	2510      	movs	r5, #16
 8001b42:	43ac      	bics	r4, r5
 8001b44:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b46:	699d      	ldr	r5, [r3, #24]
  tmpccer = TIMx->CCER;
 8001b48:	6a1c      	ldr	r4, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b4a:	4e19      	ldr	r6, [pc, #100]	; (8001bb0 <HAL_TIM_ConfigClockSource+0x16c>)
 8001b4c:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001b4e:	0309      	lsls	r1, r1, #12
 8001b50:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b52:	25a0      	movs	r5, #160	; 0xa0
 8001b54:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	4322      	orrs	r2, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8001b5a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b5c:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b5e:	6802      	ldr	r2, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 8001b60:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b62:	2170      	movs	r1, #112	; 0x70
 8001b64:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b66:	3909      	subs	r1, #9
 8001b68:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001b6a:	6093      	str	r3, [r2, #8]
 8001b6c:	e7dc      	b.n	8001b28 <HAL_TIM_ConfigClockSource+0xe4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b6e:	6803      	ldr	r3, [r0, #0]
 8001b70:	684c      	ldr	r4, [r1, #4]
 8001b72:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8001b74:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b76:	6a1d      	ldr	r5, [r3, #32]
 8001b78:	2601      	movs	r6, #1
 8001b7a:	43b5      	bics	r5, r6
 8001b7c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b7e:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b80:	36ef      	adds	r6, #239	; 0xef
 8001b82:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b88:	250a      	movs	r5, #10
 8001b8a:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8001b8c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b90:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b92:	6802      	ldr	r2, [r0, #0]
  tmpsmcr = TIMx->SMCR;
 8001b94:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b96:	2170      	movs	r1, #112	; 0x70
 8001b98:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b9a:	3929      	subs	r1, #41	; 0x29
 8001b9c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001b9e:	6093      	str	r3, [r2, #8]
 8001ba0:	e7c2      	b.n	8001b28 <HAL_TIM_ConfigClockSource+0xe4>
  __HAL_LOCK(htim);
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	e7c7      	b.n	8001b36 <HAL_TIM_ConfigClockSource+0xf2>
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	ffff0088 	.word	0xffff0088
 8001bac:	ffff00ff 	.word	0xffff00ff
 8001bb0:	ffff0fff 	.word	0xffff0fff

08001bb4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_TIM_IC_CaptureCallback>:
}
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001bb8:	4770      	bx	lr

08001bba <HAL_TIM_TriggerCallback>:
}
 8001bba:	4770      	bx	lr

08001bbc <HAL_TIM_IRQHandler>:
{
 8001bbc:	b510      	push	{r4, lr}
 8001bbe:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bc0:	6803      	ldr	r3, [r0, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	0792      	lsls	r2, r2, #30
 8001bc6:	d50f      	bpl.n	8001be8 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	0792      	lsls	r2, r2, #30
 8001bcc:	d50c      	bpl.n	8001be8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bce:	2203      	movs	r2, #3
 8001bd0:	4252      	negs	r2, r2
 8001bd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	7603      	strb	r3, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bd8:	6803      	ldr	r3, [r0, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	079b      	lsls	r3, r3, #30
 8001bde:	d055      	beq.n	8001c8c <HAL_TIM_IRQHandler+0xd0>
          HAL_TIM_IC_CaptureCallback(htim);
 8001be0:	f7ff ffe9 	bl	8001bb6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be4:	2300      	movs	r3, #0
 8001be6:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	0752      	lsls	r2, r2, #29
 8001bee:	d512      	bpl.n	8001c16 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	0752      	lsls	r2, r2, #29
 8001bf4:	d50f      	bpl.n	8001c16 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bf6:	2205      	movs	r2, #5
 8001bf8:	4252      	negs	r2, r2
 8001bfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c00:	6823      	ldr	r3, [r4, #0]
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	23c0      	movs	r3, #192	; 0xc0
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	421a      	tst	r2, r3
 8001c0a:	d045      	beq.n	8001c98 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0c:	0020      	movs	r0, r4
 8001c0e:	f7ff ffd2 	bl	8001bb6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c12:	2300      	movs	r3, #0
 8001c14:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	691a      	ldr	r2, [r3, #16]
 8001c1a:	0712      	lsls	r2, r2, #28
 8001c1c:	d510      	bpl.n	8001c40 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	0712      	lsls	r2, r2, #28
 8001c22:	d50d      	bpl.n	8001c40 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c24:	2209      	movs	r2, #9
 8001c26:	4252      	negs	r2, r2
 8001c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	079b      	lsls	r3, r3, #30
 8001c34:	d037      	beq.n	8001ca6 <HAL_TIM_IRQHandler+0xea>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c36:	0020      	movs	r0, r4
 8001c38:	f7ff ffbd 	bl	8001bb6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	06d2      	lsls	r2, r2, #27
 8001c46:	d512      	bpl.n	8001c6e <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	06d2      	lsls	r2, r2, #27
 8001c4c:	d50f      	bpl.n	8001c6e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c4e:	2211      	movs	r2, #17
 8001c50:	4252      	negs	r2, r2
 8001c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c54:	2308      	movs	r3, #8
 8001c56:	7623      	strb	r3, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	69da      	ldr	r2, [r3, #28]
 8001c5c:	23c0      	movs	r3, #192	; 0xc0
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	421a      	tst	r2, r3
 8001c62:	d027      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c64:	0020      	movs	r0, r4
 8001c66:	f7ff ffa6 	bl	8001bb6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	07d2      	lsls	r2, r2, #31
 8001c74:	d502      	bpl.n	8001c7c <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	07d2      	lsls	r2, r2, #31
 8001c7a:	d422      	bmi.n	8001cc2 <HAL_TIM_IRQHandler+0x106>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	0652      	lsls	r2, r2, #25
 8001c82:	d502      	bpl.n	8001c8a <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	0652      	lsls	r2, r2, #25
 8001c88:	d422      	bmi.n	8001cd0 <HAL_TIM_IRQHandler+0x114>
}
 8001c8a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8c:	f7ff ff92 	bl	8001bb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c90:	0020      	movs	r0, r4
 8001c92:	f7ff ff91 	bl	8001bb8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c96:	e7a5      	b.n	8001be4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c98:	0020      	movs	r0, r4
 8001c9a:	f7ff ff8b 	bl	8001bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9e:	0020      	movs	r0, r4
 8001ca0:	f7ff ff8a 	bl	8001bb8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ca4:	e7b5      	b.n	8001c12 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca6:	0020      	movs	r0, r4
 8001ca8:	f7ff ff84 	bl	8001bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cac:	0020      	movs	r0, r4
 8001cae:	f7ff ff83 	bl	8001bb8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cb2:	e7c3      	b.n	8001c3c <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb4:	0020      	movs	r0, r4
 8001cb6:	f7ff ff7d 	bl	8001bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cba:	0020      	movs	r0, r4
 8001cbc:	f7ff ff7c 	bl	8001bb8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cc0:	e7d3      	b.n	8001c6a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	4252      	negs	r2, r2
 8001cc6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cc8:	0020      	movs	r0, r4
 8001cca:	f001 f909 	bl	8002ee0 <HAL_TIM_PeriodElapsedCallback>
 8001cce:	e7d5      	b.n	8001c7c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cd0:	2241      	movs	r2, #65	; 0x41
 8001cd2:	4252      	negs	r2, r2
 8001cd4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001cd6:	0020      	movs	r0, r4
 8001cd8:	f7ff ff6f 	bl	8001bba <HAL_TIM_TriggerCallback>
}
 8001cdc:	e7d5      	b.n	8001c8a <HAL_TIM_IRQHandler+0xce>

08001cde <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce0:	46ce      	mov	lr, r9
 8001ce2:	4647      	mov	r7, r8
 8001ce4:	b580      	push	{r7, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ce6:	2338      	movs	r3, #56	; 0x38
 8001ce8:	5cc3      	ldrb	r3, [r0, r3]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d020      	beq.n	8001d30 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8001cee:	2538      	movs	r5, #56	; 0x38
 8001cf0:	2701      	movs	r7, #1
 8001cf2:	5547      	strb	r7, [r0, r5]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	2639      	movs	r6, #57	; 0x39
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	5583      	strb	r3, [r0, r6]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001cfa:	6804      	ldr	r4, [r0, #0]
 8001cfc:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001cfe:	68a3      	ldr	r3, [r4, #8]
 8001d00:	4698      	mov	r8, r3

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d02:	2370      	movs	r3, #112	; 0x70
 8001d04:	439a      	bics	r2, r3
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d06:	680b      	ldr	r3, [r1, #0]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	4691      	mov	r9, r2

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	4642      	mov	r2, r8
 8001d10:	439a      	bics	r2, r3
 8001d12:	0013      	movs	r3, r2
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d14:	6849      	ldr	r1, [r1, #4]
 8001d16:	430b      	orrs	r3, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d18:	464a      	mov	r2, r9
 8001d1a:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001d1c:	6802      	ldr	r2, [r0, #0]
 8001d1e:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d20:	5587      	strb	r7, [r0, r6]

  __HAL_UNLOCK(htim);
 8001d22:	2300      	movs	r3, #0
 8001d24:	5543      	strb	r3, [r0, r5]

  return HAL_OK;
 8001d26:	2000      	movs	r0, #0
}
 8001d28:	bc0c      	pop	{r2, r3}
 8001d2a:	4690      	mov	r8, r2
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8001d30:	2002      	movs	r0, #2
 8001d32:	e7f9      	b.n	8001d28 <HAL_TIMEx_MasterConfigSynchronization+0x4a>

08001d34 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d34:	6802      	ldr	r2, [r0, #0]
 8001d36:	6813      	ldr	r3, [r2, #0]
 8001d38:	4906      	ldr	r1, [pc, #24]	; (8001d54 <UART_EndRxTransfer+0x20>)
 8001d3a:	400b      	ands	r3, r1
 8001d3c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d3e:	6802      	ldr	r2, [r0, #0]
 8001d40:	6893      	ldr	r3, [r2, #8]
 8001d42:	3123      	adds	r1, #35	; 0x23
 8001d44:	31ff      	adds	r1, #255	; 0xff
 8001d46:	438b      	bics	r3, r1
 8001d48:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001d52:	4770      	bx	lr
 8001d54:	fffffedf 	.word	0xfffffedf

08001d58 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d58:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001d5a:	2b21      	cmp	r3, #33	; 0x21
 8001d5c:	d000      	beq.n	8001d60 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8001d5e:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8001d60:	3331      	adds	r3, #49	; 0x31
 8001d62:	5ac3      	ldrh	r3, [r0, r3]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00c      	beq.n	8001d84 <UART_TxISR_8BIT+0x2c>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8001d6a:	6803      	ldr	r3, [r0, #0]
 8001d6c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001d6e:	7812      	ldrb	r2, [r2, #0]
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8001d72:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001d74:	3301      	adds	r3, #1
 8001d76:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001d78:	2252      	movs	r2, #82	; 0x52
 8001d7a:	5a83      	ldrh	r3, [r0, r2]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	5283      	strh	r3, [r0, r2]
}
 8001d82:	e7ec      	b.n	8001d5e <UART_TxISR_8BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001d84:	6802      	ldr	r2, [r0, #0]
 8001d86:	6813      	ldr	r3, [r2, #0]
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	438b      	bics	r3, r1
 8001d8c:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001d8e:	6802      	ldr	r2, [r0, #0]
 8001d90:	6813      	ldr	r3, [r2, #0]
 8001d92:	3940      	subs	r1, #64	; 0x40
 8001d94:	430b      	orrs	r3, r1
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	e7e1      	b.n	8001d5e <UART_TxISR_8BIT+0x6>

08001d9a <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d9a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001d9c:	2b21      	cmp	r3, #33	; 0x21
 8001d9e:	d000      	beq.n	8001da2 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8001da0:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8001da2:	3331      	adds	r3, #49	; 0x31
 8001da4:	5ac3      	ldrh	r3, [r0, r3]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00e      	beq.n	8001dca <UART_TxISR_16BIT+0x30>
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8001dac:	6802      	ldr	r2, [r0, #0]
 8001dae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	05db      	lsls	r3, r3, #23
 8001db4:	0ddb      	lsrs	r3, r3, #23
 8001db6:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8001db8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001dba:	3302      	adds	r3, #2
 8001dbc:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001dbe:	2252      	movs	r2, #82	; 0x52
 8001dc0:	5a83      	ldrh	r3, [r0, r2]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	5283      	strh	r3, [r0, r2]
}
 8001dc8:	e7ea      	b.n	8001da0 <UART_TxISR_16BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001dca:	6802      	ldr	r2, [r0, #0]
 8001dcc:	6813      	ldr	r3, [r2, #0]
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	438b      	bics	r3, r1
 8001dd2:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001dd4:	6802      	ldr	r2, [r0, #0]
 8001dd6:	6813      	ldr	r3, [r2, #0]
 8001dd8:	3940      	subs	r1, #64	; 0x40
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e7df      	b.n	8001da0 <UART_TxISR_16BIT+0x6>

08001de0 <HAL_UART_Transmit_IT>:
{
 8001de0:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8001de2:	6f44      	ldr	r4, [r0, #116]	; 0x74
    return HAL_BUSY;
 8001de4:	2302      	movs	r3, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001de6:	2c20      	cmp	r4, #32
 8001de8:	d121      	bne.n	8001e2e <HAL_UART_Transmit_IT+0x4e>
    if ((pData == NULL) || (Size == 0U))
 8001dea:	2900      	cmp	r1, #0
 8001dec:	d038      	beq.n	8001e60 <HAL_UART_Transmit_IT+0x80>
      return HAL_ERROR;
 8001dee:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8001df0:	2a00      	cmp	r2, #0
 8001df2:	d01c      	beq.n	8001e2e <HAL_UART_Transmit_IT+0x4e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	015b      	lsls	r3, r3, #5
 8001df8:	6884      	ldr	r4, [r0, #8]
 8001dfa:	429c      	cmp	r4, r3
 8001dfc:	d019      	beq.n	8001e32 <HAL_UART_Transmit_IT+0x52>
    __HAL_LOCK(huart);
 8001dfe:	2370      	movs	r3, #112	; 0x70
 8001e00:	5cc3      	ldrb	r3, [r0, r3]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d02e      	beq.n	8001e64 <HAL_UART_Transmit_IT+0x84>
    huart->pTxBuffPtr  = pData;
 8001e06:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001e08:	2350      	movs	r3, #80	; 0x50
 8001e0a:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e14:	3321      	adds	r3, #33	; 0x21
 8001e16:	6743      	str	r3, [r0, #116]	; 0x74
      huart->TxISR = UART_TxISR_8BIT;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_UART_Transmit_IT+0xa8>)
 8001e1a:	6643      	str	r3, [r0, #100]	; 0x64
    __HAL_UNLOCK(huart);
 8001e1c:	2370      	movs	r3, #112	; 0x70
 8001e1e:	2200      	movs	r2, #0
 8001e20:	54c2      	strb	r2, [r0, r3]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001e22:	6802      	ldr	r2, [r0, #0]
 8001e24:	6813      	ldr	r3, [r2, #0]
 8001e26:	2180      	movs	r1, #128	; 0x80
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e32:	6903      	ldr	r3, [r0, #16]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d119      	bne.n	8001e6c <HAL_UART_Transmit_IT+0x8c>
        return  HAL_ERROR;
 8001e38:	3301      	adds	r3, #1
      if ((((uint32_t)pData) & 1) != 0)
 8001e3a:	07cc      	lsls	r4, r1, #31
 8001e3c:	d4f7      	bmi.n	8001e2e <HAL_UART_Transmit_IT+0x4e>
    __HAL_LOCK(huart);
 8001e3e:	2370      	movs	r3, #112	; 0x70
 8001e40:	5cc4      	ldrb	r4, [r0, r3]
 8001e42:	3b6e      	subs	r3, #110	; 0x6e
 8001e44:	2c01      	cmp	r4, #1
 8001e46:	d0f2      	beq.n	8001e2e <HAL_UART_Transmit_IT+0x4e>
    huart->pTxBuffPtr  = pData;
 8001e48:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001e4a:	2350      	movs	r3, #80	; 0x50
 8001e4c:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8001e4e:	3302      	adds	r3, #2
 8001e50:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e56:	3321      	adds	r3, #33	; 0x21
 8001e58:	6743      	str	r3, [r0, #116]	; 0x74
      huart->TxISR = UART_TxISR_16BIT;
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_UART_Transmit_IT+0xac>)
 8001e5c:	6643      	str	r3, [r0, #100]	; 0x64
 8001e5e:	e7dd      	b.n	8001e1c <HAL_UART_Transmit_IT+0x3c>
      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e7e4      	b.n	8001e2e <HAL_UART_Transmit_IT+0x4e>
    __HAL_LOCK(huart);
 8001e64:	2302      	movs	r3, #2
 8001e66:	e7e2      	b.n	8001e2e <HAL_UART_Transmit_IT+0x4e>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e7e0      	b.n	8001e2e <HAL_UART_Transmit_IT+0x4e>
 8001e6c:	2370      	movs	r3, #112	; 0x70
 8001e6e:	5cc3      	ldrb	r3, [r0, r3]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d0f9      	beq.n	8001e68 <HAL_UART_Transmit_IT+0x88>
    huart->pTxBuffPtr  = pData;
 8001e74:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001e76:	2350      	movs	r3, #80	; 0x50
 8001e78:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e82:	3321      	adds	r3, #33	; 0x21
 8001e84:	6743      	str	r3, [r0, #116]	; 0x74
 8001e86:	e7c7      	b.n	8001e18 <HAL_UART_Transmit_IT+0x38>
 8001e88:	08001d59 	.word	0x08001d59
 8001e8c:	08001d9b 	.word	0x08001d9b

08001e90 <HAL_UART_Receive_IT>:
{
 8001e90:	b530      	push	{r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e92:	6f84      	ldr	r4, [r0, #120]	; 0x78
    return HAL_BUSY;
 8001e94:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e96:	2c20      	cmp	r4, #32
 8001e98:	d13a      	bne.n	8001f10 <HAL_UART_Receive_IT+0x80>
    if ((pData == NULL) || (Size == 0U))
 8001e9a:	2900      	cmp	r1, #0
 8001e9c:	d100      	bne.n	8001ea0 <HAL_UART_Receive_IT+0x10>
 8001e9e:	e06e      	b.n	8001f7e <HAL_UART_Receive_IT+0xee>
      return HAL_ERROR;
 8001ea0:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d034      	beq.n	8001f10 <HAL_UART_Receive_IT+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ea6:	6883      	ldr	r3, [r0, #8]
 8001ea8:	2480      	movs	r4, #128	; 0x80
 8001eaa:	0164      	lsls	r4, r4, #5
 8001eac:	42a3      	cmp	r3, r4
 8001eae:	d031      	beq.n	8001f14 <HAL_UART_Receive_IT+0x84>
    __HAL_LOCK(huart);
 8001eb0:	2470      	movs	r4, #112	; 0x70
 8001eb2:	5d04      	ldrb	r4, [r0, r4]
 8001eb4:	2c01      	cmp	r4, #1
 8001eb6:	d064      	beq.n	8001f82 <HAL_UART_Receive_IT+0xf2>
 8001eb8:	2470      	movs	r4, #112	; 0x70
 8001eba:	2501      	movs	r5, #1
 8001ebc:	5505      	strb	r5, [r0, r4]
    huart->pRxBuffPtr  = pData;
 8001ebe:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001ec0:	2158      	movs	r1, #88	; 0x58
 8001ec2:	5242      	strh	r2, [r0, r1]
    huart->RxXferCount = Size;
 8001ec4:	3102      	adds	r1, #2
 8001ec6:	5242      	strh	r2, [r0, r1]
    huart->RxISR       = NULL;
 8001ec8:	2200      	movs	r2, #0
 8001eca:	6602      	str	r2, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d03a      	beq.n	8001f46 <HAL_UART_Receive_IT+0xb6>
 8001ed0:	2280      	movs	r2, #128	; 0x80
 8001ed2:	0552      	lsls	r2, r2, #21
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d041      	beq.n	8001f5c <HAL_UART_Receive_IT+0xcc>
 8001ed8:	235c      	movs	r3, #92	; 0x5c
 8001eda:	2200      	movs	r2, #0
 8001edc:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ee2:	3322      	adds	r3, #34	; 0x22
 8001ee4:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ee6:	6802      	ldr	r2, [r0, #0]
 8001ee8:	6893      	ldr	r3, [r2, #8]
 8001eea:	2101      	movs	r1, #1
 8001eec:	430b      	orrs	r3, r1
 8001eee:	6093      	str	r3, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	015b      	lsls	r3, r3, #5
 8001ef4:	6882      	ldr	r2, [r0, #8]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d03b      	beq.n	8001f72 <HAL_UART_Receive_IT+0xe2>
      huart->RxISR = UART_RxISR_8BIT;
 8001efa:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_UART_Receive_IT+0x120>)
 8001efc:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_UNLOCK(huart);
 8001efe:	2370      	movs	r3, #112	; 0x70
 8001f00:	2200      	movs	r2, #0
 8001f02:	54c2      	strb	r2, [r0, r3]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001f04:	6802      	ldr	r2, [r0, #0]
 8001f06:	6811      	ldr	r1, [r2, #0]
 8001f08:	33b0      	adds	r3, #176	; 0xb0
 8001f0a:	430b      	orrs	r3, r1
 8001f0c:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	0018      	movs	r0, r3
 8001f12:	bd30      	pop	{r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f14:	6903      	ldr	r3, [r0, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d137      	bne.n	8001f8a <HAL_UART_Receive_IT+0xfa>
        return  HAL_ERROR;
 8001f1a:	3301      	adds	r3, #1
      if ((((uint32_t)pData) & 1) != 0)
 8001f1c:	07cc      	lsls	r4, r1, #31
 8001f1e:	d4f7      	bmi.n	8001f10 <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 8001f20:	2370      	movs	r3, #112	; 0x70
 8001f22:	5cc4      	ldrb	r4, [r0, r3]
 8001f24:	3b6e      	subs	r3, #110	; 0x6e
 8001f26:	2c01      	cmp	r4, #1
 8001f28:	d0f2      	beq.n	8001f10 <HAL_UART_Receive_IT+0x80>
 8001f2a:	2370      	movs	r3, #112	; 0x70
 8001f2c:	2401      	movs	r4, #1
 8001f2e:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr  = pData;
 8001f30:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001f32:	3b18      	subs	r3, #24
 8001f34:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8001f36:	3302      	adds	r3, #2
 8001f38:	52c2      	strh	r2, [r0, r3]
    huart->RxISR       = NULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8001f3e:	335c      	adds	r3, #92	; 0x5c
 8001f40:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <HAL_UART_Receive_IT+0x124>)
 8001f42:	52c2      	strh	r2, [r0, r3]
 8001f44:	e7cb      	b.n	8001ede <HAL_UART_Receive_IT+0x4e>
 8001f46:	6903      	ldr	r3, [r0, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d103      	bne.n	8001f54 <HAL_UART_Receive_IT+0xc4>
 8001f4c:	335c      	adds	r3, #92	; 0x5c
 8001f4e:	22ff      	movs	r2, #255	; 0xff
 8001f50:	52c2      	strh	r2, [r0, r3]
 8001f52:	e7c4      	b.n	8001ede <HAL_UART_Receive_IT+0x4e>
 8001f54:	235c      	movs	r3, #92	; 0x5c
 8001f56:	227f      	movs	r2, #127	; 0x7f
 8001f58:	52c2      	strh	r2, [r0, r3]
 8001f5a:	e7c0      	b.n	8001ede <HAL_UART_Receive_IT+0x4e>
 8001f5c:	6903      	ldr	r3, [r0, #16]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d103      	bne.n	8001f6a <HAL_UART_Receive_IT+0xda>
 8001f62:	335c      	adds	r3, #92	; 0x5c
 8001f64:	227f      	movs	r2, #127	; 0x7f
 8001f66:	52c2      	strh	r2, [r0, r3]
 8001f68:	e7b9      	b.n	8001ede <HAL_UART_Receive_IT+0x4e>
 8001f6a:	235c      	movs	r3, #92	; 0x5c
 8001f6c:	223f      	movs	r2, #63	; 0x3f
 8001f6e:	52c2      	strh	r2, [r0, r3]
 8001f70:	e7b5      	b.n	8001ede <HAL_UART_Receive_IT+0x4e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f72:	6903      	ldr	r3, [r0, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1c0      	bne.n	8001efa <HAL_UART_Receive_IT+0x6a>
      huart->RxISR = UART_RxISR_16BIT;
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_UART_Receive_IT+0x128>)
 8001f7a:	6603      	str	r3, [r0, #96]	; 0x60
 8001f7c:	e7bf      	b.n	8001efe <HAL_UART_Receive_IT+0x6e>
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e7c6      	b.n	8001f10 <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 8001f82:	2302      	movs	r3, #2
 8001f84:	e7c4      	b.n	8001f10 <HAL_UART_Receive_IT+0x80>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e7c2      	b.n	8001f10 <HAL_UART_Receive_IT+0x80>
 8001f8a:	2370      	movs	r3, #112	; 0x70
 8001f8c:	5cc3      	ldrb	r3, [r0, r3]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d0f9      	beq.n	8001f86 <HAL_UART_Receive_IT+0xf6>
 8001f92:	2370      	movs	r3, #112	; 0x70
 8001f94:	2401      	movs	r4, #1
 8001f96:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr  = pData;
 8001f98:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001f9a:	3b18      	subs	r3, #24
 8001f9c:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	52c2      	strh	r2, [r0, r3]
    huart->RxISR       = NULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8001fa6:	335c      	adds	r3, #92	; 0x5c
 8001fa8:	22ff      	movs	r2, #255	; 0xff
 8001faa:	52c2      	strh	r2, [r0, r3]
 8001fac:	e797      	b.n	8001ede <HAL_UART_Receive_IT+0x4e>
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	08001fbd 	.word	0x08001fbd
 8001fb4:	000001ff 	.word	0x000001ff
 8001fb8:	08002021 	.word	0x08002021

08001fbc <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8001fbc:	b510      	push	{r4, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001fbe:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001fc0:	2b22      	cmp	r3, #34	; 0x22
 8001fc2:	d005      	beq.n	8001fd0 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001fc4:	6802      	ldr	r2, [r0, #0]
 8001fc6:	6993      	ldr	r3, [r2, #24]
 8001fc8:	2108      	movs	r1, #8
 8001fca:	430b      	orrs	r3, r1
 8001fcc:	6193      	str	r3, [r2, #24]
  }
}
 8001fce:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001fd0:	6803      	ldr	r3, [r0, #0]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  uint16_t uhMask = huart->Mask;
 8001fd4:	225c      	movs	r2, #92	; 0x5c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001fd6:	5a82      	ldrh	r2, [r0, r2]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001fdc:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8001fde:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001fe4:	225a      	movs	r2, #90	; 0x5a
 8001fe6:	5a83      	ldrh	r3, [r0, r2]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8001fee:	5a83      	ldrh	r3, [r0, r2]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1eb      	bne.n	8001fce <UART_RxISR_8BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ff6:	6802      	ldr	r2, [r0, #0]
 8001ff8:	6813      	ldr	r3, [r2, #0]
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <UART_RxISR_8BIT+0x60>)
 8001ffc:	400b      	ands	r3, r1
 8001ffe:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002000:	6802      	ldr	r2, [r0, #0]
 8002002:	6893      	ldr	r3, [r2, #8]
 8002004:	3123      	adds	r1, #35	; 0x23
 8002006:	31ff      	adds	r1, #255	; 0xff
 8002008:	438b      	bics	r3, r1
 800200a:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800200c:	2320      	movs	r3, #32
 800200e:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8002010:	2300      	movs	r3, #0
 8002012:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8002014:	f000 fd0c 	bl	8002a30 <HAL_UART_RxCpltCallback>
 8002018:	e7d9      	b.n	8001fce <UART_RxISR_8BIT+0x12>
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	fffffedf 	.word	0xfffffedf

08002020 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002020:	b510      	push	{r4, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002022:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002024:	2b22      	cmp	r3, #34	; 0x22
 8002026:	d005      	beq.n	8002034 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002028:	6802      	ldr	r2, [r0, #0]
 800202a:	6993      	ldr	r3, [r2, #24]
 800202c:	2108      	movs	r1, #8
 800202e:	430b      	orrs	r3, r1
 8002030:	6193      	str	r3, [r2, #24]
  }
}
 8002032:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002034:	6803      	ldr	r3, [r0, #0]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  uint16_t uhMask = huart->Mask;
 8002038:	225c      	movs	r2, #92	; 0x5c
    *tmp = (uint16_t)(uhdata & uhMask);
 800203a:	5a82      	ldrh	r2, [r0, r2]
 800203c:	4013      	ands	r3, r2
 800203e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002040:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 8002042:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002044:	3302      	adds	r3, #2
 8002046:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8002048:	225a      	movs	r2, #90	; 0x5a
 800204a:	5a83      	ldrh	r3, [r0, r2]
 800204c:	3b01      	subs	r3, #1
 800204e:	b29b      	uxth	r3, r3
 8002050:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8002052:	5a83      	ldrh	r3, [r0, r2]
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1eb      	bne.n	8002032 <UART_RxISR_16BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800205a:	6802      	ldr	r2, [r0, #0]
 800205c:	6813      	ldr	r3, [r2, #0]
 800205e:	4908      	ldr	r1, [pc, #32]	; (8002080 <UART_RxISR_16BIT+0x60>)
 8002060:	400b      	ands	r3, r1
 8002062:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002064:	6802      	ldr	r2, [r0, #0]
 8002066:	6893      	ldr	r3, [r2, #8]
 8002068:	3123      	adds	r1, #35	; 0x23
 800206a:	31ff      	adds	r1, #255	; 0xff
 800206c:	438b      	bics	r3, r1
 800206e:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002070:	2320      	movs	r3, #32
 8002072:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8002074:	2300      	movs	r3, #0
 8002076:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8002078:	f000 fcda 	bl	8002a30 <HAL_UART_RxCpltCallback>
 800207c:	e7d9      	b.n	8002032 <UART_RxISR_16BIT+0x12>
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	fffffedf 	.word	0xfffffedf

08002084 <HAL_UART_ErrorCallback>:
}
 8002084:	4770      	bx	lr
	...

08002088 <HAL_UART_IRQHandler>:
{
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800208c:	6802      	ldr	r2, [r0, #0]
 800208e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002090:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002092:	6895      	ldr	r5, [r2, #8]
  if (errorflags == 0U)
 8002094:	0718      	lsls	r0, r3, #28
 8002096:	d10a      	bne.n	80020ae <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002098:	0698      	lsls	r0, r3, #26
 800209a:	d577      	bpl.n	800218c <HAL_UART_IRQHandler+0x104>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800209c:	0688      	lsls	r0, r1, #26
 800209e:	d575      	bpl.n	800218c <HAL_UART_IRQHandler+0x104>
      if (huart->RxISR != NULL)
 80020a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d100      	bne.n	80020a8 <HAL_UART_IRQHandler+0x20>
 80020a6:	e08a      	b.n	80021be <HAL_UART_IRQHandler+0x136>
        huart->RxISR(huart);
 80020a8:	0020      	movs	r0, r4
 80020aa:	4798      	blx	r3
 80020ac:	e087      	b.n	80021be <HAL_UART_IRQHandler+0x136>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80020ae:	2001      	movs	r0, #1
 80020b0:	4028      	ands	r0, r5
 80020b2:	d103      	bne.n	80020bc <HAL_UART_IRQHandler+0x34>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80020b4:	2690      	movs	r6, #144	; 0x90
 80020b6:	0076      	lsls	r6, r6, #1
 80020b8:	4231      	tst	r1, r6
 80020ba:	d067      	beq.n	800218c <HAL_UART_IRQHandler+0x104>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80020bc:	07dd      	lsls	r5, r3, #31
 80020be:	d506      	bpl.n	80020ce <HAL_UART_IRQHandler+0x46>
 80020c0:	05cd      	lsls	r5, r1, #23
 80020c2:	d504      	bpl.n	80020ce <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80020c4:	2501      	movs	r5, #1
 80020c6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020c8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80020ca:	432a      	orrs	r2, r5
 80020cc:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80020ce:	079a      	lsls	r2, r3, #30
 80020d0:	d549      	bpl.n	8002166 <HAL_UART_IRQHandler+0xde>
 80020d2:	2800      	cmp	r0, #0
 80020d4:	d00f      	beq.n	80020f6 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80020d6:	6822      	ldr	r2, [r4, #0]
 80020d8:	2502      	movs	r5, #2
 80020da:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020dc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80020de:	3502      	adds	r5, #2
 80020e0:	432a      	orrs	r2, r5
 80020e2:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80020e4:	421d      	tst	r5, r3
 80020e6:	d006      	beq.n	80020f6 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80020e8:	6822      	ldr	r2, [r4, #0]
 80020ea:	2504      	movs	r5, #4
 80020ec:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ee:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80020f0:	3d02      	subs	r5, #2
 80020f2:	432a      	orrs	r2, r5
 80020f4:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80020f6:	071a      	lsls	r2, r3, #28
 80020f8:	d509      	bpl.n	800210e <HAL_UART_IRQHandler+0x86>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80020fa:	068a      	lsls	r2, r1, #26
 80020fc:	d401      	bmi.n	8002102 <HAL_UART_IRQHandler+0x7a>
 80020fe:	2800      	cmp	r0, #0
 8002100:	d005      	beq.n	800210e <HAL_UART_IRQHandler+0x86>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002102:	6822      	ldr	r2, [r4, #0]
 8002104:	2008      	movs	r0, #8
 8002106:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002108:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800210a:	4302      	orrs	r2, r0
 800210c:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800210e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002110:	2a00      	cmp	r2, #0
 8002112:	d054      	beq.n	80021be <HAL_UART_IRQHandler+0x136>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002114:	069b      	lsls	r3, r3, #26
 8002116:	d506      	bpl.n	8002126 <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002118:	068b      	lsls	r3, r1, #26
 800211a:	d504      	bpl.n	8002126 <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 800211c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 8002122:	0020      	movs	r0, r4
 8002124:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8002126:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	065b      	lsls	r3, r3, #25
 800212e:	d401      	bmi.n	8002134 <HAL_UART_IRQHandler+0xac>
 8002130:	0713      	lsls	r3, r2, #28
 8002132:	d525      	bpl.n	8002180 <HAL_UART_IRQHandler+0xf8>
        UART_EndRxTransfer(huart);
 8002134:	0020      	movs	r0, r4
 8002136:	f7ff fdfd 	bl	8001d34 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	0652      	lsls	r2, r2, #25
 8002140:	d51a      	bpl.n	8002178 <HAL_UART_IRQHandler+0xf0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	2140      	movs	r1, #64	; 0x40
 8002146:	438a      	bics	r2, r1
 8002148:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800214a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00f      	beq.n	8002170 <HAL_UART_IRQHandler+0xe8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002150:	4a21      	ldr	r2, [pc, #132]	; (80021d8 <HAL_UART_IRQHandler+0x150>)
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002154:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002156:	f7fe fc11 	bl	800097c <HAL_DMA_Abort_IT>
 800215a:	2800      	cmp	r0, #0
 800215c:	d02f      	beq.n	80021be <HAL_UART_IRQHandler+0x136>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800215e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002160:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002162:	4798      	blx	r3
 8002164:	e02b      	b.n	80021be <HAL_UART_IRQHandler+0x136>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002166:	075a      	lsls	r2, r3, #29
 8002168:	d5c5      	bpl.n	80020f6 <HAL_UART_IRQHandler+0x6e>
 800216a:	2800      	cmp	r0, #0
 800216c:	d1bc      	bne.n	80020e8 <HAL_UART_IRQHandler+0x60>
 800216e:	e7c2      	b.n	80020f6 <HAL_UART_IRQHandler+0x6e>
            HAL_UART_ErrorCallback(huart);
 8002170:	0020      	movs	r0, r4
 8002172:	f7ff ff87 	bl	8002084 <HAL_UART_ErrorCallback>
 8002176:	e022      	b.n	80021be <HAL_UART_IRQHandler+0x136>
          HAL_UART_ErrorCallback(huart);
 8002178:	0020      	movs	r0, r4
 800217a:	f7ff ff83 	bl	8002084 <HAL_UART_ErrorCallback>
 800217e:	e01e      	b.n	80021be <HAL_UART_IRQHandler+0x136>
        HAL_UART_ErrorCallback(huart);
 8002180:	0020      	movs	r0, r4
 8002182:	f7ff ff7f 	bl	8002084 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002186:	2300      	movs	r3, #0
 8002188:	67e3      	str	r3, [r4, #124]	; 0x7c
 800218a:	e018      	b.n	80021be <HAL_UART_IRQHandler+0x136>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800218c:	02d8      	lsls	r0, r3, #11
 800218e:	d501      	bpl.n	8002194 <HAL_UART_IRQHandler+0x10c>
 8002190:	0268      	lsls	r0, r5, #9
 8002192:	d409      	bmi.n	80021a8 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002194:	0618      	lsls	r0, r3, #24
 8002196:	d50e      	bpl.n	80021b6 <HAL_UART_IRQHandler+0x12e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002198:	0608      	lsls	r0, r1, #24
 800219a:	d50c      	bpl.n	80021b6 <HAL_UART_IRQHandler+0x12e>
    if (huart->TxISR != NULL)
 800219c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00d      	beq.n	80021be <HAL_UART_IRQHandler+0x136>
      huart->TxISR(huart);
 80021a2:	0020      	movs	r0, r4
 80021a4:	4798      	blx	r3
 80021a6:	e00a      	b.n	80021be <HAL_UART_IRQHandler+0x136>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	035b      	lsls	r3, r3, #13
 80021ac:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80021ae:	0020      	movs	r0, r4
 80021b0:	f000 faba 	bl	8002728 <HAL_UARTEx_WakeupCallback>
    return;
 80021b4:	e003      	b.n	80021be <HAL_UART_IRQHandler+0x136>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80021b6:	065b      	lsls	r3, r3, #25
 80021b8:	d501      	bpl.n	80021be <HAL_UART_IRQHandler+0x136>
 80021ba:	064b      	lsls	r3, r1, #25
 80021bc:	d400      	bmi.n	80021c0 <HAL_UART_IRQHandler+0x138>
}
 80021be:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80021c0:	6813      	ldr	r3, [r2, #0]
 80021c2:	2140      	movs	r1, #64	; 0x40
 80021c4:	438b      	bics	r3, r1
 80021c6:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80021c8:	2320      	movs	r3, #32
 80021ca:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 80021d0:	0020      	movs	r0, r4
 80021d2:	f000 fd2f 	bl	8002c34 <HAL_UART_TxCpltCallback>
 80021d6:	e7f2      	b.n	80021be <HAL_UART_IRQHandler+0x136>
 80021d8:	080021dd 	.word	0x080021dd

080021dc <UART_DMAAbortOnError>:
{
 80021dc:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80021de:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	225a      	movs	r2, #90	; 0x5a
 80021e4:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80021e6:	3a08      	subs	r2, #8
 80021e8:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 80021ea:	f7ff ff4b 	bl	8002084 <HAL_UART_ErrorCallback>
}
 80021ee:	bd10      	pop	{r4, pc}

080021f0 <UART_SetConfig>:
{
 80021f0:	b5d0      	push	{r4, r6, r7, lr}
 80021f2:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80021f4:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021f6:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021f8:	6883      	ldr	r3, [r0, #8]
 80021fa:	6900      	ldr	r0, [r0, #16]
 80021fc:	4303      	orrs	r3, r0
 80021fe:	6960      	ldr	r0, [r4, #20]
 8002200:	4303      	orrs	r3, r0
 8002202:	69e0      	ldr	r0, [r4, #28]
 8002204:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002206:	48b0      	ldr	r0, [pc, #704]	; (80024c8 <UART_SetConfig+0x2d8>)
 8002208:	4002      	ands	r2, r0
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800220e:	6822      	ldr	r2, [r4, #0]
 8002210:	6853      	ldr	r3, [r2, #4]
 8002212:	49ae      	ldr	r1, [pc, #696]	; (80024cc <UART_SetConfig+0x2dc>)
 8002214:	400b      	ands	r3, r1
 8002216:	68e1      	ldr	r1, [r4, #12]
 8002218:	430b      	orrs	r3, r1
 800221a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800221c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800221e:	6822      	ldr	r2, [r4, #0]
 8002220:	4bab      	ldr	r3, [pc, #684]	; (80024d0 <UART_SetConfig+0x2e0>)
 8002222:	429a      	cmp	r2, r3
 8002224:	d001      	beq.n	800222a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8002226:	6a23      	ldr	r3, [r4, #32]
 8002228:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800222a:	6893      	ldr	r3, [r2, #8]
 800222c:	48a9      	ldr	r0, [pc, #676]	; (80024d4 <UART_SetConfig+0x2e4>)
 800222e:	4003      	ands	r3, r0
 8002230:	430b      	orrs	r3, r1
 8002232:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002234:	6822      	ldr	r2, [r4, #0]
 8002236:	4ba8      	ldr	r3, [pc, #672]	; (80024d8 <UART_SetConfig+0x2e8>)
 8002238:	429a      	cmp	r2, r3
 800223a:	d00f      	beq.n	800225c <UART_SetConfig+0x6c>
 800223c:	49a4      	ldr	r1, [pc, #656]	; (80024d0 <UART_SetConfig+0x2e0>)
 800223e:	2310      	movs	r3, #16
 8002240:	428a      	cmp	r2, r1
 8002242:	d049      	beq.n	80022d8 <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	0212      	lsls	r2, r2, #8
 8002248:	69e1      	ldr	r1, [r4, #28]
 800224a:	4291      	cmp	r1, r2
 800224c:	d06e      	beq.n	800232c <UART_SetConfig+0x13c>
    switch (clocksource)
 800224e:	2b08      	cmp	r3, #8
 8002250:	d900      	bls.n	8002254 <UART_SetConfig+0x64>
 8002252:	e12a      	b.n	80024aa <UART_SetConfig+0x2ba>
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4aa1      	ldr	r2, [pc, #644]	; (80024dc <UART_SetConfig+0x2ec>)
 8002258:	58d3      	ldr	r3, [r2, r3]
 800225a:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 800225c:	4ba0      	ldr	r3, [pc, #640]	; (80024e0 <UART_SetConfig+0x2f0>)
 800225e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002260:	210c      	movs	r1, #12
 8002262:	4019      	ands	r1, r3
 8002264:	2904      	cmp	r1, #4
 8002266:	d035      	beq.n	80022d4 <UART_SetConfig+0xe4>
 8002268:	d907      	bls.n	800227a <UART_SetConfig+0x8a>
 800226a:	2302      	movs	r3, #2
 800226c:	2908      	cmp	r1, #8
 800226e:	d0e9      	beq.n	8002244 <UART_SetConfig+0x54>
 8002270:	3306      	adds	r3, #6
 8002272:	290c      	cmp	r1, #12
 8002274:	d0e6      	beq.n	8002244 <UART_SetConfig+0x54>
 8002276:	2310      	movs	r3, #16
 8002278:	e7e4      	b.n	8002244 <UART_SetConfig+0x54>
 800227a:	2900      	cmp	r1, #0
 800227c:	d1fb      	bne.n	8002276 <UART_SetConfig+0x86>
  if (UART_INSTANCE_LOWPOWER(huart))
 800227e:	4b94      	ldr	r3, [pc, #592]	; (80024d0 <UART_SetConfig+0x2e0>)
 8002280:	429a      	cmp	r2, r3
 8002282:	d000      	beq.n	8002286 <UART_SetConfig+0x96>
 8002284:	e118      	b.n	80024b8 <UART_SetConfig+0x2c8>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002286:	f7ff fa7d 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 800228a:	0003      	movs	r3, r0
 800228c:	2000      	movs	r0, #0
    if (lpuart_ker_ck_pres != 0U)
 800228e:	2b00      	cmp	r3, #0
 8002290:	d100      	bne.n	8002294 <UART_SetConfig+0xa4>
 8002292:	e0c5      	b.n	8002420 <UART_SetConfig+0x230>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002294:	6862      	ldr	r2, [r4, #4]
 8002296:	0051      	lsls	r1, r2, #1
 8002298:	1889      	adds	r1, r1, r2
        ret = HAL_ERROR;
 800229a:	2001      	movs	r0, #1
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800229c:	4299      	cmp	r1, r3
 800229e:	d900      	bls.n	80022a2 <UART_SetConfig+0xb2>
 80022a0:	e0be      	b.n	8002420 <UART_SetConfig+0x230>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80022a2:	0311      	lsls	r1, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80022a4:	4299      	cmp	r1, r3
 80022a6:	d200      	bcs.n	80022aa <UART_SetConfig+0xba>
 80022a8:	e0ba      	b.n	8002420 <UART_SetConfig+0x230>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80022aa:	0e19      	lsrs	r1, r3, #24
 80022ac:	0218      	lsls	r0, r3, #8
 80022ae:	0856      	lsrs	r6, r2, #1
 80022b0:	2700      	movs	r7, #0
 80022b2:	1980      	adds	r0, r0, r6
 80022b4:	4179      	adcs	r1, r7
 80022b6:	2300      	movs	r3, #0
 80022b8:	f7fd fffc 	bl	80002b4 <__aeabi_uldivmod>
 80022bc:	0003      	movs	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80022be:	4a89      	ldr	r2, [pc, #548]	; (80024e4 <UART_SetConfig+0x2f4>)
 80022c0:	1881      	adds	r1, r0, r2
 80022c2:	4a89      	ldr	r2, [pc, #548]	; (80024e8 <UART_SetConfig+0x2f8>)
          ret = HAL_ERROR;
 80022c4:	2001      	movs	r0, #1
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80022c6:	4291      	cmp	r1, r2
 80022c8:	d900      	bls.n	80022cc <UART_SetConfig+0xdc>
 80022ca:	e0a9      	b.n	8002420 <UART_SetConfig+0x230>
          huart->Instance->BRR = usartdiv;
 80022cc:	6822      	ldr	r2, [r4, #0]
 80022ce:	60d3      	str	r3, [r2, #12]
 80022d0:	2000      	movs	r0, #0
 80022d2:	e0a5      	b.n	8002420 <UART_SetConfig+0x230>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022d4:	2304      	movs	r3, #4
 80022d6:	e7b5      	b.n	8002244 <UART_SetConfig+0x54>
 80022d8:	4b81      	ldr	r3, [pc, #516]	; (80024e0 <UART_SetConfig+0x2f0>)
 80022da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022dc:	21c0      	movs	r1, #192	; 0xc0
 80022de:	0109      	lsls	r1, r1, #4
 80022e0:	400b      	ands	r3, r1
 80022e2:	2180      	movs	r1, #128	; 0x80
 80022e4:	00c9      	lsls	r1, r1, #3
 80022e6:	428b      	cmp	r3, r1
 80022e8:	d01c      	beq.n	8002324 <UART_SetConfig+0x134>
 80022ea:	d90a      	bls.n	8002302 <UART_SetConfig+0x112>
 80022ec:	2280      	movs	r2, #128	; 0x80
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00a      	beq.n	800230a <UART_SetConfig+0x11a>
 80022f4:	22c0      	movs	r2, #192	; 0xc0
 80022f6:	0112      	lsls	r2, r2, #4
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d104      	bne.n	8002306 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	e7c8      	b.n	8002294 <UART_SetConfig+0xa4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0bb      	beq.n	800227e <UART_SetConfig+0x8e>
        ret = HAL_ERROR;
 8002306:	2001      	movs	r0, #1
 8002308:	e08a      	b.n	8002420 <UART_SetConfig+0x230>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800230a:	4b75      	ldr	r3, [pc, #468]	; (80024e0 <UART_SetConfig+0x2f0>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2310      	movs	r3, #16
 8002310:	4013      	ands	r3, r2
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002312:	425a      	negs	r2, r3
 8002314:	4153      	adcs	r3, r2
 8002316:	425b      	negs	r3, r3
 8002318:	4874      	ldr	r0, [pc, #464]	; (80024ec <UART_SetConfig+0x2fc>)
 800231a:	4003      	ands	r3, r0
 800231c:	4a74      	ldr	r2, [pc, #464]	; (80024f0 <UART_SetConfig+0x300>)
 800231e:	4694      	mov	ip, r2
 8002320:	4463      	add	r3, ip
 8002322:	e7b7      	b.n	8002294 <UART_SetConfig+0xa4>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002324:	f7fe fe42 	bl	8000fac <HAL_RCC_GetSysClockFreq>
 8002328:	0003      	movs	r3, r0
        break;
 800232a:	e7af      	b.n	800228c <UART_SetConfig+0x9c>
    switch (clocksource)
 800232c:	2b08      	cmp	r3, #8
 800232e:	d862      	bhi.n	80023f6 <UART_SetConfig+0x206>
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4a70      	ldr	r2, [pc, #448]	; (80024f4 <UART_SetConfig+0x304>)
 8002334:	58d3      	ldr	r3, [r2, r3]
 8002336:	469f      	mov	pc, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002338:	f7ff fa24 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 800233c:	0040      	lsls	r0, r0, #1
 800233e:	6863      	ldr	r3, [r4, #4]
 8002340:	085b      	lsrs	r3, r3, #1
 8002342:	18c0      	adds	r0, r0, r3
 8002344:	6861      	ldr	r1, [r4, #4]
 8002346:	f7fd ff29 	bl	800019c <__udivsi3>
 800234a:	0403      	lsls	r3, r0, #16
 800234c:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800234e:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002350:	4969      	ldr	r1, [pc, #420]	; (80024f8 <UART_SetConfig+0x308>)
 8002352:	001a      	movs	r2, r3
 8002354:	3a10      	subs	r2, #16
 8002356:	428a      	cmp	r2, r1
 8002358:	d900      	bls.n	800235c <UART_SetConfig+0x16c>
 800235a:	e0a9      	b.n	80024b0 <UART_SetConfig+0x2c0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800235c:	220f      	movs	r2, #15
 800235e:	0019      	movs	r1, r3
 8002360:	4391      	bics	r1, r2
 8002362:	000a      	movs	r2, r1
      huart->Instance->BRR = brrtemp;
 8002364:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002366:	071b      	lsls	r3, r3, #28
 8002368:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 800236a:	4313      	orrs	r3, r2
 800236c:	60cb      	str	r3, [r1, #12]
 800236e:	e057      	b.n	8002420 <UART_SetConfig+0x230>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002370:	f7ff fa18 	bl	80017a4 <HAL_RCC_GetPCLK2Freq>
 8002374:	0040      	lsls	r0, r0, #1
 8002376:	6863      	ldr	r3, [r4, #4]
 8002378:	085b      	lsrs	r3, r3, #1
 800237a:	18c0      	adds	r0, r0, r3
 800237c:	6861      	ldr	r1, [r4, #4]
 800237e:	f7fd ff0d 	bl	800019c <__udivsi3>
 8002382:	0403      	lsls	r3, r0, #16
 8002384:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002386:	2000      	movs	r0, #0
        break;
 8002388:	e7e2      	b.n	8002350 <UART_SetConfig+0x160>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800238a:	4b55      	ldr	r3, [pc, #340]	; (80024e0 <UART_SetConfig+0x2f0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	06db      	lsls	r3, r3, #27
 8002390:	d50b      	bpl.n	80023aa <UART_SetConfig+0x1ba>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002392:	6863      	ldr	r3, [r4, #4]
 8002394:	0858      	lsrs	r0, r3, #1
 8002396:	4b59      	ldr	r3, [pc, #356]	; (80024fc <UART_SetConfig+0x30c>)
 8002398:	469c      	mov	ip, r3
 800239a:	4460      	add	r0, ip
 800239c:	6861      	ldr	r1, [r4, #4]
 800239e:	f7fd fefd 	bl	800019c <__udivsi3>
 80023a2:	0403      	lsls	r3, r0, #16
 80023a4:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80023a6:	2000      	movs	r0, #0
 80023a8:	e7d2      	b.n	8002350 <UART_SetConfig+0x160>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80023aa:	6863      	ldr	r3, [r4, #4]
 80023ac:	0858      	lsrs	r0, r3, #1
 80023ae:	4b54      	ldr	r3, [pc, #336]	; (8002500 <UART_SetConfig+0x310>)
 80023b0:	469c      	mov	ip, r3
 80023b2:	4460      	add	r0, ip
 80023b4:	6861      	ldr	r1, [r4, #4]
 80023b6:	f7fd fef1 	bl	800019c <__udivsi3>
 80023ba:	0403      	lsls	r3, r0, #16
 80023bc:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80023be:	2000      	movs	r0, #0
 80023c0:	e7c6      	b.n	8002350 <UART_SetConfig+0x160>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023c2:	f7fe fdf3 	bl	8000fac <HAL_RCC_GetSysClockFreq>
 80023c6:	0040      	lsls	r0, r0, #1
 80023c8:	6863      	ldr	r3, [r4, #4]
 80023ca:	085b      	lsrs	r3, r3, #1
 80023cc:	18c0      	adds	r0, r0, r3
 80023ce:	6861      	ldr	r1, [r4, #4]
 80023d0:	f7fd fee4 	bl	800019c <__udivsi3>
 80023d4:	0403      	lsls	r3, r0, #16
 80023d6:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80023d8:	2000      	movs	r0, #0
        break;
 80023da:	e7b9      	b.n	8002350 <UART_SetConfig+0x160>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023dc:	6863      	ldr	r3, [r4, #4]
 80023de:	0858      	lsrs	r0, r3, #1
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	025b      	lsls	r3, r3, #9
 80023e4:	469c      	mov	ip, r3
 80023e6:	4460      	add	r0, ip
 80023e8:	6861      	ldr	r1, [r4, #4]
 80023ea:	f7fd fed7 	bl	800019c <__udivsi3>
 80023ee:	0403      	lsls	r3, r0, #16
 80023f0:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80023f2:	2000      	movs	r0, #0
        break;
 80023f4:	e7ac      	b.n	8002350 <UART_SetConfig+0x160>
        ret = HAL_ERROR;
 80023f6:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e7a9      	b.n	8002350 <UART_SetConfig+0x160>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80023fc:	f7ff f9c2 	bl	8001784 <HAL_RCC_GetPCLK1Freq>
 8002400:	6863      	ldr	r3, [r4, #4]
 8002402:	085b      	lsrs	r3, r3, #1
 8002404:	1818      	adds	r0, r3, r0
 8002406:	6861      	ldr	r1, [r4, #4]
 8002408:	f7fd fec8 	bl	800019c <__udivsi3>
 800240c:	0403      	lsls	r3, r0, #16
 800240e:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002410:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002412:	4939      	ldr	r1, [pc, #228]	; (80024f8 <UART_SetConfig+0x308>)
 8002414:	001a      	movs	r2, r3
 8002416:	3a10      	subs	r2, #16
 8002418:	428a      	cmp	r2, r1
 800241a:	d84b      	bhi.n	80024b4 <UART_SetConfig+0x2c4>
      huart->Instance->BRR = usartdiv;
 800241c:	6822      	ldr	r2, [r4, #0]
 800241e:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8002420:	2300      	movs	r3, #0
 8002422:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002424:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002426:	bdd0      	pop	{r4, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002428:	f7ff f9bc 	bl	80017a4 <HAL_RCC_GetPCLK2Freq>
 800242c:	6863      	ldr	r3, [r4, #4]
 800242e:	085b      	lsrs	r3, r3, #1
 8002430:	1818      	adds	r0, r3, r0
 8002432:	6861      	ldr	r1, [r4, #4]
 8002434:	f7fd feb2 	bl	800019c <__udivsi3>
 8002438:	0403      	lsls	r3, r0, #16
 800243a:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800243c:	2000      	movs	r0, #0
        break;
 800243e:	e7e8      	b.n	8002412 <UART_SetConfig+0x222>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <UART_SetConfig+0x2f0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	06db      	lsls	r3, r3, #27
 8002446:	d50b      	bpl.n	8002460 <UART_SetConfig+0x270>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002448:	6863      	ldr	r3, [r4, #4]
 800244a:	0858      	lsrs	r0, r3, #1
 800244c:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <UART_SetConfig+0x300>)
 800244e:	469c      	mov	ip, r3
 8002450:	4460      	add	r0, ip
 8002452:	6861      	ldr	r1, [r4, #4]
 8002454:	f7fd fea2 	bl	800019c <__udivsi3>
 8002458:	0403      	lsls	r3, r0, #16
 800245a:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800245c:	2000      	movs	r0, #0
 800245e:	e7d8      	b.n	8002412 <UART_SetConfig+0x222>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002460:	6863      	ldr	r3, [r4, #4]
 8002462:	0858      	lsrs	r0, r3, #1
 8002464:	4b27      	ldr	r3, [pc, #156]	; (8002504 <UART_SetConfig+0x314>)
 8002466:	469c      	mov	ip, r3
 8002468:	4460      	add	r0, ip
 800246a:	6861      	ldr	r1, [r4, #4]
 800246c:	f7fd fe96 	bl	800019c <__udivsi3>
 8002470:	0403      	lsls	r3, r0, #16
 8002472:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002474:	2000      	movs	r0, #0
 8002476:	e7cc      	b.n	8002412 <UART_SetConfig+0x222>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002478:	f7fe fd98 	bl	8000fac <HAL_RCC_GetSysClockFreq>
 800247c:	6863      	ldr	r3, [r4, #4]
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	1818      	adds	r0, r3, r0
 8002482:	6861      	ldr	r1, [r4, #4]
 8002484:	f7fd fe8a 	bl	800019c <__udivsi3>
 8002488:	0403      	lsls	r3, r0, #16
 800248a:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800248c:	2000      	movs	r0, #0
        break;
 800248e:	e7c0      	b.n	8002412 <UART_SetConfig+0x222>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002490:	6863      	ldr	r3, [r4, #4]
 8002492:	0858      	lsrs	r0, r3, #1
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	469c      	mov	ip, r3
 800249a:	4460      	add	r0, ip
 800249c:	6861      	ldr	r1, [r4, #4]
 800249e:	f7fd fe7d 	bl	800019c <__udivsi3>
 80024a2:	0403      	lsls	r3, r0, #16
 80024a4:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80024a6:	2000      	movs	r0, #0
        break;
 80024a8:	e7b3      	b.n	8002412 <UART_SetConfig+0x222>
        ret = HAL_ERROR;
 80024aa:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e7b0      	b.n	8002412 <UART_SetConfig+0x222>
      ret = HAL_ERROR;
 80024b0:	2001      	movs	r0, #1
 80024b2:	e7b5      	b.n	8002420 <UART_SetConfig+0x230>
      ret = HAL_ERROR;
 80024b4:	2001      	movs	r0, #1
 80024b6:	e7b3      	b.n	8002420 <UART_SetConfig+0x230>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	69e2      	ldr	r2, [r4, #28]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d100      	bne.n	80024c4 <UART_SetConfig+0x2d4>
 80024c2:	e739      	b.n	8002338 <UART_SetConfig+0x148>
 80024c4:	2300      	movs	r3, #0
 80024c6:	e6c2      	b.n	800224e <UART_SetConfig+0x5e>
 80024c8:	efff69f3 	.word	0xefff69f3
 80024cc:	ffffcfff 	.word	0xffffcfff
 80024d0:	40004800 	.word	0x40004800
 80024d4:	fffff4ff 	.word	0xfffff4ff
 80024d8:	40004400 	.word	0x40004400
 80024dc:	080030c4 	.word	0x080030c4
 80024e0:	40021000 	.word	0x40021000
 80024e4:	fffffd00 	.word	0xfffffd00
 80024e8:	000ffcff 	.word	0x000ffcff
 80024ec:	00b71b00 	.word	0x00b71b00
 80024f0:	003d0900 	.word	0x003d0900
 80024f4:	080030e8 	.word	0x080030e8
 80024f8:	0000ffef 	.word	0x0000ffef
 80024fc:	007a1200 	.word	0x007a1200
 8002500:	01e84800 	.word	0x01e84800
 8002504:	00f42400 	.word	0x00f42400

08002508 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002508:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800250a:	07db      	lsls	r3, r3, #31
 800250c:	d506      	bpl.n	800251c <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800250e:	6802      	ldr	r2, [r0, #0]
 8002510:	6853      	ldr	r3, [r2, #4]
 8002512:	492c      	ldr	r1, [pc, #176]	; (80025c4 <UART_AdvFeatureConfig+0xbc>)
 8002514:	400b      	ands	r3, r1
 8002516:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002518:	430b      	orrs	r3, r1
 800251a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800251c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800251e:	079b      	lsls	r3, r3, #30
 8002520:	d506      	bpl.n	8002530 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002522:	6802      	ldr	r2, [r0, #0]
 8002524:	6853      	ldr	r3, [r2, #4]
 8002526:	4928      	ldr	r1, [pc, #160]	; (80025c8 <UART_AdvFeatureConfig+0xc0>)
 8002528:	400b      	ands	r3, r1
 800252a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800252c:	430b      	orrs	r3, r1
 800252e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002530:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002532:	075b      	lsls	r3, r3, #29
 8002534:	d506      	bpl.n	8002544 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002536:	6802      	ldr	r2, [r0, #0]
 8002538:	6853      	ldr	r3, [r2, #4]
 800253a:	4924      	ldr	r1, [pc, #144]	; (80025cc <UART_AdvFeatureConfig+0xc4>)
 800253c:	400b      	ands	r3, r1
 800253e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002540:	430b      	orrs	r3, r1
 8002542:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002544:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002546:	071b      	lsls	r3, r3, #28
 8002548:	d506      	bpl.n	8002558 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800254a:	6802      	ldr	r2, [r0, #0]
 800254c:	6853      	ldr	r3, [r2, #4]
 800254e:	4920      	ldr	r1, [pc, #128]	; (80025d0 <UART_AdvFeatureConfig+0xc8>)
 8002550:	400b      	ands	r3, r1
 8002552:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002554:	430b      	orrs	r3, r1
 8002556:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002558:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800255a:	06db      	lsls	r3, r3, #27
 800255c:	d506      	bpl.n	800256c <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800255e:	6802      	ldr	r2, [r0, #0]
 8002560:	6893      	ldr	r3, [r2, #8]
 8002562:	491c      	ldr	r1, [pc, #112]	; (80025d4 <UART_AdvFeatureConfig+0xcc>)
 8002564:	400b      	ands	r3, r1
 8002566:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002568:	430b      	orrs	r3, r1
 800256a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800256c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800256e:	069b      	lsls	r3, r3, #26
 8002570:	d506      	bpl.n	8002580 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002572:	6802      	ldr	r2, [r0, #0]
 8002574:	6893      	ldr	r3, [r2, #8]
 8002576:	4918      	ldr	r1, [pc, #96]	; (80025d8 <UART_AdvFeatureConfig+0xd0>)
 8002578:	400b      	ands	r3, r1
 800257a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800257c:	430b      	orrs	r3, r1
 800257e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002580:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002582:	065b      	lsls	r3, r3, #25
 8002584:	d50b      	bpl.n	800259e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002586:	6802      	ldr	r2, [r0, #0]
 8002588:	6853      	ldr	r3, [r2, #4]
 800258a:	4914      	ldr	r1, [pc, #80]	; (80025dc <UART_AdvFeatureConfig+0xd4>)
 800258c:	400b      	ands	r3, r1
 800258e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002590:	430b      	orrs	r3, r1
 8002592:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	035b      	lsls	r3, r3, #13
 8002598:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800259a:	429a      	cmp	r2, r3
 800259c:	d00a      	beq.n	80025b4 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800259e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	d506      	bpl.n	80025b2 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025a4:	6802      	ldr	r2, [r0, #0]
 80025a6:	6853      	ldr	r3, [r2, #4]
 80025a8:	490d      	ldr	r1, [pc, #52]	; (80025e0 <UART_AdvFeatureConfig+0xd8>)
 80025aa:	400b      	ands	r3, r1
 80025ac:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80025ae:	430b      	orrs	r3, r1
 80025b0:	6053      	str	r3, [r2, #4]
}
 80025b2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025b4:	6802      	ldr	r2, [r0, #0]
 80025b6:	6853      	ldr	r3, [r2, #4]
 80025b8:	490a      	ldr	r1, [pc, #40]	; (80025e4 <UART_AdvFeatureConfig+0xdc>)
 80025ba:	400b      	ands	r3, r1
 80025bc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80025be:	430b      	orrs	r3, r1
 80025c0:	6053      	str	r3, [r2, #4]
 80025c2:	e7ec      	b.n	800259e <UART_AdvFeatureConfig+0x96>
 80025c4:	fffdffff 	.word	0xfffdffff
 80025c8:	fffeffff 	.word	0xfffeffff
 80025cc:	fffbffff 	.word	0xfffbffff
 80025d0:	ffff7fff 	.word	0xffff7fff
 80025d4:	ffffefff 	.word	0xffffefff
 80025d8:	ffffdfff 	.word	0xffffdfff
 80025dc:	ffefffff 	.word	0xffefffff
 80025e0:	fff7ffff 	.word	0xfff7ffff
 80025e4:	ff9fffff 	.word	0xff9fffff

080025e8 <UART_WaitOnFlagUntilTimeout>:
{
 80025e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ea:	46c6      	mov	lr, r8
 80025ec:	b500      	push	{lr}
 80025ee:	0007      	movs	r7, r0
 80025f0:	000c      	movs	r4, r1
 80025f2:	0016      	movs	r6, r2
 80025f4:	4698      	mov	r8, r3
 80025f6:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	69d3      	ldr	r3, [r2, #28]
 80025fc:	4023      	ands	r3, r4
 80025fe:	1b1b      	subs	r3, r3, r4
 8002600:	4259      	negs	r1, r3
 8002602:	414b      	adcs	r3, r1
 8002604:	42b3      	cmp	r3, r6
 8002606:	d11c      	bne.n	8002642 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8002608:	1c6b      	adds	r3, r5, #1
 800260a:	d0f6      	beq.n	80025fa <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260c:	f7fe f956 	bl	80008bc <HAL_GetTick>
 8002610:	4643      	mov	r3, r8
 8002612:	1ac0      	subs	r0, r0, r3
 8002614:	42a8      	cmp	r0, r5
 8002616:	d801      	bhi.n	800261c <UART_WaitOnFlagUntilTimeout+0x34>
 8002618:	2d00      	cmp	r5, #0
 800261a:	d1ed      	bne.n	80025f8 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	6813      	ldr	r3, [r2, #0]
 8002620:	490a      	ldr	r1, [pc, #40]	; (800264c <UART_WaitOnFlagUntilTimeout+0x64>)
 8002622:	400b      	ands	r3, r1
 8002624:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	6893      	ldr	r3, [r2, #8]
 800262a:	31a3      	adds	r1, #163	; 0xa3
 800262c:	31ff      	adds	r1, #255	; 0xff
 800262e:	438b      	bics	r3, r1
 8002630:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002632:	2320      	movs	r3, #32
 8002634:	677b      	str	r3, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002636:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002638:	3350      	adds	r3, #80	; 0x50
 800263a:	2200      	movs	r2, #0
 800263c:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 800263e:	2003      	movs	r0, #3
 8002640:	e000      	b.n	8002644 <UART_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 8002642:	2000      	movs	r0, #0
}
 8002644:	bc04      	pop	{r2}
 8002646:	4690      	mov	r8, r2
 8002648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	fffffe5f 	.word	0xfffffe5f

08002650 <UART_CheckIdleState>:
{
 8002650:	b530      	push	{r4, r5, lr}
 8002652:	b083      	sub	sp, #12
 8002654:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002656:	2300      	movs	r3, #0
 8002658:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800265a:	f7fe f92f 	bl	80008bc <HAL_GetTick>
 800265e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002660:	6823      	ldr	r3, [r4, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	071b      	lsls	r3, r3, #28
 8002666:	d40c      	bmi.n	8002682 <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	075b      	lsls	r3, r3, #29
 800266e:	d415      	bmi.n	800269c <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8002670:	2320      	movs	r3, #32
 8002672:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002674:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002676:	3350      	adds	r3, #80	; 0x50
 8002678:	2200      	movs	r2, #0
 800267a:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800267c:	2000      	movs	r0, #0
}
 800267e:	b003      	add	sp, #12
 8002680:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002682:	2180      	movs	r1, #128	; 0x80
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <UART_CheckIdleState+0x68>)
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	0003      	movs	r3, r0
 800268a:	2200      	movs	r2, #0
 800268c:	0389      	lsls	r1, r1, #14
 800268e:	0020      	movs	r0, r4
 8002690:	f7ff ffaa 	bl	80025e8 <UART_WaitOnFlagUntilTimeout>
 8002694:	2800      	cmp	r0, #0
 8002696:	d0e7      	beq.n	8002668 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002698:	2003      	movs	r0, #3
 800269a:	e7f0      	b.n	800267e <UART_CheckIdleState+0x2e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <UART_CheckIdleState+0x68>)
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	002b      	movs	r3, r5
 80026a4:	2200      	movs	r2, #0
 80026a6:	03c9      	lsls	r1, r1, #15
 80026a8:	0020      	movs	r0, r4
 80026aa:	f7ff ff9d 	bl	80025e8 <UART_WaitOnFlagUntilTimeout>
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d0de      	beq.n	8002670 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 80026b2:	2003      	movs	r0, #3
 80026b4:	e7e3      	b.n	800267e <UART_CheckIdleState+0x2e>
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	01ffffff 	.word	0x01ffffff

080026bc <HAL_UART_Init>:
{
 80026bc:	b510      	push	{r4, lr}
 80026be:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80026c0:	d02e      	beq.n	8002720 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80026c2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d021      	beq.n	800270c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80026c8:	2324      	movs	r3, #36	; 0x24
 80026ca:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80026cc:	6822      	ldr	r2, [r4, #0]
 80026ce:	6813      	ldr	r3, [r2, #0]
 80026d0:	2101      	movs	r1, #1
 80026d2:	438b      	bics	r3, r1
 80026d4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026d6:	0020      	movs	r0, r4
 80026d8:	f7ff fd8a 	bl	80021f0 <UART_SetConfig>
 80026dc:	2801      	cmp	r0, #1
 80026de:	d014      	beq.n	800270a <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d118      	bne.n	8002718 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e6:	6822      	ldr	r2, [r4, #0]
 80026e8:	6853      	ldr	r3, [r2, #4]
 80026ea:	490e      	ldr	r1, [pc, #56]	; (8002724 <HAL_UART_Init+0x68>)
 80026ec:	400b      	ands	r3, r1
 80026ee:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f0:	6822      	ldr	r2, [r4, #0]
 80026f2:	6893      	ldr	r3, [r2, #8]
 80026f4:	212a      	movs	r1, #42	; 0x2a
 80026f6:	438b      	bics	r3, r1
 80026f8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80026fa:	6822      	ldr	r2, [r4, #0]
 80026fc:	6813      	ldr	r3, [r2, #0]
 80026fe:	3929      	subs	r1, #41	; 0x29
 8002700:	430b      	orrs	r3, r1
 8002702:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002704:	0020      	movs	r0, r4
 8002706:	f7ff ffa3 	bl	8002650 <UART_CheckIdleState>
}
 800270a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800270c:	3370      	adds	r3, #112	; 0x70
 800270e:	2200      	movs	r2, #0
 8002710:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8002712:	f7fd ffc5 	bl	80006a0 <HAL_UART_MspInit>
 8002716:	e7d7      	b.n	80026c8 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002718:	0020      	movs	r0, r4
 800271a:	f7ff fef5 	bl	8002508 <UART_AdvFeatureConfig>
 800271e:	e7e2      	b.n	80026e6 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002720:	2001      	movs	r0, #1
 8002722:	e7f2      	b.n	800270a <HAL_UART_Init+0x4e>
 8002724:	ffffb7ff 	.word	0xffffb7ff

08002728 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002728:	4770      	bx	lr
	...

0800272c <KeyLogQueryReply>:
	in->Zero = 0;
	in->time = getPackDate();
}

//funkcja wykonywana przez odpowiadajacego
void KeyLogQueryReply(TKeyLogQueryOut *out, const TKeyLogQueryIn *in, uint8_t recNr, uint8_t onV) {
 800272c:	b570      	push	{r4, r5, r6, lr}
	out->tabK1[0] = in->tabK2[0] - in->tabK2[3] + 14567;
 800272e:	7b0d      	ldrb	r5, [r1, #12]
 8002730:	7b4c      	ldrb	r4, [r1, #13]
 8002732:	0224      	lsls	r4, r4, #8
 8002734:	4325      	orrs	r5, r4
 8002736:	4c57      	ldr	r4, [pc, #348]	; (8002894 <KeyLogQueryReply+0x168>)
 8002738:	46a4      	mov	ip, r4
 800273a:	4465      	add	r5, ip
 800273c:	7c8e      	ldrb	r6, [r1, #18]
 800273e:	7ccc      	ldrb	r4, [r1, #19]
 8002740:	0224      	lsls	r4, r4, #8
 8002742:	4334      	orrs	r4, r6
 8002744:	1b2c      	subs	r4, r5, r4
 8002746:	b2a4      	uxth	r4, r4
 8002748:	7004      	strb	r4, [r0, #0]
 800274a:	0a24      	lsrs	r4, r4, #8
 800274c:	7044      	strb	r4, [r0, #1]
	out->tabK1[1] = in->tabK2[1] + in->tabK1[2] * 2;
 800274e:	790d      	ldrb	r5, [r1, #4]
 8002750:	794c      	ldrb	r4, [r1, #5]
 8002752:	0224      	lsls	r4, r4, #8
 8002754:	432c      	orrs	r4, r5
 8002756:	0064      	lsls	r4, r4, #1
 8002758:	7b8e      	ldrb	r6, [r1, #14]
 800275a:	7bcd      	ldrb	r5, [r1, #15]
 800275c:	022d      	lsls	r5, r5, #8
 800275e:	4335      	orrs	r5, r6
 8002760:	1964      	adds	r4, r4, r5
 8002762:	b2a4      	uxth	r4, r4
 8002764:	7084      	strb	r4, [r0, #2]
 8002766:	0a24      	lsrs	r4, r4, #8
 8002768:	70c4      	strb	r4, [r0, #3]
	out->tabK1[2] = in->tabK2[2] ^ in->tabK1[0];
 800276a:	7c0d      	ldrb	r5, [r1, #16]
 800276c:	7c4c      	ldrb	r4, [r1, #17]
 800276e:	0224      	lsls	r4, r4, #8
 8002770:	432c      	orrs	r4, r5
 8002772:	780e      	ldrb	r6, [r1, #0]
 8002774:	784d      	ldrb	r5, [r1, #1]
 8002776:	022d      	lsls	r5, r5, #8
 8002778:	4335      	orrs	r5, r6
 800277a:	406c      	eors	r4, r5
 800277c:	7104      	strb	r4, [r0, #4]
 800277e:	0a24      	lsrs	r4, r4, #8
 8002780:	7144      	strb	r4, [r0, #5]
	out->tabK1[3] = in->tabK2[3] + in->tabK2[0];
 8002782:	7c8d      	ldrb	r5, [r1, #18]
 8002784:	7ccc      	ldrb	r4, [r1, #19]
 8002786:	0224      	lsls	r4, r4, #8
 8002788:	432c      	orrs	r4, r5
 800278a:	7b0e      	ldrb	r6, [r1, #12]
 800278c:	7b4d      	ldrb	r5, [r1, #13]
 800278e:	022d      	lsls	r5, r5, #8
 8002790:	4335      	orrs	r5, r6
 8002792:	1964      	adds	r4, r4, r5
 8002794:	b2a4      	uxth	r4, r4
 8002796:	7184      	strb	r4, [r0, #6]
 8002798:	0a24      	lsrs	r4, r4, #8
 800279a:	71c4      	strb	r4, [r0, #7]
	out->tabK1[4] = in->tabK2[4] - in->tabK1[2];
 800279c:	7d0d      	ldrb	r5, [r1, #20]
 800279e:	7d4c      	ldrb	r4, [r1, #21]
 80027a0:	0224      	lsls	r4, r4, #8
 80027a2:	4325      	orrs	r5, r4
 80027a4:	790e      	ldrb	r6, [r1, #4]
 80027a6:	794c      	ldrb	r4, [r1, #5]
 80027a8:	0224      	lsls	r4, r4, #8
 80027aa:	4334      	orrs	r4, r6
 80027ac:	1b2c      	subs	r4, r5, r4
 80027ae:	b2a4      	uxth	r4, r4
 80027b0:	7204      	strb	r4, [r0, #8]
 80027b2:	0a24      	lsrs	r4, r4, #8
 80027b4:	7244      	strb	r4, [r0, #9]
	out->tabK1[5] = in->tabK2[5] - in->tabK2[0] +  in->tabK2[4];
 80027b6:	7d8d      	ldrb	r5, [r1, #22]
 80027b8:	7dcc      	ldrb	r4, [r1, #23]
 80027ba:	0224      	lsls	r4, r4, #8
 80027bc:	432c      	orrs	r4, r5
 80027be:	7d0e      	ldrb	r6, [r1, #20]
 80027c0:	7d4d      	ldrb	r5, [r1, #21]
 80027c2:	022d      	lsls	r5, r5, #8
 80027c4:	4335      	orrs	r5, r6
 80027c6:	1965      	adds	r5, r4, r5
 80027c8:	7b0e      	ldrb	r6, [r1, #12]
 80027ca:	7b4c      	ldrb	r4, [r1, #13]
 80027cc:	0224      	lsls	r4, r4, #8
 80027ce:	4334      	orrs	r4, r6
 80027d0:	1b2c      	subs	r4, r5, r4
 80027d2:	b2a4      	uxth	r4, r4
 80027d4:	7284      	strb	r4, [r0, #10]
 80027d6:	0a24      	lsrs	r4, r4, #8
 80027d8:	72c4      	strb	r4, [r0, #11]
	out->tabK1[6] = in->tabK2[5] + (in->tabK1[1] ^ in->tabK1[2]);
 80027da:	788d      	ldrb	r5, [r1, #2]
 80027dc:	78cc      	ldrb	r4, [r1, #3]
 80027de:	0224      	lsls	r4, r4, #8
 80027e0:	432c      	orrs	r4, r5
 80027e2:	790e      	ldrb	r6, [r1, #4]
 80027e4:	794d      	ldrb	r5, [r1, #5]
 80027e6:	022d      	lsls	r5, r5, #8
 80027e8:	4335      	orrs	r5, r6
 80027ea:	406c      	eors	r4, r5
 80027ec:	7d8e      	ldrb	r6, [r1, #22]
 80027ee:	7dcd      	ldrb	r5, [r1, #23]
 80027f0:	022d      	lsls	r5, r5, #8
 80027f2:	4335      	orrs	r5, r6
 80027f4:	1964      	adds	r4, r4, r5
 80027f6:	b2a4      	uxth	r4, r4
 80027f8:	7304      	strb	r4, [r0, #12]
 80027fa:	0a24      	lsrs	r4, r4, #8
 80027fc:	7344      	strb	r4, [r0, #13]

	out->tabK2[0] = in->tabK1[0] +20040 +in->tabK1[3];
 80027fe:	780d      	ldrb	r5, [r1, #0]
 8002800:	784c      	ldrb	r4, [r1, #1]
 8002802:	0224      	lsls	r4, r4, #8
 8002804:	432c      	orrs	r4, r5
 8002806:	798e      	ldrb	r6, [r1, #6]
 8002808:	79cd      	ldrb	r5, [r1, #7]
 800280a:	022d      	lsls	r5, r5, #8
 800280c:	4335      	orrs	r5, r6
 800280e:	1964      	adds	r4, r4, r5
 8002810:	4d21      	ldr	r5, [pc, #132]	; (8002898 <KeyLogQueryReply+0x16c>)
 8002812:	46ac      	mov	ip, r5
 8002814:	4464      	add	r4, ip
 8002816:	b2a4      	uxth	r4, r4
 8002818:	7404      	strb	r4, [r0, #16]
 800281a:	0a24      	lsrs	r4, r4, #8
 800281c:	7444      	strb	r4, [r0, #17]
	out->tabK2[1] = in->tabK1[1] - in->tabK2[3];
 800281e:	788d      	ldrb	r5, [r1, #2]
 8002820:	78cc      	ldrb	r4, [r1, #3]
 8002822:	0224      	lsls	r4, r4, #8
 8002824:	4325      	orrs	r5, r4
 8002826:	7c8e      	ldrb	r6, [r1, #18]
 8002828:	7ccc      	ldrb	r4, [r1, #19]
 800282a:	0224      	lsls	r4, r4, #8
 800282c:	4334      	orrs	r4, r6
 800282e:	1b2c      	subs	r4, r5, r4
 8002830:	b2a4      	uxth	r4, r4
 8002832:	7484      	strb	r4, [r0, #18]
 8002834:	0a24      	lsrs	r4, r4, #8
 8002836:	74c4      	strb	r4, [r0, #19]
	out->tabK2[2] = in->tabK1[2] + in->tabK2[2];
 8002838:	790d      	ldrb	r5, [r1, #4]
 800283a:	794c      	ldrb	r4, [r1, #5]
 800283c:	0224      	lsls	r4, r4, #8
 800283e:	432c      	orrs	r4, r5
 8002840:	7c0e      	ldrb	r6, [r1, #16]
 8002842:	7c4d      	ldrb	r5, [r1, #17]
 8002844:	022d      	lsls	r5, r5, #8
 8002846:	4335      	orrs	r5, r6
 8002848:	1964      	adds	r4, r4, r5
 800284a:	b2a4      	uxth	r4, r4
 800284c:	7504      	strb	r4, [r0, #20]
 800284e:	0a24      	lsrs	r4, r4, #8
 8002850:	7544      	strb	r4, [r0, #21]
	out->tabK2[3] = in->tabK1[3] + in->tabK2[4] + in->tabK2[5] + in->tabK2[3];
 8002852:	798d      	ldrb	r5, [r1, #6]
 8002854:	79cc      	ldrb	r4, [r1, #7]
 8002856:	0224      	lsls	r4, r4, #8
 8002858:	432c      	orrs	r4, r5
 800285a:	7d0e      	ldrb	r6, [r1, #20]
 800285c:	7d4d      	ldrb	r5, [r1, #21]
 800285e:	022d      	lsls	r5, r5, #8
 8002860:	4335      	orrs	r5, r6
 8002862:	1964      	adds	r4, r4, r5
 8002864:	7d8e      	ldrb	r6, [r1, #22]
 8002866:	7dcd      	ldrb	r5, [r1, #23]
 8002868:	022d      	lsls	r5, r5, #8
 800286a:	4335      	orrs	r5, r6
 800286c:	1964      	adds	r4, r4, r5
 800286e:	7c8d      	ldrb	r5, [r1, #18]
 8002870:	7cc9      	ldrb	r1, [r1, #19]
 8002872:	0209      	lsls	r1, r1, #8
 8002874:	4329      	orrs	r1, r5
 8002876:	1861      	adds	r1, r4, r1
 8002878:	b289      	uxth	r1, r1
 800287a:	7581      	strb	r1, [r0, #22]
 800287c:	0a09      	lsrs	r1, r1, #8
 800287e:	75c1      	strb	r1, [r0, #23]

	out->RecNrMx = recNr + REC_NR_OUT_ADD;
 8002880:	3275      	adds	r2, #117	; 0x75
 8002882:	7382      	strb	r2, [r0, #14]
	if (onV)
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <KeyLogQueryReply+0x162>
		out->Activ = ACTIV_ON;
	else
		out->Activ = ACTIV_OFF;
 8002888:	2323      	movs	r3, #35	; 0x23
 800288a:	73c3      	strb	r3, [r0, #15]
}
 800288c:	bd70      	pop	{r4, r5, r6, pc}
		out->Activ = ACTIV_ON;
 800288e:	2367      	movs	r3, #103	; 0x67
 8002890:	73c3      	strb	r3, [r0, #15]
 8002892:	e7fb      	b.n	800288c <KeyLogQueryReply+0x160>
 8002894:	000038e7 	.word	0x000038e7
 8002898:	00004e48 	.word	0x00004e48

0800289c <CrcProceed>:
 return(d);
 //return(CrcTab[(Crc ^ inp) & 0xff] ^ (Crc >> 8));
 }
 */

uint16_t CrcProceed(uint16_t Crc, uint8_t inp) {
 800289c:	b510      	push	{r4, lr}

	Crc ^= inp;
 800289e:	4048      	eors	r0, r1
 80028a0:	2308      	movs	r3, #8
	for (uint8_t j = 0; j < 8; j++) {
		uint8_t Flag = Crc & 0x0001;
 80028a2:	2101      	movs	r1, #1
		Crc >>= 1;
		if (Flag)
			Crc ^= 0xA001;
 80028a4:	4c07      	ldr	r4, [pc, #28]	; (80028c4 <CrcProceed+0x28>)
 80028a6:	e003      	b.n	80028b0 <CrcProceed+0x14>
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b2db      	uxtb	r3, r3
	for (uint8_t j = 0; j < 8; j++) {
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d007      	beq.n	80028c0 <CrcProceed+0x24>
		uint8_t Flag = Crc & 0x0001;
 80028b0:	000a      	movs	r2, r1
 80028b2:	4002      	ands	r2, r0
		Crc >>= 1;
 80028b4:	0840      	lsrs	r0, r0, #1
		if (Flag)
 80028b6:	2a00      	cmp	r2, #0
 80028b8:	d0f6      	beq.n	80028a8 <CrcProceed+0xc>
			Crc ^= 0xA001;
 80028ba:	4060      	eors	r0, r4
 80028bc:	b280      	uxth	r0, r0
 80028be:	e7f3      	b.n	80028a8 <CrcProceed+0xc>
	}
	return (Crc);
}
 80028c0:	bd10      	pop	{r4, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	ffffa001 	.word	0xffffa001

080028c8 <CrcBild>:

uint16_t CrcBild(const uint8_t *p, int cnt) {
 80028c8:	b570      	push	{r4, r5, r6, lr}
	uint16_t crc = 0xffff;
	while (cnt) {
 80028ca:	2900      	cmp	r1, #0
 80028cc:	d009      	beq.n	80028e2 <CrcBild+0x1a>
 80028ce:	0004      	movs	r4, r0
 80028d0:	1845      	adds	r5, r0, r1
	uint16_t crc = 0xffff;
 80028d2:	4805      	ldr	r0, [pc, #20]	; (80028e8 <CrcBild+0x20>)
		crc = CrcProceed(crc, *p++);
 80028d4:	7821      	ldrb	r1, [r4, #0]
 80028d6:	f7ff ffe1 	bl	800289c <CrcProceed>
 80028da:	3401      	adds	r4, #1
	while (cnt) {
 80028dc:	42ac      	cmp	r4, r5
 80028de:	d1f9      	bne.n	80028d4 <CrcBild+0xc>
		cnt--;
	}
	return (crc);
}
 80028e0:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t crc = 0xffff;
 80028e2:	4801      	ldr	r0, [pc, #4]	; (80028e8 <CrcBild+0x20>)
 80028e4:	e7fc      	b.n	80028e0 <CrcBild+0x18>
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	0000ffff 	.word	0x0000ffff

080028ec <CrcSet>:

void CrcSet(uint8_t *p, int cnt) {
 80028ec:	b570      	push	{r4, r5, r6, lr}
 80028ee:	0004      	movs	r4, r0
 80028f0:	000d      	movs	r5, r1

	uint16_t crc = CrcBild(p, cnt);
 80028f2:	f7ff ffe9 	bl	80028c8 <CrcBild>
	p += cnt;
 80028f6:	1964      	adds	r4, r4, r5
	*p++ = (uint8_t) crc;
 80028f8:	7020      	strb	r0, [r4, #0]
	*p = (uint8_t) (crc >> 8);
 80028fa:	0a00      	lsrs	r0, r0, #8
 80028fc:	7060      	strb	r0, [r4, #1]
}
 80028fe:	bd70      	pop	{r4, r5, r6, pc}

08002900 <CrcCheck>:

uint8_t CrcCheck(const uint8_t *p, int cnt) {
 8002900:	b510      	push	{r4, lr}
	return (CrcBild(p, cnt) == 0);
 8002902:	f7ff ffe1 	bl	80028c8 <CrcBild>
 8002906:	4243      	negs	r3, r0
 8002908:	4158      	adcs	r0, r3
 800290a:	b2c0      	uxtb	r0, r0
}
 800290c:	bd10      	pop	{r4, pc}

0800290e <getInt2>:
	w += getDec(p);
	return w;
}

static uint8_t getInt2(const char *p) {
	uint8_t w = getDec(p++) * 10;
 800290e:	7803      	ldrb	r3, [r0, #0]
 8002910:	3b30      	subs	r3, #48	; 0x30
 8002912:	009a      	lsls	r2, r3, #2
 8002914:	189b      	adds	r3, r3, r2
 8002916:	005b      	lsls	r3, r3, #1
	w += getDec(p);
 8002918:	7840      	ldrb	r0, [r0, #1]
 800291a:	3830      	subs	r0, #48	; 0x30
 800291c:	1818      	adds	r0, r3, r0
	return w;
 800291e:	b2c0      	uxtb	r0, r0
}
 8002920:	4770      	bx	lr

08002922 <getInt3>:
		return ch - '0';
 8002922:	7803      	ldrb	r3, [r0, #0]
 8002924:	3b30      	subs	r3, #48	; 0x30
	uint16_t w = getDec(p++) * 100;
 8002926:	2264      	movs	r2, #100	; 0x64
 8002928:	4353      	muls	r3, r2
		return ch - '0';
 800292a:	7882      	ldrb	r2, [r0, #2]
 800292c:	3a30      	subs	r2, #48	; 0x30
 800292e:	189b      	adds	r3, r3, r2
 8002930:	7840      	ldrb	r0, [r0, #1]
 8002932:	3830      	subs	r0, #48	; 0x30
	w += getDec(p++) * 10;
 8002934:	b280      	uxth	r0, r0
 8002936:	0082      	lsls	r2, r0, #2
 8002938:	1810      	adds	r0, r2, r0
 800293a:	0040      	lsls	r0, r0, #1
	w += getDec(p);
 800293c:	1818      	adds	r0, r3, r0
	return w;
 800293e:	b280      	uxth	r0, r0
}
 8002940:	4770      	bx	lr

08002942 <_strcmp>:
const char Tx2[] = "Time :";
const char Tx3[] = "Ver.";
const char Tx4[] = "Rev.";

uint8_t _strcmp(const char *s1, const char *s2) {
	while (*s1 && *s2) {
 8002942:	7803      	ldrb	r3, [r0, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d012      	beq.n	800296e <_strcmp+0x2c>
 8002948:	780a      	ldrb	r2, [r1, #0]
 800294a:	2a00      	cmp	r2, #0
 800294c:	d011      	beq.n	8002972 <_strcmp+0x30>
		if (*s1 != *s2)
 800294e:	4293      	cmp	r3, r2
 8002950:	d111      	bne.n	8002976 <_strcmp+0x34>
			return 0;
		s1++;
 8002952:	3001      	adds	r0, #1
		s2++;
 8002954:	3101      	adds	r1, #1
	while (*s1 && *s2) {
 8002956:	7803      	ldrb	r3, [r0, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00e      	beq.n	800297a <_strcmp+0x38>
 800295c:	780a      	ldrb	r2, [r1, #0]
 800295e:	2a00      	cmp	r2, #0
 8002960:	d003      	beq.n	800296a <_strcmp+0x28>
		if (*s1 != *s2)
 8002962:	4293      	cmp	r3, r2
 8002964:	d0f5      	beq.n	8002952 <_strcmp+0x10>
			return 0;
 8002966:	2000      	movs	r0, #0
 8002968:	e008      	b.n	800297c <_strcmp+0x3a>
	}
	return 1;
 800296a:	2001      	movs	r0, #1
 800296c:	e006      	b.n	800297c <_strcmp+0x3a>
 800296e:	2001      	movs	r0, #1
 8002970:	e004      	b.n	800297c <_strcmp+0x3a>
 8002972:	2001      	movs	r0, #1
 8002974:	e002      	b.n	800297c <_strcmp+0x3a>
			return 0;
 8002976:	2000      	movs	r0, #0
 8002978:	e000      	b.n	800297c <_strcmp+0x3a>
	return 1;
 800297a:	2001      	movs	r0, #1
}
 800297c:	4770      	bx	lr
	...

08002980 <loadSoftVer>:

uint8_t loadSoftVer(VerInfo *ver, const char *mem) {
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	0005      	movs	r5, r0
 8002984:	000c      	movs	r4, r1
	if (_strcmp(Tx1, &mem[0]) && _strcmp(Tx2, &mem[16]) && _strcmp(Tx3, &mem[32]) && _strcmp(Tx4, &mem[40])) {
 8002986:	4826      	ldr	r0, [pc, #152]	; (8002a20 <loadSoftVer+0xa0>)
 8002988:	f7ff ffdb 	bl	8002942 <_strcmp>
 800298c:	2800      	cmp	r0, #0
 800298e:	d006      	beq.n	800299e <loadSoftVer+0x1e>
 8002990:	0021      	movs	r1, r4
 8002992:	3110      	adds	r1, #16
 8002994:	4823      	ldr	r0, [pc, #140]	; (8002a24 <loadSoftVer+0xa4>)
 8002996:	f7ff ffd4 	bl	8002942 <_strcmp>
 800299a:	2800      	cmp	r0, #0
 800299c:	d106      	bne.n	80029ac <loadSoftVer+0x2c>
		ver->time.sc = getInt2(&mem[16 + 13]);
		ver->time.se = 0;
		ver->time.timeSource = 0;
		return 1;
	} else {
		memset(ver, 0, sizeof(VerInfo));
 800299e:	220c      	movs	r2, #12
 80029a0:	2100      	movs	r1, #0
 80029a2:	0028      	movs	r0, r5
 80029a4:	f000 fb67 	bl	8003076 <memset>
		return 0;
 80029a8:	2000      	movs	r0, #0
	}
}
 80029aa:	bd70      	pop	{r4, r5, r6, pc}
	if (_strcmp(Tx1, &mem[0]) && _strcmp(Tx2, &mem[16]) && _strcmp(Tx3, &mem[32]) && _strcmp(Tx4, &mem[40])) {
 80029ac:	0021      	movs	r1, r4
 80029ae:	3120      	adds	r1, #32
 80029b0:	481d      	ldr	r0, [pc, #116]	; (8002a28 <loadSoftVer+0xa8>)
 80029b2:	f7ff ffc6 	bl	8002942 <_strcmp>
 80029b6:	2800      	cmp	r0, #0
 80029b8:	d0f1      	beq.n	800299e <loadSoftVer+0x1e>
 80029ba:	0021      	movs	r1, r4
 80029bc:	3128      	adds	r1, #40	; 0x28
 80029be:	481b      	ldr	r0, [pc, #108]	; (8002a2c <loadSoftVer+0xac>)
 80029c0:	f7ff ffbf 	bl	8002942 <_strcmp>
 80029c4:	2800      	cmp	r0, #0
 80029c6:	d0ea      	beq.n	800299e <loadSoftVer+0x1e>
		ver->ver = getInt3(&mem[36]);
 80029c8:	0020      	movs	r0, r4
 80029ca:	3024      	adds	r0, #36	; 0x24
 80029cc:	f7ff ffa9 	bl	8002922 <getInt3>
 80029d0:	8028      	strh	r0, [r5, #0]
		ver->rev = getInt3(&mem[44]);
 80029d2:	0020      	movs	r0, r4
 80029d4:	302c      	adds	r0, #44	; 0x2c
 80029d6:	f7ff ffa4 	bl	8002922 <getInt3>
 80029da:	8068      	strh	r0, [r5, #2]
		ver->time.rk = getInt2(&mem[7]);
 80029dc:	1de0      	adds	r0, r4, #7
 80029de:	f7ff ff96 	bl	800290e <getInt2>
 80029e2:	7128      	strb	r0, [r5, #4]
		ver->time.ms = getInt2(&mem[10]);
 80029e4:	0020      	movs	r0, r4
 80029e6:	300a      	adds	r0, #10
 80029e8:	f7ff ff91 	bl	800290e <getInt2>
 80029ec:	7168      	strb	r0, [r5, #5]
		ver->time.dz = getInt2(&mem[13]);
 80029ee:	0020      	movs	r0, r4
 80029f0:	300d      	adds	r0, #13
 80029f2:	f7ff ff8c 	bl	800290e <getInt2>
 80029f6:	71a8      	strb	r0, [r5, #6]
		ver->time.gd = getInt2(&mem[16 + 7]);
 80029f8:	0020      	movs	r0, r4
 80029fa:	3017      	adds	r0, #23
 80029fc:	f7ff ff87 	bl	800290e <getInt2>
 8002a00:	71e8      	strb	r0, [r5, #7]
		ver->time.mn = getInt2(&mem[16 + 10]);
 8002a02:	0020      	movs	r0, r4
 8002a04:	301a      	adds	r0, #26
 8002a06:	f7ff ff82 	bl	800290e <getInt2>
 8002a0a:	7228      	strb	r0, [r5, #8]
		ver->time.sc = getInt2(&mem[16 + 13]);
 8002a0c:	0020      	movs	r0, r4
 8002a0e:	301d      	adds	r0, #29
 8002a10:	f7ff ff7d 	bl	800290e <getInt2>
 8002a14:	7268      	strb	r0, [r5, #9]
		ver->time.se = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	72ab      	strb	r3, [r5, #10]
		ver->time.timeSource = 0;
 8002a1a:	72eb      	strb	r3, [r5, #11]
		return 1;
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	e7c4      	b.n	80029aa <loadSoftVer+0x2a>
 8002a20:	08003158 	.word	0x08003158
 8002a24:	08003160 	.word	0x08003160
 8002a28:	08003168 	.word	0x08003168
 8002a2c:	08003170 	.word	0x08003170

08002a30 <HAL_UART_RxCpltCallback>:
	volatile uint8_t pktRdy;
	volatile int recTick;
} rxRec = {
		0 };

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a30:	b510      	push	{r4, lr}
	if (rxRec.recPtr < KEYLOG_PACKET_SIZE) {
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_UART_RxCpltCallback+0x34>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b1f      	cmp	r3, #31
 8002a38:	dc07      	bgt.n	8002a4a <HAL_UART_RxCpltCallback+0x1a>
		rxRec.pkt.buf[rxRec.recPtr] = rxRec.recByte;
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <HAL_UART_RxCpltCallback+0x34>)
 8002a3c:	18d1      	adds	r1, r2, r3
 8002a3e:	7810      	ldrb	r0, [r2, #0]
 8002a40:	7208      	strb	r0, [r1, #8]
		rxRec.recPtr++;
 8002a42:	3301      	adds	r3, #1
 8002a44:	6053      	str	r3, [r2, #4]
		if (rxRec.recPtr == KEYLOG_PACKET_SIZE) {
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d008      	beq.n	8002a5c <HAL_UART_RxCpltCallback+0x2c>
			rxRec.pktRdy = 1;
		}
	}
	rxRec.recTick = HAL_GetTick();
 8002a4a:	f7fd ff37 	bl	80008bc <HAL_GetTick>
 8002a4e:	4905      	ldr	r1, [pc, #20]	; (8002a64 <HAL_UART_RxCpltCallback+0x34>)
 8002a50:	62c8      	str	r0, [r1, #44]	; 0x2c
	HAL_UART_Receive_IT(&huart2, &rxRec.recByte, 1);
 8002a52:	2201      	movs	r2, #1
 8002a54:	4804      	ldr	r0, [pc, #16]	; (8002a68 <HAL_UART_RxCpltCallback+0x38>)
 8002a56:	f7ff fa1b 	bl	8001e90 <HAL_UART_Receive_IT>
}
 8002a5a:	bd10      	pop	{r4, pc}
			rxRec.pktRdy = 1;
 8002a5c:	3308      	adds	r3, #8
 8002a5e:	2101      	movs	r1, #1
 8002a60:	54d1      	strb	r1, [r2, r3]
 8002a62:	e7f2      	b.n	8002a4a <HAL_UART_RxCpltCallback+0x1a>
 8002a64:	20000030 	.word	0x20000030
 8002a68:	200000c4 	.word	0x200000c4

08002a6c <clearRxRec>:

void clearRxRec() {
	rxRec.recPtr = 0;
 8002a6c:	4b02      	ldr	r3, [pc, #8]	; (8002a78 <clearRxRec+0xc>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	605a      	str	r2, [r3, #4]
	rxRec.pktRdy = 0;
 8002a72:	2128      	movs	r1, #40	; 0x28
 8002a74:	545a      	strb	r2, [r3, r1]
}
 8002a76:	4770      	bx	lr
 8002a78:	20000030 	.word	0x20000030

08002a7c <checkRxRcTimeOut>:

void checkRxRcTimeOut() {
 8002a7c:	b510      	push	{r4, lr}
	if (rxRec.recPtr > 0) {
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <checkRxRcTimeOut+0x20>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	dd06      	ble.n	8002a94 <checkRxRcTimeOut+0x18>
		int tt = HAL_GetTick();
 8002a86:	f7fd ff19 	bl	80008bc <HAL_GetTick>
		if (tt - rxRec.recTick > 100) {
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <checkRxRcTimeOut+0x20>)
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	1ac0      	subs	r0, r0, r3
 8002a90:	2864      	cmp	r0, #100	; 0x64
 8002a92:	dc00      	bgt.n	8002a96 <checkRxRcTimeOut+0x1a>
			clearRxRec();
		}
	}
}
 8002a94:	bd10      	pop	{r4, pc}
			clearRxRec();
 8002a96:	f7ff ffe9 	bl	8002a6c <clearRxRec>
}
 8002a9a:	e7fb      	b.n	8002a94 <checkRxRcTimeOut+0x18>
 8002a9c:	20000030 	.word	0x20000030

08002aa0 <writeEEprom>:

const EepData *eepDataDev = (EepData*) DATA_EEPROM_BASE;

EepData eepData;

HAL_StatusTypeDef writeEEprom(uint32_t adrOfs, int cnt) {
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	0007      	movs	r7, r0
 8002aa4:	000e      	movs	r6, r1
	HAL_StatusTypeDef st = HAL_DATA_EEPROMEx_Unlock();
 8002aa6:	f7fe f94f 	bl	8000d48 <HAL_FLASHEx_DATAEEPROM_Unlock>
	if (st == HAL_OK) {
 8002aaa:	2800      	cmp	r0, #0
 8002aac:	d003      	beq.n	8002ab6 <writeEEprom+0x16>
			cnt -= 4;
		}
		st = HAL_DATA_EEPROMEx_Lock();
	}
	if (st != HAL_OK)
		mGlobError = 1;
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <writeEEprom+0x58>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]

	return st;
}
 8002ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram();
 8002ab6:	f7fe f999 	bl	8000dec <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram>
		uint32_t dstAdr = DATA_EEPROM_BASE + adrOfs;
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <writeEEprom+0x5c>)
 8002abc:	18fc      	adds	r4, r7, r3
		srcPtr += (adrOfs >> 2);
 8002abe:	08bd      	lsrs	r5, r7, #2
 8002ac0:	00ad      	lsls	r5, r5, #2
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <writeEEprom+0x60>)
 8002ac4:	18ed      	adds	r5, r5, r3
		while (cnt > 0) {
 8002ac6:	2e00      	cmp	r6, #0
 8002ac8:	dd11      	ble.n	8002aee <writeEEprom+0x4e>
 8002aca:	3e01      	subs	r6, #1
 8002acc:	2303      	movs	r3, #3
 8002ace:	439e      	bics	r6, r3
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <writeEEprom+0x64>)
 8002ad2:	469c      	mov	ip, r3
 8002ad4:	4467      	add	r7, ip
 8002ad6:	19f6      	adds	r6, r6, r7
			st = HAL_DATA_EEPROMEx_Program(FLASH_TYPEPROGRAMDATA_WORD, dstAdr, *srcPtr);
 8002ad8:	682a      	ldr	r2, [r5, #0]
 8002ada:	0021      	movs	r1, r4
 8002adc:	2002      	movs	r0, #2
 8002ade:	f7fe f957 	bl	8000d90 <HAL_FLASHEx_DATAEEPROM_Program>
			if (st != HAL_OK)
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	d103      	bne.n	8002aee <writeEEprom+0x4e>
			srcPtr++;
 8002ae6:	3504      	adds	r5, #4
			dstAdr += 4;
 8002ae8:	3404      	adds	r4, #4
		while (cnt > 0) {
 8002aea:	42b4      	cmp	r4, r6
 8002aec:	d1f4      	bne.n	8002ad8 <writeEEprom+0x38>
		st = HAL_DATA_EEPROMEx_Lock();
 8002aee:	f7fe f945 	bl	8000d7c <HAL_FLASHEx_DATAEEPROM_Lock>
	if (st != HAL_OK)
 8002af2:	2800      	cmp	r0, #0
 8002af4:	d0de      	beq.n	8002ab4 <writeEEprom+0x14>
 8002af6:	e7da      	b.n	8002aae <writeEEprom+0xe>
 8002af8:	2000002c 	.word	0x2000002c
 8002afc:	08080000 	.word	0x08080000
 8002b00:	2000016c 	.word	0x2000016c
 8002b04:	08080004 	.word	0x08080004

08002b08 <initEepData>:

void initEepData() {
 8002b08:	b510      	push	{r4, lr}
	eepData = *eepDataDev;
 8002b0a:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <initEepData+0x10>)
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	22b0      	movs	r2, #176	; 0xb0
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <initEepData+0x14>)
 8002b12:	f000 faa7 	bl	8003064 <memcpy>
}
 8002b16:	bd10      	pop	{r4, pc}
 8002b18:	2000000c 	.word	0x2000000c
 8002b1c:	2000016c 	.word	0x2000016c

08002b20 <incDecDemoCountr>:

//-------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------
HAL_StatusTypeDef incDecDemoCountr(uint8_t recNr, uint8_t dir) {
 8002b20:	b510      	push	{r4, lr}
 8002b22:	0002      	movs	r2, r0
 8002b24:	3001      	adds	r0, #1
 8002b26:	00c0      	lsls	r0, r0, #3
	TKeyLogItem *dt = &eepData.tab[recNr];
	if (dir) {
 8002b28:	2900      	cmp	r1, #0
 8002b2a:	d013      	beq.n	8002b54 <incDecDemoCountr+0x34>
		//inc
		if (dt->R.ValidCnt != 0xffff)
 8002b2c:	4914      	ldr	r1, [pc, #80]	; (8002b80 <incDecDemoCountr+0x60>)
 8002b2e:	1809      	adds	r1, r1, r0
 8002b30:	790c      	ldrb	r4, [r1, #4]
 8002b32:	794b      	ldrb	r3, [r1, #5]
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	4323      	orrs	r3, r4
 8002b38:	4912      	ldr	r1, [pc, #72]	; (8002b84 <incDecDemoCountr+0x64>)
 8002b3a:	428b      	cmp	r3, r1
 8002b3c:	d006      	beq.n	8002b4c <incDecDemoCountr+0x2c>
			dt->R.ValidCnt++;
 8002b3e:	3301      	adds	r3, #1
 8002b40:	4a0f      	ldr	r2, [pc, #60]	; (8002b80 <incDecDemoCountr+0x60>)
 8002b42:	1812      	adds	r2, r2, r0
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	7113      	strb	r3, [r2, #4]
 8002b48:	0a1b      	lsrs	r3, r3, #8
 8002b4a:	7153      	strb	r3, [r2, #5]
		if (dt->R.ValidCnt != 0xffff && dt->R.ValidCnt != 0) {
			dt->R.ValidCnt--;
		}
	}
	int ofs = (int) dt - (int) (&eepData);
	return writeEEprom(ofs, sizeof(TKeyLogItem));
 8002b4c:	2108      	movs	r1, #8
 8002b4e:	f7ff ffa7 	bl	8002aa0 <writeEEprom>
}
 8002b52:	bd10      	pop	{r4, pc}
		if (dt->R.ValidCnt != 0xffff && dt->R.ValidCnt != 0) {
 8002b54:	1c53      	adds	r3, r2, #1
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4909      	ldr	r1, [pc, #36]	; (8002b80 <incDecDemoCountr+0x60>)
 8002b5a:	18c9      	adds	r1, r1, r3
 8002b5c:	790c      	ldrb	r4, [r1, #4]
 8002b5e:	794b      	ldrb	r3, [r1, #5]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	4323      	orrs	r3, r4
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	4907      	ldr	r1, [pc, #28]	; (8002b88 <incDecDemoCountr+0x68>)
 8002b6a:	428b      	cmp	r3, r1
 8002b6c:	d8ee      	bhi.n	8002b4c <incDecDemoCountr+0x2c>
			dt->R.ValidCnt--;
 8002b6e:	3201      	adds	r2, #1
 8002b70:	00d2      	lsls	r2, r2, #3
 8002b72:	4903      	ldr	r1, [pc, #12]	; (8002b80 <incDecDemoCountr+0x60>)
 8002b74:	188a      	adds	r2, r1, r2
 8002b76:	7113      	strb	r3, [r2, #4]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	7153      	strb	r3, [r2, #5]
 8002b7c:	e7e6      	b.n	8002b4c <incDecDemoCountr+0x2c>
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	2000016c 	.word	0x2000016c
 8002b84:	0000ffff 	.word	0x0000ffff
 8002b88:	0000fffd 	.word	0x0000fffd

08002b8c <getKeyOn>:

uint8_t getKeyOn(uint8_t recNr, uint16_t time) {
 8002b8c:	b510      	push	{r4, lr}
	TKeyLogItem *dt = &eepData.tab[recNr];

	switch (dt->R.Mode) {
 8002b8e:	1c43      	adds	r3, r0, #1
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4a13      	ldr	r2, [pc, #76]	; (8002be0 <getKeyOn+0x54>)
 8002b94:	5c9b      	ldrb	r3, [r3, r2]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d003      	beq.n	8002ba2 <getKeyOn+0x16>
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d004      	beq.n	8002ba8 <getKeyOn+0x1c>
	default:
	case kmdOFF:
		return 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e000      	b.n	8002ba4 <getKeyOn+0x18>
	case kmdON:
		return 1;
 8002ba2:	2301      	movs	r3, #1
		if (q)
			incDecDemoCountr(recNr, 0);
		return q;
	}
	}
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	bd10      	pop	{r4, pc}
		if (dt->R.ValidDate != 0) {
 8002ba8:	1c42      	adds	r2, r0, #1
 8002baa:	00d2      	lsls	r2, r2, #3
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <getKeyOn+0x54>)
 8002bae:	189b      	adds	r3, r3, r2
 8002bb0:	789c      	ldrb	r4, [r3, #2]
 8002bb2:	78da      	ldrb	r2, [r3, #3]
 8002bb4:	0212      	lsls	r2, r2, #8
 8002bb6:	4322      	orrs	r2, r4
 8002bb8:	d002      	beq.n	8002bc0 <getKeyOn+0x34>
				q = 0;
 8002bba:	2300      	movs	r3, #0
			if (time > dt->R.ValidDate)
 8002bbc:	428a      	cmp	r2, r1
 8002bbe:	d3f1      	bcc.n	8002ba4 <getKeyOn+0x18>
		if (dt->R.ValidCnt == 0)
 8002bc0:	1c42      	adds	r2, r0, #1
 8002bc2:	00d2      	lsls	r2, r2, #3
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <getKeyOn+0x54>)
 8002bc6:	189b      	adds	r3, r3, r2
 8002bc8:	7919      	ldrb	r1, [r3, #4]
 8002bca:	795a      	ldrb	r2, [r3, #5]
 8002bcc:	0212      	lsls	r2, r2, #8
		if (q)
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	2a00      	cmp	r2, #0
 8002bd4:	d0e6      	beq.n	8002ba4 <getKeyOn+0x18>
			incDecDemoCountr(recNr, 0);
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	f7ff ffa2 	bl	8002b20 <incDecDemoCountr>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e7e1      	b.n	8002ba4 <getKeyOn+0x18>
 8002be0:	2000016c 	.word	0x2000016c

08002be4 <setLed1>:
// MAIN
//-------------------------------------------------------------------------------

extern TIM_HandleTypeDef htim2;

void setLed1(uint8_t q) {
 8002be4:	b510      	push	{r4, lr}
	if (q)
 8002be6:	2800      	cmp	r0, #0
 8002be8:	d106      	bne.n	8002bf8 <setLed1+0x14>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
	else
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002bea:	2180      	movs	r1, #128	; 0x80
 8002bec:	2201      	movs	r2, #1
 8002bee:	0209      	lsls	r1, r1, #8
 8002bf0:	4805      	ldr	r0, [pc, #20]	; (8002c08 <setLed1+0x24>)
 8002bf2:	f7fe f9d5 	bl	8000fa0 <HAL_GPIO_WritePin>
}
 8002bf6:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	0209      	lsls	r1, r1, #8
 8002bfe:	4802      	ldr	r0, [pc, #8]	; (8002c08 <setLed1+0x24>)
 8002c00:	f7fe f9ce 	bl	8000fa0 <HAL_GPIO_WritePin>
 8002c04:	e7f7      	b.n	8002bf6 <setLed1+0x12>
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	50000800 	.word	0x50000800

08002c0c <setLed2>:
void setLed2(uint8_t q) {
 8002c0c:	b510      	push	{r4, lr}
	if (q)
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	d106      	bne.n	8002c20 <setLed2+0x14>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
	else
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002c12:	2180      	movs	r1, #128	; 0x80
 8002c14:	2201      	movs	r2, #1
 8002c16:	01c9      	lsls	r1, r1, #7
 8002c18:	4805      	ldr	r0, [pc, #20]	; (8002c30 <setLed2+0x24>)
 8002c1a:	f7fe f9c1 	bl	8000fa0 <HAL_GPIO_WritePin>
}
 8002c1e:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8002c20:	2180      	movs	r1, #128	; 0x80
 8002c22:	2200      	movs	r2, #0
 8002c24:	01c9      	lsls	r1, r1, #7
 8002c26:	4802      	ldr	r0, [pc, #8]	; (8002c30 <setLed2+0x24>)
 8002c28:	f7fe f9ba 	bl	8000fa0 <HAL_GPIO_WritePin>
 8002c2c:	e7f7      	b.n	8002c1e <setLed2+0x12>
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	50000800 	.word	0x50000800

08002c34 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002c34:	b510      	push	{r4, lr}
	setLed2(mGlobError); //jeśli bład globalny to LED2 nie gaśnie
 8002c36:	4b02      	ldr	r3, [pc, #8]	; (8002c40 <HAL_UART_TxCpltCallback+0xc>)
 8002c38:	7818      	ldrb	r0, [r3, #0]
 8002c3a:	f7ff ffe7 	bl	8002c0c <setLed2>
}
 8002c3e:	bd10      	pop	{r4, pc}
 8002c40:	2000002c 	.word	0x2000002c

08002c44 <sendPkt>:
void sendPkt(void) {
 8002c44:	b510      	push	{r4, lr}
	CrcSet((uint8_t*) &txRec.pkt, sizeof(txRec.pkt) - 2);
 8002c46:	4c07      	ldr	r4, [pc, #28]	; (8002c64 <sendPkt+0x20>)
 8002c48:	211e      	movs	r1, #30
 8002c4a:	0020      	movs	r0, r4
 8002c4c:	f7ff fe4e 	bl	80028ec <CrcSet>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*) &txRec.pkt, sizeof(txRec.pkt));
 8002c50:	2220      	movs	r2, #32
 8002c52:	0021      	movs	r1, r4
 8002c54:	4804      	ldr	r0, [pc, #16]	; (8002c68 <sendPkt+0x24>)
 8002c56:	f7ff f8c3 	bl	8001de0 <HAL_UART_Transmit_IT>
	setLed2(1);
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	f7ff ffd6 	bl	8002c0c <setLed2>
}
 8002c60:	bd10      	pop	{r4, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	20000064 	.word	0x20000064
 8002c68:	200000c4 	.word	0x200000c4

08002c6c <sendErrPkt>:
void sendErrPkt(int err) {
 8002c6c:	b510      	push	{r4, lr}
	txRec.pkt.R.Cmd = 'E';
 8002c6e:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <sendErrPkt+0x10>)
 8002c70:	2245      	movs	r2, #69	; 0x45
 8002c72:	709a      	strb	r2, [r3, #2]
	txRec.pkt.R.RecNr = err;
 8002c74:	70d8      	strb	r0, [r3, #3]
	sendPkt();
 8002c76:	f7ff ffe5 	bl	8002c44 <sendPkt>
}
 8002c7a:	bd10      	pop	{r4, pc}
 8002c7c:	20000064 	.word	0x20000064

08002c80 <execNewQkt>:
void execNewQkt(void) {
 8002c80:	b570      	push	{r4, r5, r6, lr}
	if (rxRec.pkt.R.RecNr < KEYLOG_MAX_PACK_NR) {
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <execNewQkt+0x38>)
 8002c84:	7adb      	ldrb	r3, [r3, #11]
 8002c86:	2b14      	cmp	r3, #20
 8002c88:	d903      	bls.n	8002c92 <execNewQkt+0x12>
		sendErrPkt(HAL_BAD_REC_NR);
 8002c8a:	2006      	movs	r0, #6
 8002c8c:	f7ff ffee 	bl	8002c6c <sendErrPkt>
}
 8002c90:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t recNr = in->RecNrMx - REC_NR_OUT_IN;
 8002c92:	4d09      	ldr	r5, [pc, #36]	; (8002cb8 <execNewQkt+0x38>)
 8002c94:	7dac      	ldrb	r4, [r5, #22]
 8002c96:	3c2f      	subs	r4, #47	; 0x2f
 8002c98:	b2e4      	uxtb	r4, r4
		uint8_t onV = getKeyOn(recNr, in->time);
 8002c9a:	8b29      	ldrh	r1, [r5, #24]
 8002c9c:	0020      	movs	r0, r4
 8002c9e:	f7ff ff75 	bl	8002b8c <getKeyOn>
 8002ca2:	0003      	movs	r3, r0
		KeyLogQueryReply(out, in, recNr, onV);
 8002ca4:	0029      	movs	r1, r5
 8002ca6:	310e      	adds	r1, #14
 8002ca8:	4804      	ldr	r0, [pc, #16]	; (8002cbc <execNewQkt+0x3c>)
 8002caa:	0022      	movs	r2, r4
 8002cac:	3006      	adds	r0, #6
 8002cae:	f7ff fd3d 	bl	800272c <KeyLogQueryReply>
		sendPkt();
 8002cb2:	f7ff ffc7 	bl	8002c44 <sendPkt>
 8002cb6:	e7eb      	b.n	8002c90 <execNewQkt+0x10>
 8002cb8:	20000030 	.word	0x20000030
 8002cbc:	20000064 	.word	0x20000064

08002cc0 <execNewRxPkt>:
void execNewRxPkt(void) {
 8002cc0:	b570      	push	{r4, r5, r6, lr}
	if (CrcCheck(rxRec.pkt.buf, sizeof(rxRec.pkt))) {
 8002cc2:	4870      	ldr	r0, [pc, #448]	; (8002e84 <execNewRxPkt+0x1c4>)
 8002cc4:	2120      	movs	r1, #32
 8002cc6:	3008      	adds	r0, #8
 8002cc8:	f7ff fe1a 	bl	8002900 <CrcCheck>
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	d100      	bne.n	8002cd2 <execNewRxPkt+0x12>
}
 8002cd0:	bd70      	pop	{r4, r5, r6, pc}
		memset(&txRec.pkt, 0, sizeof(txRec.pkt));
 8002cd2:	4c6d      	ldr	r4, [pc, #436]	; (8002e88 <execNewRxPkt+0x1c8>)
 8002cd4:	1ca0      	adds	r0, r4, #2
 8002cd6:	221e      	movs	r2, #30
 8002cd8:	2100      	movs	r1, #0
 8002cda:	f000 f9cc 	bl	8003076 <memset>
		txRec.pkt.R.Sign = SIGN_REPL_SIGN;
 8002cde:	4b6b      	ldr	r3, [pc, #428]	; (8002e8c <execNewRxPkt+0x1cc>)
 8002ce0:	8023      	strh	r3, [r4, #0]
		txRec.pkt.R.Cmd = rxRec.pkt.R.Cmd;
 8002ce2:	4a68      	ldr	r2, [pc, #416]	; (8002e84 <execNewRxPkt+0x1c4>)
 8002ce4:	7a93      	ldrb	r3, [r2, #10]
 8002ce6:	70a3      	strb	r3, [r4, #2]
		txRec.pkt.R.RepSign = rxRec.pkt.R.Sign ^ SIGN_RPL_XOR;
 8002ce8:	8911      	ldrh	r1, [r2, #8]
 8002cea:	4a69      	ldr	r2, [pc, #420]	; (8002e90 <execNewRxPkt+0x1d0>)
 8002cec:	404a      	eors	r2, r1
 8002cee:	80a2      	strh	r2, [r4, #4]
		switch (rxRec.pkt.R.Cmd) {
 8002cf0:	3b46      	subs	r3, #70	; 0x46
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	2a12      	cmp	r2, #18
 8002cf6:	d900      	bls.n	8002cfa <execNewRxPkt+0x3a>
 8002cf8:	e0c0      	b.n	8002e7c <execNewRxPkt+0x1bc>
 8002cfa:	0093      	lsls	r3, r2, #2
 8002cfc:	4a65      	ldr	r2, [pc, #404]	; (8002e94 <execNewRxPkt+0x1d4>)
 8002cfe:	58d3      	ldr	r3, [r2, r3]
 8002d00:	469f      	mov	pc, r3
			if (rxRec.pkt.R.Sign == SIGN_PKT_F) {
 8002d02:	4b65      	ldr	r3, [pc, #404]	; (8002e98 <execNewRxPkt+0x1d8>)
 8002d04:	4299      	cmp	r1, r3
 8002d06:	d1e3      	bne.n	8002cd0 <execNewRxPkt+0x10>
				ir->Ver = mSoftVer.ver;
 8002d08:	485f      	ldr	r0, [pc, #380]	; (8002e88 <execNewRxPkt+0x1c8>)
 8002d0a:	4b64      	ldr	r3, [pc, #400]	; (8002e9c <execNewRxPkt+0x1dc>)
 8002d0c:	881a      	ldrh	r2, [r3, #0]
 8002d0e:	80c2      	strh	r2, [r0, #6]
				ir->Rev = mSoftVer.rev;
 8002d10:	885b      	ldrh	r3, [r3, #2]
 8002d12:	8103      	strh	r3, [r0, #8]
				ir->PacketCnt = KEYLOG_MAX_PACK_NR;
 8002d14:	2315      	movs	r3, #21
 8002d16:	7283      	strb	r3, [r0, #10]
				memcpy(&(ir->Info), (void*) &eepData.devInfo, sizeof(TKeyLogInfo));
 8002d18:	300b      	adds	r0, #11
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	4960      	ldr	r1, [pc, #384]	; (8002ea0 <execNewRxPkt+0x1e0>)
 8002d1e:	f000 f9a1 	bl	8003064 <memcpy>
				sendPkt();
 8002d22:	f7ff ff8f 	bl	8002c44 <sendPkt>
 8002d26:	e7d3      	b.n	8002cd0 <execNewRxPkt+0x10>
			if (rxRec.pkt.R.Sign == SIGN_PKT_R) {
 8002d28:	4b5e      	ldr	r3, [pc, #376]	; (8002ea4 <execNewRxPkt+0x1e4>)
 8002d2a:	4299      	cmp	r1, r3
 8002d2c:	d1d0      	bne.n	8002cd0 <execNewRxPkt+0x10>
				if (rxRec.pkt.R.RecNr < KEYLOG_MAX_PACK_NR) {
 8002d2e:	4b55      	ldr	r3, [pc, #340]	; (8002e84 <execNewRxPkt+0x1c4>)
 8002d30:	7adc      	ldrb	r4, [r3, #11]
 8002d32:	2c14      	cmp	r4, #20
 8002d34:	d80c      	bhi.n	8002d50 <execNewRxPkt+0x90>
					memcpy(txRec.pkt.R.Data, adr, sizeof(txRec.pkt.R.Data));
 8002d36:	4d54      	ldr	r5, [pc, #336]	; (8002e88 <execNewRxPkt+0x1c8>)
					const void *adr = &eepData.tab[rxRec.pkt.R.RecNr];
 8002d38:	1c61      	adds	r1, r4, #1
					memcpy(txRec.pkt.R.Data, adr, sizeof(txRec.pkt.R.Data));
 8002d3a:	00c9      	lsls	r1, r1, #3
 8002d3c:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <execNewRxPkt+0x1e0>)
 8002d3e:	18c9      	adds	r1, r1, r3
 8002d40:	1da8      	adds	r0, r5, #6
 8002d42:	2218      	movs	r2, #24
 8002d44:	f000 f98e 	bl	8003064 <memcpy>
					txRec.pkt.R.RecNr = rxRec.pkt.R.RecNr;
 8002d48:	70ec      	strb	r4, [r5, #3]
					sendPkt();
 8002d4a:	f7ff ff7b 	bl	8002c44 <sendPkt>
 8002d4e:	e7bf      	b.n	8002cd0 <execNewRxPkt+0x10>
					sendErrPkt(HAL_BAD_REC_NR);
 8002d50:	2006      	movs	r0, #6
 8002d52:	f7ff ff8b 	bl	8002c6c <sendErrPkt>
 8002d56:	e7bb      	b.n	8002cd0 <execNewRxPkt+0x10>
			memset(&eepData, 0, sizeof(eepData));
 8002d58:	22b0      	movs	r2, #176	; 0xb0
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4850      	ldr	r0, [pc, #320]	; (8002ea0 <execNewRxPkt+0x1e0>)
 8002d5e:	f000 f98a 	bl	8003076 <memset>
			txRec.pkt.R.ErrCode = writeEEprom(0, sizeof(eepData));
 8002d62:	21b0      	movs	r1, #176	; 0xb0
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7ff fe9b 	bl	8002aa0 <writeEEprom>
 8002d6a:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <execNewRxPkt+0x1c8>)
 8002d6c:	70d8      	strb	r0, [r3, #3]
			sendPkt();
 8002d6e:	f7ff ff69 	bl	8002c44 <sendPkt>
			break;
 8002d72:	e7ad      	b.n	8002cd0 <execNewRxPkt+0x10>
			if (rxRec.pkt.R.Sign == SIGN_PKT_T) {
 8002d74:	2385      	movs	r3, #133	; 0x85
 8002d76:	015b      	lsls	r3, r3, #5
 8002d78:	4299      	cmp	r1, r3
 8002d7a:	d1a9      	bne.n	8002cd0 <execNewRxPkt+0x10>
				memcpy((void*) &eepData.devInfo, &ir->Info, sz);
 8002d7c:	4941      	ldr	r1, [pc, #260]	; (8002e84 <execNewRxPkt+0x1c4>)
 8002d7e:	2208      	movs	r2, #8
 8002d80:	3113      	adds	r1, #19
 8002d82:	4847      	ldr	r0, [pc, #284]	; (8002ea0 <execNewRxPkt+0x1e0>)
 8002d84:	f000 f96e 	bl	8003064 <memcpy>
				txRec.pkt.R.ErrCode = writeEEprom(0, sz);
 8002d88:	2108      	movs	r1, #8
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7ff fe88 	bl	8002aa0 <writeEEprom>
 8002d90:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <execNewRxPkt+0x1c8>)
 8002d92:	70d8      	strb	r0, [r3, #3]
				sendPkt();
 8002d94:	f7ff ff56 	bl	8002c44 <sendPkt>
 8002d98:	e79a      	b.n	8002cd0 <execNewRxPkt+0x10>
			if (rxRec.pkt.R.Sign == SIGN_PKT_W) {
 8002d9a:	4b43      	ldr	r3, [pc, #268]	; (8002ea8 <execNewRxPkt+0x1e8>)
 8002d9c:	4299      	cmp	r1, r3
 8002d9e:	d000      	beq.n	8002da2 <execNewRxPkt+0xe2>
 8002da0:	e796      	b.n	8002cd0 <execNewRxPkt+0x10>
				int nr = rxRec.pkt.R.RecNr;
 8002da2:	4b38      	ldr	r3, [pc, #224]	; (8002e84 <execNewRxPkt+0x1c4>)
 8002da4:	7ad8      	ldrb	r0, [r3, #11]
				if (rxRec.pkt.R.RecNr < KEYLOG_MAX_PACK_NR) {
 8002da6:	2814      	cmp	r0, #20
 8002da8:	d811      	bhi.n	8002dce <execNewRxPkt+0x10e>
 8002daa:	3001      	adds	r0, #1
 8002dac:	00c4      	lsls	r4, r0, #3
					memcpy((void*) &eepData.tab[nr], ir, sz);
 8002dae:	483c      	ldr	r0, [pc, #240]	; (8002ea0 <execNewRxPkt+0x1e0>)
 8002db0:	1820      	adds	r0, r4, r0
 8002db2:	0019      	movs	r1, r3
 8002db4:	2208      	movs	r2, #8
 8002db6:	310e      	adds	r1, #14
 8002db8:	f000 f954 	bl	8003064 <memcpy>
					txRec.pkt.R.ErrCode = writeEEprom(ofs, sz);
 8002dbc:	2108      	movs	r1, #8
 8002dbe:	0020      	movs	r0, r4
 8002dc0:	f7ff fe6e 	bl	8002aa0 <writeEEprom>
 8002dc4:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <execNewRxPkt+0x1c8>)
 8002dc6:	70d8      	strb	r0, [r3, #3]
					sendPkt();
 8002dc8:	f7ff ff3c 	bl	8002c44 <sendPkt>
 8002dcc:	e780      	b.n	8002cd0 <execNewRxPkt+0x10>
					sendErrPkt(HAL_BAD_REC_NR);
 8002dce:	2006      	movs	r0, #6
 8002dd0:	f7ff ff4c 	bl	8002c6c <sendErrPkt>
 8002dd4:	e77c      	b.n	8002cd0 <execNewRxPkt+0x10>
			if (rxRec.pkt.R.Sign == SIGN_PKT_I) {
 8002dd6:	4b35      	ldr	r3, [pc, #212]	; (8002eac <execNewRxPkt+0x1ec>)
 8002dd8:	4299      	cmp	r1, r3
 8002dda:	d000      	beq.n	8002dde <execNewRxPkt+0x11e>
 8002ddc:	e778      	b.n	8002cd0 <execNewRxPkt+0x10>
				if (rxRec.pkt.R.RecNr < KEYLOG_MAX_PACK_NR) {
 8002dde:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <execNewRxPkt+0x1c4>)
 8002de0:	7ad8      	ldrb	r0, [r3, #11]
 8002de2:	2814      	cmp	r0, #20
 8002de4:	d83f      	bhi.n	8002e66 <execNewRxPkt+0x1a6>
					if (dt->R.Mode == kmdDEMO) {
 8002de6:	1c43      	adds	r3, r0, #1
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4a2d      	ldr	r2, [pc, #180]	; (8002ea0 <execNewRxPkt+0x1e0>)
 8002dec:	5c9b      	ldrb	r3, [r3, r2]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d135      	bne.n	8002e5e <execNewRxPkt+0x19e>
						if (ptr->IncDec) {
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <execNewRxPkt+0x1c4>)
 8002df4:	7bdb      	ldrb	r3, [r3, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01c      	beq.n	8002e34 <execNewRxPkt+0x174>
							if (dt->R.ValidCnt != 0xffff)
 8002dfa:	1c43      	adds	r3, r0, #1
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	18d2      	adds	r2, r2, r3
 8002e00:	7911      	ldrb	r1, [r2, #4]
 8002e02:	7953      	ldrb	r3, [r2, #5]
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	430b      	orrs	r3, r1
 8002e08:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <execNewRxPkt+0x1f0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d008      	beq.n	8002e20 <execNewRxPkt+0x160>
								dt->R.ValidCnt++;
 8002e0e:	1c41      	adds	r1, r0, #1
 8002e10:	00c9      	lsls	r1, r1, #3
 8002e12:	3301      	adds	r3, #1
 8002e14:	4a22      	ldr	r2, [pc, #136]	; (8002ea0 <execNewRxPkt+0x1e0>)
 8002e16:	1852      	adds	r2, r2, r1
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	7113      	strb	r3, [r2, #4]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	7153      	strb	r3, [r2, #5]
						txRec.pkt.R.ErrCode = writeEEprom(ofs, sizeof(TKeyLogItem));
 8002e20:	3001      	adds	r0, #1
 8002e22:	00c0      	lsls	r0, r0, #3
 8002e24:	2108      	movs	r1, #8
 8002e26:	f7ff fe3b 	bl	8002aa0 <writeEEprom>
 8002e2a:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <execNewRxPkt+0x1c8>)
 8002e2c:	70d8      	strb	r0, [r3, #3]
						sendPkt();
 8002e2e:	f7ff ff09 	bl	8002c44 <sendPkt>
 8002e32:	e74d      	b.n	8002cd0 <execNewRxPkt+0x10>
							if (dt->R.ValidCnt != 0xffff && dt->R.ValidCnt != 0) {
 8002e34:	1c43      	adds	r3, r0, #1
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4a19      	ldr	r2, [pc, #100]	; (8002ea0 <execNewRxPkt+0x1e0>)
 8002e3a:	18d2      	adds	r2, r2, r3
 8002e3c:	7911      	ldrb	r1, [r2, #4]
 8002e3e:	7953      	ldrb	r3, [r2, #5]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	430b      	orrs	r3, r1
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <execNewRxPkt+0x1f4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d8e8      	bhi.n	8002e20 <execNewRxPkt+0x160>
								dt->R.ValidCnt--;
 8002e4e:	1c41      	adds	r1, r0, #1
 8002e50:	00c9      	lsls	r1, r1, #3
 8002e52:	4a13      	ldr	r2, [pc, #76]	; (8002ea0 <execNewRxPkt+0x1e0>)
 8002e54:	1852      	adds	r2, r2, r1
 8002e56:	7113      	strb	r3, [r2, #4]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	7153      	strb	r3, [r2, #5]
 8002e5c:	e7e0      	b.n	8002e20 <execNewRxPkt+0x160>
						sendErrPkt(HAL_BAD_REC_MODE);
 8002e5e:	2007      	movs	r0, #7
 8002e60:	f7ff ff04 	bl	8002c6c <sendErrPkt>
 8002e64:	e734      	b.n	8002cd0 <execNewRxPkt+0x10>
					sendErrPkt(HAL_BAD_REC_NR);
 8002e66:	2006      	movs	r0, #6
 8002e68:	f7ff ff00 	bl	8002c6c <sendErrPkt>
 8002e6c:	e730      	b.n	8002cd0 <execNewRxPkt+0x10>
			if (rxRec.pkt.R.Sign == SIGN_PKT_Q) {
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <execNewRxPkt+0x1f8>)
 8002e70:	4299      	cmp	r1, r3
 8002e72:	d000      	beq.n	8002e76 <execNewRxPkt+0x1b6>
 8002e74:	e72c      	b.n	8002cd0 <execNewRxPkt+0x10>
				execNewQkt();
 8002e76:	f7ff ff03 	bl	8002c80 <execNewQkt>
 8002e7a:	e729      	b.n	8002cd0 <execNewRxPkt+0x10>
			sendErrPkt(HAL_BAD_CMD);
 8002e7c:	2005      	movs	r0, #5
 8002e7e:	f7ff fef5 	bl	8002c6c <sendErrPkt>
}
 8002e82:	e725      	b.n	8002cd0 <execNewRxPkt+0x10>
 8002e84:	20000030 	.word	0x20000030
 8002e88:	20000064 	.word	0x20000064
 8002e8c:	00004747 	.word	0x00004747
 8002e90:	000015a6 	.word	0x000015a6
 8002e94:	0800310c 	.word	0x0800310c
 8002e98:	000011e7 	.word	0x000011e7
 8002e9c:	20000160 	.word	0x20000160
 8002ea0:	2000016c 	.word	0x2000016c
 8002ea4:	00002e69 	.word	0x00002e69
 8002ea8:	0000c3ab 	.word	0x0000c3ab
 8002eac:	00008e29 	.word	0x00008e29
 8002eb0:	0000ffff 	.word	0x0000ffff
 8002eb4:	0000fffd 	.word	0x0000fffd
 8002eb8:	00004ac5 	.word	0x00004ac5

08002ebc <setSygIrq>:

void setSygIrq(uint8_t q) {
 8002ebc:	b510      	push	{r4, lr}
	if (q)
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	d106      	bne.n	8002ed0 <setSygIrq+0x14>
		HAL_GPIO_WritePin(SYG_IRQ_GPIO_Port, SYG_IRQ_Pin, GPIO_PIN_RESET);
	else
		HAL_GPIO_WritePin(SYG_IRQ_GPIO_Port, SYG_IRQ_Pin, GPIO_PIN_SET);
 8002ec2:	20a0      	movs	r0, #160	; 0xa0
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	2110      	movs	r1, #16
 8002ec8:	05c0      	lsls	r0, r0, #23
 8002eca:	f7fe f869 	bl	8000fa0 <HAL_GPIO_WritePin>
}
 8002ece:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(SYG_IRQ_GPIO_Port, SYG_IRQ_Pin, GPIO_PIN_RESET);
 8002ed0:	20a0      	movs	r0, #160	; 0xa0
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2110      	movs	r1, #16
 8002ed6:	05c0      	lsls	r0, r0, #23
 8002ed8:	f7fe f862 	bl	8000fa0 <HAL_GPIO_WritePin>
 8002edc:	e7f7      	b.n	8002ece <setSygIrq+0x12>
	...

08002ee0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002ee0:	b510      	push	{r4, lr}
	static uint8_t sPulse = 0;
	sPulse = !sPulse;
 8002ee2:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8002ee4:	7818      	ldrb	r0, [r3, #0]
 8002ee6:	4242      	negs	r2, r0
 8002ee8:	4150      	adcs	r0, r2
 8002eea:	b2c0      	uxtb	r0, r0
 8002eec:	7018      	strb	r0, [r3, #0]
	setSygIrq(sPulse);
 8002eee:	f7ff ffe5 	bl	8002ebc <setSygIrq>
}
 8002ef2:	bd10      	pop	{r4, pc}
 8002ef4:	20000060 	.word	0x20000060

08002ef8 <uMain>:

void uMain(void) {
 8002ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efa:	46c6      	mov	lr, r8
 8002efc:	b500      	push	{lr}
 8002efe:	b084      	sub	sp, #16

// region funkcji do blokowania flasha
#if 1
	setLed2(1);
 8002f00:	2001      	movs	r0, #1
 8002f02:	f7ff fe83 	bl	8002c0c <setLed2>
	FLASH_OBProgramInitTypeDef def;
	HAL_FLASHEx_OBGetConfig(&def);
 8002f06:	4668      	mov	r0, sp
 8002f08:	f7fd ff00 	bl	8000d0c <HAL_FLASHEx_OBGetConfig>

	uint32_t opt = 0;

	if (def.RDPLevel != OB_RDP_LEVEL_1)
 8002f0c:	466b      	mov	r3, sp
 8002f0e:	7b1c      	ldrb	r4, [r3, #12]
		opt |= OPTIONBYTE_RDP;  //blokada przed odczytem
 8002f10:	3cbb      	subs	r4, #187	; 0xbb
 8002f12:	1e63      	subs	r3, r4, #1
 8002f14:	419c      	sbcs	r4, r3
 8002f16:	0064      	lsls	r4, r4, #1
	if (def.BORLevel != OB_BOR_LEVEL5)
 8002f18:	466b      	mov	r3, sp
 8002f1a:	7b5b      	ldrb	r3, [r3, #13]
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	d019      	beq.n	8002f54 <uMain+0x5c>
		opt |= OPTIONBYTE_BOR; //BOR
 8002f20:	2308      	movs	r3, #8
 8002f22:	431c      	orrs	r4, r3
	if (!def.BOOTBit1Config)
 8002f24:	466b      	mov	r3, sp
 8002f26:	7bdb      	ldrb	r3, [r3, #15]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d017      	beq.n	8002f5c <uMain+0x64>
		opt |= OPTIONBYTE_BOOT_BIT1;

	if (opt) {
		HAL_StatusTypeDef st = HAL_FLASH_OB_Unlock();
 8002f2c:	f7fd fda8 	bl	8000a80 <HAL_FLASH_OB_Unlock>
		if (st == HAL_OK) {
 8002f30:	2800      	cmp	r0, #0
 8002f32:	d118      	bne.n	8002f66 <uMain+0x6e>
			def.OptionType = opt;
 8002f34:	9400      	str	r4, [sp, #0]
			def.RDPLevel = OB_RDP_LEVEL_1;
 8002f36:	23bb      	movs	r3, #187	; 0xbb
 8002f38:	466a      	mov	r2, sp
 8002f3a:	7313      	strb	r3, [r2, #12]
			def.BORLevel = OB_BOR_LEVEL5;
 8002f3c:	3baf      	subs	r3, #175	; 0xaf
 8002f3e:	7353      	strb	r3, [r2, #13]
			def.BOOTBit1Config = OPTIONBYTE_BOOT_BIT1;
 8002f40:	3304      	adds	r3, #4
 8002f42:	73d3      	strb	r3, [r2, #15]

			st = HAL_FLASHEx_OBProgram(&def);
 8002f44:	4668      	mov	r0, sp
 8002f46:	f7fd fe37 	bl	8000bb8 <HAL_FLASHEx_OBProgram>
			if (st == HAL_OK) {
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	d10b      	bne.n	8002f66 <uMain+0x6e>
				HAL_FLASH_OB_Lock();
 8002f4e:	f7fd fdbb 	bl	8000ac8 <HAL_FLASH_OB_Lock>
 8002f52:	e008      	b.n	8002f66 <uMain+0x6e>
	if (!def.BOOTBit1Config)
 8002f54:	466b      	mov	r3, sp
 8002f56:	7bdb      	ldrb	r3, [r3, #15]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <uMain+0x6a>
		opt |= OPTIONBYTE_BOOT_BIT1;
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	431c      	orrs	r4, r3
 8002f60:	e7e4      	b.n	8002f2c <uMain+0x34>
	if (opt) {
 8002f62:	2c00      	cmp	r4, #0
 8002f64:	d1e2      	bne.n	8002f2c <uMain+0x34>
			}
		}
	}

	//jesli blokowanie niepowdło się to nie uruchamiamy się
	HAL_FLASHEx_OBGetConfig(&def);
 8002f66:	4668      	mov	r0, sp
 8002f68:	f7fd fed0 	bl	8000d0c <HAL_FLASHEx_OBGetConfig>
	if (def.RDPLevel != OB_RDP_LEVEL_1) {
 8002f6c:	466b      	mov	r3, sp
 8002f6e:	7b1b      	ldrb	r3, [r3, #12]
 8002f70:	2bbb      	cmp	r3, #187	; 0xbb
 8002f72:	d006      	beq.n	8002f82 <uMain+0x8a>
		setLed1(1);
 8002f74:	2001      	movs	r0, #1
 8002f76:	f7ff fe35 	bl	8002be4 <setLed1>
		setLed2(1);
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	f7ff fe46 	bl	8002c0c <setLed2>
 8002f80:	e7fe      	b.n	8002f80 <uMain+0x88>
		while (1) {

		}
	}
#endif
	setLed2(0);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7ff fe42 	bl	8002c0c <setLed2>
	setLed1(1);
 8002f88:	2001      	movs	r0, #1
 8002f8a:	f7ff fe2b 	bl	8002be4 <setLed1>
	if (!loadSoftVer(&mSoftVer, &DevLabel[16])) {
 8002f8e:	491c      	ldr	r1, [pc, #112]	; (8003000 <uMain+0x108>)
 8002f90:	481c      	ldr	r0, [pc, #112]	; (8003004 <uMain+0x10c>)
 8002f92:	f7ff fcf5 	bl	8002980 <loadSoftVer>
 8002f96:	2800      	cmp	r0, #0
 8002f98:	d104      	bne.n	8002fa4 <uMain+0xac>
		mSoftVer.ver = 1;
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <uMain+0x10c>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	801a      	strh	r2, [r3, #0]
		mSoftVer.rev = 777;
 8002fa0:	4a19      	ldr	r2, [pc, #100]	; (8003008 <uMain+0x110>)
 8002fa2:	805a      	strh	r2, [r3, #2]
	}

	mGlobError = 0;
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <uMain+0x114>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
	initEepData();
 8002faa:	f7ff fdad 	bl	8002b08 <initEepData>

	HAL_TIM_Base_Start_IT(&htim2);
 8002fae:	4818      	ldr	r0, [pc, #96]	; (8003010 <uMain+0x118>)
 8002fb0:	f7fe fd36 	bl	8001a20 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart2, &rxRec.recByte, 1);
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4917      	ldr	r1, [pc, #92]	; (8003014 <uMain+0x11c>)
 8002fb8:	4817      	ldr	r0, [pc, #92]	; (8003018 <uMain+0x120>)
 8002fba:	f7fe ff69 	bl	8001e90 <HAL_UART_Receive_IT>

	uint32_t ledT = HAL_GetTick();
 8002fbe:	f7fd fc7d 	bl	80008bc <HAL_GetTick>
 8002fc2:	0006      	movs	r6, r0
	uint8_t led = 0;
 8002fc4:	2500      	movs	r5, #0
			ledT = tt;
			led = !led;
			setLed1(led);
		}
		checkRxRcTimeOut();
		if (rxRec.pktRdy) {
 8002fc6:	4b13      	ldr	r3, [pc, #76]	; (8003014 <uMain+0x11c>)
 8002fc8:	4698      	mov	r8, r3
 8002fca:	2728      	movs	r7, #40	; 0x28
		uint32_t tt = HAL_GetTick();
 8002fcc:	f7fd fc76 	bl	80008bc <HAL_GetTick>
 8002fd0:	0004      	movs	r4, r0
		if (tt - ledT > 200) {
 8002fd2:	1b83      	subs	r3, r0, r6
 8002fd4:	2bc8      	cmp	r3, #200	; 0xc8
 8002fd6:	d80a      	bhi.n	8002fee <uMain+0xf6>
		checkRxRcTimeOut();
 8002fd8:	f7ff fd50 	bl	8002a7c <checkRxRcTimeOut>
		if (rxRec.pktRdy) {
 8002fdc:	4643      	mov	r3, r8
 8002fde:	5ddb      	ldrb	r3, [r3, r7]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f3      	beq.n	8002fcc <uMain+0xd4>
			execNewRxPkt();
 8002fe4:	f7ff fe6c 	bl	8002cc0 <execNewRxPkt>
			clearRxRec();
 8002fe8:	f7ff fd40 	bl	8002a6c <clearRxRec>
 8002fec:	e7ee      	b.n	8002fcc <uMain+0xd4>
			led = !led;
 8002fee:	426b      	negs	r3, r5
 8002ff0:	415d      	adcs	r5, r3
 8002ff2:	b2ed      	uxtb	r5, r5
			setLed1(led);
 8002ff4:	0028      	movs	r0, r5
 8002ff6:	f7ff fdf5 	bl	8002be4 <setLed1>
			ledT = tt;
 8002ffa:	0026      	movs	r6, r4
 8002ffc:	e7ec      	b.n	8002fd8 <uMain+0xe0>
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	080000d0 	.word	0x080000d0
 8003004:	20000160 	.word	0x20000160
 8003008:	00000309 	.word	0x00000309
 800300c:	2000002c 	.word	0x2000002c
 8003010:	20000088 	.word	0x20000088
 8003014:	20000030 	.word	0x20000030
 8003018:	200000c4 	.word	0x200000c4

0800301c <__libc_init_array>:
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	2600      	movs	r6, #0
 8003020:	4d0c      	ldr	r5, [pc, #48]	; (8003054 <__libc_init_array+0x38>)
 8003022:	4c0d      	ldr	r4, [pc, #52]	; (8003058 <__libc_init_array+0x3c>)
 8003024:	1b64      	subs	r4, r4, r5
 8003026:	10a4      	asrs	r4, r4, #2
 8003028:	42a6      	cmp	r6, r4
 800302a:	d109      	bne.n	8003040 <__libc_init_array+0x24>
 800302c:	2600      	movs	r6, #0
 800302e:	f000 f82b 	bl	8003088 <_init>
 8003032:	4d0a      	ldr	r5, [pc, #40]	; (800305c <__libc_init_array+0x40>)
 8003034:	4c0a      	ldr	r4, [pc, #40]	; (8003060 <__libc_init_array+0x44>)
 8003036:	1b64      	subs	r4, r4, r5
 8003038:	10a4      	asrs	r4, r4, #2
 800303a:	42a6      	cmp	r6, r4
 800303c:	d105      	bne.n	800304a <__libc_init_array+0x2e>
 800303e:	bd70      	pop	{r4, r5, r6, pc}
 8003040:	00b3      	lsls	r3, r6, #2
 8003042:	58eb      	ldr	r3, [r5, r3]
 8003044:	4798      	blx	r3
 8003046:	3601      	adds	r6, #1
 8003048:	e7ee      	b.n	8003028 <__libc_init_array+0xc>
 800304a:	00b3      	lsls	r3, r6, #2
 800304c:	58eb      	ldr	r3, [r5, r3]
 800304e:	4798      	blx	r3
 8003050:	3601      	adds	r6, #1
 8003052:	e7f2      	b.n	800303a <__libc_init_array+0x1e>
 8003054:	08003180 	.word	0x08003180
 8003058:	08003180 	.word	0x08003180
 800305c:	08003180 	.word	0x08003180
 8003060:	08003184 	.word	0x08003184

08003064 <memcpy>:
 8003064:	2300      	movs	r3, #0
 8003066:	b510      	push	{r4, lr}
 8003068:	429a      	cmp	r2, r3
 800306a:	d100      	bne.n	800306e <memcpy+0xa>
 800306c:	bd10      	pop	{r4, pc}
 800306e:	5ccc      	ldrb	r4, [r1, r3]
 8003070:	54c4      	strb	r4, [r0, r3]
 8003072:	3301      	adds	r3, #1
 8003074:	e7f8      	b.n	8003068 <memcpy+0x4>

08003076 <memset>:
 8003076:	0003      	movs	r3, r0
 8003078:	1812      	adds	r2, r2, r0
 800307a:	4293      	cmp	r3, r2
 800307c:	d100      	bne.n	8003080 <memset+0xa>
 800307e:	4770      	bx	lr
 8003080:	7019      	strb	r1, [r3, #0]
 8003082:	3301      	adds	r3, #1
 8003084:	e7f9      	b.n	800307a <memset+0x4>
	...

08003088 <_init>:
 8003088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308e:	bc08      	pop	{r3}
 8003090:	469e      	mov	lr, r3
 8003092:	4770      	bx	lr

08003094 <_fini>:
 8003094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309a:	bc08      	pop	{r3}
 800309c:	469e      	mov	lr, r3
 800309e:	4770      	bx	lr
