
Dongle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08009f30  08009f30  00019f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0b0  0800a0b0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a0b0  0800a0b0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a0b0  0800a0b0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0b0  0800a0b0  0001a0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0b4  0800a0b4  0001a0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a0b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000159c  200001e0  0800a298  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000177c  0800a298  0002177c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001661b  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003995  00000000  00000000  00036824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0003a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  0003b318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dba4  00000000  00000000  0003c310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fd6  00000000  00000000  00059eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d94e  00000000  00000000  00070e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe7d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005050  00000000  00000000  000fe828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009f18 	.word	0x08009f18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08009f18 	.word	0x08009f18

0800014c <initCubeSys>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void initCubeSys(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	  MX_GPIO_Init();
 8000150:	f000 f8cc 	bl	80002ec <MX_GPIO_Init>
	  MX_I2C1_Init();
 8000154:	f000 f872 	bl	800023c <MX_I2C1_Init>
	  MX_USB_DEVICE_Init();
 8000158:	f007 fc3c 	bl	80079d4 <MX_USB_DEVICE_Init>
	  MX_USART2_UART_Init();
 800015c:	f000 f89c 	bl	8000298 <MX_USART2_UART_Init>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}

08000164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000168:	f000 fae6 	bl	8000738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016c:	f000 f80b 	bl	8000186 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  main2();
 8000170:	f008 f9f2 	bl	8008558 <main2>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000174:	f000 f8ba 	bl	80002ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000178:	f000 f860 	bl	800023c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800017c:	f007 fc2a 	bl	80079d4 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000180:	f000 f88a 	bl	8000298 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000184:	e7fe      	b.n	8000184 <main+0x20>

08000186 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000186:	b580      	push	{r7, lr}
 8000188:	b094      	sub	sp, #80	; 0x50
 800018a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000190:	2228      	movs	r2, #40	; 0x28
 8000192:	2100      	movs	r1, #0
 8000194:	4618      	mov	r0, r3
 8000196:	f008 fe80 	bl	8008e9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019a:	f107 0314 	add.w	r3, r7, #20
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	605a      	str	r2, [r3, #4]
 80001b2:	609a      	str	r2, [r3, #8]
 80001b4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b6:	2301      	movs	r3, #1
 80001b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c0:	2300      	movs	r3, #0
 80001c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c4:	2301      	movs	r3, #1
 80001c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c8:	2302      	movs	r3, #2
 80001ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001dc:	4618      	mov	r0, r3
 80001de:	f002 ff11 	bl	8003004 <HAL_RCC_OscConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001e8:	f000 f8f4 	bl	80003d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ec:	230f      	movs	r3, #15
 80001ee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000202:	f107 0314 	add.w	r3, r7, #20
 8000206:	2102      	movs	r1, #2
 8000208:	4618      	mov	r0, r3
 800020a:	f003 f97d 	bl	8003508 <HAL_RCC_ClockConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000214:	f000 f8de 	bl	80003d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000218:	2310      	movs	r3, #16
 800021a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4618      	mov	r0, r3
 8000224:	f003 fafe 	bl	8003824 <HAL_RCCEx_PeriphCLKConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800022e:	f000 f8d1 	bl	80003d4 <Error_Handler>
  }
}
 8000232:	bf00      	nop
 8000234:	3750      	adds	r7, #80	; 0x50
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <MX_I2C1_Init+0x50>)
 8000242:	4a13      	ldr	r2, [pc, #76]	; (8000290 <MX_I2C1_Init+0x54>)
 8000244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000246:	4b11      	ldr	r3, [pc, #68]	; (800028c <MX_I2C1_Init+0x50>)
 8000248:	4a12      	ldr	r2, [pc, #72]	; (8000294 <MX_I2C1_Init+0x58>)
 800024a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <MX_I2C1_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <MX_I2C1_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <MX_I2C1_Init+0x50>)
 800025a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800025e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <MX_I2C1_Init+0x50>)
 8000262:	2200      	movs	r2, #0
 8000264:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <MX_I2C1_Init+0x50>)
 8000268:	2200      	movs	r2, #0
 800026a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <MX_I2C1_Init+0x50>)
 800026e:	2200      	movs	r2, #0
 8000270:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <MX_I2C1_Init+0x50>)
 8000274:	2200      	movs	r2, #0
 8000276:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000278:	4804      	ldr	r0, [pc, #16]	; (800028c <MX_I2C1_Init+0x50>)
 800027a:	f000 fd8d 	bl	8000d98 <HAL_I2C_Init>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000284:	f000 f8a6 	bl	80003d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	200001fc 	.word	0x200001fc
 8000290:	40005400 	.word	0x40005400
 8000294:	000186a0 	.word	0x000186a0

08000298 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 800029e:	4a12      	ldr	r2, [pc, #72]	; (80002e8 <MX_USART2_UART_Init+0x50>)
 80002a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002be:	220c      	movs	r2, #12
 80002c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ce:	4805      	ldr	r0, [pc, #20]	; (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002d0:	f003 fb5e 	bl	8003990 <HAL_UART_Init>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002da:	f000 f87b 	bl	80003d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	20000250 	.word	0x20000250
 80002e8:	40004400 	.word	0x40004400

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0310 	add.w	r3, r7, #16
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000300:	4b31      	ldr	r3, [pc, #196]	; (80003c8 <MX_GPIO_Init+0xdc>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a30      	ldr	r2, [pc, #192]	; (80003c8 <MX_GPIO_Init+0xdc>)
 8000306:	f043 0310 	orr.w	r3, r3, #16
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b2e      	ldr	r3, [pc, #184]	; (80003c8 <MX_GPIO_Init+0xdc>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0310 	and.w	r3, r3, #16
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000318:	4b2b      	ldr	r3, [pc, #172]	; (80003c8 <MX_GPIO_Init+0xdc>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a2a      	ldr	r2, [pc, #168]	; (80003c8 <MX_GPIO_Init+0xdc>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b28      	ldr	r3, [pc, #160]	; (80003c8 <MX_GPIO_Init+0xdc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0320 	and.w	r3, r3, #32
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000330:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <MX_GPIO_Init+0xdc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a24      	ldr	r2, [pc, #144]	; (80003c8 <MX_GPIO_Init+0xdc>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b22      	ldr	r3, [pc, #136]	; (80003c8 <MX_GPIO_Init+0xdc>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0304 	and.w	r3, r3, #4
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000348:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <MX_GPIO_Init+0xdc>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a1e      	ldr	r2, [pc, #120]	; (80003c8 <MX_GPIO_Init+0xdc>)
 800034e:	f043 0308 	orr.w	r3, r3, #8
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <MX_GPIO_Init+0xdc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0308 	and.w	r3, r3, #8
 800035c:	603b      	str	r3, [r7, #0]
 800035e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000366:	4819      	ldr	r0, [pc, #100]	; (80003cc <MX_GPIO_Init+0xe0>)
 8000368:	f000 fcfe 	bl	8000d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	2102      	movs	r1, #2
 8000370:	4817      	ldr	r0, [pc, #92]	; (80003d0 <MX_GPIO_Init+0xe4>)
 8000372:	f000 fcf9 	bl	8000d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_ON_GPIO_Port, USB_ON_Pin, GPIO_PIN_SET);
 8000376:	2201      	movs	r2, #1
 8000378:	f44f 7180 	mov.w	r1, #256	; 0x100
 800037c:	4814      	ldr	r0, [pc, #80]	; (80003d0 <MX_GPIO_Init+0xe4>)
 800037e:	f000 fcf3 	bl	8000d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000388:	2301      	movs	r3, #1
 800038a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038c:	2300      	movs	r3, #0
 800038e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000390:	2302      	movs	r3, #2
 8000392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	4619      	mov	r1, r3
 800039a:	480c      	ldr	r0, [pc, #48]	; (80003cc <MX_GPIO_Init+0xe0>)
 800039c:	f000 fb60 	bl	8000a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin USB_ON_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|USB_ON_Pin;
 80003a0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	4619      	mov	r1, r3
 80003b8:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_GPIO_Init+0xe4>)
 80003ba:	f000 fb51 	bl	8000a60 <HAL_GPIO_Init>

}
 80003be:	bf00      	nop
 80003c0:	3720      	adds	r7, #32
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40011000 	.word	0x40011000
 80003d0:	40010800 	.word	0x40010800

080003d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a14      	ldr	r2, [pc, #80]	; (800043c <HAL_MspInit+0x5c>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6193      	str	r3, [r2, #24]
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <HAL_MspInit+0x5c>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	4a0e      	ldr	r2, [pc, #56]	; (800043c <HAL_MspInit+0x5c>)
 8000404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000408:	61d3      	str	r3, [r2, #28]
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <HAL_MspInit+0x5c>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <HAL_MspInit+0x60>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <HAL_MspInit+0x60>)
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000
 8000440:	40010000 	.word	0x40010000

08000444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a15      	ldr	r2, [pc, #84]	; (80004b4 <HAL_I2C_MspInit+0x70>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d123      	bne.n	80004ac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000464:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <HAL_I2C_MspInit+0x74>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a13      	ldr	r2, [pc, #76]	; (80004b8 <HAL_I2C_MspInit+0x74>)
 800046a:	f043 0308 	orr.w	r3, r3, #8
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <HAL_I2C_MspInit+0x74>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0308 	and.w	r3, r3, #8
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800047c:	23c0      	movs	r3, #192	; 0xc0
 800047e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000480:	2312      	movs	r3, #18
 8000482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000484:	2303      	movs	r3, #3
 8000486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4619      	mov	r1, r3
 800048e:	480b      	ldr	r0, [pc, #44]	; (80004bc <HAL_I2C_MspInit+0x78>)
 8000490:	f000 fae6 	bl	8000a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <HAL_I2C_MspInit+0x74>)
 8000496:	69db      	ldr	r3, [r3, #28]
 8000498:	4a07      	ldr	r2, [pc, #28]	; (80004b8 <HAL_I2C_MspInit+0x74>)
 800049a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800049e:	61d3      	str	r3, [r2, #28]
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <HAL_I2C_MspInit+0x74>)
 80004a2:	69db      	ldr	r3, [r3, #28]
 80004a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004ac:	bf00      	nop
 80004ae:	3720      	adds	r7, #32
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40005400 	.word	0x40005400
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010c00 	.word	0x40010c00

080004c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a1f      	ldr	r2, [pc, #124]	; (8000558 <HAL_UART_MspInit+0x98>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d137      	bne.n	8000550 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <HAL_UART_MspInit+0x9c>)
 80004e2:	69db      	ldr	r3, [r3, #28]
 80004e4:	4a1d      	ldr	r2, [pc, #116]	; (800055c <HAL_UART_MspInit+0x9c>)
 80004e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ea:	61d3      	str	r3, [r2, #28]
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <HAL_UART_MspInit+0x9c>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <HAL_UART_MspInit+0x9c>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a17      	ldr	r2, [pc, #92]	; (800055c <HAL_UART_MspInit+0x9c>)
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <HAL_UART_MspInit+0x9c>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0304 	and.w	r3, r3, #4
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000510:	2304      	movs	r3, #4
 8000512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000514:	2302      	movs	r3, #2
 8000516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000518:	2303      	movs	r3, #3
 800051a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	480f      	ldr	r0, [pc, #60]	; (8000560 <HAL_UART_MspInit+0xa0>)
 8000524:	f000 fa9c 	bl	8000a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000528:	2308      	movs	r3, #8
 800052a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	4619      	mov	r1, r3
 800053a:	4809      	ldr	r0, [pc, #36]	; (8000560 <HAL_UART_MspInit+0xa0>)
 800053c:	f000 fa90 	bl	8000a60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000540:	2200      	movs	r2, #0
 8000542:	2105      	movs	r1, #5
 8000544:	2026      	movs	r0, #38	; 0x26
 8000546:	f000 fa54 	bl	80009f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800054a:	2026      	movs	r0, #38	; 0x26
 800054c:	f000 fa6d 	bl	8000a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000550:	bf00      	nop
 8000552:	3720      	adds	r7, #32
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40004400 	.word	0x40004400
 800055c:	40021000 	.word	0x40021000
 8000560:	40010800 	.word	0x40010800

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <HardFault_Handler+0x4>

08000576 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <MemManage_Handler+0x4>

0800057c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <BusFault_Handler+0x4>

08000582 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <UsageFault_Handler+0x4>

08000588 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b0:	f000 f908 	bl	80007c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005be:	f001 f849 	bl	8001654 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000f38 	.word	0x20000f38

080005cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
#if 0
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif
  DbgUart_IRQ();
 80005d0:	f008 fa5c 	bl	8008a8c <DbgUart_IRQ>
  /* USER CODE END USART2_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	e00a      	b.n	8000600 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005ea:	f3af 8000 	nop.w
 80005ee:	4601      	mov	r1, r0
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	60ba      	str	r2, [r7, #8]
 80005f6:	b2ca      	uxtb	r2, r1
 80005f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	429a      	cmp	r2, r3
 8000606:	dbf0      	blt.n	80005ea <_read+0x12>
	}

return len;
 8000608:	687b      	ldr	r3, [r7, #4]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
	return -1;
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000638:	605a      	str	r2, [r3, #4]
	return 0;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <_isatty>:

int _isatty(int file)
{
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
	return 1;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr

0800065a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800065a:	b480      	push	{r7}
 800065c:	b085      	sub	sp, #20
 800065e:	af00      	add	r7, sp, #0
 8000660:	60f8      	str	r0, [r7, #12]
 8000662:	60b9      	str	r1, [r7, #8]
 8000664:	607a      	str	r2, [r7, #4]
	return 0;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
	...

08000674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800067c:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <_sbrk+0x5c>)
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <_sbrk+0x60>)
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d102      	bne.n	8000696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <_sbrk+0x64>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <_sbrk+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d207      	bcs.n	80006b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a4:	f008 f9f8 	bl	8008a98 <__errno>
 80006a8:	4603      	mov	r3, r0
 80006aa:	220c      	movs	r2, #12
 80006ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	e009      	b.n	80006c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <_sbrk+0x64>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <_sbrk+0x64>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <_sbrk+0x64>)
 80006c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20005000 	.word	0x20005000
 80006d4:	00000400 	.word	0x00000400
 80006d8:	20000298 	.word	0x20000298
 80006dc:	20001780 	.word	0x20001780

080006e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006ee:	e003      	b.n	80006f8 <LoopCopyDataInit>

080006f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006f6:	3104      	adds	r1, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006f8:	480a      	ldr	r0, [pc, #40]	; (8000724 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000700:	d3f6      	bcc.n	80006f0 <CopyDataInit>
  ldr r2, =_sbss
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000704:	e002      	b.n	800070c <LoopFillZerobss>

08000706 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000708:	f842 3b04 	str.w	r3, [r2], #4

0800070c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800070e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000710:	d3f9      	bcc.n	8000706 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000712:	f7ff ffe5 	bl	80006e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000716:	f008 fb8b 	bl	8008e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071a:	f7ff fd23 	bl	8000164 <main>
  bx lr
 800071e:	4770      	bx	lr
  ldr r3, =_sidata
 8000720:	0800a0b8 	.word	0x0800a0b8
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000728:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 800072c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000730:	2000177c 	.word	0x2000177c

08000734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC1_2_IRQHandler>
	...

08000738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <HAL_Init+0x28>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a07      	ldr	r2, [pc, #28]	; (8000760 <HAL_Init+0x28>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000748:	2003      	movs	r0, #3
 800074a:	f000 f947 	bl	80009dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800074e:	2000      	movs	r0, #0
 8000750:	f000 f808 	bl	8000764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000754:	f7ff fe44 	bl	80003e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40022000 	.word	0x40022000

08000764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_InitTick+0x54>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_InitTick+0x58>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077a:	fbb3 f3f1 	udiv	r3, r3, r1
 800077e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f95f 	bl	8000a46 <HAL_SYSTICK_Config>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
 8000790:	e00e      	b.n	80007b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b0f      	cmp	r3, #15
 8000796:	d80a      	bhi.n	80007ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000798:	2200      	movs	r2, #0
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	f04f 30ff 	mov.w	r0, #4294967295
 80007a0:	f000 f927 	bl	80009f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <HAL_InitTick+0x5c>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e000      	b.n	80007b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20000004 	.word	0x20000004

080007c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_IncTick+0x1c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_IncTick+0x20>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	4a03      	ldr	r2, [pc, #12]	; (80007e4 <HAL_IncTick+0x20>)
 80007d6:	6013      	str	r3, [r2, #0]
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	20000008 	.word	0x20000008
 80007e4:	2000029c 	.word	0x2000029c

080007e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;
 80007ec:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <HAL_GetTick+0x10>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	2000029c 	.word	0x2000029c

080007fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000804:	f7ff fff0 	bl	80007e8 <HAL_GetTick>
 8000808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000814:	d005      	beq.n	8000822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_Delay+0x44>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	461a      	mov	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000822:	bf00      	nop
 8000824:	f7ff ffe0 	bl	80007e8 <HAL_GetTick>
 8000828:	4602      	mov	r2, r0
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	429a      	cmp	r2, r3
 8000832:	d8f7      	bhi.n	8000824 <HAL_Delay+0x28>
  {
  }
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000008 	.word	0x20000008

08000844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800086c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000876:	4a04      	ldr	r2, [pc, #16]	; (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	60d3      	str	r3, [r2, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	f003 0307 	and.w	r3, r3, #7
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	db0b      	blt.n	80008d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	f003 021f 	and.w	r2, r3, #31
 80008c0:	4906      	ldr	r1, [pc, #24]	; (80008dc <__NVIC_EnableIRQ+0x34>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	095b      	lsrs	r3, r3, #5
 80008c8:	2001      	movs	r0, #1
 80008ca:	fa00 f202 	lsl.w	r2, r0, r2
 80008ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	e000e100 	.word	0xe000e100

080008e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	; (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	; (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0112      	lsls	r2, r2, #4
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f1c3 0307 	rsb	r3, r3, #7
 800094e:	2b04      	cmp	r3, #4
 8000950:	bf28      	it	cs
 8000952:	2304      	movcs	r3, #4
 8000954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3304      	adds	r3, #4
 800095a:	2b06      	cmp	r3, #6
 800095c:	d902      	bls.n	8000964 <NVIC_EncodePriority+0x30>
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3b03      	subs	r3, #3
 8000962:	e000      	b.n	8000966 <NVIC_EncodePriority+0x32>
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	f04f 32ff 	mov.w	r2, #4294967295
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43da      	mvns	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	401a      	ands	r2, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800097c:	f04f 31ff 	mov.w	r1, #4294967295
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	43d9      	mvns	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	4313      	orrs	r3, r2
         );
}
 800098e:	4618      	mov	r0, r3
 8000990:	3724      	adds	r7, #36	; 0x24
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a8:	d301      	bcc.n	80009ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009aa:	2301      	movs	r3, #1
 80009ac:	e00f      	b.n	80009ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <SysTick_Config+0x40>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b6:	210f      	movs	r1, #15
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f7ff ff90 	bl	80008e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <SysTick_Config+0x40>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <SysTick_Config+0x40>)
 80009c8:	2207      	movs	r2, #7
 80009ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	e000e010 	.word	0xe000e010

080009dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff2d 	bl	8000844 <__NVIC_SetPriorityGrouping>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a04:	f7ff ff42 	bl	800088c <__NVIC_GetPriorityGrouping>
 8000a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	6978      	ldr	r0, [r7, #20]
 8000a10:	f7ff ff90 	bl	8000934 <NVIC_EncodePriority>
 8000a14:	4602      	mov	r2, r0
 8000a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff5f 	bl	80008e0 <__NVIC_SetPriority>
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff35 	bl	80008a8 <__NVIC_EnableIRQ>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ffa2 	bl	8000998 <SysTick_Config>
 8000a54:	4603      	mov	r3, r0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b08b      	sub	sp, #44	; 0x2c
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a72:	e169      	b.n	8000d48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a74:	2201      	movs	r2, #1
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	69fa      	ldr	r2, [r7, #28]
 8000a84:	4013      	ands	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	f040 8158 	bne.w	8000d42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	4a9a      	ldr	r2, [pc, #616]	; (8000d00 <HAL_GPIO_Init+0x2a0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d05e      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000a9c:	4a98      	ldr	r2, [pc, #608]	; (8000d00 <HAL_GPIO_Init+0x2a0>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d875      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000aa2:	4a98      	ldr	r2, [pc, #608]	; (8000d04 <HAL_GPIO_Init+0x2a4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d058      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000aa8:	4a96      	ldr	r2, [pc, #600]	; (8000d04 <HAL_GPIO_Init+0x2a4>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d86f      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000aae:	4a96      	ldr	r2, [pc, #600]	; (8000d08 <HAL_GPIO_Init+0x2a8>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d052      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000ab4:	4a94      	ldr	r2, [pc, #592]	; (8000d08 <HAL_GPIO_Init+0x2a8>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d869      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000aba:	4a94      	ldr	r2, [pc, #592]	; (8000d0c <HAL_GPIO_Init+0x2ac>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d04c      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000ac0:	4a92      	ldr	r2, [pc, #584]	; (8000d0c <HAL_GPIO_Init+0x2ac>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d863      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000ac6:	4a92      	ldr	r2, [pc, #584]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d046      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
 8000acc:	4a90      	ldr	r2, [pc, #576]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d85d      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000ad2:	2b12      	cmp	r3, #18
 8000ad4:	d82a      	bhi.n	8000b2c <HAL_GPIO_Init+0xcc>
 8000ad6:	2b12      	cmp	r3, #18
 8000ad8:	d859      	bhi.n	8000b8e <HAL_GPIO_Init+0x12e>
 8000ada:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <HAL_GPIO_Init+0x80>)
 8000adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae0:	08000b5b 	.word	0x08000b5b
 8000ae4:	08000b35 	.word	0x08000b35
 8000ae8:	08000b47 	.word	0x08000b47
 8000aec:	08000b89 	.word	0x08000b89
 8000af0:	08000b8f 	.word	0x08000b8f
 8000af4:	08000b8f 	.word	0x08000b8f
 8000af8:	08000b8f 	.word	0x08000b8f
 8000afc:	08000b8f 	.word	0x08000b8f
 8000b00:	08000b8f 	.word	0x08000b8f
 8000b04:	08000b8f 	.word	0x08000b8f
 8000b08:	08000b8f 	.word	0x08000b8f
 8000b0c:	08000b8f 	.word	0x08000b8f
 8000b10:	08000b8f 	.word	0x08000b8f
 8000b14:	08000b8f 	.word	0x08000b8f
 8000b18:	08000b8f 	.word	0x08000b8f
 8000b1c:	08000b8f 	.word	0x08000b8f
 8000b20:	08000b8f 	.word	0x08000b8f
 8000b24:	08000b3d 	.word	0x08000b3d
 8000b28:	08000b51 	.word	0x08000b51
 8000b2c:	4a79      	ldr	r2, [pc, #484]	; (8000d14 <HAL_GPIO_Init+0x2b4>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d013      	beq.n	8000b5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b32:	e02c      	b.n	8000b8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	623b      	str	r3, [r7, #32]
          break;
 8000b3a:	e029      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	3304      	adds	r3, #4
 8000b42:	623b      	str	r3, [r7, #32]
          break;
 8000b44:	e024      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	3308      	adds	r3, #8
 8000b4c:	623b      	str	r3, [r7, #32]
          break;
 8000b4e:	e01f      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	330c      	adds	r3, #12
 8000b56:	623b      	str	r3, [r7, #32]
          break;
 8000b58:	e01a      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b62:	2304      	movs	r3, #4
 8000b64:	623b      	str	r3, [r7, #32]
          break;
 8000b66:	e013      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d105      	bne.n	8000b7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b70:	2308      	movs	r3, #8
 8000b72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	69fa      	ldr	r2, [r7, #28]
 8000b78:	611a      	str	r2, [r3, #16]
          break;
 8000b7a:	e009      	b.n	8000b90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	69fa      	ldr	r2, [r7, #28]
 8000b84:	615a      	str	r2, [r3, #20]
          break;
 8000b86:	e003      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
          break;
 8000b8c:	e000      	b.n	8000b90 <HAL_GPIO_Init+0x130>
          break;
 8000b8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	2bff      	cmp	r3, #255	; 0xff
 8000b94:	d801      	bhi.n	8000b9a <HAL_GPIO_Init+0x13a>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	e001      	b.n	8000b9e <HAL_GPIO_Init+0x13e>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	2bff      	cmp	r3, #255	; 0xff
 8000ba4:	d802      	bhi.n	8000bac <HAL_GPIO_Init+0x14c>
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	e002      	b.n	8000bb2 <HAL_GPIO_Init+0x152>
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bae:	3b08      	subs	r3, #8
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	210f      	movs	r1, #15
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	6a39      	ldr	r1, [r7, #32]
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 80b1 	beq.w	8000d42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000be0:	4b4d      	ldr	r3, [pc, #308]	; (8000d18 <HAL_GPIO_Init+0x2b8>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a4c      	ldr	r2, [pc, #304]	; (8000d18 <HAL_GPIO_Init+0x2b8>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b4a      	ldr	r3, [pc, #296]	; (8000d18 <HAL_GPIO_Init+0x2b8>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bf8:	4a48      	ldr	r2, [pc, #288]	; (8000d1c <HAL_GPIO_Init+0x2bc>)
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	089b      	lsrs	r3, r3, #2
 8000bfe:	3302      	adds	r3, #2
 8000c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	220f      	movs	r2, #15
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a40      	ldr	r2, [pc, #256]	; (8000d20 <HAL_GPIO_Init+0x2c0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d013      	beq.n	8000c4c <HAL_GPIO_Init+0x1ec>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a3f      	ldr	r2, [pc, #252]	; (8000d24 <HAL_GPIO_Init+0x2c4>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d00d      	beq.n	8000c48 <HAL_GPIO_Init+0x1e8>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a3e      	ldr	r2, [pc, #248]	; (8000d28 <HAL_GPIO_Init+0x2c8>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d007      	beq.n	8000c44 <HAL_GPIO_Init+0x1e4>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a3d      	ldr	r2, [pc, #244]	; (8000d2c <HAL_GPIO_Init+0x2cc>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d101      	bne.n	8000c40 <HAL_GPIO_Init+0x1e0>
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e006      	b.n	8000c4e <HAL_GPIO_Init+0x1ee>
 8000c40:	2304      	movs	r3, #4
 8000c42:	e004      	b.n	8000c4e <HAL_GPIO_Init+0x1ee>
 8000c44:	2302      	movs	r3, #2
 8000c46:	e002      	b.n	8000c4e <HAL_GPIO_Init+0x1ee>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e000      	b.n	8000c4e <HAL_GPIO_Init+0x1ee>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c50:	f002 0203 	and.w	r2, r2, #3
 8000c54:	0092      	lsls	r2, r2, #2
 8000c56:	4093      	lsls	r3, r2
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c5e:	492f      	ldr	r1, [pc, #188]	; (8000d1c <HAL_GPIO_Init+0x2bc>)
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3302      	adds	r3, #2
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d006      	beq.n	8000c86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	492c      	ldr	r1, [pc, #176]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	608b      	str	r3, [r1, #8]
 8000c84:	e006      	b.n	8000c94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c88:	689a      	ldr	r2, [r3, #8]
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	4928      	ldr	r1, [pc, #160]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000c90:	4013      	ands	r3, r2
 8000c92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	4922      	ldr	r1, [pc, #136]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	60cb      	str	r3, [r1, #12]
 8000cac:	e006      	b.n	8000cbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cae:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	491e      	ldr	r1, [pc, #120]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d006      	beq.n	8000cd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	4918      	ldr	r1, [pc, #96]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	604b      	str	r3, [r1, #4]
 8000cd4:	e006      	b.n	8000ce4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	4914      	ldr	r1, [pc, #80]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d021      	beq.n	8000d34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	490e      	ldr	r1, [pc, #56]	; (8000d30 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	600b      	str	r3, [r1, #0]
 8000cfc:	e021      	b.n	8000d42 <HAL_GPIO_Init+0x2e2>
 8000cfe:	bf00      	nop
 8000d00:	10320000 	.word	0x10320000
 8000d04:	10310000 	.word	0x10310000
 8000d08:	10220000 	.word	0x10220000
 8000d0c:	10210000 	.word	0x10210000
 8000d10:	10120000 	.word	0x10120000
 8000d14:	10110000 	.word	0x10110000
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	40010800 	.word	0x40010800
 8000d24:	40010c00 	.word	0x40010c00
 8000d28:	40011000 	.word	0x40011000
 8000d2c:	40011400 	.word	0x40011400
 8000d30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_GPIO_Init+0x304>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	4909      	ldr	r1, [pc, #36]	; (8000d64 <HAL_GPIO_Init+0x304>)
 8000d3e:	4013      	ands	r3, r2
 8000d40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	3301      	adds	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f47f ae8e 	bne.w	8000a74 <HAL_GPIO_Init+0x14>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	372c      	adds	r7, #44	; 0x2c
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	40010400 	.word	0x40010400

08000d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	807b      	strh	r3, [r7, #2]
 8000d74:	4613      	mov	r3, r2
 8000d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d78:	787b      	ldrb	r3, [r7, #1]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d7e:	887a      	ldrh	r2, [r7, #2]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d84:	e003      	b.n	8000d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d86:	887b      	ldrh	r3, [r7, #2]
 8000d88:	041a      	lsls	r2, r3, #16
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	611a      	str	r2, [r3, #16]
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e12b      	b.n	8001002 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d106      	bne.n	8000dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fb40 	bl	8000444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2224      	movs	r2, #36	; 0x24
 8000dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f022 0201 	bic.w	r2, r2, #1
 8000dda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000dfc:	f002 fccc 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8000e00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4a81      	ldr	r2, [pc, #516]	; (800100c <HAL_I2C_Init+0x274>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d807      	bhi.n	8000e1c <HAL_I2C_Init+0x84>
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4a80      	ldr	r2, [pc, #512]	; (8001010 <HAL_I2C_Init+0x278>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	bf94      	ite	ls
 8000e14:	2301      	movls	r3, #1
 8000e16:	2300      	movhi	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	e006      	b.n	8000e2a <HAL_I2C_Init+0x92>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4a7d      	ldr	r2, [pc, #500]	; (8001014 <HAL_I2C_Init+0x27c>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	bf94      	ite	ls
 8000e24:	2301      	movls	r3, #1
 8000e26:	2300      	movhi	r3, #0
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e0e7      	b.n	8001002 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4a78      	ldr	r2, [pc, #480]	; (8001018 <HAL_I2C_Init+0x280>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	0c9b      	lsrs	r3, r3, #18
 8000e3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	68ba      	ldr	r2, [r7, #8]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6a1b      	ldr	r3, [r3, #32]
 8000e58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	4a6a      	ldr	r2, [pc, #424]	; (800100c <HAL_I2C_Init+0x274>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d802      	bhi.n	8000e6c <HAL_I2C_Init+0xd4>
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	e009      	b.n	8000e80 <HAL_I2C_Init+0xe8>
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e72:	fb02 f303 	mul.w	r3, r2, r3
 8000e76:	4a69      	ldr	r2, [pc, #420]	; (800101c <HAL_I2C_Init+0x284>)
 8000e78:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7c:	099b      	lsrs	r3, r3, #6
 8000e7e:	3301      	adds	r3, #1
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	6812      	ldr	r2, [r2, #0]
 8000e84:	430b      	orrs	r3, r1
 8000e86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000e92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	495c      	ldr	r1, [pc, #368]	; (800100c <HAL_I2C_Init+0x274>)
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d819      	bhi.n	8000ed4 <HAL_I2C_Init+0x13c>
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	1e59      	subs	r1, r3, #1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eae:	1c59      	adds	r1, r3, #1
 8000eb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000eb4:	400b      	ands	r3, r1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d00a      	beq.n	8000ed0 <HAL_I2C_Init+0x138>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	1e59      	subs	r1, r3, #1
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ec8:	3301      	adds	r3, #1
 8000eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ece:	e051      	b.n	8000f74 <HAL_I2C_Init+0x1dc>
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	e04f      	b.n	8000f74 <HAL_I2C_Init+0x1dc>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d111      	bne.n	8000f00 <HAL_I2C_Init+0x168>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	1e58      	subs	r0, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6859      	ldr	r1, [r3, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	440b      	add	r3, r1
 8000eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eee:	3301      	adds	r3, #1
 8000ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	bf0c      	ite	eq
 8000ef8:	2301      	moveq	r3, #1
 8000efa:	2300      	movne	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	e012      	b.n	8000f26 <HAL_I2C_Init+0x18e>
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	1e58      	subs	r0, r3, #1
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6859      	ldr	r1, [r3, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	0099      	lsls	r1, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f16:	3301      	adds	r3, #1
 8000f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	bf0c      	ite	eq
 8000f20:	2301      	moveq	r3, #1
 8000f22:	2300      	movne	r3, #0
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_I2C_Init+0x196>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e022      	b.n	8000f74 <HAL_I2C_Init+0x1dc>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10e      	bne.n	8000f54 <HAL_I2C_Init+0x1bc>
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	1e58      	subs	r0, r3, #1
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6859      	ldr	r1, [r3, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	440b      	add	r3, r1
 8000f44:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f48:	3301      	adds	r3, #1
 8000f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f52:	e00f      	b.n	8000f74 <HAL_I2C_Init+0x1dc>
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	1e58      	subs	r0, r3, #1
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6859      	ldr	r1, [r3, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	0099      	lsls	r1, r3, #2
 8000f64:	440b      	add	r3, r1
 8000f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	6809      	ldr	r1, [r1, #0]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69da      	ldr	r2, [r3, #28]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000fa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	6911      	ldr	r1, [r2, #16]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68d2      	ldr	r2, [r2, #12]
 8000fae:	4311      	orrs	r1, r2
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695a      	ldr	r2, [r3, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 0201 	orr.w	r2, r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2220      	movs	r2, #32
 8000fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	000186a0 	.word	0x000186a0
 8001010:	001e847f 	.word	0x001e847f
 8001014:	003d08ff 	.word	0x003d08ff
 8001018:	431bde83 	.word	0x431bde83
 800101c:	10624dd3 	.word	0x10624dd3

08001020 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	b08b      	sub	sp, #44	; 0x2c
 8001024:	af06      	add	r7, sp, #24
 8001026:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e128      	b.n	8001284 <HAL_PCD_Init+0x264>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d13d      	bne.n	80010ba <HAL_PCD_Init+0x9a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback = HAL_PCD_SOFCallback;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a90      	ldr	r2, [pc, #576]	; (800128c <HAL_PCD_Init+0x26c>)
 800104a:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
    hpcd->SetupStageCallback = HAL_PCD_SetupStageCallback;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a8f      	ldr	r2, [pc, #572]	; (8001290 <HAL_PCD_Init+0x270>)
 8001052:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    hpcd->ResetCallback = HAL_PCD_ResetCallback;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a8e      	ldr	r2, [pc, #568]	; (8001294 <HAL_PCD_Init+0x274>)
 800105a:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
    hpcd->SuspendCallback = HAL_PCD_SuspendCallback;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a8d      	ldr	r2, [pc, #564]	; (8001298 <HAL_PCD_Init+0x278>)
 8001062:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
    hpcd->ResumeCallback = HAL_PCD_ResumeCallback;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a8c      	ldr	r2, [pc, #560]	; (800129c <HAL_PCD_Init+0x27c>)
 800106a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    hpcd->ConnectCallback = HAL_PCD_ConnectCallback;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a8b      	ldr	r2, [pc, #556]	; (80012a0 <HAL_PCD_Init+0x280>)
 8001072:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    hpcd->DisconnectCallback = HAL_PCD_DisconnectCallback;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a8a      	ldr	r2, [pc, #552]	; (80012a4 <HAL_PCD_Init+0x284>)
 800107a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    hpcd->DataOutStageCallback = HAL_PCD_DataOutStageCallback;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a89      	ldr	r2, [pc, #548]	; (80012a8 <HAL_PCD_Init+0x288>)
 8001082:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
    hpcd->DataInStageCallback = HAL_PCD_DataInStageCallback;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a88      	ldr	r2, [pc, #544]	; (80012ac <HAL_PCD_Init+0x28c>)
 800108a:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
    hpcd->ISOOUTIncompleteCallback = HAL_PCD_ISOOUTIncompleteCallback;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a87      	ldr	r2, [pc, #540]	; (80012b0 <HAL_PCD_Init+0x290>)
 8001092:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
    hpcd->ISOINIncompleteCallback = HAL_PCD_ISOINIncompleteCallback;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a86      	ldr	r2, [pc, #536]	; (80012b4 <HAL_PCD_Init+0x294>)
 800109a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

    if (hpcd->MspInitCallback == NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d103      	bne.n	80010b0 <HAL_PCD_Init+0x90>
    {
      hpcd->MspInitCallback = HAL_PCD_MspInit;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a83      	ldr	r2, [pc, #524]	; (80012b8 <HAL_PCD_Init+0x298>)
 80010ac:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
    }

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2203      	movs	r2, #3
 80010be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 fd66 	bl	8003b98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	687e      	ldr	r6, [r7, #4]
 80010d4:	466d      	mov	r5, sp
 80010d6:	f106 0410 	add.w	r4, r6, #16
 80010da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010de:	6823      	ldr	r3, [r4, #0]
 80010e0:	602b      	str	r3, [r5, #0]
 80010e2:	1d33      	adds	r3, r6, #4
 80010e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f002 fd30 	bl	8003b4c <USB_CoreInit>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <HAL_PCD_Init+0xde>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2202      	movs	r2, #2
 80010f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e0c2      	b.n	8001284 <HAL_PCD_Init+0x264>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fd61 	bl	8003bcc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e040      	b.n	8001192 <HAL_PCD_Init+0x172>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	3301      	adds	r3, #1
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	440b      	add	r3, r1
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	440b      	add	r3, r1
 800114a:	3303      	adds	r3, #3
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	440b      	add	r3, r1
 800115e:	3338      	adds	r3, #56	; 0x38
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001164:	7bfa      	ldrb	r2, [r7, #15]
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	440b      	add	r3, r1
 8001172:	333c      	adds	r3, #60	; 0x3c
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	440b      	add	r3, r1
 8001186:	3340      	adds	r3, #64	; 0x40
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	3301      	adds	r3, #1
 8001190:	73fb      	strb	r3, [r7, #15]
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	d3b9      	bcc.n	8001110 <HAL_PCD_Init+0xf0>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e044      	b.n	800122c <HAL_PCD_Init+0x20c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	440b      	add	r3, r1
 80011b0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	440b      	add	r3, r1
 80011c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	440b      	add	r3, r1
 80011dc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	440b      	add	r3, r1
 80011f2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	440b      	add	r3, r1
 8001208:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001210:	7bfa      	ldrb	r2, [r7, #15]
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	3301      	adds	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	d3b5      	bcc.n	80011a2 <HAL_PCD_Init+0x182>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	687e      	ldr	r6, [r7, #4]
 800123e:	466d      	mov	r5, sp
 8001240:	f106 0410 	add.w	r4, r6, #16
 8001244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	602b      	str	r3, [r5, #0]
 800124c:	1d33      	adds	r3, r6, #4
 800124e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001250:	6838      	ldr	r0, [r7, #0]
 8001252:	f002 fcc7 	bl	8003be4 <USB_DevInit>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_PCD_Init+0x248>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2202      	movs	r2, #2
 8001260:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e00d      	b.n	8001284 <HAL_PCD_Init+0x264>
  }

  hpcd->USB_Address = 0U;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f004 ff48 	bl	8006112 <USB_DevDisconnect>

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128c:	08001903 	.word	0x08001903
 8001290:	080018f1 	.word	0x080018f1
 8001294:	08001915 	.word	0x08001915
 8001298:	08001927 	.word	0x08001927
 800129c:	08001939 	.word	0x08001939
 80012a0:	08001977 	.word	0x08001977
 80012a4:	08001989 	.word	0x08001989
 80012a8:	080018c5 	.word	0x080018c5
 80012ac:	080018db 	.word	0x080018db
 80012b0:	0800194b 	.word	0x0800194b
 80012b4:	08001961 	.word	0x08001961
 80012b8:	08007dc5 	.word	0x08007dc5

080012bc <HAL_PCD_RegisterCallback>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_RegisterCallback(PCD_HandleTypeDef *hpcd,
                                           HAL_PCD_CallbackIDTypeDef CallbackID,
                                           pPCD_CallbackTypeDef pCallback)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	460b      	mov	r3, r1
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d109      	bne.n	80012e8 <HAL_PCD_RegisterCallback+0x2c>
  {
    /* Update the error code */
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 80012da:	f043 0210 	orr.w	r2, r3, #16
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e091      	b.n	800140c <HAL_PCD_RegisterCallback+0x150>
  }
  /* Process locked */
  __HAL_LOCK(hpcd);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_PCD_RegisterCallback+0x3a>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e08a      	b.n	800140c <HAL_PCD_RegisterCallback+0x150>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if (hpcd->State == HAL_PCD_STATE_READY)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d150      	bne.n	80013ac <HAL_PCD_RegisterCallback+0xf0>
  {
    switch (CallbackID)
 800130a:	7afb      	ldrb	r3, [r7, #11]
 800130c:	3b01      	subs	r3, #1
 800130e:	2b08      	cmp	r3, #8
 8001310:	d841      	bhi.n	8001396 <HAL_PCD_RegisterCallback+0xda>
 8001312:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <HAL_PCD_RegisterCallback+0x5c>)
 8001314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001318:	0800133d 	.word	0x0800133d
 800131c:	08001347 	.word	0x08001347
 8001320:	08001351 	.word	0x08001351
 8001324:	0800135b 	.word	0x0800135b
 8001328:	08001365 	.word	0x08001365
 800132c:	0800136f 	.word	0x0800136f
 8001330:	08001379 	.word	0x08001379
 8001334:	08001383 	.word	0x08001383
 8001338:	0800138d 	.word	0x0800138d
    {
      case HAL_PCD_SOF_CB_ID :
        hpcd->SOFCallback = pCallback;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
        break;
 8001344:	e05d      	b.n	8001402 <HAL_PCD_RegisterCallback+0x146>

      case HAL_PCD_SETUPSTAGE_CB_ID :
        hpcd->SetupStageCallback = pCallback;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
        break;
 800134e:	e058      	b.n	8001402 <HAL_PCD_RegisterCallback+0x146>

      case HAL_PCD_RESET_CB_ID :
        hpcd->ResetCallback = pCallback;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
        break;
 8001358:	e053      	b.n	8001402 <HAL_PCD_RegisterCallback+0x146>

      case HAL_PCD_SUSPEND_CB_ID :
        hpcd->SuspendCallback = pCallback;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
        break;
 8001362:	e04e      	b.n	8001402 <HAL_PCD_RegisterCallback+0x146>

      case HAL_PCD_RESUME_CB_ID :
        hpcd->ResumeCallback = pCallback;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
        break;
 800136c:	e049      	b.n	8001402 <HAL_PCD_RegisterCallback+0x146>

      case HAL_PCD_CONNECT_CB_ID :
        hpcd->ConnectCallback = pCallback;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        break;
 8001376:	e044      	b.n	8001402 <HAL_PCD_RegisterCallback+0x146>

      case HAL_PCD_DISCONNECT_CB_ID :
        hpcd->DisconnectCallback = pCallback;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        break;
 8001380:	e03f      	b.n	8001402 <HAL_PCD_RegisterCallback+0x146>

      case HAL_PCD_MSPINIT_CB_ID :
        hpcd->MspInitCallback = pCallback;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
        break;
 800138a:	e03a      	b.n	8001402 <HAL_PCD_RegisterCallback+0x146>

      case HAL_PCD_MSPDEINIT_CB_ID :
        hpcd->MspDeInitCallback = pCallback;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
        break;
 8001394:	e035      	b.n	8001402 <HAL_PCD_RegisterCallback+0x146>

      default :
        /* Update the error code */
        hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 800139c:	f043 0210 	orr.w	r2, r3, #16
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
        /* Return error status */
        status =  HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	75fb      	strb	r3, [r7, #23]
        break;
 80013aa:	e02a      	b.n	8001402 <HAL_PCD_RegisterCallback+0x146>
    }
  }
  else if (hpcd->State == HAL_PCD_STATE_RESET)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d11a      	bne.n	80013ee <HAL_PCD_RegisterCallback+0x132>
  {
    switch (CallbackID)
 80013b8:	7afb      	ldrb	r3, [r7, #11]
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d002      	beq.n	80013c4 <HAL_PCD_RegisterCallback+0x108>
 80013be:	2b09      	cmp	r3, #9
 80013c0:	d005      	beq.n	80013ce <HAL_PCD_RegisterCallback+0x112>
 80013c2:	e009      	b.n	80013d8 <HAL_PCD_RegisterCallback+0x11c>
    {
      case HAL_PCD_MSPINIT_CB_ID :
        hpcd->MspInitCallback = pCallback;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
        break;
 80013cc:	e019      	b.n	8001402 <HAL_PCD_RegisterCallback+0x146>

      case HAL_PCD_MSPDEINIT_CB_ID :
        hpcd->MspDeInitCallback = pCallback;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
        break;
 80013d6:	e014      	b.n	8001402 <HAL_PCD_RegisterCallback+0x146>

      default :
        /* Update the error code */
        hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 80013de:	f043 0210 	orr.w	r2, r3, #16
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
        /* Return error status */
        status =  HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	75fb      	strb	r3, [r7, #23]
        break;
 80013ec:	e009      	b.n	8001402 <HAL_PCD_RegisterCallback+0x146>
    }
  }
  else
  {
    /* Update the error code */
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 80013f4:	f043 0210 	orr.w	r2, r3, #16
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    /* Return error status */
    status =  HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hpcd);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return status;
 800140a:	7dfb      	ldrb	r3, [r7, #23]
}
 800140c:	4618      	mov	r0, r3
 800140e:	371c      	adds	r7, #28
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <HAL_PCD_RegisterDataOutStageCallback>:
  * @param  pCallback pointer to the USB PCD Data OUT Stage Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_RegisterDataOutStageCallback(PCD_HandleTypeDef *hpcd,
                                                       pPCD_DataOutStageCallbackTypeDef pCallback)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d109      	bne.n	8001440 <HAL_PCD_RegisterDataOutStageCallback+0x28>
  {
    /* Update the error code */
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 8001432:	f043 0210 	orr.w	r2, r3, #16
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e024      	b.n	800148a <HAL_PCD_RegisterDataOutStageCallback+0x72>
  }

  /* Process locked */
  __HAL_LOCK(hpcd);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_PCD_RegisterDataOutStageCallback+0x36>
 800144a:	2302      	movs	r3, #2
 800144c:	e01d      	b.n	800148a <HAL_PCD_RegisterDataOutStageCallback+0x72>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if (hpcd->State == HAL_PCD_STATE_READY)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b01      	cmp	r3, #1
 8001460:	d104      	bne.n	800146c <HAL_PCD_RegisterDataOutStageCallback+0x54>
  {
    hpcd->DataOutStageCallback = pCallback;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
 800146a:	e009      	b.n	8001480 <HAL_PCD_RegisterDataOutStageCallback+0x68>
  }
  else
  {
    /* Update the error code */
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 8001472:	f043 0210 	orr.w	r2, r3, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

    /* Return error status */
    status =  HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hpcd);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return status;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <HAL_PCD_RegisterDataInStageCallback>:
  * @param  pCallback pointer to the USB PCD Data IN Stage Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_RegisterDataInStageCallback(PCD_HandleTypeDef *hpcd,
                                                      pPCD_DataInStageCallbackTypeDef pCallback)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d109      	bne.n	80014bc <HAL_PCD_RegisterDataInStageCallback+0x28>
  {
    /* Update the error code */
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 80014ae:	f043 0210 	orr.w	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e024      	b.n	8001506 <HAL_PCD_RegisterDataInStageCallback+0x72>
  }

  /* Process locked */
  __HAL_LOCK(hpcd);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_PCD_RegisterDataInStageCallback+0x36>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e01d      	b.n	8001506 <HAL_PCD_RegisterDataInStageCallback+0x72>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if (hpcd->State == HAL_PCD_STATE_READY)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d104      	bne.n	80014e8 <HAL_PCD_RegisterDataInStageCallback+0x54>
  {
    hpcd->DataInStageCallback = pCallback;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
 80014e6:	e009      	b.n	80014fc <HAL_PCD_RegisterDataInStageCallback+0x68>
  }
  else
  {
    /* Update the error code */
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 80014ee:	f043 0210 	orr.w	r2, r3, #16
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

    /* Return error status */
    status =  HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hpcd);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return status;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <HAL_PCD_RegisterIsoOutIncpltCallback>:
  * @param  pCallback pointer to the USB PCD Iso OUT incomplete Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_RegisterIsoOutIncpltCallback(PCD_HandleTypeDef *hpcd,
                                                       pPCD_IsoOutIncpltCallbackTypeDef pCallback)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d109      	bne.n	8001538 <HAL_PCD_RegisterIsoOutIncpltCallback+0x28>
  {
    /* Update the error code */
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 800152a:	f043 0210 	orr.w	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e024      	b.n	8001582 <HAL_PCD_RegisterIsoOutIncpltCallback+0x72>
  }

  /* Process locked */
  __HAL_LOCK(hpcd);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800153e:	2b01      	cmp	r3, #1
 8001540:	d101      	bne.n	8001546 <HAL_PCD_RegisterIsoOutIncpltCallback+0x36>
 8001542:	2302      	movs	r3, #2
 8001544:	e01d      	b.n	8001582 <HAL_PCD_RegisterIsoOutIncpltCallback+0x72>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if (hpcd->State == HAL_PCD_STATE_READY)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d104      	bne.n	8001564 <HAL_PCD_RegisterIsoOutIncpltCallback+0x54>
  {
    hpcd->ISOOUTIncompleteCallback = pCallback;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
 8001562:	e009      	b.n	8001578 <HAL_PCD_RegisterIsoOutIncpltCallback+0x68>
  }
  else
  {
    /* Update the error code */
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 800156a:	f043 0210 	orr.w	r2, r3, #16
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

    /* Return error status */
    status =  HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hpcd);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return status;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <HAL_PCD_RegisterIsoInIncpltCallback>:
  * @param  pCallback pointer to the USB PCD Iso IN incomplete Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_RegisterIsoInIncpltCallback(PCD_HandleTypeDef *hpcd,
                                                      pPCD_IsoInIncpltCallbackTypeDef pCallback)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d109      	bne.n	80015b4 <HAL_PCD_RegisterIsoInIncpltCallback+0x28>
  {
    /* Update the error code */
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 80015a6:	f043 0210 	orr.w	r2, r3, #16
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e024      	b.n	80015fe <HAL_PCD_RegisterIsoInIncpltCallback+0x72>
  }

  /* Process locked */
  __HAL_LOCK(hpcd);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_PCD_RegisterIsoInIncpltCallback+0x36>
 80015be:	2302      	movs	r3, #2
 80015c0:	e01d      	b.n	80015fe <HAL_PCD_RegisterIsoInIncpltCallback+0x72>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if (hpcd->State == HAL_PCD_STATE_READY)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d104      	bne.n	80015e0 <HAL_PCD_RegisterIsoInIncpltCallback+0x54>
  {
    hpcd->ISOINIncompleteCallback = pCallback;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 80015de:	e009      	b.n	80015f4 <HAL_PCD_RegisterIsoInIncpltCallback+0x68>
  }
  else
  {
    /* Update the error code */
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 80015e6:	f043 0210 	orr.w	r2, r3, #16
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac

    /* Return error status */
    status =  HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hpcd);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return status;
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_PCD_Start+0x16>
 800161a:	2302      	movs	r3, #2
 800161c:	e016      	b.n	800164c <HAL_PCD_Start+0x44>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f002 fa9e 	bl	8003b6c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001630:	2101      	movs	r1, #1
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f001 fcda 	bl	8002fec <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f004 fd5e 	bl	80060fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f004 fd60 	bl	8006126 <USB_ReadInterrupts>
 8001666:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fb8e 	bl	8001d94 <PCD_EP_ISR_Handler>

    return;
 8001678:	e121      	b.n	80018be <HAL_PCD_IRQHandler+0x26a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001680:	2b00      	cmp	r3, #0
 8001682:	d015      	beq.n	80016b0 <HAL_PCD_IRQHandler+0x5c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800168c:	b29a      	uxth	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001696:	b292      	uxth	r2, r2
 8001698:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	4798      	blx	r3
#else
    HAL_PCD_ResetCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80016a6:	2100      	movs	r1, #0
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f976 	bl	800199a <HAL_PCD_SetAddress>

    return;
 80016ae:	e106      	b.n	80018be <HAL_PCD_IRQHandler+0x26a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00c      	beq.n	80016d4 <HAL_PCD_IRQHandler+0x80>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016cc:	b292      	uxth	r2, r2
 80016ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80016d2:	e0f4      	b.n	80018be <HAL_PCD_IRQHandler+0x26a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00c      	beq.n	80016f8 <HAL_PCD_IRQHandler+0xa4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016f0:	b292      	uxth	r2, r2
 80016f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80016f6:	e0e2      	b.n	80018be <HAL_PCD_IRQHandler+0x26a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d029      	beq.n	8001756 <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800170a:	b29a      	uxth	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0204 	bic.w	r2, r2, #4
 8001714:	b292      	uxth	r2, r2
 8001716:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001722:	b29a      	uxth	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0208 	bic.w	r2, r2, #8
 800172c:	b292      	uxth	r2, r2
 800172e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	4798      	blx	r3
#else
    HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001744:	b29a      	uxth	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800174e:	b292      	uxth	r2, r2
 8001750:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001754:	e0b3      	b.n	80018be <HAL_PCD_IRQHandler+0x26a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 8085 	beq.w	800186c <HAL_PCD_IRQHandler+0x218>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001762:	2300      	movs	r3, #0
 8001764:	77fb      	strb	r3, [r7, #31]
 8001766:	e010      	b.n	800178a <HAL_PCD_IRQHandler+0x136>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	7ffb      	ldrb	r3, [r7, #31]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	441a      	add	r2, r3
 8001774:	7ffb      	ldrb	r3, [r7, #31]
 8001776:	8812      	ldrh	r2, [r2, #0]
 8001778:	b292      	uxth	r2, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	3320      	adds	r3, #32
 800177e:	443b      	add	r3, r7
 8001780:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001784:	7ffb      	ldrb	r3, [r7, #31]
 8001786:	3301      	adds	r3, #1
 8001788:	77fb      	strb	r3, [r7, #31]
 800178a:	7ffb      	ldrb	r3, [r7, #31]
 800178c:	2b07      	cmp	r3, #7
 800178e:	d9eb      	bls.n	8001768 <HAL_PCD_IRQHandler+0x114>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001798:	b29a      	uxth	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	b292      	uxth	r2, r2
 80017a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0201 	bic.w	r2, r2, #1
 80017ba:	b292      	uxth	r2, r2
 80017bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80017c0:	bf00      	nop
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f6      	beq.n	80017c2 <HAL_PCD_IRQHandler+0x16e>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017dc:	b29a      	uxth	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e6:	b292      	uxth	r2, r2
 80017e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	77fb      	strb	r3, [r7, #31]
 80017f0:	e00f      	b.n	8001812 <HAL_PCD_IRQHandler+0x1be>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80017f2:	7ffb      	ldrb	r3, [r7, #31]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	4611      	mov	r1, r2
 80017fa:	7ffa      	ldrb	r2, [r7, #31]
 80017fc:	0092      	lsls	r2, r2, #2
 80017fe:	440a      	add	r2, r1
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	3320      	adds	r3, #32
 8001804:	443b      	add	r3, r7
 8001806:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800180a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800180c:	7ffb      	ldrb	r3, [r7, #31]
 800180e:	3301      	adds	r3, #1
 8001810:	77fb      	strb	r3, [r7, #31]
 8001812:	7ffb      	ldrb	r3, [r7, #31]
 8001814:	2b07      	cmp	r3, #7
 8001816:	d9ec      	bls.n	80017f2 <HAL_PCD_IRQHandler+0x19e>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0208 	orr.w	r2, r2, #8
 800182a:	b292      	uxth	r2, r2
 800182c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001838:	b29a      	uxth	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001842:	b292      	uxth	r2, r2
 8001844:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001850:	b29a      	uxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0204 	orr.w	r2, r2, #4
 800185a:	b292      	uxth	r2, r2
 800185c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4798      	blx	r3
#else
    HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800186a:	e028      	b.n	80018be <HAL_PCD_IRQHandler+0x26a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001872:	2b00      	cmp	r3, #0
 8001874:	d011      	beq.n	800189a <HAL_PCD_IRQHandler+0x246>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800187e:	b29a      	uxth	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001888:	b292      	uxth	r2, r2
 800188a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	4798      	blx	r3
#else
    HAL_PCD_SOFCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001898:	e011      	b.n	80018be <HAL_PCD_IRQHandler+0x26a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00c      	beq.n	80018be <HAL_PCD_IRQHandler+0x26a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018b6:	b292      	uxth	r2, r2
 80018b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80018bc:	bf00      	nop
  }
}
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_PCD_SetAddress+0x1a>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e013      	b.n	80019dc <HAL_PCD_SetAddress+0x42>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	78fa      	ldrb	r2, [r7, #3]
 80019c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f004 fb83 	bl	80060d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	4608      	mov	r0, r1
 80019ee:	4611      	mov	r1, r2
 80019f0:	461a      	mov	r2, r3
 80019f2:	4603      	mov	r3, r0
 80019f4:	70fb      	strb	r3, [r7, #3]
 80019f6:	460b      	mov	r3, r1
 80019f8:	803b      	strh	r3, [r7, #0]
 80019fa:	4613      	mov	r3, r2
 80019fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	da0e      	bge.n	8001a28 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	705a      	strb	r2, [r3, #1]
 8001a26:	e00e      	b.n	8001a46 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	f003 0207 	and.w	r2, r3, #7
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a52:	883a      	ldrh	r2, [r7, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	78ba      	ldrb	r2, [r7, #2]
 8001a5c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a5e:	78bb      	ldrb	r3, [r7, #2]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d102      	bne.n	8001a6a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_PCD_EP_Open+0x94>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e00e      	b.n	8001a96 <HAL_PCD_EP_Open+0xb2>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68f9      	ldr	r1, [r7, #12]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 f8cc 	bl	8003c24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001a94:	7afb      	ldrb	r3, [r7, #11]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da0e      	bge.n	8001ad0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	705a      	strb	r2, [r3, #1]
 8001ace:	e00e      	b.n	8001aee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	f003 0207 	and.w	r2, r3, #7
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_PCD_EP_Close+0x6a>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e00e      	b.n	8001b26 <HAL_PCD_EP_Close+0x88>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 fc44 	bl	80043a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
 8001b40:	f003 0207 	and.w	r2, r3, #7
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2200      	movs	r2, #0
 8001b66:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6979      	ldr	r1, [r7, #20]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fdfb 	bl	800477c <USB_EPStartXfer>

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	f003 0207 	and.w	r2, r3, #7
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4413      	add	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2200      	movs	r2, #0
 8001c02:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2201      	movs	r2, #1
 8001c08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6979      	ldr	r1, [r7, #20]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fdad 	bl	800477c <USB_EPStartXfer>

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 0207 	and.w	r2, r3, #7
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d901      	bls.n	8001c4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e04c      	b.n	8001ce4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	da0e      	bge.n	8001c70 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	705a      	strb	r2, [r3, #1]
 8001c6e:	e00c      	b.n	8001c8a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_PCD_EP_SetStall+0x7e>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e01c      	b.n	8001ce4 <HAL_PCD_EP_SetStall+0xb8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68f9      	ldr	r1, [r7, #12]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 f910 	bl	8005ede <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d108      	bne.n	8001cda <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	f004 fa35 	bl	8006144 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	f003 020f 	and.w	r2, r3, #15
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d901      	bls.n	8001d0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e040      	b.n	8001d8c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	da0e      	bge.n	8001d30 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	705a      	strb	r2, [r3, #1]
 8001d2e:	e00e      	b.n	8001d4e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f003 0207 	and.w	r2, r3, #7
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_PCD_EP_ClrStall+0x82>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e00e      	b.n	8001d8c <HAL_PCD_EP_ClrStall+0xa0>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68f9      	ldr	r1, [r7, #12]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f004 f8fe 	bl	8005f7e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b096      	sub	sp, #88	; 0x58
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d9c:	e3cb      	b.n	8002536 <PCD_EP_ISR_Handler+0x7a2>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001da6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001daa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001db8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f040 817f 	bne.w	80020c0 <PCD_EP_ISR_Handler+0x32c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001dc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d154      	bne.n	8001e78 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dde:	81fb      	strh	r3, [r7, #14]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	89fb      	ldrh	r3, [r7, #14]
 8001de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3328      	adds	r3, #40	; 0x28
 8001df6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e22:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	441a      	add	r2, r3
 8001e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e30:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8001e38:	2100      	movs	r1, #0
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	4798      	blx	r3
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8375 	beq.w	8002536 <PCD_EP_ISR_Handler+0x7a2>
 8001e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f040 8370 	bne.w	8002536 <PCD_EP_ISR_Handler+0x7a2>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	b292      	uxth	r2, r2
 8001e6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e76:	e35e      	b.n	8002536 <PCD_EP_ISR_Handler+0x7a2>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e7e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d036      	beq.n	8001f04 <PCD_EP_ISR_Handler+0x170>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3306      	adds	r3, #6
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ece:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	f004 f985 	bl	80061e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	823b      	strh	r3, [r7, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	8a3a      	ldrh	r2, [r7, #16]
 8001ef0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ef4:	b292      	uxth	r2, r2
 8001ef6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
 8001f02:	e318      	b.n	8002536 <PCD_EP_ISR_Handler+0x7a2>
#else
          HAL_PCD_SetupStageCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f04:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f280 8314 	bge.w	8002536 <PCD_EP_ISR_Handler+0x7a2>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	83fb      	strh	r3, [r7, #30]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	8bfa      	ldrh	r2, [r7, #30]
 8001f24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f28:	b292      	uxth	r2, r2
 8001f2a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	3306      	adds	r3, #6
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f56:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01b      	beq.n	8001f98 <PCD_EP_ISR_Handler+0x204>
 8001f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d017      	beq.n	8001f98 <PCD_EP_ISR_Handler+0x204>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6e:	6959      	ldr	r1, [r3, #20]
 8001f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f72:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f76:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	f004 f933 	bl	80061e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	441a      	add	r2, r3
 8001f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 8001f92:	2100      	movs	r1, #0
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	4798      	blx	r3
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001fa2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 82c3 	bne.w	8002536 <PCD_EP_ISR_Handler+0x7a2>
 8001fb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001fb4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001fb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001fbc:	f000 82bb 	beq.w	8002536 <PCD_EP_ISR_Handler+0x7a2>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	801a      	strh	r2, [r3, #0]
 8001ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b3e      	cmp	r3, #62	; 0x3e
 8001ff6:	d91d      	bls.n	8002034 <PCD_EP_ISR_Handler+0x2a0>
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8002000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	2b00      	cmp	r3, #0
 800200a:	d102      	bne.n	8002012 <PCD_EP_ISR_Handler+0x27e>
 800200c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800200e:	3b01      	subs	r3, #1
 8002010:	647b      	str	r3, [r7, #68]	; 0x44
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	b29a      	uxth	r2, r3
 8002018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800201a:	b29b      	uxth	r3, r3
 800201c:	029b      	lsls	r3, r3, #10
 800201e:	b29b      	uxth	r3, r3
 8002020:	4313      	orrs	r3, r2
 8002022:	b29b      	uxth	r3, r3
 8002024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800202c:	b29a      	uxth	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	801a      	strh	r2, [r3, #0]
 8002032:	e026      	b.n	8002082 <PCD_EP_ISR_Handler+0x2ee>
 8002034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10a      	bne.n	8002052 <PCD_EP_ISR_Handler+0x2be>
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800204a:	b29a      	uxth	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	801a      	strh	r2, [r3, #0]
 8002050:	e017      	b.n	8002082 <PCD_EP_ISR_Handler+0x2ee>
 8002052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	647b      	str	r3, [r7, #68]	; 0x44
 800205a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <PCD_EP_ISR_Handler+0x2d8>
 8002066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002068:	3301      	adds	r3, #1
 800206a:	647b      	str	r3, [r7, #68]	; 0x44
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	b29a      	uxth	r2, r3
 8002072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002074:	b29b      	uxth	r3, r3
 8002076:	029b      	lsls	r3, r3, #10
 8002078:	b29b      	uxth	r3, r3
 800207a:	4313      	orrs	r3, r2
 800207c:	b29a      	uxth	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800208e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002092:	827b      	strh	r3, [r7, #18]
 8002094:	8a7b      	ldrh	r3, [r7, #18]
 8002096:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800209a:	827b      	strh	r3, [r7, #18]
 800209c:	8a7b      	ldrh	r3, [r7, #18]
 800209e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020a2:	827b      	strh	r3, [r7, #18]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	8a7b      	ldrh	r3, [r7, #18]
 80020aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	8013      	strh	r3, [r2, #0]
 80020be:	e23a      	b.n	8002536 <PCD_EP_ISR_Handler+0x7a2>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020d4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f280 80fe 	bge.w	80022da <PCD_EP_ISR_Handler+0x546>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020f4:	4013      	ands	r3, r2
 80020f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800210c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002110:	b292      	uxth	r2, r2
 8002112:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002114:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800212a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212c:	7b1b      	ldrb	r3, [r3, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d125      	bne.n	800217e <PCD_EP_ISR_Handler+0x3ea>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800213a:	b29b      	uxth	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	3306      	adds	r3, #6
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	4413      	add	r3, r2
 8002150:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800215a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800215e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8092 	beq.w	800228c <PCD_EP_ISR_Handler+0x4f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800216e:	6959      	ldr	r1, [r3, #20]
 8002170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002172:	88da      	ldrh	r2, [r3, #6]
 8002174:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002178:	f004 f834 	bl	80061e4 <USB_ReadPMA>
 800217c:	e086      	b.n	800228c <PCD_EP_ISR_Handler+0x4f8>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800217e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002180:	78db      	ldrb	r3, [r3, #3]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d10a      	bne.n	800219c <PCD_EP_ISR_Handler+0x408>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002186:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800218a:	461a      	mov	r2, r3
 800218c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f9df 	bl	8002552 <HAL_PCD_EP_DB_Receive>
 8002194:	4603      	mov	r3, r0
 8002196:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800219a:	e077      	b.n	800228c <PCD_EP_ISR_Handler+0x4f8>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	441a      	add	r2, r3
 80021c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80021cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021dc:	b29b      	uxth	r3, r3
 80021de:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d024      	beq.n	8002244 <PCD_EP_ISR_Handler+0x4b0>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	3302      	adds	r3, #2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6812      	ldr	r2, [r2, #0]
 8002216:	4413      	add	r3, r2
 8002218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002222:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002226:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800222a:	2b00      	cmp	r3, #0
 800222c:	d02e      	beq.n	800228c <PCD_EP_ISR_Handler+0x4f8>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002234:	6959      	ldr	r1, [r3, #20]
 8002236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002238:	891a      	ldrh	r2, [r3, #8]
 800223a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800223e:	f003 ffd1 	bl	80061e4 <USB_ReadPMA>
 8002242:	e023      	b.n	800228c <PCD_EP_ISR_Handler+0x4f8>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800224c:	b29b      	uxth	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4413      	add	r3, r2
 8002258:	3306      	adds	r3, #6
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800226c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002270:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <PCD_EP_ISR_Handler+0x4f8>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800227e:	6959      	ldr	r1, [r3, #20]
 8002280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002282:	895a      	ldrh	r2, [r3, #10]
 8002284:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002288:	f003 ffac 	bl	80061e4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800228c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002294:	441a      	add	r2, r3
 8002296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002298:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800229a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80022a2:	441a      	add	r2, r3
 80022a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80022a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <PCD_EP_ISR_Handler+0x528>
 80022b0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80022b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d208      	bcs.n	80022ce <PCD_EP_ISR_Handler+0x53a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 80022c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022c4:	7812      	ldrb	r2, [r2, #0]
 80022c6:	4611      	mov	r1, r2
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	4798      	blx	r3
 80022cc:	e005      	b.n	80022da <PCD_EP_ISR_Handler+0x546>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 fa51 	bl	800477c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80022da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80022de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8127 	beq.w	8002536 <PCD_EP_ISR_Handler+0x7a2>
      {
        ep = &hpcd->IN_ep[epindex];
 80022e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002316:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	441a      	add	r2, r3
 8002328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800232c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002334:	b29b      	uxth	r3, r3
 8002336:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233a:	78db      	ldrb	r3, [r3, #3]
 800233c:	2b01      	cmp	r3, #1
 800233e:	f040 80a4 	bne.w	800248a <PCD_EP_ISR_Handler+0x6f6>
        {
          ep->xfer_len = 0U;
 8002342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800234a:	7b1b      	ldrb	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 8093 	beq.w	8002478 <PCD_EP_ISR_Handler+0x6e4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002352:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d046      	beq.n	80023ec <PCD_EP_ISR_Handler+0x658>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800235e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002360:	785b      	ldrb	r3, [r3, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d126      	bne.n	80023b4 <PCD_EP_ISR_Handler+0x620>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002374:	b29b      	uxth	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	4413      	add	r3, r2
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
 800237e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	011a      	lsls	r2, r3, #4
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	4413      	add	r3, r2
 8002388:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800238c:	623b      	str	r3, [r7, #32]
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002398:	b29a      	uxth	r2, r3
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	801a      	strh	r2, [r3, #0]
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	801a      	strh	r2, [r3, #0]
 80023b2:	e061      	b.n	8002478 <PCD_EP_ISR_Handler+0x6e4>
 80023b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b6:	785b      	ldrb	r3, [r3, #1]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d15d      	bne.n	8002478 <PCD_EP_ISR_Handler+0x6e4>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d0:	4413      	add	r3, r2
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	011a      	lsls	r2, r3, #4
 80023da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023dc:	4413      	add	r3, r2
 80023de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	2200      	movs	r2, #0
 80023e8:	801a      	strh	r2, [r3, #0]
 80023ea:	e045      	b.n	8002478 <PCD_EP_ISR_Handler+0x6e4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f4:	785b      	ldrb	r3, [r3, #1]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d126      	bne.n	8002448 <PCD_EP_ISR_Handler+0x6b4>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002408:	b29b      	uxth	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240e:	4413      	add	r3, r2
 8002410:	637b      	str	r3, [r7, #52]	; 0x34
 8002412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	011a      	lsls	r2, r3, #4
 8002418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241a:	4413      	add	r3, r2
 800241c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002420:	633b      	str	r3, [r7, #48]	; 0x30
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800242c:	b29a      	uxth	r2, r3
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	801a      	strh	r2, [r3, #0]
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800243c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002440:	b29a      	uxth	r2, r3
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	801a      	strh	r2, [r3, #0]
 8002446:	e017      	b.n	8002478 <PCD_EP_ISR_Handler+0x6e4>
 8002448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800244a:	785b      	ldrb	r3, [r3, #1]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d113      	bne.n	8002478 <PCD_EP_ISR_Handler+0x6e4>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002458:	b29b      	uxth	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800245e:	4413      	add	r3, r2
 8002460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	011a      	lsls	r2, r3, #4
 8002468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246a:	4413      	add	r3, r2
 800246c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002470:	63bb      	str	r3, [r7, #56]	; 0x38
 8002472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002474:	2200      	movs	r2, #0
 8002476:	801a      	strh	r2, [r3, #0]
          }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800247e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	4611      	mov	r1, r2
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4798      	blx	r3
 8002488:	e055      	b.n	8002536 <PCD_EP_ISR_Handler+0x7a2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800248a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d148      	bne.n	8002528 <PCD_EP_ISR_Handler+0x794>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	3302      	adds	r3, #2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80024c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c4:	699a      	ldr	r2, [r3, #24]
 80024c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d907      	bls.n	80024de <PCD_EP_ISR_Handler+0x74a>
            {
              ep->xfer_len -= TxPctSize;
 80024ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024d6:	1ad2      	subs	r2, r2, r3
 80024d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024da:	619a      	str	r2, [r3, #24]
 80024dc:	e002      	b.n	80024e4 <PCD_EP_ISR_Handler+0x750>
            }
            else
            {
              ep->xfer_len = 0U;
 80024de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80024e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d108      	bne.n	80024fe <PCD_EP_ISR_Handler+0x76a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80024f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024f4:	7812      	ldrb	r2, [r2, #0]
 80024f6:	4611      	mov	r1, r2
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
 80024fc:	e01b      	b.n	8002536 <PCD_EP_ISR_Handler+0x7a2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80024fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002506:	441a      	add	r2, r3
 8002508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800250c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250e:	69da      	ldr	r2, [r3, #28]
 8002510:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002514:	441a      	add	r2, r3
 8002516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002518:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002520:	4618      	mov	r0, r3
 8002522:	f002 f92b 	bl	800477c <USB_EPStartXfer>
 8002526:	e006      	b.n	8002536 <PCD_EP_ISR_Handler+0x7a2>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002528:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800252c:	461a      	mov	r2, r3
 800252e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f91b 	bl	800276c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800253e:	b29b      	uxth	r3, r3
 8002540:	b21b      	sxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	f6ff ac2b 	blt.w	8001d9e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3758      	adds	r7, #88	; 0x58
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b088      	sub	sp, #32
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	4613      	mov	r3, r2
 800255e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002560:	88fb      	ldrh	r3, [r7, #6]
 8002562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d07e      	beq.n	8002668 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002572:	b29b      	uxth	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	3302      	adds	r3, #2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	4413      	add	r3, r2
 8002588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002592:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	699a      	ldr	r2, [r3, #24]
 8002598:	8b7b      	ldrh	r3, [r7, #26]
 800259a:	429a      	cmp	r2, r3
 800259c:	d306      	bcc.n	80025ac <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	8b7b      	ldrh	r3, [r7, #26]
 80025a4:	1ad2      	subs	r2, r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	619a      	str	r2, [r3, #24]
 80025aa:	e002      	b.n	80025b2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2200      	movs	r2, #0
 80025b0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d123      	bne.n	8002602 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d4:	833b      	strh	r3, [r7, #24]
 80025d6:	8b3b      	ldrh	r3, [r7, #24]
 80025d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025dc:	833b      	strh	r3, [r7, #24]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	441a      	add	r2, r3
 80025ec:	8b3b      	ldrh	r3, [r7, #24]
 80025ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025fe:	b29b      	uxth	r3, r3
 8002600:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01f      	beq.n	800264c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002626:	82fb      	strh	r3, [r7, #22]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	441a      	add	r2, r3
 8002636:	8afb      	ldrh	r3, [r7, #22]
 8002638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800263c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002644:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002648:	b29b      	uxth	r3, r3
 800264a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800264c:	8b7b      	ldrh	r3, [r7, #26]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8087 	beq.w	8002762 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	6959      	ldr	r1, [r3, #20]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	891a      	ldrh	r2, [r3, #8]
 8002660:	8b7b      	ldrh	r3, [r7, #26]
 8002662:	f003 fdbf 	bl	80061e4 <USB_ReadPMA>
 8002666:	e07c      	b.n	8002762 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002670:	b29b      	uxth	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	3306      	adds	r3, #6
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	4413      	add	r3, r2
 8002686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002690:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	8b7b      	ldrh	r3, [r7, #26]
 8002698:	429a      	cmp	r2, r3
 800269a:	d306      	bcc.n	80026aa <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	8b7b      	ldrh	r3, [r7, #26]
 80026a2:	1ad2      	subs	r2, r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	619a      	str	r2, [r3, #24]
 80026a8:	e002      	b.n	80026b0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d123      	bne.n	8002700 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d2:	83fb      	strh	r3, [r7, #30]
 80026d4:	8bfb      	ldrh	r3, [r7, #30]
 80026d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026da:	83fb      	strh	r3, [r7, #30]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	441a      	add	r2, r3
 80026ea:	8bfb      	ldrh	r3, [r7, #30]
 80026ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	d11f      	bne.n	800274a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	b29b      	uxth	r3, r3
 800271c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002724:	83bb      	strh	r3, [r7, #28]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	441a      	add	r2, r3
 8002734:	8bbb      	ldrh	r3, [r7, #28]
 8002736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800273a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800273e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002742:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002746:	b29b      	uxth	r3, r3
 8002748:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800274a:	8b7b      	ldrh	r3, [r7, #26]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	6959      	ldr	r1, [r3, #20]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	895a      	ldrh	r2, [r3, #10]
 800275c:	8b7b      	ldrh	r3, [r7, #26]
 800275e:	f003 fd41 	bl	80061e4 <USB_ReadPMA>
    }
  }

  return count;
 8002762:	8b7b      	ldrh	r3, [r7, #26]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3720      	adds	r7, #32
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b0a4      	sub	sp, #144	; 0x90
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	4613      	mov	r3, r2
 8002778:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 81df 	beq.w	8002b44 <HAL_PCD_EP_DB_Transmit+0x3d8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800278e:	b29b      	uxth	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	3302      	adds	r3, #2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d907      	bls.n	80027ce <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027c6:	1ad2      	subs	r2, r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	619a      	str	r2, [r3, #24]
 80027cc:	e002      	b.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f040 80bb 	bne.w	8002954 <HAL_PCD_EP_DB_Transmit+0x1e8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	785b      	ldrb	r3, [r3, #1]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d126      	bne.n	8002834 <HAL_PCD_EP_DB_Transmit+0xc8>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	4413      	add	r3, r2
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	011a      	lsls	r2, r3, #4
 8002804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002806:	4413      	add	r3, r2
 8002808:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800280c:	62bb      	str	r3, [r7, #40]	; 0x28
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002818:	b29a      	uxth	r2, r3
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	b29b      	uxth	r3, r3
 8002824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800282c:	b29a      	uxth	r2, r3
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	801a      	strh	r2, [r3, #0]
 8002832:	e01a      	b.n	800286a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	785b      	ldrb	r3, [r3, #1]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d116      	bne.n	800286a <HAL_PCD_EP_DB_Transmit+0xfe>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	637b      	str	r3, [r7, #52]	; 0x34
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	4413      	add	r3, r2
 8002852:	637b      	str	r3, [r7, #52]	; 0x34
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	011a      	lsls	r2, r3, #4
 800285a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285c:	4413      	add	r3, r2
 800285e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002862:	633b      	str	r3, [r7, #48]	; 0x30
 8002864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002866:	2200      	movs	r2, #0
 8002868:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	785b      	ldrb	r3, [r3, #1]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d126      	bne.n	80028c6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002886:	b29b      	uxth	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	4413      	add	r3, r2
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	011a      	lsls	r2, r3, #4
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	801a      	strh	r2, [r3, #0]
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028be:	b29a      	uxth	r2, r3
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	801a      	strh	r2, [r3, #0]
 80028c4:	e017      	b.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	785b      	ldrb	r3, [r3, #1]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d113      	bne.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	4413      	add	r3, r2
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	011a      	lsls	r2, r3, #4
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	4413      	add	r3, r2
 80028ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028ee:	623b      	str	r3, [r7, #32]
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	2200      	movs	r2, #0
 80028f4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	7812      	ldrb	r2, [r2, #0]
 8002900:	4611      	mov	r1, r2
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	4798      	blx	r3
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 82fe 	beq.w	8002f0e <HAL_PCD_EP_DB_Transmit+0x7a2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	b29b      	uxth	r3, r3
 8002924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292c:	82fb      	strh	r3, [r7, #22]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	441a      	add	r2, r3
 800293c:	8afb      	ldrh	r3, [r7, #22]
 800293e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002946:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800294a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294e:	b29b      	uxth	r3, r3
 8002950:	8013      	strh	r3, [r2, #0]
 8002952:	e2dc      	b.n	8002f0e <HAL_PCD_EP_DB_Transmit+0x7a2>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d021      	beq.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x236>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002978:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	441a      	add	r2, r3
 800298a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800298e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800299a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800299e:	b29b      	uxth	r3, r3
 80029a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	f040 82b0 	bne.w	8002f0e <HAL_PCD_EP_DB_Transmit+0x7a2>
      {
        ep->xfer_buff += TxPctSize;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80029b6:	441a      	add	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80029c4:	441a      	add	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	6a1a      	ldr	r2, [r3, #32]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d30b      	bcc.n	80029ee <HAL_PCD_EP_DB_Transmit+0x282>
        {
          len = ep->maxpacket;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	6a1a      	ldr	r2, [r3, #32]
 80029e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029e6:	1ad2      	subs	r2, r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	621a      	str	r2, [r3, #32]
 80029ec:	e017      	b.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else if (ep->xfer_len_db == 0U)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_PCD_EP_DB_Transmit+0x29c>
        {
          len = TxPctSize;
 80029f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80029fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a06:	e00a      	b.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	785b      	ldrb	r3, [r3, #1]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d165      	bne.n	8002af2 <HAL_PCD_EP_DB_Transmit+0x386>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3a:	4413      	add	r3, r2
 8002a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	011a      	lsls	r2, r3, #4
 8002a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a46:	4413      	add	r3, r2
 8002a48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a62:	2b3e      	cmp	r3, #62	; 0x3e
 8002a64:	d91d      	bls.n	8002aa2 <HAL_PCD_EP_DB_Transmit+0x336>
 8002a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a72:	f003 031f 	and.w	r3, r3, #31
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <HAL_PCD_EP_DB_Transmit+0x314>
 8002a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	029b      	lsls	r3, r3, #10
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9e:	801a      	strh	r2, [r3, #0]
 8002aa0:	e044      	b.n	8002b2c <HAL_PCD_EP_DB_Transmit+0x3c0>
 8002aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10a      	bne.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x354>
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abc:	801a      	strh	r2, [r3, #0]
 8002abe:	e035      	b.n	8002b2c <HAL_PCD_EP_DB_Transmit+0x3c0>
 8002ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ac4:	085b      	lsrs	r3, r3, #1
 8002ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_PCD_EP_DB_Transmit+0x36e>
 8002ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	029b      	lsls	r3, r3, #10
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	801a      	strh	r2, [r3, #0]
 8002af0:	e01c      	b.n	8002b2c <HAL_PCD_EP_DB_Transmit+0x3c0>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	785b      	ldrb	r3, [r3, #1]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d118      	bne.n	8002b2c <HAL_PCD_EP_DB_Transmit+0x3c0>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	647b      	str	r3, [r7, #68]	; 0x44
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b0e:	4413      	add	r3, r2
 8002b10:	647b      	str	r3, [r7, #68]	; 0x44
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	011a      	lsls	r2, r3, #4
 8002b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b20:	643b      	str	r3, [r7, #64]	; 0x40
 8002b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b2a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6959      	ldr	r1, [r3, #20]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	891a      	ldrh	r2, [r3, #8]
 8002b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	f003 fb0c 	bl	800615a <USB_WritePMA>
 8002b42:	e1e4      	b.n	8002f0e <HAL_PCD_EP_DB_Transmit+0x7a2>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	3306      	adds	r3, #6
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b6c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	699a      	ldr	r2, [r3, #24]
 8002b74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d307      	bcc.n	8002b8c <HAL_PCD_EP_DB_Transmit+0x420>
    {
      ep->xfer_len -= TxPctSize;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	699a      	ldr	r2, [r3, #24]
 8002b80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b84:	1ad2      	subs	r2, r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	619a      	str	r2, [r3, #24]
 8002b8a:	e002      	b.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x426>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f040 80c2 	bne.w	8002d20 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	785b      	ldrb	r3, [r3, #1]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d126      	bne.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x486>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bb8:	4413      	add	r3, r2
 8002bba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	011a      	lsls	r2, r3, #4
 8002bc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bca:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bda:	801a      	strh	r2, [r3, #0]
 8002bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bee:	801a      	strh	r2, [r3, #0]
 8002bf0:	e01a      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x4bc>
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d116      	bne.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x4bc>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	667b      	str	r3, [r7, #100]	; 0x64
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c0e:	4413      	add	r3, r2
 8002c10:	667b      	str	r3, [r7, #100]	; 0x64
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	011a      	lsls	r2, r3, #4
 8002c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c20:	663b      	str	r3, [r7, #96]	; 0x60
 8002c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c24:	2200      	movs	r2, #0
 8002c26:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	677b      	str	r3, [r7, #116]	; 0x74
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	785b      	ldrb	r3, [r3, #1]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d12b      	bne.n	8002c8e <HAL_PCD_EP_DB_Transmit+0x522>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4a:	4413      	add	r3, r2
 8002c4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	011a      	lsls	r2, r3, #4
 8002c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c56:	4413      	add	r3, r2
 8002c58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c72:	801a      	strh	r2, [r3, #0]
 8002c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c8a:	801a      	strh	r2, [r3, #0]
 8002c8c:	e017      	b.n	8002cbe <HAL_PCD_EP_DB_Transmit+0x552>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	785b      	ldrb	r3, [r3, #1]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d113      	bne.n	8002cbe <HAL_PCD_EP_DB_Transmit+0x552>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca4:	4413      	add	r3, r2
 8002ca6:	677b      	str	r3, [r7, #116]	; 0x74
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	011a      	lsls	r2, r3, #4
 8002cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cb6:	673b      	str	r3, [r7, #112]	; 0x70
 8002cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cba:	2200      	movs	r2, #0
 8002cbc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	7812      	ldrb	r2, [r2, #0]
 8002cc8:	4611      	mov	r1, r2
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	4798      	blx	r3
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f040 811a 	bne.w	8002f0e <HAL_PCD_EP_DB_Transmit+0x7a2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	441a      	add	r2, r3
 8002d06:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	8013      	strh	r3, [r2, #0]
 8002d1e:	e0f6      	b.n	8002f0e <HAL_PCD_EP_DB_Transmit+0x7a2>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d121      	bne.n	8002d6e <HAL_PCD_EP_DB_Transmit+0x602>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	441a      	add	r2, r3
 8002d56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	f040 80ca 	bne.w	8002f0e <HAL_PCD_EP_DB_Transmit+0x7a2>
      {
        ep->xfer_buff += TxPctSize;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	695a      	ldr	r2, [r3, #20]
 8002d7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d82:	441a      	add	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d90:	441a      	add	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	6a1a      	ldr	r2, [r3, #32]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d30b      	bcc.n	8002dba <HAL_PCD_EP_DB_Transmit+0x64e>
        {
          len = ep->maxpacket;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	6a1a      	ldr	r2, [r3, #32]
 8002dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002db2:	1ad2      	subs	r2, r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	621a      	str	r2, [r3, #32]
 8002db8:	e017      	b.n	8002dea <HAL_PCD_EP_DB_Transmit+0x67e>
        }
        else if (ep->xfer_len_db == 0U)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d108      	bne.n	8002dd4 <HAL_PCD_EP_DB_Transmit+0x668>
        {
          len = TxPctSize;
 8002dc2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002dc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002dd2:	e00a      	b.n	8002dea <HAL_PCD_EP_DB_Transmit+0x67e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2200      	movs	r2, #0
 8002de0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	657b      	str	r3, [r7, #84]	; 0x54
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d165      	bne.n	8002ec4 <HAL_PCD_EP_DB_Transmit+0x758>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e0c:	4413      	add	r3, r2
 8002e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	011a      	lsls	r2, r3, #4
 8002e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e18:	4413      	add	r3, r2
 8002e1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e2e:	801a      	strh	r2, [r3, #0]
 8002e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e34:	2b3e      	cmp	r3, #62	; 0x3e
 8002e36:	d91d      	bls.n	8002e74 <HAL_PCD_EP_DB_Transmit+0x708>
 8002e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <HAL_PCD_EP_DB_Transmit+0x6e6>
 8002e4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	029b      	lsls	r3, r3, #10
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	4313      	orrs	r3, r2
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e70:	801a      	strh	r2, [r3, #0]
 8002e72:	e041      	b.n	8002ef8 <HAL_PCD_EP_DB_Transmit+0x78c>
 8002e74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x726>
 8002e7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e8e:	801a      	strh	r2, [r3, #0]
 8002e90:	e032      	b.n	8002ef8 <HAL_PCD_EP_DB_Transmit+0x78c>
 8002e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e96:	085b      	lsrs	r3, r3, #1
 8002e98:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_PCD_EP_DB_Transmit+0x740>
 8002ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8002eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	029b      	lsls	r3, r3, #10
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec0:	801a      	strh	r2, [r3, #0]
 8002ec2:	e019      	b.n	8002ef8 <HAL_PCD_EP_DB_Transmit+0x78c>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	785b      	ldrb	r3, [r3, #1]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d115      	bne.n	8002ef8 <HAL_PCD_EP_DB_Transmit+0x78c>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eda:	4413      	add	r3, r2
 8002edc:	657b      	str	r3, [r7, #84]	; 0x54
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	011a      	lsls	r2, r3, #4
 8002ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eec:	653b      	str	r3, [r7, #80]	; 0x50
 8002eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	6959      	ldr	r1, [r3, #20]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	895a      	ldrh	r2, [r3, #10]
 8002f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	f003 f926 	bl	800615a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f28:	82bb      	strh	r3, [r7, #20]
 8002f2a:	8abb      	ldrh	r3, [r7, #20]
 8002f2c:	f083 0310 	eor.w	r3, r3, #16
 8002f30:	82bb      	strh	r3, [r7, #20]
 8002f32:	8abb      	ldrh	r3, [r7, #20]
 8002f34:	f083 0320 	eor.w	r3, r3, #32
 8002f38:	82bb      	strh	r3, [r7, #20]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	441a      	add	r2, r3
 8002f48:	8abb      	ldrh	r3, [r7, #20]
 8002f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3790      	adds	r7, #144	; 0x90
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	817b      	strh	r3, [r7, #10]
 8002f76:	4613      	mov	r3, r2
 8002f78:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f7a:	897b      	ldrh	r3, [r7, #10]
 8002f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00b      	beq.n	8002f9e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f86:	897b      	ldrh	r3, [r7, #10]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4413      	add	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	e009      	b.n	8002fb2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f9e:	897a      	ldrh	r2, [r7, #10]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4413      	add	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002fb2:	893b      	ldrh	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d107      	bne.n	8002fc8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	80da      	strh	r2, [r3, #6]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd PCD handle
  * @param  state connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
	...

08003004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e272      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8087 	beq.w	8003132 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003024:	4b92      	ldr	r3, [pc, #584]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b04      	cmp	r3, #4
 800302e:	d00c      	beq.n	800304a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003030:	4b8f      	ldr	r3, [pc, #572]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b08      	cmp	r3, #8
 800303a:	d112      	bne.n	8003062 <HAL_RCC_OscConfig+0x5e>
 800303c:	4b8c      	ldr	r3, [pc, #560]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d10b      	bne.n	8003062 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304a:	4b89      	ldr	r3, [pc, #548]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d06c      	beq.n	8003130 <HAL_RCC_OscConfig+0x12c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d168      	bne.n	8003130 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e24c      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800306a:	d106      	bne.n	800307a <HAL_RCC_OscConfig+0x76>
 800306c:	4b80      	ldr	r3, [pc, #512]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a7f      	ldr	r2, [pc, #508]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	e02e      	b.n	80030d8 <HAL_RCC_OscConfig+0xd4>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10c      	bne.n	800309c <HAL_RCC_OscConfig+0x98>
 8003082:	4b7b      	ldr	r3, [pc, #492]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a7a      	ldr	r2, [pc, #488]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	4b78      	ldr	r3, [pc, #480]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a77      	ldr	r2, [pc, #476]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e01d      	b.n	80030d8 <HAL_RCC_OscConfig+0xd4>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0xbc>
 80030a6:	4b72      	ldr	r3, [pc, #456]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a71      	ldr	r2, [pc, #452]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b6f      	ldr	r3, [pc, #444]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a6e      	ldr	r2, [pc, #440]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e00b      	b.n	80030d8 <HAL_RCC_OscConfig+0xd4>
 80030c0:	4b6b      	ldr	r3, [pc, #428]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a6a      	ldr	r2, [pc, #424]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b68      	ldr	r3, [pc, #416]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a67      	ldr	r2, [pc, #412]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fd fb82 	bl	80007e8 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e8:	f7fd fb7e 	bl	80007e8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e200      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b5d      	ldr	r3, [pc, #372]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0xe4>
 8003106:	e014      	b.n	8003132 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fd fb6e 	bl	80007e8 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003110:	f7fd fb6a 	bl	80007e8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e1ec      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003122:	4b53      	ldr	r3, [pc, #332]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x10c>
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d063      	beq.n	8003206 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800313e:	4b4c      	ldr	r3, [pc, #304]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800314a:	4b49      	ldr	r3, [pc, #292]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b08      	cmp	r3, #8
 8003154:	d11c      	bne.n	8003190 <HAL_RCC_OscConfig+0x18c>
 8003156:	4b46      	ldr	r3, [pc, #280]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d116      	bne.n	8003190 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003162:	4b43      	ldr	r3, [pc, #268]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_RCC_OscConfig+0x176>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d001      	beq.n	800317a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e1c0      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317a:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4939      	ldr	r1, [pc, #228]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318e:	e03a      	b.n	8003206 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d020      	beq.n	80031da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003198:	4b36      	ldr	r3, [pc, #216]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319e:	f7fd fb23 	bl	80007e8 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a6:	f7fd fb1f 	bl	80007e8 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e1a1      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b8:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4927      	ldr	r1, [pc, #156]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
 80031d8:	e015      	b.n	8003206 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031da:	4b26      	ldr	r3, [pc, #152]	; (8003274 <HAL_RCC_OscConfig+0x270>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fd fb02 	bl	80007e8 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e8:	f7fd fafe 	bl	80007e8 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e180      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d03a      	beq.n	8003288 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d019      	beq.n	800324e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800321a:	4b17      	ldr	r3, [pc, #92]	; (8003278 <HAL_RCC_OscConfig+0x274>)
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003220:	f7fd fae2 	bl	80007e8 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003228:	f7fd fade 	bl	80007e8 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e160      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <HAL_RCC_OscConfig+0x26c>)
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003246:	2001      	movs	r0, #1
 8003248:	f000 face 	bl	80037e8 <RCC_Delay>
 800324c:	e01c      	b.n	8003288 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <HAL_RCC_OscConfig+0x274>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003254:	f7fd fac8 	bl	80007e8 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800325a:	e00f      	b.n	800327c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325c:	f7fd fac4 	bl	80007e8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d908      	bls.n	800327c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e146      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000
 8003274:	42420000 	.word	0x42420000
 8003278:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327c:	4b92      	ldr	r3, [pc, #584]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e9      	bne.n	800325c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80a6 	beq.w	80033e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800329a:	4b8b      	ldr	r3, [pc, #556]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10d      	bne.n	80032c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a6:	4b88      	ldr	r3, [pc, #544]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	4a87      	ldr	r2, [pc, #540]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b0:	61d3      	str	r3, [r2, #28]
 80032b2:	4b85      	ldr	r3, [pc, #532]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032be:	2301      	movs	r3, #1
 80032c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4b82      	ldr	r3, [pc, #520]	; (80034cc <HAL_RCC_OscConfig+0x4c8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d118      	bne.n	8003300 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ce:	4b7f      	ldr	r3, [pc, #508]	; (80034cc <HAL_RCC_OscConfig+0x4c8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a7e      	ldr	r2, [pc, #504]	; (80034cc <HAL_RCC_OscConfig+0x4c8>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032da:	f7fd fa85 	bl	80007e8 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e2:	f7fd fa81 	bl	80007e8 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b64      	cmp	r3, #100	; 0x64
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e103      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	4b75      	ldr	r3, [pc, #468]	; (80034cc <HAL_RCC_OscConfig+0x4c8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d106      	bne.n	8003316 <HAL_RCC_OscConfig+0x312>
 8003308:	4b6f      	ldr	r3, [pc, #444]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	4a6e      	ldr	r2, [pc, #440]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6213      	str	r3, [r2, #32]
 8003314:	e02d      	b.n	8003372 <HAL_RCC_OscConfig+0x36e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x334>
 800331e:	4b6a      	ldr	r3, [pc, #424]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	4a69      	ldr	r2, [pc, #420]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	6213      	str	r3, [r2, #32]
 800332a:	4b67      	ldr	r3, [pc, #412]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	4a66      	ldr	r2, [pc, #408]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	6213      	str	r3, [r2, #32]
 8003336:	e01c      	b.n	8003372 <HAL_RCC_OscConfig+0x36e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b05      	cmp	r3, #5
 800333e:	d10c      	bne.n	800335a <HAL_RCC_OscConfig+0x356>
 8003340:	4b61      	ldr	r3, [pc, #388]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4a60      	ldr	r2, [pc, #384]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	f043 0304 	orr.w	r3, r3, #4
 800334a:	6213      	str	r3, [r2, #32]
 800334c:	4b5e      	ldr	r3, [pc, #376]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	4a5d      	ldr	r2, [pc, #372]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6213      	str	r3, [r2, #32]
 8003358:	e00b      	b.n	8003372 <HAL_RCC_OscConfig+0x36e>
 800335a:	4b5b      	ldr	r3, [pc, #364]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a5a      	ldr	r2, [pc, #360]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6213      	str	r3, [r2, #32]
 8003366:	4b58      	ldr	r3, [pc, #352]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4a57      	ldr	r2, [pc, #348]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d015      	beq.n	80033a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337a:	f7fd fa35 	bl	80007e8 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fd fa31 	bl	80007e8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0b1      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	4b4b      	ldr	r3, [pc, #300]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ee      	beq.n	8003382 <HAL_RCC_OscConfig+0x37e>
 80033a4:	e014      	b.n	80033d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a6:	f7fd fa1f 	bl	80007e8 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fd fa1b 	bl	80007e8 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e09b      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ee      	bne.n	80033ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d6:	4b3c      	ldr	r3, [pc, #240]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	4a3b      	ldr	r2, [pc, #236]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8087 	beq.w	80034fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ec:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d061      	beq.n	80034bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d146      	bne.n	800348e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003400:	4b33      	ldr	r3, [pc, #204]	; (80034d0 <HAL_RCC_OscConfig+0x4cc>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7fd f9ef 	bl	80007e8 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340e:	f7fd f9eb 	bl	80007e8 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e06d      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003420:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f0      	bne.n	800340e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003434:	d108      	bne.n	8003448 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003436:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	4921      	ldr	r1, [pc, #132]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003448:	4b1f      	ldr	r3, [pc, #124]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a19      	ldr	r1, [r3, #32]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	430b      	orrs	r3, r1
 800345a:	491b      	ldr	r1, [pc, #108]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <HAL_RCC_OscConfig+0x4cc>)
 8003462:	2201      	movs	r2, #1
 8003464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003466:	f7fd f9bf 	bl	80007e8 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346e:	f7fd f9bb 	bl	80007e8 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e03d      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x46a>
 800348c:	e035      	b.n	80034fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348e:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <HAL_RCC_OscConfig+0x4cc>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fd f9a8 	bl	80007e8 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fd f9a4 	bl	80007e8 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e026      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x498>
 80034ba:	e01e      	b.n	80034fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e019      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40007000 	.word	0x40007000
 80034d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_OscConfig+0x500>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000

08003508 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0d0      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800351c:	4b6a      	ldr	r3, [pc, #424]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d910      	bls.n	800354c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352a:	4b67      	ldr	r3, [pc, #412]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 0207 	bic.w	r2, r3, #7
 8003532:	4965      	ldr	r1, [pc, #404]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b63      	ldr	r3, [pc, #396]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0b8      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003564:	4b59      	ldr	r3, [pc, #356]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4a58      	ldr	r2, [pc, #352]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800356e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800357c:	4b53      	ldr	r3, [pc, #332]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a52      	ldr	r2, [pc, #328]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003586:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003588:	4b50      	ldr	r3, [pc, #320]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	494d      	ldr	r1, [pc, #308]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	4313      	orrs	r3, r2
 8003598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d040      	beq.n	8003628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b47      	ldr	r3, [pc, #284]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d115      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e07f      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	4b41      	ldr	r3, [pc, #260]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e073      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d6:	4b3d      	ldr	r3, [pc, #244]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06b      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e6:	4b39      	ldr	r3, [pc, #228]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f023 0203 	bic.w	r2, r3, #3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4936      	ldr	r1, [pc, #216]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f8:	f7fd f8f6 	bl	80007e8 <HAL_GetTick>
 80035fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003600:	f7fd f8f2 	bl	80007e8 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e053      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 020c 	and.w	r2, r3, #12
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	429a      	cmp	r2, r3
 8003626:	d1eb      	bne.n	8003600 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003628:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d210      	bcs.n	8003658 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003636:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 0207 	bic.w	r2, r3, #7
 800363e:	4922      	ldr	r1, [pc, #136]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e032      	b.n	80036be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4916      	ldr	r1, [pc, #88]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	4313      	orrs	r3, r2
 8003674:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003682:	4b12      	ldr	r3, [pc, #72]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	490e      	ldr	r1, [pc, #56]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003696:	f000 f821 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 800369a:	4602      	mov	r2, r0
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	490a      	ldr	r1, [pc, #40]	; (80036d0 <HAL_RCC_ClockConfig+0x1c8>)
 80036a8:	5ccb      	ldrb	r3, [r1, r3]
 80036aa:	fa22 f303 	lsr.w	r3, r2, r3
 80036ae:	4a09      	ldr	r2, [pc, #36]	; (80036d4 <HAL_RCC_ClockConfig+0x1cc>)
 80036b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036b2:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_RCC_ClockConfig+0x1d0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd f854 	bl	8000764 <HAL_InitTick>

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40022000 	.word	0x40022000
 80036cc:	40021000 	.word	0x40021000
 80036d0:	08009fec 	.word	0x08009fec
 80036d4:	20000000 	.word	0x20000000
 80036d8:	20000004 	.word	0x20000004

080036dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	2300      	movs	r3, #0
 80036f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036f6:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <HAL_RCC_GetSysClockFreq+0x94>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b04      	cmp	r3, #4
 8003704:	d002      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x30>
 8003706:	2b08      	cmp	r3, #8
 8003708:	d003      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0x36>
 800370a:	e027      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HAL_RCC_GetSysClockFreq+0x98>)
 800370e:	613b      	str	r3, [r7, #16]
      break;
 8003710:	e027      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	0c9b      	lsrs	r3, r3, #18
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	4a17      	ldr	r2, [pc, #92]	; (8003778 <HAL_RCC_GetSysClockFreq+0x9c>)
 800371c:	5cd3      	ldrb	r3, [r2, r3]
 800371e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d010      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800372a:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_RCC_GetSysClockFreq+0x94>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	0c5b      	lsrs	r3, r3, #17
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	4a11      	ldr	r2, [pc, #68]	; (800377c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003736:	5cd3      	ldrb	r3, [r2, r3]
 8003738:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a0d      	ldr	r2, [pc, #52]	; (8003774 <HAL_RCC_GetSysClockFreq+0x98>)
 800373e:	fb03 f202 	mul.w	r2, r3, r2
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	e004      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003750:	fb02 f303 	mul.w	r3, r2, r3
 8003754:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	613b      	str	r3, [r7, #16]
      break;
 800375a:	e002      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetSysClockFreq+0x98>)
 800375e:	613b      	str	r3, [r7, #16]
      break;
 8003760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003762:	693b      	ldr	r3, [r7, #16]
}
 8003764:	4618      	mov	r0, r3
 8003766:	371c      	adds	r7, #28
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	007a1200 	.word	0x007a1200
 8003778:	0800a004 	.word	0x0800a004
 800377c:	0800a014 	.word	0x0800a014
 8003780:	003d0900 	.word	0x003d0900

08003784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003788:	4b02      	ldr	r3, [pc, #8]	; (8003794 <HAL_RCC_GetHCLKFreq+0x10>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	20000000 	.word	0x20000000

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800379c:	f7ff fff2 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000
 80037bc:	08009ffc 	.word	0x08009ffc

080037c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037c4:	f7ff ffde 	bl	8003784 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	0adb      	lsrs	r3, r3, #11
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000
 80037e4:	08009ffc 	.word	0x08009ffc

080037e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <RCC_Delay+0x34>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <RCC_Delay+0x38>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	0a5b      	lsrs	r3, r3, #9
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003804:	bf00      	nop
  }
  while (Delay --);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1e5a      	subs	r2, r3, #1
 800380a:	60fa      	str	r2, [r7, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f9      	bne.n	8003804 <RCC_Delay+0x1c>
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	20000000 	.word	0x20000000
 8003820:	10624dd3 	.word	0x10624dd3

08003824 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d07d      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003840:	2300      	movs	r3, #0
 8003842:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003844:	4b4f      	ldr	r3, [pc, #316]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10d      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003850:	4b4c      	ldr	r3, [pc, #304]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	4a4b      	ldr	r2, [pc, #300]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385a:	61d3      	str	r3, [r2, #28]
 800385c:	4b49      	ldr	r3, [pc, #292]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003868:	2301      	movs	r3, #1
 800386a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386c:	4b46      	ldr	r3, [pc, #280]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d118      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003878:	4b43      	ldr	r3, [pc, #268]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a42      	ldr	r2, [pc, #264]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800387e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003882:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003884:	f7fc ffb0 	bl	80007e8 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388a:	e008      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388c:	f7fc ffac 	bl	80007e8 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	; 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e06d      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389e:	4b3a      	ldr	r3, [pc, #232]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038aa:	4b36      	ldr	r3, [pc, #216]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d02e      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d027      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038c8:	4b2e      	ldr	r3, [pc, #184]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038d2:	4b2e      	ldr	r3, [pc, #184]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038d8:	4b2c      	ldr	r3, [pc, #176]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038de:	4a29      	ldr	r2, [pc, #164]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d014      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7fc ff7b 	bl	80007e8 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f4:	e00a      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f6:	f7fc ff77 	bl	80007e8 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f241 3288 	movw	r2, #5000	; 0x1388
 8003904:	4293      	cmp	r3, r2
 8003906:	d901      	bls.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e036      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0ee      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003918:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4917      	ldr	r1, [pc, #92]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003926:	4313      	orrs	r3, r2
 8003928:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d105      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003930:	4b14      	ldr	r3, [pc, #80]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	4a13      	ldr	r2, [pc, #76]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003948:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	490b      	ldr	r1, [pc, #44]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003956:	4313      	orrs	r3, r2
 8003958:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003966:	4b07      	ldr	r3, [pc, #28]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	4904      	ldr	r1, [pc, #16]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	40007000 	.word	0x40007000
 800398c:	42420440 	.word	0x42420440

08003990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e042      	b.n	8003a28 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fc fd82 	bl	80004c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2224      	movs	r2, #36	; 0x24
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f82b 	bl	8003a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a6a:	f023 030c 	bic.w	r3, r3, #12
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	430b      	orrs	r3, r1
 8003a76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2c      	ldr	r2, [pc, #176]	; (8003b44 <UART_SetConfig+0x114>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d103      	bne.n	8003aa0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a98:	f7ff fe92 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	e002      	b.n	8003aa6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003aa0:	f7ff fe7a 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 8003aa4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	009a      	lsls	r2, r3, #2
 8003ab0:	441a      	add	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <UART_SetConfig+0x118>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	0119      	lsls	r1, r3, #4
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	009a      	lsls	r2, r3, #2
 8003ad0:	441a      	add	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003adc:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <UART_SetConfig+0x118>)
 8003ade:	fba3 0302 	umull	r0, r3, r3, r2
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	2064      	movs	r0, #100	; 0x64
 8003ae6:	fb00 f303 	mul.w	r3, r0, r3
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	3332      	adds	r3, #50	; 0x32
 8003af0:	4a15      	ldr	r2, [pc, #84]	; (8003b48 <UART_SetConfig+0x118>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003afc:	4419      	add	r1, r3
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	009a      	lsls	r2, r3, #2
 8003b08:	441a      	add	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <UART_SetConfig+0x118>)
 8003b16:	fba3 0302 	umull	r0, r3, r3, r2
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2064      	movs	r0, #100	; 0x64
 8003b1e:	fb00 f303 	mul.w	r3, r0, r3
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	3332      	adds	r3, #50	; 0x32
 8003b28:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <UART_SetConfig+0x118>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	f003 020f 	and.w	r2, r3, #15
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	440a      	add	r2, r1
 8003b3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40013800 	.word	0x40013800
 8003b48:	51eb851f 	.word	0x51eb851f

08003b4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	f107 0014 	add.w	r0, r7, #20
 8003b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	b004      	add	sp, #16
 8003b6a:	4770      	bx	lr

08003b6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b7c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b80:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ba0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003ba4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr

08003bcc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003be4:	b084      	sub	sp, #16
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	f107 0014 	add.w	r0, r7, #20
 8003bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	b004      	add	sp, #16
 8003c22:	4770      	bx	lr

08003c24 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b09d      	sub	sp, #116	; 0x74
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	78db      	ldrb	r3, [r3, #3]
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d81f      	bhi.n	8003c96 <USB_ActivateEndpoint+0x72>
 8003c56:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <USB_ActivateEndpoint+0x38>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003c6d 	.word	0x08003c6d
 8003c60:	08003c89 	.word	0x08003c89
 8003c64:	08003c9f 	.word	0x08003c9f
 8003c68:	08003c7b 	.word	0x08003c7b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003c6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003c70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c74:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003c78:	e012      	b.n	8003ca0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003c7a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003c7e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003c82:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003c86:	e00b      	b.n	8003ca0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003c88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003c8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003c94:	e004      	b.n	8003ca0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003c9c:	e000      	b.n	8003ca0 <USB_ActivateEndpoint+0x7c>
      break;
 8003c9e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	441a      	add	r2, r3
 8003caa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	441a      	add	r2, r3
 8003cf0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	7b1b      	ldrb	r3, [r3, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f040 8178 	bne.w	8004002 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	785b      	ldrb	r3, [r3, #1]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8084 	beq.w	8003e24 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	011a      	lsls	r2, r3, #4
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	88db      	ldrh	r3, [r3, #6]
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	827b      	strh	r3, [r7, #18]
 8003d5e:	8a7b      	ldrh	r3, [r7, #18]
 8003d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01b      	beq.n	8003da0 <USB_ActivateEndpoint+0x17c>
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7e:	823b      	strh	r3, [r7, #16]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	441a      	add	r2, r3
 8003d8a:	8a3b      	ldrh	r3, [r7, #16]
 8003d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	78db      	ldrb	r3, [r3, #3]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d020      	beq.n	8003dea <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dbe:	81bb      	strh	r3, [r7, #12]
 8003dc0:	89bb      	ldrh	r3, [r7, #12]
 8003dc2:	f083 0320 	eor.w	r3, r3, #32
 8003dc6:	81bb      	strh	r3, [r7, #12]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	441a      	add	r2, r3
 8003dd2:	89bb      	ldrh	r3, [r7, #12]
 8003dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	8013      	strh	r3, [r2, #0]
 8003de8:	e2d5      	b.n	8004396 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e00:	81fb      	strh	r3, [r7, #14]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	441a      	add	r2, r3
 8003e0c:	89fb      	ldrh	r3, [r7, #14]
 8003e0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	8013      	strh	r3, [r2, #0]
 8003e22:	e2b8      	b.n	8004396 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	633b      	str	r3, [r7, #48]	; 0x30
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	4413      	add	r3, r2
 8003e36:	633b      	str	r3, [r7, #48]	; 0x30
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	011a      	lsls	r2, r3, #4
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	88db      	ldrh	r3, [r3, #6]
 8003e4c:	085b      	lsrs	r3, r3, #1
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e56:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	4413      	add	r3, r2
 8003e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	011a      	lsls	r2, r3, #4
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	4413      	add	r3, r2
 8003e76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	801a      	strh	r2, [r3, #0]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b3e      	cmp	r3, #62	; 0x3e
 8003e92:	d91d      	bls.n	8003ed0 <USB_ActivateEndpoint+0x2ac>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <USB_ActivateEndpoint+0x28a>
 8003ea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	029b      	lsls	r3, r3, #10
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	801a      	strh	r2, [r3, #0]
 8003ece:	e026      	b.n	8003f1e <USB_ActivateEndpoint+0x2fa>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <USB_ActivateEndpoint+0x2ca>
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	801a      	strh	r2, [r3, #0]
 8003eec:	e017      	b.n	8003f1e <USB_ActivateEndpoint+0x2fa>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	085b      	lsrs	r3, r3, #1
 8003ef4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <USB_ActivateEndpoint+0x2e4>
 8003f02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f04:	3301      	adds	r3, #1
 8003f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	029b      	lsls	r3, r3, #10
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	4313      	orrs	r3, r2
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	847b      	strh	r3, [r7, #34]	; 0x22
 8003f2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d01b      	beq.n	8003f6e <USB_ActivateEndpoint+0x34a>
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4c:	843b      	strh	r3, [r7, #32]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	441a      	add	r2, r3
 8003f58:	8c3b      	ldrh	r3, [r7, #32]
 8003f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d124      	bne.n	8003fc0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8c:	83bb      	strh	r3, [r7, #28]
 8003f8e:	8bbb      	ldrh	r3, [r7, #28]
 8003f90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f94:	83bb      	strh	r3, [r7, #28]
 8003f96:	8bbb      	ldrh	r3, [r7, #28]
 8003f98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f9c:	83bb      	strh	r3, [r7, #28]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	441a      	add	r2, r3
 8003fa8:	8bbb      	ldrh	r3, [r7, #28]
 8003faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	8013      	strh	r3, [r2, #0]
 8003fbe:	e1ea      	b.n	8004396 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd6:	83fb      	strh	r3, [r7, #30]
 8003fd8:	8bfb      	ldrh	r3, [r7, #30]
 8003fda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003fde:	83fb      	strh	r3, [r7, #30]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	441a      	add	r2, r3
 8003fea:	8bfb      	ldrh	r3, [r7, #30]
 8003fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	8013      	strh	r3, [r2, #0]
 8004000:	e1c9      	b.n	8004396 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	78db      	ldrb	r3, [r3, #3]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d11e      	bne.n	8004048 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	b29b      	uxth	r3, r3
 8004018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800401c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004020:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	441a      	add	r2, r3
 800402e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800403a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800403e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004042:	b29b      	uxth	r3, r3
 8004044:	8013      	strh	r3, [r2, #0]
 8004046:	e01d      	b.n	8004084 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b29b      	uxth	r3, r3
 8004056:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	441a      	add	r2, r3
 800406c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800407c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004080:	b29b      	uxth	r3, r3
 8004082:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800408e:	b29b      	uxth	r3, r3
 8004090:	461a      	mov	r2, r3
 8004092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004094:	4413      	add	r3, r2
 8004096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	011a      	lsls	r2, r3, #4
 800409e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	891b      	ldrh	r3, [r3, #8]
 80040ac:	085b      	lsrs	r3, r3, #1
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040b6:	801a      	strh	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	657b      	str	r3, [r7, #84]	; 0x54
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c8:	4413      	add	r3, r2
 80040ca:	657b      	str	r3, [r7, #84]	; 0x54
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	011a      	lsls	r2, r3, #4
 80040d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80040da:	653b      	str	r3, [r7, #80]	; 0x50
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	895b      	ldrh	r3, [r3, #10]
 80040e0:	085b      	lsrs	r3, r3, #1
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	785b      	ldrb	r3, [r3, #1]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f040 8093 	bne.w	800421c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004106:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800410a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d01b      	beq.n	800414a <USB_ActivateEndpoint+0x526>
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	b29b      	uxth	r3, r3
 8004120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004128:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	441a      	add	r2, r3
 8004134:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800413a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800413e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004146:	b29b      	uxth	r3, r3
 8004148:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004158:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800415a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	d01b      	beq.n	800419a <USB_ActivateEndpoint+0x576>
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004178:	877b      	strh	r3, [r7, #58]	; 0x3a
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	441a      	add	r2, r3
 8004184:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800418a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800418e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004192:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004196:	b29b      	uxth	r3, r3
 8004198:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80041b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80041b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80041b8:	873b      	strh	r3, [r7, #56]	; 0x38
 80041ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80041bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041c0:	873b      	strh	r3, [r7, #56]	; 0x38
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	441a      	add	r2, r3
 80041cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80041ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	441a      	add	r2, r3
 8004204:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800420a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800420e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004216:	b29b      	uxth	r3, r3
 8004218:	8013      	strh	r3, [r2, #0]
 800421a:	e0bc      	b.n	8004396 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800422c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01d      	beq.n	8004274 <USB_ActivateEndpoint+0x650>
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	441a      	add	r2, r3
 800425c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800426c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004270:	b29b      	uxth	r3, r3
 8004272:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004284:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01d      	beq.n	80042cc <USB_ActivateEndpoint+0x6a8>
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	441a      	add	r2, r3
 80042b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	78db      	ldrb	r3, [r3, #3]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d024      	beq.n	800431e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80042ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80042f2:	f083 0320 	eor.w	r3, r3, #32
 80042f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	441a      	add	r2, r3
 8004304:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800430c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004318:	b29b      	uxth	r3, r3
 800431a:	8013      	strh	r3, [r2, #0]
 800431c:	e01d      	b.n	800435a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004334:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	441a      	add	r2, r3
 8004342:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800434a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800434e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004356:	b29b      	uxth	r3, r3
 8004358:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	881b      	ldrh	r3, [r3, #0]
 8004366:	b29b      	uxth	r3, r3
 8004368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800436c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004370:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	441a      	add	r2, r3
 800437e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800438a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004392:	b29b      	uxth	r3, r3
 8004394:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004396:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800439a:	4618      	mov	r0, r3
 800439c:	3774      	adds	r7, #116	; 0x74
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b08d      	sub	sp, #52	; 0x34
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	7b1b      	ldrb	r3, [r3, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f040 808e 	bne.w	80044d4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	785b      	ldrb	r3, [r3, #1]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d044      	beq.n	800444a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	81bb      	strh	r3, [r7, #12]
 80043ce:	89bb      	ldrh	r3, [r7, #12]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01b      	beq.n	8004410 <USB_DeactivateEndpoint+0x6c>
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	817b      	strh	r3, [r7, #10]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	897b      	ldrh	r3, [r7, #10]
 80043fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004408:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800440c:	b29b      	uxth	r3, r3
 800440e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29b      	uxth	r3, r3
 800441e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004426:	813b      	strh	r3, [r7, #8]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	441a      	add	r2, r3
 8004432:	893b      	ldrh	r3, [r7, #8]
 8004434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800443c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004444:	b29b      	uxth	r3, r3
 8004446:	8013      	strh	r3, [r2, #0]
 8004448:	e192      	b.n	8004770 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	827b      	strh	r3, [r7, #18]
 8004458:	8a7b      	ldrh	r3, [r7, #18]
 800445a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d01b      	beq.n	800449a <USB_DeactivateEndpoint+0xf6>
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004478:	823b      	strh	r3, [r7, #16]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	441a      	add	r2, r3
 8004484:	8a3b      	ldrh	r3, [r7, #16]
 8004486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800448e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004496:	b29b      	uxth	r3, r3
 8004498:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b0:	81fb      	strh	r3, [r7, #14]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	441a      	add	r2, r3
 80044bc:	89fb      	ldrh	r3, [r7, #14]
 80044be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	8013      	strh	r3, [r2, #0]
 80044d2:	e14d      	b.n	8004770 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	785b      	ldrb	r3, [r3, #1]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f040 80a5 	bne.w	8004628 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	843b      	strh	r3, [r7, #32]
 80044ec:	8c3b      	ldrh	r3, [r7, #32]
 80044ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01b      	beq.n	800452e <USB_DeactivateEndpoint+0x18a>
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	b29b      	uxth	r3, r3
 8004504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450c:	83fb      	strh	r3, [r7, #30]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	441a      	add	r2, r3
 8004518:	8bfb      	ldrh	r3, [r7, #30]
 800451a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800451e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004522:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800452a:	b29b      	uxth	r3, r3
 800452c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	83bb      	strh	r3, [r7, #28]
 800453c:	8bbb      	ldrh	r3, [r7, #28]
 800453e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	d01b      	beq.n	800457e <USB_DeactivateEndpoint+0x1da>
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	b29b      	uxth	r3, r3
 8004554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455c:	837b      	strh	r3, [r7, #26]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	441a      	add	r2, r3
 8004568:	8b7b      	ldrh	r3, [r7, #26]
 800456a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800456e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004576:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800457a:	b29b      	uxth	r3, r3
 800457c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	b29b      	uxth	r3, r3
 800458c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004594:	833b      	strh	r3, [r7, #24]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	441a      	add	r2, r3
 80045a0:	8b3b      	ldrh	r3, [r7, #24]
 80045a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045cc:	82fb      	strh	r3, [r7, #22]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	441a      	add	r2, r3
 80045d8:	8afb      	ldrh	r3, [r7, #22]
 80045da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004604:	82bb      	strh	r3, [r7, #20]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	441a      	add	r2, r3
 8004610:	8abb      	ldrh	r3, [r7, #20]
 8004612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800461a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004622:	b29b      	uxth	r3, r3
 8004624:	8013      	strh	r3, [r2, #0]
 8004626:	e0a3      	b.n	8004770 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004636:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01b      	beq.n	8004678 <USB_DeactivateEndpoint+0x2d4>
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29b      	uxth	r3, r3
 800464e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004656:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	441a      	add	r2, r3
 8004662:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800466c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004674:	b29b      	uxth	r3, r3
 8004676:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004686:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01b      	beq.n	80046c8 <USB_DeactivateEndpoint+0x324>
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	441a      	add	r2, r3
 80046b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80046b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	441a      	add	r2, r3
 80046ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004716:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004734:	b29b      	uxth	r3, r3
 8004736:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800474a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800475c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476c:	b29b      	uxth	r3, r3
 800476e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3734      	adds	r7, #52	; 0x34
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr

0800477c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b0c2      	sub	sp, #264	; 0x108
 8004780:	af00      	add	r7, sp, #0
 8004782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800478a:	6018      	str	r0, [r3, #0]
 800478c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004794:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800479a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	785b      	ldrb	r3, [r3, #1]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	f040 86b7 	bne.w	8005516 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80047a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699a      	ldr	r2, [r3, #24]
 80047b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d908      	bls.n	80047d6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80047c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80047d4:	e007      	b.n	80047e6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80047d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80047e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	7b1b      	ldrb	r3, [r3, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d13a      	bne.n	800486c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80047f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6959      	ldr	r1, [r3, #20]
 8004802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	88da      	ldrh	r2, [r3, #6]
 800480e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004812:	b29b      	uxth	r3, r3
 8004814:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004818:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800481c:	6800      	ldr	r0, [r0, #0]
 800481e:	f001 fc9c 	bl	800615a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483c:	b29b      	uxth	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4413      	add	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800484a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	011a      	lsls	r2, r3, #4
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	4413      	add	r3, r2
 8004858:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	801a      	strh	r2, [r3, #0]
 8004868:	f000 be1f 	b.w	80054aa <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800486c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	78db      	ldrb	r3, [r3, #3]
 8004878:	2b02      	cmp	r3, #2
 800487a:	f040 8462 	bne.w	8005142 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800487e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6a1a      	ldr	r2, [r3, #32]
 800488a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800488e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	429a      	cmp	r2, r3
 8004898:	f240 83df 	bls.w	800505a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800489c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80048c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	441a      	add	r2, r3
 80048e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80048e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80048f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6a1a      	ldr	r2, [r3, #32]
 8004904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004908:	1ad2      	subs	r2, r2, r3
 800490a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800490e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800491a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	b29b      	uxth	r3, r3
 8004934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 81c7 	beq.w	8004ccc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800493e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004942:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	633b      	str	r3, [r7, #48]	; 0x30
 800494a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800494e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	785b      	ldrb	r3, [r3, #1]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d177      	bne.n	8004a4a <USB_EPStartXfer+0x2ce>
 800495a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800495e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
 8004966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800496a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004974:	b29b      	uxth	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	4413      	add	r3, r2
 800497c:	62bb      	str	r3, [r7, #40]	; 0x28
 800497e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	011a      	lsls	r2, r3, #4
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	4413      	add	r3, r2
 8004990:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049aa:	2b3e      	cmp	r3, #62	; 0x3e
 80049ac:	d921      	bls.n	80049f2 <USB_EPStartXfer+0x276>
 80049ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80049b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049bc:	f003 031f 	and.w	r3, r3, #31
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d104      	bne.n	80049ce <USB_EPStartXfer+0x252>
 80049c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80049c8:	3b01      	subs	r3, #1
 80049ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80049d8:	b29b      	uxth	r3, r3
 80049da:	029b      	lsls	r3, r3, #10
 80049dc:	b29b      	uxth	r3, r3
 80049de:	4313      	orrs	r3, r2
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	801a      	strh	r2, [r3, #0]
 80049f0:	e050      	b.n	8004a94 <USB_EPStartXfer+0x318>
 80049f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10a      	bne.n	8004a10 <USB_EPStartXfer+0x294>
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	801a      	strh	r2, [r3, #0]
 8004a0e:	e041      	b.n	8004a94 <USB_EPStartXfer+0x318>
 8004a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a14:	085b      	lsrs	r3, r3, #1
 8004a16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d004      	beq.n	8004a30 <USB_EPStartXfer+0x2b4>
 8004a26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	029b      	lsls	r3, r3, #10
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	4313      	orrs	r3, r2
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	801a      	strh	r2, [r3, #0]
 8004a48:	e024      	b.n	8004a94 <USB_EPStartXfer+0x318>
 8004a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d11c      	bne.n	8004a94 <USB_EPStartXfer+0x318>
 8004a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	4413      	add	r3, r2
 8004a70:	633b      	str	r3, [r7, #48]	; 0x30
 8004a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	011a      	lsls	r2, r3, #4
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	4413      	add	r3, r2
 8004a84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	895b      	ldrh	r3, [r3, #10]
 8004aa0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6959      	ldr	r1, [r3, #20]
 8004ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004aba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004abe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004ac2:	6800      	ldr	r0, [r0, #0]
 8004ac4:	f001 fb49 	bl	800615a <USB_WritePMA>
            ep->xfer_buff += len;
 8004ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695a      	ldr	r2, [r3, #20]
 8004ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ad8:	441a      	add	r2, r3
 8004ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6a1a      	ldr	r2, [r3, #32]
 8004af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d90f      	bls.n	8004b22 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6a1a      	ldr	r2, [r3, #32]
 8004b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b12:	1ad2      	subs	r2, r2, r3
 8004b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	621a      	str	r2, [r3, #32]
 8004b20:	e00e      	b.n	8004b40 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d177      	bne.n	8004c40 <USB_EPStartXfer+0x4c4>
 8004b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	4413      	add	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
 8004b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	011a      	lsls	r2, r3, #4
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	4413      	add	r3, r2
 8004b86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	801a      	strh	r2, [r3, #0]
 8004b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ba2:	d921      	bls.n	8004be8 <USB_EPStartXfer+0x46c>
 8004ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <USB_EPStartXfer+0x448>
 8004bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	029b      	lsls	r3, r3, #10
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	801a      	strh	r2, [r3, #0]
 8004be6:	e056      	b.n	8004c96 <USB_EPStartXfer+0x51a>
 8004be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <USB_EPStartXfer+0x48a>
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	801a      	strh	r2, [r3, #0]
 8004c04:	e047      	b.n	8004c96 <USB_EPStartXfer+0x51a>
 8004c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c0a:	085b      	lsrs	r3, r3, #1
 8004c0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d004      	beq.n	8004c26 <USB_EPStartXfer+0x4aa>
 8004c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c20:	3301      	adds	r3, #1
 8004c22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	029b      	lsls	r3, r3, #10
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	4313      	orrs	r3, r2
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	801a      	strh	r2, [r3, #0]
 8004c3e:	e02a      	b.n	8004c96 <USB_EPStartXfer+0x51a>
 8004c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	785b      	ldrb	r3, [r3, #1]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d122      	bne.n	8004c96 <USB_EPStartXfer+0x51a>
 8004c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	623b      	str	r3, [r7, #32]
 8004c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	4413      	add	r3, r2
 8004c72:	623b      	str	r3, [r7, #32]
 8004c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	011a      	lsls	r2, r3, #4
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	4413      	add	r3, r2
 8004c86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	891b      	ldrh	r3, [r3, #8]
 8004ca2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6959      	ldr	r1, [r3, #20]
 8004cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004cbc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004cc0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004cc4:	6800      	ldr	r0, [r0, #0]
 8004cc6:	f001 fa48 	bl	800615a <USB_WritePMA>
 8004cca:	e3ee      	b.n	80054aa <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	785b      	ldrb	r3, [r3, #1]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d177      	bne.n	8004dcc <USB_EPStartXfer+0x650>
 8004cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfc:	4413      	add	r3, r2
 8004cfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	011a      	lsls	r2, r3, #4
 8004d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d10:	4413      	add	r3, r2
 8004d12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d16:	647b      	str	r3, [r7, #68]	; 0x44
 8004d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d26:	801a      	strh	r2, [r3, #0]
 8004d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d2c:	2b3e      	cmp	r3, #62	; 0x3e
 8004d2e:	d921      	bls.n	8004d74 <USB_EPStartXfer+0x5f8>
 8004d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d104      	bne.n	8004d50 <USB_EPStartXfer+0x5d4>
 8004d46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	029b      	lsls	r3, r3, #10
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	4313      	orrs	r3, r2
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d70:	801a      	strh	r2, [r3, #0]
 8004d72:	e056      	b.n	8004e22 <USB_EPStartXfer+0x6a6>
 8004d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <USB_EPStartXfer+0x616>
 8004d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8e:	801a      	strh	r2, [r3, #0]
 8004d90:	e047      	b.n	8004e22 <USB_EPStartXfer+0x6a6>
 8004d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d004      	beq.n	8004db2 <USB_EPStartXfer+0x636>
 8004da8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dac:	3301      	adds	r3, #1
 8004dae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	029b      	lsls	r3, r3, #10
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dc8:	801a      	strh	r2, [r3, #0]
 8004dca:	e02a      	b.n	8004e22 <USB_EPStartXfer+0x6a6>
 8004dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	785b      	ldrb	r3, [r3, #1]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d122      	bne.n	8004e22 <USB_EPStartXfer+0x6a6>
 8004ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	653b      	str	r3, [r7, #80]	; 0x50
 8004de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	461a      	mov	r2, r3
 8004dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dfc:	4413      	add	r3, r2
 8004dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	011a      	lsls	r2, r3, #4
 8004e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e10:	4413      	add	r3, r2
 8004e12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	891b      	ldrh	r3, [r3, #8]
 8004e2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6959      	ldr	r1, [r3, #20]
 8004e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004e48:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004e4c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004e50:	6800      	ldr	r0, [r0, #0]
 8004e52:	f001 f982 	bl	800615a <USB_WritePMA>
            ep->xfer_buff += len;
 8004e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e66:	441a      	add	r2, r3
 8004e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6a1a      	ldr	r2, [r3, #32]
 8004e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d90f      	bls.n	8004eb0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6a1a      	ldr	r2, [r3, #32]
 8004e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea0:	1ad2      	subs	r2, r2, r3
 8004ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	621a      	str	r2, [r3, #32]
 8004eae:	e00e      	b.n	8004ece <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8004eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d177      	bne.n	8004fda <USB_EPStartXfer+0x85e>
 8004eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	4413      	add	r3, r2
 8004f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	011a      	lsls	r2, r3, #4
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1e:	4413      	add	r3, r2
 8004f20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f24:	637b      	str	r3, [r7, #52]	; 0x34
 8004f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f3a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f3c:	d921      	bls.n	8004f82 <USB_EPStartXfer+0x806>
 8004f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f4c:	f003 031f 	and.w	r3, r3, #31
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <USB_EPStartXfer+0x7e2>
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	029b      	lsls	r3, r3, #10
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7e:	801a      	strh	r2, [r3, #0]
 8004f80:	e050      	b.n	8005024 <USB_EPStartXfer+0x8a8>
 8004f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <USB_EPStartXfer+0x824>
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	801a      	strh	r2, [r3, #0]
 8004f9e:	e041      	b.n	8005024 <USB_EPStartXfer+0x8a8>
 8004fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa4:	085b      	lsrs	r3, r3, #1
 8004fa6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d004      	beq.n	8004fc0 <USB_EPStartXfer+0x844>
 8004fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fba:	3301      	adds	r3, #1
 8004fbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	029b      	lsls	r3, r3, #10
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd6:	801a      	strh	r2, [r3, #0]
 8004fd8:	e024      	b.n	8005024 <USB_EPStartXfer+0x8a8>
 8004fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	785b      	ldrb	r3, [r3, #1]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d11c      	bne.n	8005024 <USB_EPStartXfer+0x8a8>
 8004fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ffe:	4413      	add	r3, r2
 8005000:	643b      	str	r3, [r7, #64]	; 0x40
 8005002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	011a      	lsls	r2, r3, #4
 8005010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005012:	4413      	add	r3, r2
 8005014:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800501a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800501e:	b29a      	uxth	r2, r3
 8005020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005022:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	895b      	ldrh	r3, [r3, #10]
 8005030:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6959      	ldr	r1, [r3, #20]
 8005040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005044:	b29b      	uxth	r3, r3
 8005046:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800504a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800504e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005052:	6800      	ldr	r0, [r0, #0]
 8005054:	f001 f881 	bl	800615a <USB_WritePMA>
 8005058:	e227      	b.n	80054aa <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800505a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800505e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800506a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800506e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800508c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005090:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80050b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	461a      	mov	r2, r3
 80050e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050e6:	4413      	add	r3, r2
 80050e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	011a      	lsls	r2, r3, #4
 80050f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050fa:	4413      	add	r3, r2
 80050fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005100:	65bb      	str	r3, [r7, #88]	; 0x58
 8005102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005106:	b29a      	uxth	r2, r3
 8005108:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800510a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800510c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	891b      	ldrh	r3, [r3, #8]
 8005118:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800511c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6959      	ldr	r1, [r3, #20]
 8005128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512c:	b29b      	uxth	r3, r3
 800512e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005132:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005136:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800513a:	6800      	ldr	r0, [r0, #0]
 800513c:	f001 f80d 	bl	800615a <USB_WritePMA>
 8005140:	e1b3      	b.n	80054aa <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6a1a      	ldr	r2, [r3, #32]
 800514e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005152:	1ad2      	subs	r2, r2, r3
 8005154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800516e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29b      	uxth	r3, r3
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80c6 	beq.w	8005314 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	673b      	str	r3, [r7, #112]	; 0x70
 8005194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d177      	bne.n	8005294 <USB_EPStartXfer+0xb18>
 80051a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80051b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051be:	b29b      	uxth	r3, r3
 80051c0:	461a      	mov	r2, r3
 80051c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051c4:	4413      	add	r3, r2
 80051c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80051c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	011a      	lsls	r2, r3, #4
 80051d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051d8:	4413      	add	r3, r2
 80051da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051de:	667b      	str	r3, [r7, #100]	; 0x64
 80051e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ee:	801a      	strh	r2, [r3, #0]
 80051f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051f4:	2b3e      	cmp	r3, #62	; 0x3e
 80051f6:	d921      	bls.n	800523c <USB_EPStartXfer+0xac0>
 80051f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051fc:	095b      	lsrs	r3, r3, #5
 80051fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005206:	f003 031f 	and.w	r3, r3, #31
 800520a:	2b00      	cmp	r3, #0
 800520c:	d104      	bne.n	8005218 <USB_EPStartXfer+0xa9c>
 800520e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005212:	3b01      	subs	r3, #1
 8005214:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	b29a      	uxth	r2, r3
 800521e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005222:	b29b      	uxth	r3, r3
 8005224:	029b      	lsls	r3, r3, #10
 8005226:	b29b      	uxth	r3, r3
 8005228:	4313      	orrs	r3, r2
 800522a:	b29b      	uxth	r3, r3
 800522c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005234:	b29a      	uxth	r2, r3
 8005236:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	e050      	b.n	80052de <USB_EPStartXfer+0xb62>
 800523c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <USB_EPStartXfer+0xade>
 8005244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	b29b      	uxth	r3, r3
 800524a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005252:	b29a      	uxth	r2, r3
 8005254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	e041      	b.n	80052de <USB_EPStartXfer+0xb62>
 800525a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525e:	085b      	lsrs	r3, r3, #1
 8005260:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d004      	beq.n	800527a <USB_EPStartXfer+0xafe>
 8005270:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005274:	3301      	adds	r3, #1
 8005276:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800527a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	b29a      	uxth	r2, r3
 8005280:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005284:	b29b      	uxth	r3, r3
 8005286:	029b      	lsls	r3, r3, #10
 8005288:	b29b      	uxth	r3, r3
 800528a:	4313      	orrs	r3, r2
 800528c:	b29a      	uxth	r2, r3
 800528e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005290:	801a      	strh	r2, [r3, #0]
 8005292:	e024      	b.n	80052de <USB_EPStartXfer+0xb62>
 8005294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	785b      	ldrb	r3, [r3, #1]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d11c      	bne.n	80052de <USB_EPStartXfer+0xb62>
 80052a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052b8:	4413      	add	r3, r2
 80052ba:	673b      	str	r3, [r7, #112]	; 0x70
 80052bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	011a      	lsls	r2, r3, #4
 80052ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052cc:	4413      	add	r3, r2
 80052ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d8:	b29a      	uxth	r2, r3
 80052da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80052de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	895b      	ldrh	r3, [r3, #10]
 80052ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6959      	ldr	r1, [r3, #20]
 80052fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005304:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005308:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800530c:	6800      	ldr	r0, [r0, #0]
 800530e:	f000 ff24 	bl	800615a <USB_WritePMA>
 8005312:	e0ca      	b.n	80054aa <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	785b      	ldrb	r3, [r3, #1]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d177      	bne.n	8005414 <USB_EPStartXfer+0xc98>
 8005324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005328:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800533e:	b29b      	uxth	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005344:	4413      	add	r3, r2
 8005346:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800534c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	011a      	lsls	r2, r3, #4
 8005356:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005358:	4413      	add	r3, r2
 800535a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800535e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800536a:	b29a      	uxth	r2, r3
 800536c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800536e:	801a      	strh	r2, [r3, #0]
 8005370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005374:	2b3e      	cmp	r3, #62	; 0x3e
 8005376:	d921      	bls.n	80053bc <USB_EPStartXfer+0xc40>
 8005378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <USB_EPStartXfer+0xc1c>
 800538e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005392:	3b01      	subs	r3, #1
 8005394:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	b29a      	uxth	r2, r3
 800539e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	029b      	lsls	r3, r3, #10
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	4313      	orrs	r3, r2
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	e05c      	b.n	8005476 <USB_EPStartXfer+0xcfa>
 80053bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <USB_EPStartXfer+0xc5e>
 80053c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053d6:	801a      	strh	r2, [r3, #0]
 80053d8:	e04d      	b.n	8005476 <USB_EPStartXfer+0xcfa>
 80053da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053de:	085b      	lsrs	r3, r3, #1
 80053e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d004      	beq.n	80053fa <USB_EPStartXfer+0xc7e>
 80053f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053f4:	3301      	adds	r3, #1
 80053f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80053fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29a      	uxth	r2, r3
 8005400:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005404:	b29b      	uxth	r3, r3
 8005406:	029b      	lsls	r3, r3, #10
 8005408:	b29b      	uxth	r3, r3
 800540a:	4313      	orrs	r3, r2
 800540c:	b29a      	uxth	r2, r3
 800540e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005410:	801a      	strh	r2, [r3, #0]
 8005412:	e030      	b.n	8005476 <USB_EPStartXfer+0xcfa>
 8005414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	785b      	ldrb	r3, [r3, #1]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d128      	bne.n	8005476 <USB_EPStartXfer+0xcfa>
 8005424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005428:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005440:	b29b      	uxth	r3, r3
 8005442:	461a      	mov	r2, r3
 8005444:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005448:	4413      	add	r3, r2
 800544a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800544e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	011a      	lsls	r2, r3, #4
 800545c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005460:	4413      	add	r3, r2
 8005462:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005466:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800546a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800546e:	b29a      	uxth	r2, r3
 8005470:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005474:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800547a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	891b      	ldrh	r3, [r3, #8]
 8005482:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800548a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6959      	ldr	r1, [r3, #20]
 8005492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005496:	b29b      	uxth	r3, r3
 8005498:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800549c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80054a0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80054a4:	6800      	ldr	r0, [r0, #0]
 80054a6:	f000 fe58 	bl	800615a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80054aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d0:	817b      	strh	r3, [r7, #10]
 80054d2:	897b      	ldrh	r3, [r7, #10]
 80054d4:	f083 0310 	eor.w	r3, r3, #16
 80054d8:	817b      	strh	r3, [r7, #10]
 80054da:	897b      	ldrh	r3, [r7, #10]
 80054dc:	f083 0320 	eor.w	r3, r3, #32
 80054e0:	817b      	strh	r3, [r7, #10]
 80054e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	441a      	add	r2, r3
 80054fc:	897b      	ldrh	r3, [r7, #10]
 80054fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800550a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550e:	b29b      	uxth	r3, r3
 8005510:	8013      	strh	r3, [r2, #0]
 8005512:	f000 bcde 	b.w	8005ed2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	7b1b      	ldrb	r3, [r3, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	f040 80bb 	bne.w	800569e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800552c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699a      	ldr	r2, [r3, #24]
 8005534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	429a      	cmp	r2, r3
 8005542:	d917      	bls.n	8005574 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699a      	ldr	r2, [r3, #24]
 8005560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005564:	1ad2      	subs	r2, r2, r3
 8005566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	619a      	str	r2, [r3, #24]
 8005572:	e00e      	b.n	8005592 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2200      	movs	r2, #0
 8005590:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055b6:	4413      	add	r3, r2
 80055b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	011a      	lsls	r2, r3, #4
 80055ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055ce:	4413      	add	r3, r2
 80055d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80055d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055ea:	801a      	strh	r2, [r3, #0]
 80055ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f0:	2b3e      	cmp	r3, #62	; 0x3e
 80055f2:	d924      	bls.n	800563e <USB_EPStartXfer+0xec2>
 80055f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f8:	095b      	lsrs	r3, r3, #5
 80055fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	2b00      	cmp	r3, #0
 8005608:	d104      	bne.n	8005614 <USB_EPStartXfer+0xe98>
 800560a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800560e:	3b01      	subs	r3, #1
 8005610:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005614:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29a      	uxth	r2, r3
 800561c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005620:	b29b      	uxth	r3, r3
 8005622:	029b      	lsls	r3, r3, #10
 8005624:	b29b      	uxth	r3, r3
 8005626:	4313      	orrs	r3, r2
 8005628:	b29b      	uxth	r3, r3
 800562a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005632:	b29a      	uxth	r2, r3
 8005634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005638:	801a      	strh	r2, [r3, #0]
 800563a:	f000 bc10 	b.w	8005e5e <USB_EPStartXfer+0x16e2>
 800563e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10c      	bne.n	8005660 <USB_EPStartXfer+0xee4>
 8005646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	b29b      	uxth	r3, r3
 800564e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005656:	b29a      	uxth	r2, r3
 8005658:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800565c:	801a      	strh	r2, [r3, #0]
 800565e:	e3fe      	b.n	8005e5e <USB_EPStartXfer+0x16e2>
 8005660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005664:	085b      	lsrs	r3, r3, #1
 8005666:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800566a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d004      	beq.n	8005680 <USB_EPStartXfer+0xf04>
 8005676:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800567a:	3301      	adds	r3, #1
 800567c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	b29a      	uxth	r2, r3
 8005688:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800568c:	b29b      	uxth	r3, r3
 800568e:	029b      	lsls	r3, r3, #10
 8005690:	b29b      	uxth	r3, r3
 8005692:	4313      	orrs	r3, r2
 8005694:	b29a      	uxth	r2, r3
 8005696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800569a:	801a      	strh	r2, [r3, #0]
 800569c:	e3df      	b.n	8005e5e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800569e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	78db      	ldrb	r3, [r3, #3]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	f040 8218 	bne.w	8005ae0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80056b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f040 809d 	bne.w	80057fc <USB_EPStartXfer+0x1080>
 80056c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056de:	b29b      	uxth	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056e6:	4413      	add	r3, r2
 80056e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	011a      	lsls	r2, r3, #4
 80056fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056fe:	4413      	add	r3, r2
 8005700:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005704:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005708:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005714:	b29a      	uxth	r2, r3
 8005716:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800571a:	801a      	strh	r2, [r3, #0]
 800571c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	2b3e      	cmp	r3, #62	; 0x3e
 800572a:	d92b      	bls.n	8005784 <USB_EPStartXfer+0x1008>
 800572c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	095b      	lsrs	r3, r3, #5
 800573a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800573e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	2b00      	cmp	r3, #0
 8005750:	d104      	bne.n	800575c <USB_EPStartXfer+0xfe0>
 8005752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005756:	3b01      	subs	r3, #1
 8005758:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800575c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29a      	uxth	r2, r3
 8005764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005768:	b29b      	uxth	r3, r3
 800576a:	029b      	lsls	r3, r3, #10
 800576c:	b29b      	uxth	r3, r3
 800576e:	4313      	orrs	r3, r2
 8005770:	b29b      	uxth	r3, r3
 8005772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800577a:	b29a      	uxth	r2, r3
 800577c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005780:	801a      	strh	r2, [r3, #0]
 8005782:	e070      	b.n	8005866 <USB_EPStartXfer+0x10ea>
 8005784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10c      	bne.n	80057ae <USB_EPStartXfer+0x1032>
 8005794:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	b29b      	uxth	r3, r3
 800579c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057aa:	801a      	strh	r2, [r3, #0]
 80057ac:	e05b      	b.n	8005866 <USB_EPStartXfer+0x10ea>
 80057ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	085b      	lsrs	r3, r3, #1
 80057bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d004      	beq.n	80057de <USB_EPStartXfer+0x1062>
 80057d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d8:	3301      	adds	r3, #1
 80057da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	029b      	lsls	r3, r3, #10
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	4313      	orrs	r3, r2
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057f8:	801a      	strh	r2, [r3, #0]
 80057fa:	e034      	b.n	8005866 <USB_EPStartXfer+0x10ea>
 80057fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d12c      	bne.n	8005866 <USB_EPStartXfer+0x10ea>
 800580c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005810:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800581a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005828:	b29b      	uxth	r3, r3
 800582a:	461a      	mov	r2, r3
 800582c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005830:	4413      	add	r3, r2
 8005832:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	011a      	lsls	r2, r3, #4
 8005844:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005848:	4413      	add	r3, r2
 800584a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800584e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	b29a      	uxth	r2, r3
 8005860:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800586a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	785b      	ldrb	r3, [r3, #1]
 8005880:	2b00      	cmp	r3, #0
 8005882:	f040 809d 	bne.w	80059c0 <USB_EPStartXfer+0x1244>
 8005886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800588a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058aa:	4413      	add	r3, r2
 80058ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	011a      	lsls	r2, r3, #4
 80058be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058c2:	4413      	add	r3, r2
 80058c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d8:	b29a      	uxth	r2, r3
 80058da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058de:	801a      	strh	r2, [r3, #0]
 80058e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	2b3e      	cmp	r3, #62	; 0x3e
 80058ee:	d92b      	bls.n	8005948 <USB_EPStartXfer+0x11cc>
 80058f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	095b      	lsrs	r3, r3, #5
 80058fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	2b00      	cmp	r3, #0
 8005914:	d104      	bne.n	8005920 <USB_EPStartXfer+0x11a4>
 8005916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800591a:	3b01      	subs	r3, #1
 800591c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005920:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29a      	uxth	r2, r3
 8005928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800592c:	b29b      	uxth	r3, r3
 800592e:	029b      	lsls	r3, r3, #10
 8005930:	b29b      	uxth	r3, r3
 8005932:	4313      	orrs	r3, r2
 8005934:	b29b      	uxth	r3, r3
 8005936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800593e:	b29a      	uxth	r2, r3
 8005940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005944:	801a      	strh	r2, [r3, #0]
 8005946:	e069      	b.n	8005a1c <USB_EPStartXfer+0x12a0>
 8005948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10c      	bne.n	8005972 <USB_EPStartXfer+0x11f6>
 8005958:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005968:	b29a      	uxth	r2, r3
 800596a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800596e:	801a      	strh	r2, [r3, #0]
 8005970:	e054      	b.n	8005a1c <USB_EPStartXfer+0x12a0>
 8005972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	085b      	lsrs	r3, r3, #1
 8005980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <USB_EPStartXfer+0x1226>
 8005998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800599c:	3301      	adds	r3, #1
 800599e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	029b      	lsls	r3, r3, #10
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	4313      	orrs	r3, r2
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	e02d      	b.n	8005a1c <USB_EPStartXfer+0x12a0>
 80059c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d125      	bne.n	8005a1c <USB_EPStartXfer+0x12a0>
 80059d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059de:	b29b      	uxth	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059e6:	4413      	add	r3, r2
 80059e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80059ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	011a      	lsls	r2, r3, #4
 80059fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059fe:	4413      	add	r3, r2
 8005a00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a1a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 8218 	beq.w	8005e5e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a4e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <USB_EPStartXfer+0x12ea>
 8005a5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10d      	bne.n	8005a82 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f040 81f5 	bne.w	8005e5e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f040 81ee 	bne.w	8005e5e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	8013      	strh	r3, [r2, #0]
 8005ade:	e1be      	b.n	8005e5e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	78db      	ldrb	r3, [r3, #3]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	f040 81b4 	bne.w	8005e5a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699a      	ldr	r2, [r3, #24]
 8005afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d917      	bls.n	8005b3e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	619a      	str	r2, [r3, #24]
 8005b3c:	e00e      	b.n	8005b5c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f040 8085 	bne.w	8005c78 <USB_EPStartXfer+0x14fc>
 8005b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b92:	4413      	add	r3, r2
 8005b94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	011a      	lsls	r2, r3, #4
 8005ba6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005baa:	4413      	add	r3, r2
 8005bac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bc6:	801a      	strh	r2, [r3, #0]
 8005bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8005bce:	d923      	bls.n	8005c18 <USB_EPStartXfer+0x149c>
 8005bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bde:	f003 031f 	and.w	r3, r3, #31
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d104      	bne.n	8005bf0 <USB_EPStartXfer+0x1474>
 8005be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bea:	3b01      	subs	r3, #1
 8005bec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005bf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	029b      	lsls	r3, r3, #10
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	4313      	orrs	r3, r2
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	e060      	b.n	8005cda <USB_EPStartXfer+0x155e>
 8005c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10c      	bne.n	8005c3a <USB_EPStartXfer+0x14be>
 8005c20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	e04f      	b.n	8005cda <USB_EPStartXfer+0x155e>
 8005c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3e:	085b      	lsrs	r3, r3, #1
 8005c40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d004      	beq.n	8005c5a <USB_EPStartXfer+0x14de>
 8005c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c54:	3301      	adds	r3, #1
 8005c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	029b      	lsls	r3, r3, #10
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c74:	801a      	strh	r2, [r3, #0]
 8005c76:	e030      	b.n	8005cda <USB_EPStartXfer+0x155e>
 8005c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d128      	bne.n	8005cda <USB_EPStartXfer+0x155e>
 8005c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cac:	4413      	add	r3, r2
 8005cae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	011a      	lsls	r2, r3, #4
 8005cc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005cd8:	801a      	strh	r2, [r3, #0]
 8005cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f040 8085 	bne.w	8005e04 <USB_EPStartXfer+0x1688>
 8005cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d1e:	4413      	add	r3, r2
 8005d20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	011a      	lsls	r2, r3, #4
 8005d32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d36:	4413      	add	r3, r2
 8005d38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d58:	2b3e      	cmp	r3, #62	; 0x3e
 8005d5a:	d923      	bls.n	8005da4 <USB_EPStartXfer+0x1628>
 8005d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6a:	f003 031f 	and.w	r3, r3, #31
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d104      	bne.n	8005d7c <USB_EPStartXfer+0x1600>
 8005d72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d76:	3b01      	subs	r3, #1
 8005d78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	029b      	lsls	r3, r3, #10
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005da0:	801a      	strh	r2, [r3, #0]
 8005da2:	e05c      	b.n	8005e5e <USB_EPStartXfer+0x16e2>
 8005da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10c      	bne.n	8005dc6 <USB_EPStartXfer+0x164a>
 8005dac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e04b      	b.n	8005e5e <USB_EPStartXfer+0x16e2>
 8005dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d004      	beq.n	8005de6 <USB_EPStartXfer+0x166a>
 8005ddc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005de0:	3301      	adds	r3, #1
 8005de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005de6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	029b      	lsls	r3, r3, #10
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e00:	801a      	strh	r2, [r3, #0]
 8005e02:	e02c      	b.n	8005e5e <USB_EPStartXfer+0x16e2>
 8005e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d124      	bne.n	8005e5e <USB_EPStartXfer+0x16e2>
 8005e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	011a      	lsls	r2, r3, #4
 8005e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e42:	4413      	add	r3, r2
 8005e44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e56:	801a      	strh	r2, [r3, #0]
 8005e58:	e001      	b.n	8005e5e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e03a      	b.n	8005ed4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e84:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005e88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e90:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005e94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e9c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	441a      	add	r2, r3
 8005eba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	785b      	ldrb	r3, [r3, #1]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d020      	beq.n	8005f32 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f06:	81bb      	strh	r3, [r7, #12]
 8005f08:	89bb      	ldrh	r3, [r7, #12]
 8005f0a:	f083 0310 	eor.w	r3, r3, #16
 8005f0e:	81bb      	strh	r3, [r7, #12]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	441a      	add	r2, r3
 8005f1a:	89bb      	ldrh	r3, [r7, #12]
 8005f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	8013      	strh	r3, [r2, #0]
 8005f30:	e01f      	b.n	8005f72 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f48:	81fb      	strh	r3, [r7, #14]
 8005f4a:	89fb      	ldrh	r3, [r7, #14]
 8005f4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f50:	81fb      	strh	r3, [r7, #14]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	441a      	add	r2, r3
 8005f5c:	89fb      	ldrh	r3, [r7, #14]
 8005f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bc80      	pop	{r7}
 8005f7c:	4770      	bx	lr

08005f7e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b087      	sub	sp, #28
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	7b1b      	ldrb	r3, [r3, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f040 809d 	bne.w	80060cc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	785b      	ldrb	r3, [r3, #1]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d04c      	beq.n	8006034 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	823b      	strh	r3, [r7, #16]
 8005fa8:	8a3b      	ldrh	r3, [r7, #16]
 8005faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d01b      	beq.n	8005fea <USB_EPClearStall+0x6c>
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc8:	81fb      	strh	r3, [r7, #14]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	441a      	add	r2, r3
 8005fd4:	89fb      	ldrh	r3, [r7, #14]
 8005fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	78db      	ldrb	r3, [r3, #3]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d06c      	beq.n	80060cc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006008:	81bb      	strh	r3, [r7, #12]
 800600a:	89bb      	ldrh	r3, [r7, #12]
 800600c:	f083 0320 	eor.w	r3, r3, #32
 8006010:	81bb      	strh	r3, [r7, #12]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	441a      	add	r2, r3
 800601c:	89bb      	ldrh	r3, [r7, #12]
 800601e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602e:	b29b      	uxth	r3, r3
 8006030:	8013      	strh	r3, [r2, #0]
 8006032:	e04b      	b.n	80060cc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	82fb      	strh	r3, [r7, #22]
 8006042:	8afb      	ldrh	r3, [r7, #22]
 8006044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01b      	beq.n	8006084 <USB_EPClearStall+0x106>
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800605e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006062:	82bb      	strh	r3, [r7, #20]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	441a      	add	r2, r3
 800606e:	8abb      	ldrh	r3, [r7, #20]
 8006070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800607c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006080:	b29b      	uxth	r3, r3
 8006082:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609a:	827b      	strh	r3, [r7, #18]
 800609c:	8a7b      	ldrh	r3, [r7, #18]
 800609e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060a2:	827b      	strh	r3, [r7, #18]
 80060a4:	8a7b      	ldrh	r3, [r7, #18]
 80060a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060aa:	827b      	strh	r3, [r7, #18]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	441a      	add	r2, r3
 80060b6:	8a7b      	ldrh	r3, [r7, #18]
 80060b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bc80      	pop	{r7}
 80060d6:	4770      	bx	lr

080060d8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d103      	bne.n	80060f2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2280      	movs	r2, #128	; 0x80
 80060ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc80      	pop	{r7}
 80060fc:	4770      	bx	lr

080060fe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	bc80      	pop	{r7}
 8006110:	4770      	bx	lr

08006112 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	bc80      	pop	{r7}
 8006124:	4770      	bx	lr

08006126 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006126:	b480      	push	{r7}
 8006128:	b085      	sub	sp, #20
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006134:	b29b      	uxth	r3, r3
 8006136:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006138:	68fb      	ldr	r3, [r7, #12]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr

08006144 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr

0800615a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800615a:	b480      	push	{r7}
 800615c:	b08b      	sub	sp, #44	; 0x2c
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	4611      	mov	r1, r2
 8006166:	461a      	mov	r2, r3
 8006168:	460b      	mov	r3, r1
 800616a:	80fb      	strh	r3, [r7, #6]
 800616c:	4613      	mov	r3, r2
 800616e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006170:	88bb      	ldrh	r3, [r7, #4]
 8006172:	3301      	adds	r3, #1
 8006174:	085b      	lsrs	r3, r3, #1
 8006176:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006180:	88fb      	ldrh	r3, [r7, #6]
 8006182:	005a      	lsls	r2, r3, #1
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800618c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
 8006192:	e01e      	b.n	80061d2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	3301      	adds	r3, #1
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	021b      	lsls	r3, r3, #8
 80061a2:	b21a      	sxth	r2, r3
 80061a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	b21b      	sxth	r3, r3
 80061ac:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	8a7a      	ldrh	r2, [r7, #18]
 80061b2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	3302      	adds	r3, #2
 80061b8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	3302      	adds	r3, #2
 80061be:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	3301      	adds	r3, #1
 80061c4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	3301      	adds	r3, #1
 80061ca:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	3b01      	subs	r3, #1
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1dd      	bne.n	8006194 <USB_WritePMA+0x3a>
  }
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	372c      	adds	r7, #44	; 0x2c
 80061de:	46bd      	mov	sp, r7
 80061e0:	bc80      	pop	{r7}
 80061e2:	4770      	bx	lr

080061e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b08b      	sub	sp, #44	; 0x2c
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4611      	mov	r1, r2
 80061f0:	461a      	mov	r2, r3
 80061f2:	460b      	mov	r3, r1
 80061f4:	80fb      	strh	r3, [r7, #6]
 80061f6:	4613      	mov	r3, r2
 80061f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80061fa:	88bb      	ldrh	r3, [r7, #4]
 80061fc:	085b      	lsrs	r3, r3, #1
 80061fe:	b29b      	uxth	r3, r3
 8006200:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	005a      	lsls	r2, r3, #1
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006216:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
 800621c:	e01b      	b.n	8006256 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	3302      	adds	r3, #2
 800622a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	b2da      	uxtb	r2, r3
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	3301      	adds	r3, #1
 8006238:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	0a1b      	lsrs	r3, r3, #8
 800623e:	b2da      	uxtb	r2, r3
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	3301      	adds	r3, #1
 8006248:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	3302      	adds	r3, #2
 800624e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	3b01      	subs	r3, #1
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e0      	bne.n	800621e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800625c:	88bb      	ldrh	r3, [r7, #4]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	b29b      	uxth	r3, r3
 800626e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	b2da      	uxtb	r2, r3
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	701a      	strb	r2, [r3, #0]
  }
}
 8006278:	bf00      	nop
 800627a:	372c      	adds	r7, #44	; 0x2c
 800627c:	46bd      	mov	sp, r7
 800627e:	bc80      	pop	{r7}
 8006280:	4770      	bx	lr

08006282 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	460b      	mov	r3, r1
 800628c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	7c1b      	ldrb	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d115      	bne.n	80062c6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800629a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800629e:	2202      	movs	r2, #2
 80062a0:	2181      	movs	r1, #129	; 0x81
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 ff4d 	bl	8008142 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062b2:	2202      	movs	r2, #2
 80062b4:	2101      	movs	r1, #1
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f001 ff43 	bl	8008142 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80062c4:	e012      	b.n	80062ec <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062c6:	2340      	movs	r3, #64	; 0x40
 80062c8:	2202      	movs	r2, #2
 80062ca:	2181      	movs	r1, #129	; 0x81
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f001 ff38 	bl	8008142 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062d8:	2340      	movs	r3, #64	; 0x40
 80062da:	2202      	movs	r2, #2
 80062dc:	2101      	movs	r1, #1
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f001 ff2f 	bl	8008142 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80062ec:	2308      	movs	r3, #8
 80062ee:	2203      	movs	r2, #3
 80062f0:	2182      	movs	r1, #130	; 0x82
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f001 ff25 	bl	8008142 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80062fe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006302:	f002 f845 	bl	8008390 <USBD_static_malloc>
 8006306:	4602      	mov	r2, r0
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d102      	bne.n	800631e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006318:	2301      	movs	r3, #1
 800631a:	73fb      	strb	r3, [r7, #15]
 800631c:	e026      	b.n	800636c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006324:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2200      	movs	r2, #0
 800633c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	7c1b      	ldrb	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d109      	bne.n	800635c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800634e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006352:	2101      	movs	r1, #1
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 ffe5 	bl	8008324 <USBD_LL_PrepareReceive>
 800635a:	e007      	b.n	800636c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006362:	2340      	movs	r3, #64	; 0x40
 8006364:	2101      	movs	r1, #1
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 ffdc 	bl	8008324 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	460b      	mov	r3, r1
 8006380:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006386:	2181      	movs	r1, #129	; 0x81
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f001 ff00 	bl	800818e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006394:	2101      	movs	r1, #1
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 fef9 	bl	800818e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80063a4:	2182      	movs	r1, #130	; 0x82
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f001 fef1 	bl	800818e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00e      	beq.n	80063da <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 ffeb 	bl	80083a8 <USBD_static_free>
    pdev->pClassData = NULL;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80063da:	7bfb      	ldrb	r3, [r7, #15]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800640a:	2b00      	cmp	r3, #0
 800640c:	d039      	beq.n	8006482 <USBD_CDC_Setup+0x9e>
 800640e:	2b20      	cmp	r3, #32
 8006410:	d17f      	bne.n	8006512 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	88db      	ldrh	r3, [r3, #6]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d029      	beq.n	800646e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	b25b      	sxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	da11      	bge.n	8006448 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006430:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	88d2      	ldrh	r2, [r2, #6]
 8006436:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006438:	6939      	ldr	r1, [r7, #16]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	88db      	ldrh	r3, [r3, #6]
 800643e:	461a      	mov	r2, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 fa42 	bl	80078ca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006446:	e06b      	b.n	8006520 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	785a      	ldrb	r2, [r3, #1]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	88db      	ldrh	r3, [r3, #6]
 8006456:	b2da      	uxtb	r2, r3
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800645e:	6939      	ldr	r1, [r7, #16]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	88db      	ldrh	r3, [r3, #6]
 8006464:	461a      	mov	r2, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 fa5d 	bl	8007926 <USBD_CtlPrepareRx>
      break;
 800646c:	e058      	b.n	8006520 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	7850      	ldrb	r0, [r2, #1]
 800647a:	2200      	movs	r2, #0
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	4798      	blx	r3
      break;
 8006480:	e04e      	b.n	8006520 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	2b0b      	cmp	r3, #11
 8006488:	d02e      	beq.n	80064e8 <USBD_CDC_Setup+0x104>
 800648a:	2b0b      	cmp	r3, #11
 800648c:	dc38      	bgt.n	8006500 <USBD_CDC_Setup+0x11c>
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <USBD_CDC_Setup+0xb4>
 8006492:	2b0a      	cmp	r3, #10
 8006494:	d014      	beq.n	80064c0 <USBD_CDC_Setup+0xdc>
 8006496:	e033      	b.n	8006500 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d107      	bne.n	80064b2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80064a2:	f107 030c 	add.w	r3, r7, #12
 80064a6:	2202      	movs	r2, #2
 80064a8:	4619      	mov	r1, r3
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 fa0d 	bl	80078ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064b0:	e02e      	b.n	8006510 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 f99e 	bl	80077f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80064ba:	2302      	movs	r3, #2
 80064bc:	75fb      	strb	r3, [r7, #23]
          break;
 80064be:	e027      	b.n	8006510 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d107      	bne.n	80064da <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80064ca:	f107 030f 	add.w	r3, r7, #15
 80064ce:	2201      	movs	r2, #1
 80064d0:	4619      	mov	r1, r3
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f001 f9f9 	bl	80078ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064d8:	e01a      	b.n	8006510 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 f98a 	bl	80077f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80064e2:	2302      	movs	r3, #2
 80064e4:	75fb      	strb	r3, [r7, #23]
          break;
 80064e6:	e013      	b.n	8006510 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d00d      	beq.n	800650e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f001 f97e 	bl	80077f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80064fa:	2302      	movs	r3, #2
 80064fc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80064fe:	e006      	b.n	800650e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 f977 	bl	80077f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006508:	2302      	movs	r3, #2
 800650a:	75fb      	strb	r3, [r7, #23]
          break;
 800650c:	e000      	b.n	8006510 <USBD_CDC_Setup+0x12c>
          break;
 800650e:	bf00      	nop
      }
      break;
 8006510:	e006      	b.n	8006520 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f001 f96e 	bl	80077f6 <USBD_CtlError>
      ret = USBD_FAIL;
 800651a:	2302      	movs	r3, #2
 800651c:	75fb      	strb	r3, [r7, #23]
      break;
 800651e:	bf00      	nop
  }

  return ret;
 8006520:	7dfb      	ldrb	r3, [r7, #23]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	460b      	mov	r3, r1
 8006534:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006544:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654c:	2b00      	cmp	r3, #0
 800654e:	d03a      	beq.n	80065c6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006550:	78fa      	ldrb	r2, [r7, #3]
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	440b      	add	r3, r1
 800655e:	331c      	adds	r3, #28
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d029      	beq.n	80065ba <USBD_CDC_DataIn+0x90>
 8006566:	78fa      	ldrb	r2, [r7, #3]
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	440b      	add	r3, r1
 8006574:	331c      	adds	r3, #28
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	78f9      	ldrb	r1, [r7, #3]
 800657a:	68b8      	ldr	r0, [r7, #8]
 800657c:	460b      	mov	r3, r1
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	440b      	add	r3, r1
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	4403      	add	r3, r0
 8006586:	3338      	adds	r3, #56	; 0x38
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	fbb2 f1f3 	udiv	r1, r2, r3
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b00      	cmp	r3, #0
 8006596:	d110      	bne.n	80065ba <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006598:	78fa      	ldrb	r2, [r7, #3]
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	440b      	add	r3, r1
 80065a6:	331c      	adds	r3, #28
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065ac:	78f9      	ldrb	r1, [r7, #3]
 80065ae:	2300      	movs	r3, #0
 80065b0:	2200      	movs	r2, #0
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f001 fe93 	bl	80082de <USBD_LL_Transmit>
 80065b8:	e003      	b.n	80065c2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	e000      	b.n	80065c8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80065c6:	2302      	movs	r3, #2
  }
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	460b      	mov	r3, r1
 80065da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 febe 	bl	800836a <USBD_LL_GetRxDataSize>
 80065ee:	4602      	mov	r2, r0
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00d      	beq.n	800661c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006614:	4611      	mov	r1, r2
 8006616:	4798      	blx	r3

    return USBD_OK;
 8006618:	2300      	movs	r3, #0
 800661a:	e000      	b.n	800661e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800661c:	2302      	movs	r3, #2
  }
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006634:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800663c:	2b00      	cmp	r3, #0
 800663e:	d015      	beq.n	800666c <USBD_CDC_EP0_RxReady+0x46>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006646:	2bff      	cmp	r3, #255	; 0xff
 8006648:	d010      	beq.n	800666c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006658:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006660:	b292      	uxth	r2, r2
 8006662:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	22ff      	movs	r2, #255	; 0xff
 8006668:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2243      	movs	r2, #67	; 0x43
 8006684:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006686:	4b03      	ldr	r3, [pc, #12]	; (8006694 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20000094 	.word	0x20000094

08006698 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2243      	movs	r2, #67	; 0x43
 80066a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80066a6:	4b03      	ldr	r3, [pc, #12]	; (80066b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bc80      	pop	{r7}
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	20000050 	.word	0x20000050

080066b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2243      	movs	r2, #67	; 0x43
 80066c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80066c6:	4b03      	ldr	r3, [pc, #12]	; (80066d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	200000d8 	.word	0x200000d8

080066d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	220a      	movs	r2, #10
 80066e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80066e6:	4b03      	ldr	r3, [pc, #12]	; (80066f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	2000000c 	.word	0x2000000c

080066f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006702:	2302      	movs	r3, #2
 8006704:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006718:	7bfb      	ldrb	r3, [r7, #15]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	4613      	mov	r3, r2
 8006730:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006738:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006742:	88fa      	ldrh	r2, [r7, #6]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	bc80      	pop	{r7}
 8006754:	4770      	bx	lr

08006756 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006756:	b480      	push	{r7}
 8006758:	b085      	sub	sp, #20
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006766:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	bc80      	pop	{r7}
 800677a:	4770      	bx	lr

0800677c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d01c      	beq.n	80067d0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800679c:	2b00      	cmp	r3, #0
 800679e:	d115      	bne.n	80067cc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2181      	movs	r1, #129	; 0x81
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f001 fd8b 	bl	80082de <USBD_LL_Transmit>

      return USBD_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	e002      	b.n	80067d2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e000      	b.n	80067d2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80067d0:	2302      	movs	r3, #2
  }
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d017      	beq.n	8006824 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	7c1b      	ldrb	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d109      	bne.n	8006810 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006806:	2101      	movs	r1, #1
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 fd8b 	bl	8008324 <USBD_LL_PrepareReceive>
 800680e:	e007      	b.n	8006820 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006816:	2340      	movs	r3, #64	; 0x40
 8006818:	2101      	movs	r1, #1
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fd82 	bl	8008324 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	e000      	b.n	8006826 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006824:	2302      	movs	r3, #2
  }
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	4613      	mov	r3, r2
 800683a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006842:	2302      	movs	r3, #2
 8006844:	e01a      	b.n	800687c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	79fa      	ldrb	r2, [r7, #7]
 8006872:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f001 fba7 	bl	8007fc8 <USBD_LL_Init>

  return USBD_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d006      	beq.n	80068a6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	73fb      	strb	r3, [r7, #15]
 80068a4:	e001      	b.n	80068aa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80068a6:	2302      	movs	r3, #2
 80068a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr

080068b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b082      	sub	sp, #8
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f001 fc24 	bl	800810c <USBD_LL_Start>

  return USBD_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr

080068e2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	460b      	mov	r3, r1
 80068ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80068ee:	2302      	movs	r3, #2
 80068f0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00c      	beq.n	8006916 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	78fa      	ldrb	r2, [r7, #3]
 8006906:	4611      	mov	r1, r2
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006916:	7bfb      	ldrb	r3, [r7, #15]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	78fa      	ldrb	r2, [r7, #3]
 8006936:	4611      	mov	r1, r2
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	4798      	blx	r3

  return USBD_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	4618      	mov	r0, r3
 800695a:	f000 ff10 	bl	800777e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800696c:	461a      	mov	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800697a:	f003 031f 	and.w	r3, r3, #31
 800697e:	2b02      	cmp	r3, #2
 8006980:	d016      	beq.n	80069b0 <USBD_LL_SetupStage+0x6a>
 8006982:	2b02      	cmp	r3, #2
 8006984:	d81c      	bhi.n	80069c0 <USBD_LL_SetupStage+0x7a>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <USBD_LL_SetupStage+0x4a>
 800698a:	2b01      	cmp	r3, #1
 800698c:	d008      	beq.n	80069a0 <USBD_LL_SetupStage+0x5a>
 800698e:	e017      	b.n	80069c0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fa03 	bl	8006da4 <USBD_StdDevReq>
      break;
 800699e:	e01a      	b.n	80069d6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fa65 	bl	8006e78 <USBD_StdItfReq>
      break;
 80069ae:	e012      	b.n	80069d6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 faa5 	bl	8006f08 <USBD_StdEPReq>
      break;
 80069be:	e00a      	b.n	80069d6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80069c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 fbfc 	bl	80081cc <USBD_LL_StallEP>
      break;
 80069d4:	bf00      	nop
  }

  return USBD_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	460b      	mov	r3, r1
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80069ee:	7afb      	ldrb	r3, [r7, #11]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d14b      	bne.n	8006a8c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80069fa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d134      	bne.n	8006a70 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d919      	bls.n	8006a46 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	1ad2      	subs	r2, r2, r3
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d203      	bcs.n	8006a34 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	e002      	b.n	8006a3a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 ff8f 	bl	8007962 <USBD_CtlContinueRx>
 8006a44:	e038      	b.n	8006ab8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d105      	bne.n	8006a68 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 ff8c 	bl	8007986 <USBD_CtlSendStatus>
 8006a6e:	e023      	b.n	8006ab8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a76:	2b05      	cmp	r3, #5
 8006a78:	d11e      	bne.n	8006ab8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006a82:	2100      	movs	r1, #0
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f001 fba1 	bl	80081cc <USBD_LL_StallEP>
 8006a8a:	e015      	b.n	8006ab8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00d      	beq.n	8006ab4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d108      	bne.n	8006ab4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	7afa      	ldrb	r2, [r7, #11]
 8006aac:	4611      	mov	r1, r2
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	4798      	blx	r3
 8006ab2:	e001      	b.n	8006ab8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e000      	b.n	8006aba <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b086      	sub	sp, #24
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	460b      	mov	r3, r1
 8006acc:	607a      	str	r2, [r7, #4]
 8006ace:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ad0:	7afb      	ldrb	r3, [r7, #11]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d17f      	bne.n	8006bd6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3314      	adds	r3, #20
 8006ada:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d15c      	bne.n	8006ba0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	68da      	ldr	r2, [r3, #12]
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d915      	bls.n	8006b1e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	68da      	ldr	r2, [r3, #12]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	1ad2      	subs	r2, r2, r3
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	6879      	ldr	r1, [r7, #4]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 fef9 	bl	8007902 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b10:	2300      	movs	r3, #0
 8006b12:	2200      	movs	r2, #0
 8006b14:	2100      	movs	r1, #0
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f001 fc04 	bl	8008324 <USBD_LL_PrepareReceive>
 8006b1c:	e04e      	b.n	8006bbc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	6912      	ldr	r2, [r2, #16]
 8006b26:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b2a:	fb01 f202 	mul.w	r2, r1, r2
 8006b2e:	1a9b      	subs	r3, r3, r2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d11c      	bne.n	8006b6e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d316      	bcc.n	8006b6e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d20f      	bcs.n	8006b6e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2100      	movs	r1, #0
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 fed5 	bl	8007902 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b60:	2300      	movs	r3, #0
 8006b62:	2200      	movs	r2, #0
 8006b64:	2100      	movs	r1, #0
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f001 fbdc 	bl	8008324 <USBD_LL_PrepareReceive>
 8006b6c:	e026      	b.n	8006bbc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b80:	2b03      	cmp	r3, #3
 8006b82:	d105      	bne.n	8006b90 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006b90:	2180      	movs	r1, #128	; 0x80
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f001 fb1a 	bl	80081cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 ff07 	bl	80079ac <USBD_CtlReceiveStatus>
 8006b9e:	e00d      	b.n	8006bbc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d004      	beq.n	8006bb4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d103      	bne.n	8006bbc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006bb4:	2180      	movs	r1, #128	; 0x80
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f001 fb08 	bl	80081cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d11d      	bne.n	8006c02 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7ff fe81 	bl	80068ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006bd4:	e015      	b.n	8006c02 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00d      	beq.n	8006bfe <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d108      	bne.n	8006bfe <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	7afa      	ldrb	r2, [r7, #11]
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	4798      	blx	r3
 8006bfc:	e001      	b.n	8006c02 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e000      	b.n	8006c04 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c14:	2340      	movs	r3, #64	; 0x40
 8006c16:	2200      	movs	r2, #0
 8006c18:	2100      	movs	r1, #0
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 fa91 	bl	8008142 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2240      	movs	r2, #64	; 0x40
 8006c2c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c30:	2340      	movs	r3, #64	; 0x40
 8006c32:	2200      	movs	r2, #0
 8006c34:	2180      	movs	r1, #128	; 0x80
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f001 fa83 	bl	8008142 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2240      	movs	r2, #64	; 0x40
 8006c46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d009      	beq.n	8006c84 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	6852      	ldr	r2, [r2, #4]
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	4611      	mov	r1, r2
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	4798      	blx	r3
  }

  return USBD_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	460b      	mov	r3, r1
 8006c98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	78fa      	ldrb	r2, [r7, #3]
 8006c9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr

08006cac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2204      	movs	r2, #4
 8006cc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bc80      	pop	{r7}
 8006cd2:	4770      	bx	lr

08006cd4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d105      	bne.n	8006cf2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr

08006cfe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b082      	sub	sp, #8
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	d10b      	bne.n	8006d28 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr

08006d4a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	460b      	mov	r3, r1
 8006d54:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr

08006d62 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr

08006d76 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	6852      	ldr	r2, [r2, #4]
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	4611      	mov	r1, r2
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3

  return USBD_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dba:	2b40      	cmp	r3, #64	; 0x40
 8006dbc:	d005      	beq.n	8006dca <USBD_StdDevReq+0x26>
 8006dbe:	2b40      	cmp	r3, #64	; 0x40
 8006dc0:	d84f      	bhi.n	8006e62 <USBD_StdDevReq+0xbe>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d009      	beq.n	8006dda <USBD_StdDevReq+0x36>
 8006dc6:	2b20      	cmp	r3, #32
 8006dc8:	d14b      	bne.n	8006e62 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	4798      	blx	r3
      break;
 8006dd8:	e048      	b.n	8006e6c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	785b      	ldrb	r3, [r3, #1]
 8006dde:	2b09      	cmp	r3, #9
 8006de0:	d839      	bhi.n	8006e56 <USBD_StdDevReq+0xb2>
 8006de2:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <USBD_StdDevReq+0x44>)
 8006de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de8:	08006e39 	.word	0x08006e39
 8006dec:	08006e4d 	.word	0x08006e4d
 8006df0:	08006e57 	.word	0x08006e57
 8006df4:	08006e43 	.word	0x08006e43
 8006df8:	08006e57 	.word	0x08006e57
 8006dfc:	08006e1b 	.word	0x08006e1b
 8006e00:	08006e11 	.word	0x08006e11
 8006e04:	08006e57 	.word	0x08006e57
 8006e08:	08006e2f 	.word	0x08006e2f
 8006e0c:	08006e25 	.word	0x08006e25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f9dc 	bl	80071d0 <USBD_GetDescriptor>
          break;
 8006e18:	e022      	b.n	8006e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fb3f 	bl	80074a0 <USBD_SetAddress>
          break;
 8006e22:	e01d      	b.n	8006e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fb7e 	bl	8007528 <USBD_SetConfig>
          break;
 8006e2c:	e018      	b.n	8006e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fc07 	bl	8007644 <USBD_GetConfig>
          break;
 8006e36:	e013      	b.n	8006e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fc37 	bl	80076ae <USBD_GetStatus>
          break;
 8006e40:	e00e      	b.n	8006e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fc65 	bl	8007714 <USBD_SetFeature>
          break;
 8006e4a:	e009      	b.n	8006e60 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fc74 	bl	800773c <USBD_ClrFeature>
          break;
 8006e54:	e004      	b.n	8006e60 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fccc 	bl	80077f6 <USBD_CtlError>
          break;
 8006e5e:	bf00      	nop
      }
      break;
 8006e60:	e004      	b.n	8006e6c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fcc6 	bl	80077f6 <USBD_CtlError>
      break;
 8006e6a:	bf00      	nop
  }

  return ret;
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop

08006e78 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e8e:	2b40      	cmp	r3, #64	; 0x40
 8006e90:	d005      	beq.n	8006e9e <USBD_StdItfReq+0x26>
 8006e92:	2b40      	cmp	r3, #64	; 0x40
 8006e94:	d82e      	bhi.n	8006ef4 <USBD_StdItfReq+0x7c>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <USBD_StdItfReq+0x26>
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d12a      	bne.n	8006ef4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d81d      	bhi.n	8006ee6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	889b      	ldrh	r3, [r3, #4]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d813      	bhi.n	8006edc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	88db      	ldrh	r3, [r3, #6]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d110      	bne.n	8006ef0 <USBD_StdItfReq+0x78>
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10d      	bne.n	8006ef0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fd56 	bl	8007986 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006eda:	e009      	b.n	8006ef0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fc89 	bl	80077f6 <USBD_CtlError>
          break;
 8006ee4:	e004      	b.n	8006ef0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fc84 	bl	80077f6 <USBD_CtlError>
          break;
 8006eee:	e000      	b.n	8006ef2 <USBD_StdItfReq+0x7a>
          break;
 8006ef0:	bf00      	nop
      }
      break;
 8006ef2:	e004      	b.n	8006efe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fc7d 	bl	80077f6 <USBD_CtlError>
      break;
 8006efc:	bf00      	nop
  }

  return USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	889b      	ldrh	r3, [r3, #4]
 8006f1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d007      	beq.n	8006f38 <USBD_StdEPReq+0x30>
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	f200 8146 	bhi.w	80071ba <USBD_StdEPReq+0x2b2>
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <USBD_StdEPReq+0x40>
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	f040 8141 	bne.w	80071ba <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	4798      	blx	r3
      break;
 8006f46:	e13d      	b.n	80071c4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	d10a      	bne.n	8006f6a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
 8006f62:	4603      	mov	r3, r0
 8006f64:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	e12d      	b.n	80071c6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	785b      	ldrb	r3, [r3, #1]
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d007      	beq.n	8006f82 <USBD_StdEPReq+0x7a>
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	f300 811b 	bgt.w	80071ae <USBD_StdEPReq+0x2a6>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d072      	beq.n	8007062 <USBD_StdEPReq+0x15a>
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d03a      	beq.n	8006ff6 <USBD_StdEPReq+0xee>
 8006f80:	e115      	b.n	80071ae <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d002      	beq.n	8006f92 <USBD_StdEPReq+0x8a>
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d015      	beq.n	8006fbc <USBD_StdEPReq+0xb4>
 8006f90:	e02b      	b.n	8006fea <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00c      	beq.n	8006fb2 <USBD_StdEPReq+0xaa>
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	2b80      	cmp	r3, #128	; 0x80
 8006f9c:	d009      	beq.n	8006fb2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 f912 	bl	80081cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006fa8:	2180      	movs	r1, #128	; 0x80
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f001 f90e 	bl	80081cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fb0:	e020      	b.n	8006ff4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fc1e 	bl	80077f6 <USBD_CtlError>
              break;
 8006fba:	e01b      	b.n	8006ff4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	885b      	ldrh	r3, [r3, #2]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10e      	bne.n	8006fe2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00b      	beq.n	8006fe2 <USBD_StdEPReq+0xda>
 8006fca:	7bbb      	ldrb	r3, [r7, #14]
 8006fcc:	2b80      	cmp	r3, #128	; 0x80
 8006fce:	d008      	beq.n	8006fe2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	88db      	ldrh	r3, [r3, #6]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d104      	bne.n	8006fe2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 f8f5 	bl	80081cc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fccf 	bl	8007986 <USBD_CtlSendStatus>

              break;
 8006fe8:	e004      	b.n	8006ff4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fc02 	bl	80077f6 <USBD_CtlError>
              break;
 8006ff2:	bf00      	nop
          }
          break;
 8006ff4:	e0e0      	b.n	80071b8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d002      	beq.n	8007006 <USBD_StdEPReq+0xfe>
 8007000:	2b03      	cmp	r3, #3
 8007002:	d015      	beq.n	8007030 <USBD_StdEPReq+0x128>
 8007004:	e026      	b.n	8007054 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00c      	beq.n	8007026 <USBD_StdEPReq+0x11e>
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	2b80      	cmp	r3, #128	; 0x80
 8007010:	d009      	beq.n	8007026 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007012:	7bbb      	ldrb	r3, [r7, #14]
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 f8d8 	bl	80081cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800701c:	2180      	movs	r1, #128	; 0x80
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 f8d4 	bl	80081cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007024:	e01c      	b.n	8007060 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fbe4 	bl	80077f6 <USBD_CtlError>
              break;
 800702e:	e017      	b.n	8007060 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	885b      	ldrh	r3, [r3, #2]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d112      	bne.n	800705e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007038:	7bbb      	ldrb	r3, [r7, #14]
 800703a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f001 f8df 	bl	800820a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fc9a 	bl	8007986 <USBD_CtlSendStatus>
              }
              break;
 8007052:	e004      	b.n	800705e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fbcd 	bl	80077f6 <USBD_CtlError>
              break;
 800705c:	e000      	b.n	8007060 <USBD_StdEPReq+0x158>
              break;
 800705e:	bf00      	nop
          }
          break;
 8007060:	e0aa      	b.n	80071b8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007068:	2b02      	cmp	r3, #2
 800706a:	d002      	beq.n	8007072 <USBD_StdEPReq+0x16a>
 800706c:	2b03      	cmp	r3, #3
 800706e:	d032      	beq.n	80070d6 <USBD_StdEPReq+0x1ce>
 8007070:	e097      	b.n	80071a2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d007      	beq.n	8007088 <USBD_StdEPReq+0x180>
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	2b80      	cmp	r3, #128	; 0x80
 800707c:	d004      	beq.n	8007088 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fbb8 	bl	80077f6 <USBD_CtlError>
                break;
 8007086:	e091      	b.n	80071ac <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800708c:	2b00      	cmp	r3, #0
 800708e:	da0b      	bge.n	80070a8 <USBD_StdEPReq+0x1a0>
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	3310      	adds	r3, #16
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	4413      	add	r3, r2
 80070a4:	3304      	adds	r3, #4
 80070a6:	e00b      	b.n	80070c0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070ae:	4613      	mov	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	4413      	add	r3, r2
 80070be:	3304      	adds	r3, #4
 80070c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2202      	movs	r2, #2
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fbfb 	bl	80078ca <USBD_CtlSendData>
              break;
 80070d4:	e06a      	b.n	80071ac <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80070d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	da11      	bge.n	8007102 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	f003 020f 	and.w	r2, r3, #15
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	440b      	add	r3, r1
 80070f0:	3318      	adds	r3, #24
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d117      	bne.n	8007128 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fb7b 	bl	80077f6 <USBD_CtlError>
                  break;
 8007100:	e054      	b.n	80071ac <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	f003 020f 	and.w	r2, r3, #15
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d104      	bne.n	8007128 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fb68 	bl	80077f6 <USBD_CtlError>
                  break;
 8007126:	e041      	b.n	80071ac <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800712c:	2b00      	cmp	r3, #0
 800712e:	da0b      	bge.n	8007148 <USBD_StdEPReq+0x240>
 8007130:	7bbb      	ldrb	r3, [r7, #14]
 8007132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	3310      	adds	r3, #16
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	4413      	add	r3, r2
 8007144:	3304      	adds	r3, #4
 8007146:	e00b      	b.n	8007160 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007148:	7bbb      	ldrb	r3, [r7, #14]
 800714a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800714e:	4613      	mov	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	4413      	add	r3, r2
 800715e:	3304      	adds	r3, #4
 8007160:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <USBD_StdEPReq+0x266>
 8007168:	7bbb      	ldrb	r3, [r7, #14]
 800716a:	2b80      	cmp	r3, #128	; 0x80
 800716c:	d103      	bne.n	8007176 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	e00e      	b.n	8007194 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007176:	7bbb      	ldrb	r3, [r7, #14]
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 f864 	bl	8008248 <USBD_LL_IsStallEP>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2201      	movs	r2, #1
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	e002      	b.n	8007194 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2202      	movs	r2, #2
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fb95 	bl	80078ca <USBD_CtlSendData>
              break;
 80071a0:	e004      	b.n	80071ac <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fb26 	bl	80077f6 <USBD_CtlError>
              break;
 80071aa:	bf00      	nop
          }
          break;
 80071ac:	e004      	b.n	80071b8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fb20 	bl	80077f6 <USBD_CtlError>
          break;
 80071b6:	bf00      	nop
      }
      break;
 80071b8:	e004      	b.n	80071c4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fb1a 	bl	80077f6 <USBD_CtlError>
      break;
 80071c2:	bf00      	nop
  }

  return ret;
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	885b      	ldrh	r3, [r3, #2]
 80071ea:	0a1b      	lsrs	r3, r3, #8
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	2b06      	cmp	r3, #6
 80071f2:	f200 8128 	bhi.w	8007446 <USBD_GetDescriptor+0x276>
 80071f6:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <USBD_GetDescriptor+0x2c>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	08007219 	.word	0x08007219
 8007200:	08007231 	.word	0x08007231
 8007204:	08007271 	.word	0x08007271
 8007208:	08007447 	.word	0x08007447
 800720c:	08007447 	.word	0x08007447
 8007210:	080073e7 	.word	0x080073e7
 8007214:	08007413 	.word	0x08007413
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	7c12      	ldrb	r2, [r2, #16]
 8007224:	f107 0108 	add.w	r1, r7, #8
 8007228:	4610      	mov	r0, r2
 800722a:	4798      	blx	r3
 800722c:	60f8      	str	r0, [r7, #12]
      break;
 800722e:	e112      	b.n	8007456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	7c1b      	ldrb	r3, [r3, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10d      	bne.n	8007254 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	f107 0208 	add.w	r2, r7, #8
 8007244:	4610      	mov	r0, r2
 8007246:	4798      	blx	r3
 8007248:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3301      	adds	r3, #1
 800724e:	2202      	movs	r2, #2
 8007250:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007252:	e100      	b.n	8007456 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	f107 0208 	add.w	r2, r7, #8
 8007260:	4610      	mov	r0, r2
 8007262:	4798      	blx	r3
 8007264:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3301      	adds	r3, #1
 800726a:	2202      	movs	r2, #2
 800726c:	701a      	strb	r2, [r3, #0]
      break;
 800726e:	e0f2      	b.n	8007456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	885b      	ldrh	r3, [r3, #2]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b05      	cmp	r3, #5
 8007278:	f200 80ac 	bhi.w	80073d4 <USBD_GetDescriptor+0x204>
 800727c:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <USBD_GetDescriptor+0xb4>)
 800727e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007282:	bf00      	nop
 8007284:	0800729d 	.word	0x0800729d
 8007288:	080072d1 	.word	0x080072d1
 800728c:	08007305 	.word	0x08007305
 8007290:	08007339 	.word	0x08007339
 8007294:	0800736d 	.word	0x0800736d
 8007298:	080073a1 	.word	0x080073a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	7c12      	ldrb	r2, [r2, #16]
 80072b4:	f107 0108 	add.w	r1, r7, #8
 80072b8:	4610      	mov	r0, r2
 80072ba:	4798      	blx	r3
 80072bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072be:	e091      	b.n	80073e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa97 	bl	80077f6 <USBD_CtlError>
            err++;
 80072c8:	7afb      	ldrb	r3, [r7, #11]
 80072ca:	3301      	adds	r3, #1
 80072cc:	72fb      	strb	r3, [r7, #11]
          break;
 80072ce:	e089      	b.n	80073e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	7c12      	ldrb	r2, [r2, #16]
 80072e8:	f107 0108 	add.w	r1, r7, #8
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
 80072f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072f2:	e077      	b.n	80073e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fa7d 	bl	80077f6 <USBD_CtlError>
            err++;
 80072fc:	7afb      	ldrb	r3, [r7, #11]
 80072fe:	3301      	adds	r3, #1
 8007300:	72fb      	strb	r3, [r7, #11]
          break;
 8007302:	e06f      	b.n	80073e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00b      	beq.n	8007328 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	7c12      	ldrb	r2, [r2, #16]
 800731c:	f107 0108 	add.w	r1, r7, #8
 8007320:	4610      	mov	r0, r2
 8007322:	4798      	blx	r3
 8007324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007326:	e05d      	b.n	80073e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fa63 	bl	80077f6 <USBD_CtlError>
            err++;
 8007330:	7afb      	ldrb	r3, [r7, #11]
 8007332:	3301      	adds	r3, #1
 8007334:	72fb      	strb	r3, [r7, #11]
          break;
 8007336:	e055      	b.n	80073e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00b      	beq.n	800735c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	7c12      	ldrb	r2, [r2, #16]
 8007350:	f107 0108 	add.w	r1, r7, #8
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
 8007358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800735a:	e043      	b.n	80073e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fa49 	bl	80077f6 <USBD_CtlError>
            err++;
 8007364:	7afb      	ldrb	r3, [r7, #11]
 8007366:	3301      	adds	r3, #1
 8007368:	72fb      	strb	r3, [r7, #11]
          break;
 800736a:	e03b      	b.n	80073e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00b      	beq.n	8007390 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	7c12      	ldrb	r2, [r2, #16]
 8007384:	f107 0108 	add.w	r1, r7, #8
 8007388:	4610      	mov	r0, r2
 800738a:	4798      	blx	r3
 800738c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800738e:	e029      	b.n	80073e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fa2f 	bl	80077f6 <USBD_CtlError>
            err++;
 8007398:	7afb      	ldrb	r3, [r7, #11]
 800739a:	3301      	adds	r3, #1
 800739c:	72fb      	strb	r3, [r7, #11]
          break;
 800739e:	e021      	b.n	80073e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00b      	beq.n	80073c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	7c12      	ldrb	r2, [r2, #16]
 80073b8:	f107 0108 	add.w	r1, r7, #8
 80073bc:	4610      	mov	r0, r2
 80073be:	4798      	blx	r3
 80073c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073c2:	e00f      	b.n	80073e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fa15 	bl	80077f6 <USBD_CtlError>
            err++;
 80073cc:	7afb      	ldrb	r3, [r7, #11]
 80073ce:	3301      	adds	r3, #1
 80073d0:	72fb      	strb	r3, [r7, #11]
          break;
 80073d2:	e007      	b.n	80073e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fa0d 	bl	80077f6 <USBD_CtlError>
          err++;
 80073dc:	7afb      	ldrb	r3, [r7, #11]
 80073de:	3301      	adds	r3, #1
 80073e0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80073e2:	e038      	b.n	8007456 <USBD_GetDescriptor+0x286>
 80073e4:	e037      	b.n	8007456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	7c1b      	ldrb	r3, [r3, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d109      	bne.n	8007402 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f6:	f107 0208 	add.w	r2, r7, #8
 80073fa:	4610      	mov	r0, r2
 80073fc:	4798      	blx	r3
 80073fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007400:	e029      	b.n	8007456 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f9f6 	bl	80077f6 <USBD_CtlError>
        err++;
 800740a:	7afb      	ldrb	r3, [r7, #11]
 800740c:	3301      	adds	r3, #1
 800740e:	72fb      	strb	r3, [r7, #11]
      break;
 8007410:	e021      	b.n	8007456 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	7c1b      	ldrb	r3, [r3, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10d      	bne.n	8007436 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007422:	f107 0208 	add.w	r2, r7, #8
 8007426:	4610      	mov	r0, r2
 8007428:	4798      	blx	r3
 800742a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3301      	adds	r3, #1
 8007430:	2207      	movs	r2, #7
 8007432:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007434:	e00f      	b.n	8007456 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f9dc 	bl	80077f6 <USBD_CtlError>
        err++;
 800743e:	7afb      	ldrb	r3, [r7, #11]
 8007440:	3301      	adds	r3, #1
 8007442:	72fb      	strb	r3, [r7, #11]
      break;
 8007444:	e007      	b.n	8007456 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f9d4 	bl	80077f6 <USBD_CtlError>
      err++;
 800744e:	7afb      	ldrb	r3, [r7, #11]
 8007450:	3301      	adds	r3, #1
 8007452:	72fb      	strb	r3, [r7, #11]
      break;
 8007454:	bf00      	nop
  }

  if (err != 0U)
 8007456:	7afb      	ldrb	r3, [r7, #11]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d11c      	bne.n	8007496 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800745c:	893b      	ldrh	r3, [r7, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d011      	beq.n	8007486 <USBD_GetDescriptor+0x2b6>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	88db      	ldrh	r3, [r3, #6]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00d      	beq.n	8007486 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	88da      	ldrh	r2, [r3, #6]
 800746e:	893b      	ldrh	r3, [r7, #8]
 8007470:	4293      	cmp	r3, r2
 8007472:	bf28      	it	cs
 8007474:	4613      	movcs	r3, r2
 8007476:	b29b      	uxth	r3, r3
 8007478:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800747a:	893b      	ldrh	r3, [r7, #8]
 800747c:	461a      	mov	r2, r3
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fa22 	bl	80078ca <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	88db      	ldrh	r3, [r3, #6]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d104      	bne.n	8007498 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa79 	bl	8007986 <USBD_CtlSendStatus>
 8007494:	e000      	b.n	8007498 <USBD_GetDescriptor+0x2c8>
    return;
 8007496:	bf00      	nop
    }
  }
}
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop

080074a0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	889b      	ldrh	r3, [r3, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d130      	bne.n	8007514 <USBD_SetAddress+0x74>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	88db      	ldrh	r3, [r3, #6]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d12c      	bne.n	8007514 <USBD_SetAddress+0x74>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	885b      	ldrh	r3, [r3, #2]
 80074be:	2b7f      	cmp	r3, #127	; 0x7f
 80074c0:	d828      	bhi.n	8007514 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	885b      	ldrh	r3, [r3, #2]
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d104      	bne.n	80074e2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f98b 	bl	80077f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074e0:	e01d      	b.n	800751e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	7bfa      	ldrb	r2, [r7, #15]
 80074e6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fed6 	bl	80082a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fa46 	bl	8007986 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d004      	beq.n	800750a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2202      	movs	r2, #2
 8007504:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007508:	e009      	b.n	800751e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007512:	e004      	b.n	800751e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f96d 	bl	80077f6 <USBD_CtlError>
  }
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
	...

08007528 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	885b      	ldrh	r3, [r3, #2]
 8007536:	b2da      	uxtb	r2, r3
 8007538:	4b41      	ldr	r3, [pc, #260]	; (8007640 <USBD_SetConfig+0x118>)
 800753a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800753c:	4b40      	ldr	r3, [pc, #256]	; (8007640 <USBD_SetConfig+0x118>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d904      	bls.n	800754e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f955 	bl	80077f6 <USBD_CtlError>
 800754c:	e075      	b.n	800763a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007554:	2b02      	cmp	r3, #2
 8007556:	d002      	beq.n	800755e <USBD_SetConfig+0x36>
 8007558:	2b03      	cmp	r3, #3
 800755a:	d023      	beq.n	80075a4 <USBD_SetConfig+0x7c>
 800755c:	e062      	b.n	8007624 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800755e:	4b38      	ldr	r3, [pc, #224]	; (8007640 <USBD_SetConfig+0x118>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d01a      	beq.n	800759c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007566:	4b36      	ldr	r3, [pc, #216]	; (8007640 <USBD_SetConfig+0x118>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2203      	movs	r2, #3
 8007574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007578:	4b31      	ldr	r3, [pc, #196]	; (8007640 <USBD_SetConfig+0x118>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7ff f9af 	bl	80068e2 <USBD_SetClassConfig>
 8007584:	4603      	mov	r3, r0
 8007586:	2b02      	cmp	r3, #2
 8007588:	d104      	bne.n	8007594 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f932 	bl	80077f6 <USBD_CtlError>
            return;
 8007592:	e052      	b.n	800763a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f9f6 	bl	8007986 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800759a:	e04e      	b.n	800763a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f9f2 	bl	8007986 <USBD_CtlSendStatus>
        break;
 80075a2:	e04a      	b.n	800763a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80075a4:	4b26      	ldr	r3, [pc, #152]	; (8007640 <USBD_SetConfig+0x118>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d112      	bne.n	80075d2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80075b4:	4b22      	ldr	r3, [pc, #136]	; (8007640 <USBD_SetConfig+0x118>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80075be:	4b20      	ldr	r3, [pc, #128]	; (8007640 <USBD_SetConfig+0x118>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff f9ab 	bl	8006920 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f9db 	bl	8007986 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80075d0:	e033      	b.n	800763a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80075d2:	4b1b      	ldr	r3, [pc, #108]	; (8007640 <USBD_SetConfig+0x118>)
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d01d      	beq.n	800761c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff f999 	bl	8006920 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80075ee:	4b14      	ldr	r3, [pc, #80]	; (8007640 <USBD_SetConfig+0x118>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075f8:	4b11      	ldr	r3, [pc, #68]	; (8007640 <USBD_SetConfig+0x118>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff f96f 	bl	80068e2 <USBD_SetClassConfig>
 8007604:	4603      	mov	r3, r0
 8007606:	2b02      	cmp	r3, #2
 8007608:	d104      	bne.n	8007614 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f8f2 	bl	80077f6 <USBD_CtlError>
            return;
 8007612:	e012      	b.n	800763a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f9b6 	bl	8007986 <USBD_CtlSendStatus>
        break;
 800761a:	e00e      	b.n	800763a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f9b2 	bl	8007986 <USBD_CtlSendStatus>
        break;
 8007622:	e00a      	b.n	800763a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f8e5 	bl	80077f6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800762c:	4b04      	ldr	r3, [pc, #16]	; (8007640 <USBD_SetConfig+0x118>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff f974 	bl	8006920 <USBD_ClrClassConfig>
        break;
 8007638:	bf00      	nop
    }
  }
}
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	200002a0 	.word	0x200002a0

08007644 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	88db      	ldrh	r3, [r3, #6]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d004      	beq.n	8007660 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f8cc 	bl	80077f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800765e:	e022      	b.n	80076a6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007666:	2b02      	cmp	r3, #2
 8007668:	dc02      	bgt.n	8007670 <USBD_GetConfig+0x2c>
 800766a:	2b00      	cmp	r3, #0
 800766c:	dc03      	bgt.n	8007676 <USBD_GetConfig+0x32>
 800766e:	e015      	b.n	800769c <USBD_GetConfig+0x58>
 8007670:	2b03      	cmp	r3, #3
 8007672:	d00b      	beq.n	800768c <USBD_GetConfig+0x48>
 8007674:	e012      	b.n	800769c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3308      	adds	r3, #8
 8007680:	2201      	movs	r2, #1
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f920 	bl	80078ca <USBD_CtlSendData>
        break;
 800768a:	e00c      	b.n	80076a6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3304      	adds	r3, #4
 8007690:	2201      	movs	r2, #1
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f918 	bl	80078ca <USBD_CtlSendData>
        break;
 800769a:	e004      	b.n	80076a6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f8a9 	bl	80077f6 <USBD_CtlError>
        break;
 80076a4:	bf00      	nop
}
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b082      	sub	sp, #8
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076be:	3b01      	subs	r3, #1
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d81e      	bhi.n	8007702 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	88db      	ldrh	r3, [r3, #6]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d004      	beq.n	80076d6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f891 	bl	80077f6 <USBD_CtlError>
        break;
 80076d4:	e01a      	b.n	800770c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f043 0202 	orr.w	r2, r3, #2
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	330c      	adds	r3, #12
 80076f6:	2202      	movs	r2, #2
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f8e5 	bl	80078ca <USBD_CtlSendData>
      break;
 8007700:	e004      	b.n	800770c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f876 	bl	80077f6 <USBD_CtlError>
      break;
 800770a:	bf00      	nop
  }
}
 800770c:	bf00      	nop
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	885b      	ldrh	r3, [r3, #2]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d106      	bne.n	8007734 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f929 	bl	8007986 <USBD_CtlSendStatus>
  }
}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774c:	3b01      	subs	r3, #1
 800774e:	2b02      	cmp	r3, #2
 8007750:	d80b      	bhi.n	800776a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	885b      	ldrh	r3, [r3, #2]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d10c      	bne.n	8007774 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f90f 	bl	8007986 <USBD_CtlSendStatus>
      }
      break;
 8007768:	e004      	b.n	8007774 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f842 	bl	80077f6 <USBD_CtlError>
      break;
 8007772:	e000      	b.n	8007776 <USBD_ClrFeature+0x3a>
      break;
 8007774:	bf00      	nop
  }
}
 8007776:	bf00      	nop
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	781a      	ldrb	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	785a      	ldrb	r2, [r3, #1]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	3302      	adds	r3, #2
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	b29a      	uxth	r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	3303      	adds	r3, #3
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	021b      	lsls	r3, r3, #8
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	4413      	add	r3, r2
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	3304      	adds	r3, #4
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	3305      	adds	r3, #5
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	021b      	lsls	r3, r3, #8
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	4413      	add	r3, r2
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	3306      	adds	r3, #6
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	3307      	adds	r3, #7
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	021b      	lsls	r3, r3, #8
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	4413      	add	r3, r2
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	80da      	strh	r2, [r3, #6]

}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr

080077f6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007800:	2180      	movs	r1, #128	; 0x80
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fce2 	bl	80081cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007808:	2100      	movs	r1, #0
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fcde 	bl	80081cc <USBD_LL_StallEP>
}
 8007810:	bf00      	nop
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b086      	sub	sp, #24
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d032      	beq.n	8007894 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 f834 	bl	800789c <USBD_GetLen>
 8007834:	4603      	mov	r3, r0
 8007836:	3301      	adds	r3, #1
 8007838:	b29b      	uxth	r3, r3
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	b29a      	uxth	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	75fa      	strb	r2, [r7, #23]
 8007848:	461a      	mov	r2, r3
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	4413      	add	r3, r2
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	7812      	ldrb	r2, [r2, #0]
 8007852:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007854:	7dfb      	ldrb	r3, [r7, #23]
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	75fa      	strb	r2, [r7, #23]
 800785a:	461a      	mov	r2, r3
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4413      	add	r3, r2
 8007860:	2203      	movs	r2, #3
 8007862:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007864:	e012      	b.n	800788c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	60fa      	str	r2, [r7, #12]
 800786c:	7dfa      	ldrb	r2, [r7, #23]
 800786e:	1c51      	adds	r1, r2, #1
 8007870:	75f9      	strb	r1, [r7, #23]
 8007872:	4611      	mov	r1, r2
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	440a      	add	r2, r1
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	75fa      	strb	r2, [r7, #23]
 8007882:	461a      	mov	r2, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4413      	add	r3, r2
 8007888:	2200      	movs	r2, #0
 800788a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1e8      	bne.n	8007866 <USBD_GetString+0x4e>
    }
  }
}
 8007894:	bf00      	nop
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80078a8:	e005      	b.n	80078b6 <USBD_GetLen+0x1a>
  {
    len++;
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	3301      	adds	r3, #1
 80078ae:	73fb      	strb	r3, [r7, #15]
    buf++;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	3301      	adds	r3, #1
 80078b4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1f5      	bne.n	80078aa <USBD_GetLen+0xe>
  }

  return len;
 80078be:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bc80      	pop	{r7}
 80078c8:	4770      	bx	lr

080078ca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	60f8      	str	r0, [r7, #12]
 80078d2:	60b9      	str	r1, [r7, #8]
 80078d4:	4613      	mov	r3, r2
 80078d6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2202      	movs	r2, #2
 80078dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80078e0:	88fa      	ldrh	r2, [r7, #6]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078ec:	88fb      	ldrh	r3, [r7, #6]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	2100      	movs	r1, #0
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 fcf3 	bl	80082de <USBD_LL_Transmit>

  return USBD_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	4613      	mov	r3, r2
 800790e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007910:	88fb      	ldrh	r3, [r7, #6]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	2100      	movs	r1, #0
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 fce1 	bl	80082de <USBD_LL_Transmit>

  return USBD_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	4613      	mov	r3, r2
 8007932:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2203      	movs	r2, #3
 8007938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800793c:	88fa      	ldrh	r2, [r7, #6]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007944:	88fa      	ldrh	r2, [r7, #6]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800794c:	88fb      	ldrh	r3, [r7, #6]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	2100      	movs	r1, #0
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 fce6 	bl	8008324 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	60f8      	str	r0, [r7, #12]
 800796a:	60b9      	str	r1, [r7, #8]
 800796c:	4613      	mov	r3, r2
 800796e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007970:	88fb      	ldrh	r3, [r7, #6]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	2100      	movs	r1, #0
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 fcd4 	bl	8008324 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2204      	movs	r2, #4
 8007992:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007996:	2300      	movs	r3, #0
 8007998:	2200      	movs	r2, #0
 800799a:	2100      	movs	r1, #0
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fc9e 	bl	80082de <USBD_LL_Transmit>

  return USBD_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2205      	movs	r2, #5
 80079b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079bc:	2300      	movs	r3, #0
 80079be:	2200      	movs	r2, #0
 80079c0:	2100      	movs	r1, #0
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fcae 	bl	8008324 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079d8:	2200      	movs	r2, #0
 80079da:	4912      	ldr	r1, [pc, #72]	; (8007a24 <MX_USB_DEVICE_Init+0x50>)
 80079dc:	4812      	ldr	r0, [pc, #72]	; (8007a28 <MX_USB_DEVICE_Init+0x54>)
 80079de:	f7fe ff26 	bl	800682e <USBD_Init>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079e8:	f7f8 fcf4 	bl	80003d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80079ec:	490f      	ldr	r1, [pc, #60]	; (8007a2c <MX_USB_DEVICE_Init+0x58>)
 80079ee:	480e      	ldr	r0, [pc, #56]	; (8007a28 <MX_USB_DEVICE_Init+0x54>)
 80079f0:	f7fe ff48 	bl	8006884 <USBD_RegisterClass>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079fa:	f7f8 fceb 	bl	80003d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80079fe:	490c      	ldr	r1, [pc, #48]	; (8007a30 <MX_USB_DEVICE_Init+0x5c>)
 8007a00:	4809      	ldr	r0, [pc, #36]	; (8007a28 <MX_USB_DEVICE_Init+0x54>)
 8007a02:	f7fe fe79 	bl	80066f8 <USBD_CDC_RegisterInterface>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007a0c:	f7f8 fce2 	bl	80003d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a10:	4805      	ldr	r0, [pc, #20]	; (8007a28 <MX_USB_DEVICE_Init+0x54>)
 8007a12:	f7fe ff50 	bl	80068b6 <USBD_Start>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a1c:	f7f8 fcda 	bl	80003d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a20:	bf00      	nop
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	2000012c 	.word	0x2000012c
 8007a28:	200002a4 	.word	0x200002a4
 8007a2c:	20000018 	.word	0x20000018
 8007a30:	2000011c 	.word	0x2000011c

08007a34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4905      	ldr	r1, [pc, #20]	; (8007a50 <CDC_Init_FS+0x1c>)
 8007a3c:	4805      	ldr	r0, [pc, #20]	; (8007a54 <CDC_Init_FS+0x20>)
 8007a3e:	f7fe fe71 	bl	8006724 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a42:	4905      	ldr	r1, [pc, #20]	; (8007a58 <CDC_Init_FS+0x24>)
 8007a44:	4803      	ldr	r0, [pc, #12]	; (8007a54 <CDC_Init_FS+0x20>)
 8007a46:	f7fe fe86 	bl	8006756 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8007a4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20000950 	.word	0x20000950
 8007a54:	200002a4 	.word	0x200002a4
 8007a58:	20000568 	.word	0x20000568

08007a5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8007a60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr
	...

08007a6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	4603      	mov	r3, r0
 8007a74:	6039      	str	r1, [r7, #0]
 8007a76:	71fb      	strb	r3, [r7, #7]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
 8007a7e:	2b23      	cmp	r3, #35	; 0x23
 8007a80:	d84a      	bhi.n	8007b18 <CDC_Control_FS+0xac>
 8007a82:	a201      	add	r2, pc, #4	; (adr r2, 8007a88 <CDC_Control_FS+0x1c>)
 8007a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a88:	08007b19 	.word	0x08007b19
 8007a8c:	08007b19 	.word	0x08007b19
 8007a90:	08007b19 	.word	0x08007b19
 8007a94:	08007b19 	.word	0x08007b19
 8007a98:	08007b19 	.word	0x08007b19
 8007a9c:	08007b19 	.word	0x08007b19
 8007aa0:	08007b19 	.word	0x08007b19
 8007aa4:	08007b19 	.word	0x08007b19
 8007aa8:	08007b19 	.word	0x08007b19
 8007aac:	08007b19 	.word	0x08007b19
 8007ab0:	08007b19 	.word	0x08007b19
 8007ab4:	08007b19 	.word	0x08007b19
 8007ab8:	08007b19 	.word	0x08007b19
 8007abc:	08007b19 	.word	0x08007b19
 8007ac0:	08007b19 	.word	0x08007b19
 8007ac4:	08007b19 	.word	0x08007b19
 8007ac8:	08007b19 	.word	0x08007b19
 8007acc:	08007b19 	.word	0x08007b19
 8007ad0:	08007b19 	.word	0x08007b19
 8007ad4:	08007b19 	.word	0x08007b19
 8007ad8:	08007b19 	.word	0x08007b19
 8007adc:	08007b19 	.word	0x08007b19
 8007ae0:	08007b19 	.word	0x08007b19
 8007ae4:	08007b19 	.word	0x08007b19
 8007ae8:	08007b19 	.word	0x08007b19
 8007aec:	08007b19 	.word	0x08007b19
 8007af0:	08007b19 	.word	0x08007b19
 8007af4:	08007b19 	.word	0x08007b19
 8007af8:	08007b19 	.word	0x08007b19
 8007afc:	08007b19 	.word	0x08007b19
 8007b00:	08007b19 	.word	0x08007b19
 8007b04:	08007b19 	.word	0x08007b19
 8007b08:	08007b19 	.word	0x08007b19
 8007b0c:	08007b19 	.word	0x08007b19
 8007b10:	08007b19 	.word	0x08007b19
 8007b14:	08007b19 	.word	0x08007b19
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8007b18:	bf00      	nop
	}

	return (USBD_OK);
 8007b1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop

08007b28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	4808      	ldr	r0, [pc, #32]	; (8007b58 <CDC_Receive_FS+0x30>)
 8007b36:	f7fe fe0e 	bl	8006756 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b3a:	4807      	ldr	r0, [pc, #28]	; (8007b58 <CDC_Receive_FS+0x30>)
 8007b3c:	f7fe fe4d 	bl	80067da <USBD_CDC_ReceivePacket>
	onCDC_ReceivePacket((char*)Buf,*Len);
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fcc6 	bl	80084d8 <onCDC_ReceivePacket>
	return (USBD_OK);
 8007b4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	200002a4 	.word	0x200002a4

08007b5c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	460b      	mov	r3, r1
 8007b66:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <CDC_Transmit_FS+0x48>)
 8007b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b72:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e00b      	b.n	8007b9a <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b82:	887b      	ldrh	r3, [r7, #2]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6879      	ldr	r1, [r7, #4]
 8007b88:	4806      	ldr	r0, [pc, #24]	; (8007ba4 <CDC_Transmit_FS+0x48>)
 8007b8a:	f7fe fdcb 	bl	8006724 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b8e:	4805      	ldr	r0, [pc, #20]	; (8007ba4 <CDC_Transmit_FS+0x48>)
 8007b90:	f7fe fdf4 	bl	800677c <USBD_CDC_TransmitPacket>
 8007b94:	4603      	mov	r3, r0
 8007b96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	200002a4 	.word	0x200002a4

08007ba8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	6039      	str	r1, [r7, #0]
 8007bb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	2212      	movs	r2, #18
 8007bb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007bba:	4b03      	ldr	r3, [pc, #12]	; (8007bc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bc80      	pop	{r7}
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	20000148 	.word	0x20000148

08007bcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	6039      	str	r1, [r7, #0]
 8007bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2204      	movs	r2, #4
 8007bdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007bde:	4b03      	ldr	r3, [pc, #12]	; (8007bec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bc80      	pop	{r7}
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	2000015c 	.word	0x2000015c

08007bf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	6039      	str	r1, [r7, #0]
 8007bfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d105      	bne.n	8007c0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	4907      	ldr	r1, [pc, #28]	; (8007c24 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c06:	4808      	ldr	r0, [pc, #32]	; (8007c28 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c08:	f7ff fe06 	bl	8007818 <USBD_GetString>
 8007c0c:	e004      	b.n	8007c18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	4904      	ldr	r1, [pc, #16]	; (8007c24 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c12:	4805      	ldr	r0, [pc, #20]	; (8007c28 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c14:	f7ff fe00 	bl	8007818 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c18:	4b02      	ldr	r3, [pc, #8]	; (8007c24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000d38 	.word	0x20000d38
 8007c28:	08009f30 	.word	0x08009f30

08007c2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	4603      	mov	r3, r0
 8007c34:	6039      	str	r1, [r7, #0]
 8007c36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	4904      	ldr	r1, [pc, #16]	; (8007c4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c3c:	4804      	ldr	r0, [pc, #16]	; (8007c50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c3e:	f7ff fdeb 	bl	8007818 <USBD_GetString>
  return USBD_StrDesc;
 8007c42:	4b02      	ldr	r3, [pc, #8]	; (8007c4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	20000d38 	.word	0x20000d38
 8007c50:	08009f48 	.word	0x08009f48

08007c54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	6039      	str	r1, [r7, #0]
 8007c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	221a      	movs	r2, #26
 8007c64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c66:	f000 f843 	bl	8007cf0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c6a:	4b02      	ldr	r3, [pc, #8]	; (8007c74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	20000160 	.word	0x20000160

08007c78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	6039      	str	r1, [r7, #0]
 8007c82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d105      	bne.n	8007c96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	4907      	ldr	r1, [pc, #28]	; (8007cac <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c8e:	4808      	ldr	r0, [pc, #32]	; (8007cb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c90:	f7ff fdc2 	bl	8007818 <USBD_GetString>
 8007c94:	e004      	b.n	8007ca0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	4904      	ldr	r1, [pc, #16]	; (8007cac <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c9a:	4805      	ldr	r0, [pc, #20]	; (8007cb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c9c:	f7ff fdbc 	bl	8007818 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ca0:	4b02      	ldr	r3, [pc, #8]	; (8007cac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20000d38 	.word	0x20000d38
 8007cb0:	08009f5c 	.word	0x08009f5c

08007cb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	6039      	str	r1, [r7, #0]
 8007cbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d105      	bne.n	8007cd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	4907      	ldr	r1, [pc, #28]	; (8007ce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cca:	4808      	ldr	r0, [pc, #32]	; (8007cec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ccc:	f7ff fda4 	bl	8007818 <USBD_GetString>
 8007cd0:	e004      	b.n	8007cdc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	4904      	ldr	r1, [pc, #16]	; (8007ce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cd6:	4805      	ldr	r0, [pc, #20]	; (8007cec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007cd8:	f7ff fd9e 	bl	8007818 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cdc:	4b02      	ldr	r3, [pc, #8]	; (8007ce8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000d38 	.word	0x20000d38
 8007cec:	08009f68 	.word	0x08009f68

08007cf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007cf6:	4b0f      	ldr	r3, [pc, #60]	; (8007d34 <Get_SerialNum+0x44>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cfc:	4b0e      	ldr	r3, [pc, #56]	; (8007d38 <Get_SerialNum+0x48>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d02:	4b0e      	ldr	r3, [pc, #56]	; (8007d3c <Get_SerialNum+0x4c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d009      	beq.n	8007d2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d16:	2208      	movs	r2, #8
 8007d18:	4909      	ldr	r1, [pc, #36]	; (8007d40 <Get_SerialNum+0x50>)
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f814 	bl	8007d48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d20:	2204      	movs	r2, #4
 8007d22:	4908      	ldr	r1, [pc, #32]	; (8007d44 <Get_SerialNum+0x54>)
 8007d24:	68b8      	ldr	r0, [r7, #8]
 8007d26:	f000 f80f 	bl	8007d48 <IntToUnicode>
  }
}
 8007d2a:	bf00      	nop
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	1ffff7e8 	.word	0x1ffff7e8
 8007d38:	1ffff7ec 	.word	0x1ffff7ec
 8007d3c:	1ffff7f0 	.word	0x1ffff7f0
 8007d40:	20000162 	.word	0x20000162
 8007d44:	20000172 	.word	0x20000172

08007d48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	4613      	mov	r3, r2
 8007d54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	75fb      	strb	r3, [r7, #23]
 8007d5e:	e027      	b.n	8007db0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	0f1b      	lsrs	r3, r3, #28
 8007d64:	2b09      	cmp	r3, #9
 8007d66:	d80b      	bhi.n	8007d80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	0f1b      	lsrs	r3, r3, #28
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	4619      	mov	r1, r3
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	440b      	add	r3, r1
 8007d78:	3230      	adds	r2, #48	; 0x30
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	e00a      	b.n	8007d96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	0f1b      	lsrs	r3, r3, #28
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	440b      	add	r3, r1
 8007d90:	3237      	adds	r2, #55	; 0x37
 8007d92:	b2d2      	uxtb	r2, r2
 8007d94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	011b      	lsls	r3, r3, #4
 8007d9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d9c:	7dfb      	ldrb	r3, [r7, #23]
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	3301      	adds	r3, #1
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	4413      	add	r3, r2
 8007da6:	2200      	movs	r2, #0
 8007da8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	3301      	adds	r3, #1
 8007dae:	75fb      	strb	r3, [r7, #23]
 8007db0:	7dfa      	ldrb	r2, [r7, #23]
 8007db2:	79fb      	ldrb	r3, [r7, #7]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d3d3      	bcc.n	8007d60 <IntToUnicode+0x18>
  }
}
 8007db8:	bf00      	nop
 8007dba:	bf00      	nop
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bc80      	pop	{r7}
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a0d      	ldr	r2, [pc, #52]	; (8007e08 <HAL_PCD_MspInit+0x44>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d113      	bne.n	8007dfe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007dd6:	4b0d      	ldr	r3, [pc, #52]	; (8007e0c <HAL_PCD_MspInit+0x48>)
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	4a0c      	ldr	r2, [pc, #48]	; (8007e0c <HAL_PCD_MspInit+0x48>)
 8007ddc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007de0:	61d3      	str	r3, [r2, #28]
 8007de2:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <HAL_PCD_MspInit+0x48>)
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007dee:	2200      	movs	r2, #0
 8007df0:	2100      	movs	r1, #0
 8007df2:	2014      	movs	r0, #20
 8007df4:	f7f8 fdfd 	bl	80009f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007df8:	2014      	movs	r0, #20
 8007dfa:	f7f8 fe16 	bl	8000a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007dfe:	bf00      	nop
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	40005c00 	.word	0x40005c00
 8007e0c:	40021000 	.word	0x40021000

08007e10 <PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007e24:	4619      	mov	r1, r3
 8007e26:	4610      	mov	r0, r2
 8007e28:	f7fe fd8d 	bl	8006946 <USBD_LL_SetupStage>
}
 8007e2c:	bf00      	nop
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007e46:	78fa      	ldrb	r2, [r7, #3]
 8007e48:	6879      	ldr	r1, [r7, #4]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	440b      	add	r3, r1
 8007e54:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	78fb      	ldrb	r3, [r7, #3]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	f7fe fdbf 	bl	80069e0 <USBD_LL_DataOutStage>
}
 8007e62:	bf00      	nop
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	460b      	mov	r3, r1
 8007e74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007e7c:	78fa      	ldrb	r2, [r7, #3]
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	4613      	mov	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	00db      	lsls	r3, r3, #3
 8007e88:	440b      	add	r3, r1
 8007e8a:	333c      	adds	r3, #60	; 0x3c
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	78fb      	ldrb	r3, [r7, #3]
 8007e90:	4619      	mov	r1, r3
 8007e92:	f7fe fe16 	bl	8006ac2 <USBD_LL_DataInStage>
}
 8007e96:	bf00      	nop
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fe ff26 	bl	8006cfe <USBD_LL_SOF>
}
 8007eb2:	bf00      	nop
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d001      	beq.n	8007ed2 <PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007ece:	f7f8 fa81 	bl	80003d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007ed8:	7bfa      	ldrb	r2, [r7, #15]
 8007eda:	4611      	mov	r1, r2
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fe fed6 	bl	8006c8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fe fe8f 	bl	8006c0c <USBD_LL_Reset>
}
 8007eee:	bf00      	nop
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe fed0 	bl	8006cac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d005      	beq.n	8007f20 <PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f14:	4b04      	ldr	r3, [pc, #16]	; (8007f28 <PCD_SuspendCallback+0x30>)
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	4a03      	ldr	r2, [pc, #12]	; (8007f28 <PCD_SuspendCallback+0x30>)
 8007f1a:	f043 0306 	orr.w	r3, r3, #6
 8007f1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f20:	bf00      	nop
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	e000ed00 	.word	0xe000ed00

08007f2c <PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe feca 	bl	8006cd4 <USBD_LL_Resume>
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007f5a:	78fa      	ldrb	r2, [r7, #3]
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe fef3 	bl	8006d4a <USBD_LL_IsoOUTIncomplete>
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007f7e:	78fa      	ldrb	r2, [r7, #3]
 8007f80:	4611      	mov	r1, r2
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fed5 	bl	8006d32 <USBD_LL_IsoINIncomplete>
}
 8007f88:	bf00      	nop
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe fedf 	bl	8006d62 <USBD_LL_DevConnected>
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fe fedb 	bl	8006d76 <USBD_LL_DevDisconnected>
}
 8007fc0:	bf00      	nop
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007fd0:	4a41      	ldr	r2, [pc, #260]	; (80080d8 <USBD_LL_Init+0x110>)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a3f      	ldr	r2, [pc, #252]	; (80080d8 <USBD_LL_Init+0x110>)
 8007fdc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007fe0:	4b3d      	ldr	r3, [pc, #244]	; (80080d8 <USBD_LL_Init+0x110>)
 8007fe2:	4a3e      	ldr	r2, [pc, #248]	; (80080dc <USBD_LL_Init+0x114>)
 8007fe4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007fe6:	4b3c      	ldr	r3, [pc, #240]	; (80080d8 <USBD_LL_Init+0x110>)
 8007fe8:	2208      	movs	r2, #8
 8007fea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007fec:	4b3a      	ldr	r3, [pc, #232]	; (80080d8 <USBD_LL_Init+0x110>)
 8007fee:	2202      	movs	r2, #2
 8007ff0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007ff2:	4b39      	ldr	r3, [pc, #228]	; (80080d8 <USBD_LL_Init+0x110>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007ff8:	4b37      	ldr	r3, [pc, #220]	; (80080d8 <USBD_LL_Init+0x110>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007ffe:	4b36      	ldr	r3, [pc, #216]	; (80080d8 <USBD_LL_Init+0x110>)
 8008000:	2200      	movs	r2, #0
 8008002:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008004:	4834      	ldr	r0, [pc, #208]	; (80080d8 <USBD_LL_Init+0x110>)
 8008006:	f7f9 f80b 	bl	8001020 <HAL_PCD_Init>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008010:	f7f8 f9e0 	bl	80003d4 <Error_Handler>
  }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  /* Register USB PCD CallBacks */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_SOF_CB_ID, PCD_SOFCallback);
 8008014:	4a32      	ldr	r2, [pc, #200]	; (80080e0 <USBD_LL_Init+0x118>)
 8008016:	2101      	movs	r1, #1
 8008018:	482f      	ldr	r0, [pc, #188]	; (80080d8 <USBD_LL_Init+0x110>)
 800801a:	f7f9 f94f 	bl	80012bc <HAL_PCD_RegisterCallback>
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_SETUPSTAGE_CB_ID, PCD_SetupStageCallback);
 800801e:	4a31      	ldr	r2, [pc, #196]	; (80080e4 <USBD_LL_Init+0x11c>)
 8008020:	2102      	movs	r1, #2
 8008022:	482d      	ldr	r0, [pc, #180]	; (80080d8 <USBD_LL_Init+0x110>)
 8008024:	f7f9 f94a 	bl	80012bc <HAL_PCD_RegisterCallback>
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_RESET_CB_ID, PCD_ResetCallback);
 8008028:	4a2f      	ldr	r2, [pc, #188]	; (80080e8 <USBD_LL_Init+0x120>)
 800802a:	2103      	movs	r1, #3
 800802c:	482a      	ldr	r0, [pc, #168]	; (80080d8 <USBD_LL_Init+0x110>)
 800802e:	f7f9 f945 	bl	80012bc <HAL_PCD_RegisterCallback>
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_SUSPEND_CB_ID, PCD_SuspendCallback);
 8008032:	4a2e      	ldr	r2, [pc, #184]	; (80080ec <USBD_LL_Init+0x124>)
 8008034:	2104      	movs	r1, #4
 8008036:	4828      	ldr	r0, [pc, #160]	; (80080d8 <USBD_LL_Init+0x110>)
 8008038:	f7f9 f940 	bl	80012bc <HAL_PCD_RegisterCallback>
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_RESUME_CB_ID, PCD_ResumeCallback);
 800803c:	4a2c      	ldr	r2, [pc, #176]	; (80080f0 <USBD_LL_Init+0x128>)
 800803e:	2105      	movs	r1, #5
 8008040:	4825      	ldr	r0, [pc, #148]	; (80080d8 <USBD_LL_Init+0x110>)
 8008042:	f7f9 f93b 	bl	80012bc <HAL_PCD_RegisterCallback>
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_CONNECT_CB_ID, PCD_ConnectCallback);
 8008046:	4a2b      	ldr	r2, [pc, #172]	; (80080f4 <USBD_LL_Init+0x12c>)
 8008048:	2106      	movs	r1, #6
 800804a:	4823      	ldr	r0, [pc, #140]	; (80080d8 <USBD_LL_Init+0x110>)
 800804c:	f7f9 f936 	bl	80012bc <HAL_PCD_RegisterCallback>
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_DISCONNECT_CB_ID, PCD_DisconnectCallback);
 8008050:	4a29      	ldr	r2, [pc, #164]	; (80080f8 <USBD_LL_Init+0x130>)
 8008052:	2107      	movs	r1, #7
 8008054:	4820      	ldr	r0, [pc, #128]	; (80080d8 <USBD_LL_Init+0x110>)
 8008056:	f7f9 f931 	bl	80012bc <HAL_PCD_RegisterCallback>

  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_FS, PCD_DataOutStageCallback);
 800805a:	4928      	ldr	r1, [pc, #160]	; (80080fc <USBD_LL_Init+0x134>)
 800805c:	481e      	ldr	r0, [pc, #120]	; (80080d8 <USBD_LL_Init+0x110>)
 800805e:	f7f9 f9db 	bl	8001418 <HAL_PCD_RegisterDataOutStageCallback>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
 8008062:	4927      	ldr	r1, [pc, #156]	; (8008100 <USBD_LL_Init+0x138>)
 8008064:	481c      	ldr	r0, [pc, #112]	; (80080d8 <USBD_LL_Init+0x110>)
 8008066:	f7f9 fa15 	bl	8001494 <HAL_PCD_RegisterDataInStageCallback>
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
 800806a:	4926      	ldr	r1, [pc, #152]	; (8008104 <USBD_LL_Init+0x13c>)
 800806c:	481a      	ldr	r0, [pc, #104]	; (80080d8 <USBD_LL_Init+0x110>)
 800806e:	f7f9 fa4f 	bl	8001510 <HAL_PCD_RegisterIsoOutIncpltCallback>
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
 8008072:	4925      	ldr	r1, [pc, #148]	; (8008108 <USBD_LL_Init+0x140>)
 8008074:	4818      	ldr	r0, [pc, #96]	; (80080d8 <USBD_LL_Init+0x110>)
 8008076:	f7f9 fa89 	bl	800158c <HAL_PCD_RegisterIsoInIncpltCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008080:	2318      	movs	r3, #24
 8008082:	2200      	movs	r2, #0
 8008084:	2100      	movs	r1, #0
 8008086:	f7fa ff6f 	bl	8002f68 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008090:	2358      	movs	r3, #88	; 0x58
 8008092:	2200      	movs	r2, #0
 8008094:	2180      	movs	r1, #128	; 0x80
 8008096:	f7fa ff67 	bl	8002f68 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080a0:	23c0      	movs	r3, #192	; 0xc0
 80080a2:	2200      	movs	r2, #0
 80080a4:	2181      	movs	r1, #129	; 0x81
 80080a6:	f7fa ff5f 	bl	8002f68 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080b0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80080b4:	2200      	movs	r2, #0
 80080b6:	2101      	movs	r1, #1
 80080b8:	f7fa ff56 	bl	8002f68 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080c6:	2200      	movs	r2, #0
 80080c8:	2182      	movs	r1, #130	; 0x82
 80080ca:	f7fa ff4d 	bl	8002f68 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	20000f38 	.word	0x20000f38
 80080dc:	40005c00 	.word	0x40005c00
 80080e0:	08007e9f 	.word	0x08007e9f
 80080e4:	08007e11 	.word	0x08007e11
 80080e8:	08007ebb 	.word	0x08007ebb
 80080ec:	08007ef9 	.word	0x08007ef9
 80080f0:	08007f2d 	.word	0x08007f2d
 80080f4:	08007f91 	.word	0x08007f91
 80080f8:	08007fad 	.word	0x08007fad
 80080fc:	08007e35 	.word	0x08007e35
 8008100:	08007e6b 	.word	0x08007e6b
 8008104:	08007f49 	.word	0x08007f49
 8008108:	08007f6d 	.word	0x08007f6d

0800810c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008122:	4618      	mov	r0, r3
 8008124:	f7f9 fa70 	bl	8001608 <HAL_PCD_Start>
 8008128:	4603      	mov	r3, r0
 800812a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800812c:	7bfb      	ldrb	r3, [r7, #15]
 800812e:	4618      	mov	r0, r3
 8008130:	f000 f944 	bl	80083bc <USBD_Get_USB_Status>
 8008134:	4603      	mov	r3, r0
 8008136:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008138:	7bbb      	ldrb	r3, [r7, #14]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	4608      	mov	r0, r1
 800814c:	4611      	mov	r1, r2
 800814e:	461a      	mov	r2, r3
 8008150:	4603      	mov	r3, r0
 8008152:	70fb      	strb	r3, [r7, #3]
 8008154:	460b      	mov	r3, r1
 8008156:	70bb      	strb	r3, [r7, #2]
 8008158:	4613      	mov	r3, r2
 800815a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800816a:	78bb      	ldrb	r3, [r7, #2]
 800816c:	883a      	ldrh	r2, [r7, #0]
 800816e:	78f9      	ldrb	r1, [r7, #3]
 8008170:	f7f9 fc38 	bl	80019e4 <HAL_PCD_EP_Open>
 8008174:	4603      	mov	r3, r0
 8008176:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008178:	7bfb      	ldrb	r3, [r7, #15]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 f91e 	bl	80083bc <USBD_Get_USB_Status>
 8008180:	4603      	mov	r3, r0
 8008182:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008184:	7bbb      	ldrb	r3, [r7, #14]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	460b      	mov	r3, r1
 8008198:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081a8:	78fa      	ldrb	r2, [r7, #3]
 80081aa:	4611      	mov	r1, r2
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7f9 fc76 	bl	8001a9e <HAL_PCD_EP_Close>
 80081b2:	4603      	mov	r3, r0
 80081b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 f8ff 	bl	80083bc <USBD_Get_USB_Status>
 80081be:	4603      	mov	r3, r0
 80081c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081e6:	78fa      	ldrb	r2, [r7, #3]
 80081e8:	4611      	mov	r1, r2
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7f9 fd1e 	bl	8001c2c <HAL_PCD_EP_SetStall>
 80081f0:	4603      	mov	r3, r0
 80081f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 f8e0 	bl	80083bc <USBD_Get_USB_Status>
 80081fc:	4603      	mov	r3, r0
 80081fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008200:	7bbb      	ldrb	r3, [r7, #14]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	460b      	mov	r3, r1
 8008214:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	4611      	mov	r1, r2
 8008228:	4618      	mov	r0, r3
 800822a:	f7f9 fd5f 	bl	8001cec <HAL_PCD_EP_ClrStall>
 800822e:	4603      	mov	r3, r0
 8008230:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008232:	7bfb      	ldrb	r3, [r7, #15]
 8008234:	4618      	mov	r0, r3
 8008236:	f000 f8c1 	bl	80083bc <USBD_Get_USB_Status>
 800823a:	4603      	mov	r3, r0
 800823c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800823e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800825a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800825c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008260:	2b00      	cmp	r3, #0
 8008262:	da0c      	bge.n	800827e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800826a:	68f9      	ldr	r1, [r7, #12]
 800826c:	1c5a      	adds	r2, r3, #1
 800826e:	4613      	mov	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	00db      	lsls	r3, r3, #3
 8008276:	440b      	add	r3, r1
 8008278:	3302      	adds	r3, #2
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	e00b      	b.n	8008296 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800827e:	78fb      	ldrb	r3, [r7, #3]
 8008280:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008284:	68f9      	ldr	r1, [r7, #12]
 8008286:	4613      	mov	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	00db      	lsls	r3, r3, #3
 800828e:	440b      	add	r3, r1
 8008290:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008294:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr

080082a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082ba:	78fa      	ldrb	r2, [r7, #3]
 80082bc:	4611      	mov	r1, r2
 80082be:	4618      	mov	r0, r3
 80082c0:	f7f9 fb6b 	bl	800199a <HAL_PCD_SetAddress>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 f876 	bl	80083bc <USBD_Get_USB_Status>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b086      	sub	sp, #24
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	461a      	mov	r2, r3
 80082ea:	460b      	mov	r3, r1
 80082ec:	72fb      	strb	r3, [r7, #11]
 80082ee:	4613      	mov	r3, r2
 80082f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008300:	893b      	ldrh	r3, [r7, #8]
 8008302:	7af9      	ldrb	r1, [r7, #11]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	f7f9 fc5a 	bl	8001bbe <HAL_PCD_EP_Transmit>
 800830a:	4603      	mov	r3, r0
 800830c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	4618      	mov	r0, r3
 8008312:	f000 f853 	bl	80083bc <USBD_Get_USB_Status>
 8008316:	4603      	mov	r3, r0
 8008318:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800831a:	7dbb      	ldrb	r3, [r7, #22]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	607a      	str	r2, [r7, #4]
 800832e:	461a      	mov	r2, r3
 8008330:	460b      	mov	r3, r1
 8008332:	72fb      	strb	r3, [r7, #11]
 8008334:	4613      	mov	r3, r2
 8008336:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008346:	893b      	ldrh	r3, [r7, #8]
 8008348:	7af9      	ldrb	r1, [r7, #11]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	f7f9 fbef 	bl	8001b2e <HAL_PCD_EP_Receive>
 8008350:	4603      	mov	r3, r0
 8008352:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008354:	7dfb      	ldrb	r3, [r7, #23]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 f830 	bl	80083bc <USBD_Get_USB_Status>
 800835c:	4603      	mov	r3, r0
 800835e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008360:	7dbb      	ldrb	r3, [r7, #22]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	460b      	mov	r3, r1
 8008374:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800837c:	78fa      	ldrb	r2, [r7, #3]
 800837e:	4611      	mov	r1, r2
 8008380:	4618      	mov	r0, r3
 8008382:	f7f9 fc05 	bl	8001b90 <HAL_PCD_EP_GetRxCount>
 8008386:	4603      	mov	r3, r0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008398:	4b02      	ldr	r3, [pc, #8]	; (80083a4 <USBD_static_malloc+0x14>)
}
 800839a:	4618      	mov	r0, r3
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	bc80      	pop	{r7}
 80083a2:	4770      	bx	lr
 80083a4:	2000125c 	.word	0x2000125c

080083a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]

}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bc80      	pop	{r7}
 80083b8:	4770      	bx	lr
	...

080083bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	4603      	mov	r3, r0
 80083c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d817      	bhi.n	8008400 <USBD_Get_USB_Status+0x44>
 80083d0:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <USBD_Get_USB_Status+0x1c>)
 80083d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d6:	bf00      	nop
 80083d8:	080083e9 	.word	0x080083e9
 80083dc:	080083ef 	.word	0x080083ef
 80083e0:	080083f5 	.word	0x080083f5
 80083e4:	080083fb 	.word	0x080083fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73fb      	strb	r3, [r7, #15]
    break;
 80083ec:	e00b      	b.n	8008406 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083ee:	2302      	movs	r3, #2
 80083f0:	73fb      	strb	r3, [r7, #15]
    break;
 80083f2:	e008      	b.n	8008406 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083f4:	2301      	movs	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
    break;
 80083f8:	e005      	b.n	8008406 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80083fa:	2302      	movs	r3, #2
 80083fc:	73fb      	strb	r3, [r7, #15]
    break;
 80083fe:	e002      	b.n	8008406 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008400:	2302      	movs	r3, #2
 8008402:	73fb      	strb	r3, [r7, #15]
    break;
 8008404:	bf00      	nop
  }
  return usb_status;
 8008406:	7bfb      	ldrb	r3, [r7, #15]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	bc80      	pop	{r7}
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop

08008414 <setLed1>:

#include "main.h"
#include "UMain.h"
#include "dbgUart.h"

extern "C" void setLed1(uint8_t q) {
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	71fb      	strb	r3, [r7, #7]
	if (q)
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d006      	beq.n	8008432 <setLed1+0x1e>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8008424:	2200      	movs	r2, #0
 8008426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800842a:	4807      	ldr	r0, [pc, #28]	; (8008448 <setLed1+0x34>)
 800842c:	f7f8 fc9c 	bl	8000d68 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
}
 8008430:	e005      	b.n	800843e <setLed1+0x2a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8008432:	2201      	movs	r2, #1
 8008434:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008438:	4803      	ldr	r0, [pc, #12]	; (8008448 <setLed1+0x34>)
 800843a:	f7f8 fc95 	bl	8000d68 <HAL_GPIO_WritePin>
}
 800843e:	bf00      	nop
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	40011000 	.word	0x40011000

0800844c <setLed2>:

extern "C" void setLed2(uint8_t q) {
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	71fb      	strb	r3, [r7, #7]
	if (q)
 8008456:	79fb      	ldrb	r3, [r7, #7]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d005      	beq.n	8008468 <setLed2+0x1c>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800845c:	2200      	movs	r2, #0
 800845e:	2102      	movs	r1, #2
 8008460:	4806      	ldr	r0, [pc, #24]	; (800847c <setLed2+0x30>)
 8008462:	f7f8 fc81 	bl	8000d68 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
}
 8008466:	e004      	b.n	8008472 <setLed2+0x26>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8008468:	2201      	movs	r2, #1
 800846a:	2102      	movs	r1, #2
 800846c:	4803      	ldr	r0, [pc, #12]	; (800847c <setLed2+0x30>)
 800846e:	f7f8 fc7b 	bl	8000d68 <HAL_GPIO_WritePin>
}
 8008472:	bf00      	nop
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	40010800 	.word	0x40010800

08008480 <usbOn>:

extern "C" void usbOn(uint8_t q) {
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	71fb      	strb	r3, [r7, #7]
	if (q)
 800848a:	79fb      	ldrb	r3, [r7, #7]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d006      	beq.n	800849e <usbOn+0x1e>
		HAL_GPIO_WritePin(USB_ON_GPIO_Port, USB_ON_Pin, GPIO_PIN_RESET);
 8008490:	2200      	movs	r2, #0
 8008492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008496:	4807      	ldr	r0, [pc, #28]	; (80084b4 <usbOn+0x34>)
 8008498:	f7f8 fc66 	bl	8000d68 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(USB_ON_GPIO_Port, USB_ON_Pin, GPIO_PIN_SET);
}
 800849c:	e005      	b.n	80084aa <usbOn+0x2a>
		HAL_GPIO_WritePin(USB_ON_GPIO_Port, USB_ON_Pin, GPIO_PIN_SET);
 800849e:	2201      	movs	r2, #1
 80084a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80084a4:	4803      	ldr	r0, [pc, #12]	; (80084b4 <usbOn+0x34>)
 80084a6:	f7f8 fc5f 	bl	8000d68 <HAL_GPIO_WritePin>
}
 80084aa:	bf00      	nop
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	40010800 	.word	0x40010800

080084b8 <_write>:

extern "C" void initCubeSys();

extern "C" int _write(int file, char *ptr, int len) {
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
	DbgUart::Write(ptr, len);
 80084c4:	6879      	ldr	r1, [r7, #4]
 80084c6:	68b8      	ldr	r0, [r7, #8]
 80084c8:	f000 fa7c 	bl	80089c4 <_ZN7DbgUart5WriteEPKci>
	return len;
 80084cc:	687b      	ldr	r3, [r7, #4]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <onCDC_ReceivePacket>:
extern "C" int __io_putchar(int ch) {
	DbgUart::Write((const char*) &ch, 1);
	return 1;
}

extern "C" void onCDC_ReceivePacket(char *Buf, int Len) {
 80084d8:	b580      	push	{r7, lr}
 80084da:	b09e      	sub	sp, #120	; 0x78
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
	int n = Len;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	673b      	str	r3, [r7, #112]	; 0x70
	if (n > 16)
 80084e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084e8:	2b10      	cmp	r3, #16
 80084ea:	dd01      	ble.n	80084f0 <onCDC_ReceivePacket+0x18>
		n = 16;
 80084ec:	2310      	movs	r3, #16
 80084ee:	673b      	str	r3, [r7, #112]	; 0x70
	printf("RecData n=%u: ", (int) Len);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	4815      	ldr	r0, [pc, #84]	; (8008548 <onCDC_ReceivePacket+0x70>)
 80084f4:	f000 fdb6 	bl	8009064 <iprintf>
	for (int i = 0; i < 16; i++) {
 80084f8:	2300      	movs	r3, #0
 80084fa:	677b      	str	r3, [r7, #116]	; 0x74
 80084fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084fe:	2b0f      	cmp	r3, #15
 8008500:	dc0b      	bgt.n	800851a <onCDC_ReceivePacket+0x42>
		printf("%02X ", Buf[i]);
 8008502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	4413      	add	r3, r2
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	4619      	mov	r1, r3
 800850c:	480f      	ldr	r0, [pc, #60]	; (800854c <onCDC_ReceivePacket+0x74>)
 800850e:	f000 fda9 	bl	8009064 <iprintf>
	for (int i = 0; i < 16; i++) {
 8008512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008514:	3301      	adds	r3, #1
 8008516:	677b      	str	r3, [r7, #116]	; 0x74
 8008518:	e7f0      	b.n	80084fc <onCDC_ReceivePacket+0x24>
	}
	printf("\r\n");
 800851a:	480d      	ldr	r0, [pc, #52]	; (8008550 <onCDC_ReceivePacket+0x78>)
 800851c:	f000 fe28 	bl	8009170 <puts>

	char sndTxt[100];
	int m = snprintf(sndTxt,sizeof(sndTxt),"Odebrano %u bytes",Len);
 8008520:	f107 0008 	add.w	r0, r7, #8
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	4a0b      	ldr	r2, [pc, #44]	; (8008554 <onCDC_ReceivePacket+0x7c>)
 8008528:	2164      	movs	r1, #100	; 0x64
 800852a:	f000 fe39 	bl	80091a0 <sniprintf>
 800852e:	66f8      	str	r0, [r7, #108]	; 0x6c
	CDC_Transmit_FS((uint8_t*) sndTxt, m);
 8008530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008532:	b29a      	uxth	r2, r3
 8008534:	f107 0308 	add.w	r3, r7, #8
 8008538:	4611      	mov	r1, r2
 800853a:	4618      	mov	r0, r3
 800853c:	f7ff fb0e 	bl	8007b5c <CDC_Transmit_FS>

}
 8008540:	bf00      	nop
 8008542:	3778      	adds	r7, #120	; 0x78
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	08009f78 	.word	0x08009f78
 800854c:	08009f88 	.word	0x08009f88
 8008550:	08009f90 	.word	0x08009f90
 8008554:	08009f94 	.word	0x08009f94

08008558 <main2>:

char TxData[200];

extern "C" void main2(void) {
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
	initCubeSys();
 800855e:	f7f7 fdf5 	bl	800014c <initCubeSys>
	setLed2(0);
 8008562:	2000      	movs	r0, #0
 8008564:	f7ff ff72 	bl	800844c <setLed2>
	DbgUart::Init(115200);
 8008568:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800856c:	f000 f9d2 	bl	8008914 <_ZN7DbgUart4InitEm>
	//DbgUart::WriteStr("\r\neLine-DONGLE\r\n----------------------------------\r\n");

	printf("\r\neLine-DONGLE_2\r\n----------------------------------\r\n");
 8008570:	481f      	ldr	r0, [pc, #124]	; (80085f0 <main2+0x98>)
 8008572:	f000 fdfd 	bl	8009170 <puts>

	HAL_Delay(250);
 8008576:	20fa      	movs	r0, #250	; 0xfa
 8008578:	f7f8 f940 	bl	80007fc <HAL_Delay>
	usbOn(1);
 800857c:	2001      	movs	r0, #1
 800857e:	f7ff ff7f 	bl	8008480 <usbOn>

	uint32_t led_tt = HAL_GetTick();
 8008582:	f7f8 f931 	bl	80007e8 <HAL_GetTick>
 8008586:	60f8      	str	r0, [r7, #12]

	bool led2 = false;
 8008588:	2300      	movs	r3, #0
 800858a:	72fb      	strb	r3, [r7, #11]
	int v = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	607b      	str	r3, [r7, #4]
	while (1) {
		uint32_t tt = HAL_GetTick();
 8008590:	f7f8 f92a 	bl	80007e8 <HAL_GetTick>
 8008594:	6038      	str	r0, [r7, #0]
		if (tt - led_tt > 4000) {
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80085a0:	d9f6      	bls.n	8008590 <main2+0x38>
			led_tt = tt;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	60fb      	str	r3, [r7, #12]
			led2 = !led2;
 80085a6:	7afb      	ldrb	r3, [r7, #11]
 80085a8:	f083 0301 	eor.w	r3, r3, #1
 80085ac:	72fb      	strb	r3, [r7, #11]
			setLed1(led2);
 80085ae:	7afb      	ldrb	r3, [r7, #11]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7ff ff2f 	bl	8008414 <setLed1>
			/*
			 char buf[30];
			 snprintf(buf,sizeof(buf),"v=%u\r\n", v++);
			 DbgUart::WriteStr(buf);
			 */
			printf("v=%u ", v);
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	480e      	ldr	r0, [pc, #56]	; (80085f4 <main2+0x9c>)
 80085ba:	f000 fd53 	bl	8009064 <iprintf>
			fflush(stdout);
 80085be:	4b0e      	ldr	r3, [pc, #56]	; (80085f8 <main2+0xa0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 fb2b 	bl	8008c20 <fflush>

			memset(TxData, ' ', sizeof(TxData));
 80085ca:	22c8      	movs	r2, #200	; 0xc8
 80085cc:	2120      	movs	r1, #32
 80085ce:	480b      	ldr	r0, [pc, #44]	; (80085fc <main2+0xa4>)
 80085d0:	f000 fc63 	bl	8008e9a <memset>
			snprintf(TxData, sizeof(TxData), "%u", v);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a0a      	ldr	r2, [pc, #40]	; (8008600 <main2+0xa8>)
 80085d8:	21c8      	movs	r1, #200	; 0xc8
 80085da:	4808      	ldr	r0, [pc, #32]	; (80085fc <main2+0xa4>)
 80085dc:	f000 fde0 	bl	80091a0 <sniprintf>
			CDC_Transmit_FS((uint8_t*) TxData, sizeof(TxData));
 80085e0:	21c8      	movs	r1, #200	; 0xc8
 80085e2:	4806      	ldr	r0, [pc, #24]	; (80085fc <main2+0xa4>)
 80085e4:	f7ff faba 	bl	8007b5c <CDC_Transmit_FS>
			v++;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	3301      	adds	r3, #1
 80085ec:	607b      	str	r3, [r7, #4]
		}
	}
 80085ee:	e7cf      	b.n	8008590 <main2+0x38>
 80085f0:	08009fa8 	.word	0x08009fa8
 80085f4:	08009fe0 	.word	0x08009fe0
 80085f8:	2000017c 	.word	0x2000017c
 80085fc:	2000147c 	.word	0x2000147c
 8008600:	08009fe8 	.word	0x08009fe8

08008604 <_ZN7DbgUart9IrqRXCharEh>:

DbgCnt DbgUart::cntRec;
DbgRxData DbgUart::rxData;
DbgTxData DbgUart::txData;

void DbgUart::IrqRXChar(uint8_t a) {
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	71fb      	strb	r3, [r7, #7]

	uint16_t n = rxData.head;
 800860e:	4b18      	ldr	r3, [pc, #96]	; (8008670 <_ZN7DbgUart9IrqRXCharEh+0x6c>)
 8008610:	8a9b      	ldrh	r3, [r3, #20]
 8008612:	81fb      	strh	r3, [r7, #14]
	if (++n == DBG_RX_BUF_SIZE)
 8008614:	89fb      	ldrh	r3, [r7, #14]
 8008616:	3301      	adds	r3, #1
 8008618:	81fb      	strh	r3, [r7, #14]
 800861a:	89fb      	ldrh	r3, [r7, #14]
 800861c:	2b10      	cmp	r3, #16
 800861e:	bf0c      	ite	eq
 8008620:	2301      	moveq	r3, #1
 8008622:	2300      	movne	r3, #0
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <_ZN7DbgUart9IrqRXCharEh+0x2a>
		n = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	81fb      	strh	r3, [r7, #14]
	if (n != rxData.tail) {
 800862e:	4b10      	ldr	r3, [pc, #64]	; (8008670 <_ZN7DbgUart9IrqRXCharEh+0x6c>)
 8008630:	8adb      	ldrh	r3, [r3, #22]
 8008632:	89fa      	ldrh	r2, [r7, #14]
 8008634:	429a      	cmp	r2, r3
 8008636:	d009      	beq.n	800864c <_ZN7DbgUart9IrqRXCharEh+0x48>
		rxData.buf[rxData.head] = a;
 8008638:	4b0d      	ldr	r3, [pc, #52]	; (8008670 <_ZN7DbgUart9IrqRXCharEh+0x6c>)
 800863a:	8a9b      	ldrh	r3, [r3, #20]
 800863c:	4619      	mov	r1, r3
 800863e:	4a0c      	ldr	r2, [pc, #48]	; (8008670 <_ZN7DbgUart9IrqRXCharEh+0x6c>)
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	5453      	strb	r3, [r2, r1]
		rxData.head = n;
 8008644:	4a0a      	ldr	r2, [pc, #40]	; (8008670 <_ZN7DbgUart9IrqRXCharEh+0x6c>)
 8008646:	89fb      	ldrh	r3, [r7, #14]
 8008648:	8293      	strh	r3, [r2, #20]
 800864a:	e005      	b.n	8008658 <_ZN7DbgUart9IrqRXCharEh+0x54>
	} else {
		cntRec.RxLost++;
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <_ZN7DbgUart9IrqRXCharEh+0x70>)
 800864e:	889b      	ldrh	r3, [r3, #4]
 8008650:	3301      	adds	r3, #1
 8008652:	b29a      	uxth	r2, r3
 8008654:	4b07      	ldr	r3, [pc, #28]	; (8008674 <_ZN7DbgUart9IrqRXCharEh+0x70>)
 8008656:	809a      	strh	r2, [r3, #4]
	}
	cntRec.Rx++;
 8008658:	4b06      	ldr	r3, [pc, #24]	; (8008674 <_ZN7DbgUart9IrqRXCharEh+0x70>)
 800865a:	885b      	ldrh	r3, [r3, #2]
 800865c:	3301      	adds	r3, #1
 800865e:	b29a      	uxth	r2, r3
 8008660:	4b04      	ldr	r3, [pc, #16]	; (8008674 <_ZN7DbgUart9IrqRXCharEh+0x70>)
 8008662:	805a      	strh	r2, [r3, #2]
}
 8008664:	bf00      	nop
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	bc80      	pop	{r7}
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	2000154c 	.word	0x2000154c
 8008674:	20001544 	.word	0x20001544

08008678 <_ZN7DbgUart13Senduint8_tHdEh>:

void DbgUart::Senduint8_tHd(uint8_t a) {
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	71fb      	strb	r3, [r7, #7]
	UART_DEV->DR = a;
 8008682:	4a07      	ldr	r2, [pc, #28]	; (80086a0 <_ZN7DbgUart13Senduint8_tHdEh+0x28>)
 8008684:	79fb      	ldrb	r3, [r7, #7]
 8008686:	6053      	str	r3, [r2, #4]
	cntRec.Tx++;
 8008688:	4b06      	ldr	r3, [pc, #24]	; (80086a4 <_ZN7DbgUart13Senduint8_tHdEh+0x2c>)
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	3301      	adds	r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	4b04      	ldr	r3, [pc, #16]	; (80086a4 <_ZN7DbgUart13Senduint8_tHdEh+0x2c>)
 8008692:	801a      	strh	r2, [r3, #0]
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	bc80      	pop	{r7}
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	40004400 	.word	0x40004400
 80086a4:	20001544 	.word	0x20001544

080086a8 <_ZN7DbgUart9PopTxDataEv>:

uint8_t DbgUart::PopTxData() {
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
	uint8_t a = txData.buf[txData.tail];
 80086ae:	4b12      	ldr	r3, [pc, #72]	; (80086f8 <_ZN7DbgUart9PopTxDataEv+0x50>)
 80086b0:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 80086b4:	461a      	mov	r2, r3
 80086b6:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <_ZN7DbgUart9PopTxDataEv+0x50>)
 80086b8:	5c9b      	ldrb	r3, [r3, r2]
 80086ba:	71fb      	strb	r3, [r7, #7]
	if (++txData.tail == DBG_TX_BUF_SIZE)
 80086bc:	4b0e      	ldr	r3, [pc, #56]	; (80086f8 <_ZN7DbgUart9PopTxDataEv+0x50>)
 80086be:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 80086c2:	3301      	adds	r3, #1
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	4b0c      	ldr	r3, [pc, #48]	; (80086f8 <_ZN7DbgUart9PopTxDataEv+0x50>)
 80086c8:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
 80086cc:	4b0a      	ldr	r3, [pc, #40]	; (80086f8 <_ZN7DbgUart9PopTxDataEv+0x50>)
 80086ce:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 80086d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086d6:	bf0c      	ite	eq
 80086d8:	2301      	moveq	r3, #1
 80086da:	2300      	movne	r3, #0
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <_ZN7DbgUart9PopTxDataEv+0x42>
		txData.tail = 0;
 80086e2:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <_ZN7DbgUart9PopTxDataEv+0x50>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	return a;
 80086ea:	79fb      	ldrb	r3, [r7, #7]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bc80      	pop	{r7}
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	20001564 	.word	0x20001564

080086fc <_ZN7DbgUart9IrqTXCharEv>:

void DbgUart::IrqTXChar() {
 80086fc:	b580      	push	{r7, lr}
 80086fe:	af00      	add	r7, sp, #0
	if (txData.tail != txData.head) {
 8008700:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <_ZN7DbgUart9IrqTXCharEv+0x3c>)
 8008702:	f8b3 2202 	ldrh.w	r2, [r3, #514]	; 0x202
 8008706:	4b0c      	ldr	r3, [pc, #48]	; (8008738 <_ZN7DbgUart9IrqTXCharEv+0x3c>)
 8008708:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800870c:	429a      	cmp	r2, r3
 800870e:	d006      	beq.n	800871e <_ZN7DbgUart9IrqTXCharEv+0x22>
		Senduint8_tHd(PopTxData());
 8008710:	f7ff ffca 	bl	80086a8 <_ZN7DbgUart9PopTxDataEv>
 8008714:	4603      	mov	r3, r0
 8008716:	4618      	mov	r0, r3
 8008718:	f7ff ffae 	bl	8008678 <_ZN7DbgUart13Senduint8_tHdEh>
	} else {
		UART_DEV->CR1 &= ~USART_CR1_TXEIE; // zablkowanie przerwa� od pustego bufora nadajnika
		txData.sending = false;
	}
}
 800871c:	e009      	b.n	8008732 <_ZN7DbgUart9IrqTXCharEv+0x36>
		UART_DEV->CR1 &= ~USART_CR1_TXEIE; // zablkowanie przerwa� od pustego bufora nadajnika
 800871e:	4b07      	ldr	r3, [pc, #28]	; (800873c <_ZN7DbgUart9IrqTXCharEv+0x40>)
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	4a06      	ldr	r2, [pc, #24]	; (800873c <_ZN7DbgUart9IrqTXCharEv+0x40>)
 8008724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008728:	60d3      	str	r3, [r2, #12]
		txData.sending = false;
 800872a:	4b03      	ldr	r3, [pc, #12]	; (8008738 <_ZN7DbgUart9IrqTXCharEv+0x3c>)
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8008732:	bf00      	nop
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	20001564 	.word	0x20001564
 800873c:	40004400 	.word	0x40004400

08008740 <_ZN7DbgUart9StartSendEv>:

void DbgUart::StartSend(void) {
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0
	if (!txData.sending) {
 8008744:	4b16      	ldr	r3, [pc, #88]	; (80087a0 <_ZN7DbgUart9StartSendEv+0x60>)
 8008746:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800874a:	f083 0301 	eor.w	r3, r3, #1
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d022      	beq.n	800879a <_ZN7DbgUart9StartSendEv+0x5a>
		if (!txData.complete)
 8008754:	4b12      	ldr	r3, [pc, #72]	; (80087a0 <_ZN7DbgUart9StartSendEv+0x60>)
 8008756:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800875a:	f083 0301 	eor.w	r3, r3, #1
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	d006      	beq.n	8008772 <_ZN7DbgUart9StartSendEv+0x32>
			UART_DEV->CR1 |= USART_CR1_TXEIE;
 8008764:	4b0f      	ldr	r3, [pc, #60]	; (80087a4 <_ZN7DbgUart9StartSendEv+0x64>)
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	4a0e      	ldr	r2, [pc, #56]	; (80087a4 <_ZN7DbgUart9StartSendEv+0x64>)
 800876a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800876e:	60d3      	str	r3, [r2, #12]
 8008770:	e00f      	b.n	8008792 <_ZN7DbgUart9StartSendEv+0x52>
		else {
			Senduint8_tHd(PopTxData());
 8008772:	f7ff ff99 	bl	80086a8 <_ZN7DbgUart9PopTxDataEv>
 8008776:	4603      	mov	r3, r0
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff ff7d 	bl	8008678 <_ZN7DbgUart13Senduint8_tHdEh>
			UART_DEV->CR1 |= (USART_CR1_TXEIE | USART_CR1_TCIE); // wys�anego znaku i ko�ca transmisji
 800877e:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <_ZN7DbgUart9StartSendEv+0x64>)
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	4a08      	ldr	r2, [pc, #32]	; (80087a4 <_ZN7DbgUart9StartSendEv+0x64>)
 8008784:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008788:	60d3      	str	r3, [r2, #12]
			txData.complete = false;
 800878a:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <_ZN7DbgUart9StartSendEv+0x60>)
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		txData.sending = true;
 8008792:	4b03      	ldr	r3, [pc, #12]	; (80087a0 <_ZN7DbgUart9StartSendEv+0x60>)
 8008794:	2201      	movs	r2, #1
 8008796:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
	}
}
 800879a:	bf00      	nop
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20001564 	.word	0x20001564
 80087a4:	40004400 	.word	0x40004400

080087a8 <_ZN7DbgUart3IRQEv>:

void DbgUart::IRQ(void) {
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0

	cntRec.Irq++;
 80087ae:	4b56      	ldr	r3, [pc, #344]	; (8008908 <_ZN7DbgUart3IRQEv+0x160>)
 80087b0:	88db      	ldrh	r3, [r3, #6]
 80087b2:	3301      	adds	r3, #1
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	4b54      	ldr	r3, [pc, #336]	; (8008908 <_ZN7DbgUart3IRQEv+0x160>)
 80087b8:	80da      	strh	r2, [r3, #6]
	__IO uint32_t tmpreg = 0x00U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	603b      	str	r3, [r7, #0]
// frame error, Noise error or data recived interrupt

	if (UART_DEV->SR & (UART_FLAG_RXNE | UART_FLAG_FE | UART_FLAG_NE)) {
 80087be:	4b53      	ldr	r3, [pc, #332]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0326 	and.w	r3, r3, #38	; 0x26
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	bf14      	ite	ne
 80087ca:	2301      	movne	r3, #1
 80087cc:	2300      	moveq	r3, #0
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d05a      	beq.n	800888a <_ZN7DbgUart3IRQEv+0xe2>
		bool dtOK = true;
 80087d4:	2301      	movs	r3, #1
 80087d6:	71fb      	strb	r3, [r7, #7]
		if (UART_DEV->SR & UART_FLAG_FE) {
 80087d8:	4b4c      	ldr	r3, [pc, #304]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0302 	and.w	r3, r3, #2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	bf14      	ite	ne
 80087e4:	2301      	movne	r3, #1
 80087e6:	2300      	moveq	r3, #0
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d008      	beq.n	8008800 <_ZN7DbgUart3IRQEv+0x58>
			//framing Error
			tmpreg = UART_DEV->SR;
 80087ee:	4b47      	ldr	r3, [pc, #284]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	603b      	str	r3, [r7, #0]
			tmpreg = UART_DEV->DR;
 80087f4:	4b45      	ldr	r3, [pc, #276]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	603b      	str	r3, [r7, #0]
			dtOK = false;
 80087fa:	2300      	movs	r3, #0
 80087fc:	71fb      	strb	r3, [r7, #7]
 80087fe:	e03a      	b.n	8008876 <_ZN7DbgUart3IRQEv+0xce>
		} else if (UART_DEV->SR & UART_FLAG_NE) {
 8008800:	4b42      	ldr	r3, [pc, #264]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 0304 	and.w	r3, r3, #4
 8008808:	2b00      	cmp	r3, #0
 800880a:	bf14      	ite	ne
 800880c:	2301      	movne	r3, #1
 800880e:	2300      	moveq	r3, #0
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d008      	beq.n	8008828 <_ZN7DbgUart3IRQEv+0x80>
			//Noise detection error
			tmpreg = UART_DEV->SR;
 8008816:	4b3d      	ldr	r3, [pc, #244]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	603b      	str	r3, [r7, #0]
			tmpreg = UART_DEV->DR;
 800881c:	4b3b      	ldr	r3, [pc, #236]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	603b      	str	r3, [r7, #0]
			dtOK = false;
 8008822:	2300      	movs	r3, #0
 8008824:	71fb      	strb	r3, [r7, #7]
 8008826:	e026      	b.n	8008876 <_ZN7DbgUart3IRQEv+0xce>
		} else if (UART_DEV->SR & UART_FLAG_ORE) {
 8008828:	4b38      	ldr	r3, [pc, #224]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0308 	and.w	r3, r3, #8
 8008830:	2b00      	cmp	r3, #0
 8008832:	bf14      	ite	ne
 8008834:	2301      	movne	r3, #1
 8008836:	2300      	moveq	r3, #0
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d008      	beq.n	8008850 <_ZN7DbgUart3IRQEv+0xa8>
			//Overrun error
			tmpreg = UART_DEV->SR;
 800883e:	4b33      	ldr	r3, [pc, #204]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	603b      	str	r3, [r7, #0]
			tmpreg = UART_DEV->DR;
 8008844:	4b31      	ldr	r3, [pc, #196]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	603b      	str	r3, [r7, #0]
			dtOK = false;
 800884a:	2300      	movs	r3, #0
 800884c:	71fb      	strb	r3, [r7, #7]
 800884e:	e012      	b.n	8008876 <_ZN7DbgUart3IRQEv+0xce>
		} else if (UART_DEV->SR & UART_FLAG_PE) {
 8008850:	4b2e      	ldr	r3, [pc, #184]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	bf14      	ite	ne
 800885c:	2301      	movne	r3, #1
 800885e:	2300      	moveq	r3, #0
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d007      	beq.n	8008876 <_ZN7DbgUart3IRQEv+0xce>
			//Parrity error
			tmpreg = UART_DEV->SR;
 8008866:	4b29      	ldr	r3, [pc, #164]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	603b      	str	r3, [r7, #0]
			tmpreg = UART_DEV->DR;
 800886c:	4b27      	ldr	r3, [pc, #156]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	603b      	str	r3, [r7, #0]
			dtOK = false;
 8008872:	2300      	movs	r3, #0
 8008874:	71fb      	strb	r3, [r7, #7]
		}
		uint8_t a = UART_DEV->DR;
 8008876:	4b25      	ldr	r3, [pc, #148]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	71bb      	strb	r3, [r7, #6]
		if (dtOK) {
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <_ZN7DbgUart3IRQEv+0xe2>
			IrqRXChar(a);
 8008882:	79bb      	ldrb	r3, [r7, #6]
 8008884:	4618      	mov	r0, r3
 8008886:	f7ff febd 	bl	8008604 <_ZN7DbgUart9IrqRXCharEh>
		}

	}

	//przerwanie od putego rejestru nadajnika
	if (UART_DEV->SR & UART_FLAG_TXE) {
 800888a:	4b20      	ldr	r3, [pc, #128]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008892:	2b00      	cmp	r3, #0
 8008894:	bf14      	ite	ne
 8008896:	2301      	movne	r3, #1
 8008898:	2300      	moveq	r3, #0
 800889a:	b2db      	uxtb	r3, r3
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <_ZN7DbgUart3IRQEv+0xfc>
		IrqTXChar();
 80088a0:	f7ff ff2c 	bl	80086fc <_ZN7DbgUart9IrqTXCharEv>
	}

	//przerwanie od ko�ca nadawania ostatniego znaku
	if (UART_DEV->SR & UART_FLAG_TC) {
 80088a4:	4b19      	ldr	r3, [pc, #100]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	bf14      	ite	ne
 80088b0:	2301      	movne	r3, #1
 80088b2:	2300      	moveq	r3, #0
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00f      	beq.n	80088da <_ZN7DbgUart3IRQEv+0x132>
		tmpreg = UART_DEV->SR;
 80088ba:	4b14      	ldr	r3, [pc, #80]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	603b      	str	r3, [r7, #0]
		tmpreg = UART_DEV->DR;
 80088c0:	4b12      	ldr	r3, [pc, #72]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	603b      	str	r3, [r7, #0]
		UART_DEV->CR1 &= ~USART_CR1_TCIE; // wy��czeie przerwania od ko�ca
 80088c6:	4b11      	ldr	r3, [pc, #68]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	4a10      	ldr	r2, [pc, #64]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 80088cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088d0:	60d3      	str	r3, [r2, #12]
		txData.complete = true;
 80088d2:	4b0f      	ldr	r3, [pc, #60]	; (8008910 <_ZN7DbgUart3IRQEv+0x168>)
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
	}

// UART parity error interrupt occurred
	if (UART_DEV->SR & UART_FLAG_PE) {
 80088da:	4b0c      	ldr	r3, [pc, #48]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	bf14      	ite	ne
 80088e6:	2301      	movne	r3, #1
 80088e8:	2300      	moveq	r3, #0
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d005      	beq.n	80088fc <_ZN7DbgUart3IRQEv+0x154>
		UART_DEV->CR1 &= ~USART_CR1_PEIE;
 80088f0:	4b06      	ldr	r3, [pc, #24]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	4a05      	ldr	r2, [pc, #20]	; (800890c <_ZN7DbgUart3IRQEv+0x164>)
 80088f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088fa:	60d3      	str	r3, [r2, #12]
	}
	UNUSED(tmpreg);
 80088fc:	683b      	ldr	r3, [r7, #0]

}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	20001544 	.word	0x20001544
 800890c:	40004400 	.word	0x40004400
 8008910:	20001564 	.word	0x20001564

08008914 <_ZN7DbgUart4InitEm>:

void DbgUart::Init(uint32_t baudRate) {
 8008914:	b580      	push	{r7, lr}
 8008916:	b094      	sub	sp, #80	; 0x50
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
	txData.sending = false;
 800891c:	4b27      	ldr	r3, [pc, #156]	; (80089bc <_ZN7DbgUart4InitEm+0xa8>)
 800891e:	2200      	movs	r2, #0
 8008920:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
	txData.complete = true;
 8008924:	4b25      	ldr	r3, [pc, #148]	; (80089bc <_ZN7DbgUart4InitEm+0xa8>)
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205

	UART_HandleTypeDef huart;
	memset(&huart, 0, sizeof(huart));
 800892c:	f107 0308 	add.w	r3, r7, #8
 8008930:	2248      	movs	r2, #72	; 0x48
 8008932:	2100      	movs	r1, #0
 8008934:	4618      	mov	r0, r3
 8008936:	f000 fab0 	bl	8008e9a <memset>

	huart.Instance = UART_DEV;
 800893a:	4b21      	ldr	r3, [pc, #132]	; (80089c0 <_ZN7DbgUart4InitEm+0xac>)
 800893c:	60bb      	str	r3, [r7, #8]
	huart.Init.BaudRate = baudRate;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	60fb      	str	r3, [r7, #12]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 8008942:	2300      	movs	r3, #0
 8008944:	613b      	str	r3, [r7, #16]
	huart.Init.StopBits = UART_STOPBITS_1;
 8008946:	2300      	movs	r3, #0
 8008948:	617b      	str	r3, [r7, #20]
	huart.Init.Parity = UART_PARITY_NONE;
 800894a:	2300      	movs	r3, #0
 800894c:	61bb      	str	r3, [r7, #24]
	huart.Init.Mode = UART_MODE_TX_RX;
 800894e:	230c      	movs	r3, #12
 8008950:	61fb      	str	r3, [r7, #28]
	huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008952:	2300      	movs	r3, #0
 8008954:	623b      	str	r3, [r7, #32]
	huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8008956:	2300      	movs	r3, #0
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_UART_Init(&huart) != HAL_OK) {
 800895a:	f107 0308 	add.w	r3, r7, #8
 800895e:	4618      	mov	r0, r3
 8008960:	f7fb f816 	bl	8003990 <HAL_UART_Init>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	bf14      	ite	ne
 800896a:	2301      	movne	r3, #1
 800896c:	2300      	moveq	r3, #0
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b00      	cmp	r3, #0
 8008972:	d01f      	beq.n	80089b4 <_ZN7DbgUart4InitEm+0xa0>

		SET_BIT(huart.Instance->CR1, USART_CR1_RE); //enable reciver
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	68da      	ldr	r2, [r3, #12]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f042 0204 	orr.w	r2, r2, #4
 800897e:	60da      	str	r2, [r3, #12]
		SET_BIT(huart.Instance->CR1, USART_CR1_TE); //enable transmiter
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	68da      	ldr	r2, [r3, #12]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f042 0208 	orr.w	r2, r2, #8
 800898a:	60da      	str	r2, [r3, #12]
		SET_BIT(huart.Instance->CR1, USART_CR1_UE); //enable UART
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008996:	60da      	str	r2, [r3, #12]
		SET_BIT(huart.Instance->CR1, USART_CR1_RXNEIE); // za�aczone przerwania od odbiornika;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	68da      	ldr	r2, [r3, #12]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f042 0220 	orr.w	r2, r2, #32
 80089a2:	60da      	str	r2, [r3, #12]

		HAL_NVIC_SetPriority(UART_IRQn, UART_PRIORITY, 0);
 80089a4:	2200      	movs	r2, #0
 80089a6:	2102      	movs	r1, #2
 80089a8:	2026      	movs	r0, #38	; 0x26
 80089aa:	f7f8 f822 	bl	80009f2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(UART_IRQn);
 80089ae:	2026      	movs	r0, #38	; 0x26
 80089b0:	f7f8 f83b 	bl	8000a2a <HAL_NVIC_EnableIRQ>
	}

}
 80089b4:	bf00      	nop
 80089b6:	3750      	adds	r7, #80	; 0x50
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	20001564 	.word	0x20001564
 80089c0:	40004400 	.word	0x40004400

080089c4 <_ZN7DbgUart5WriteEPKci>:

bool DbgUart::Write(const char *buf, int len) {
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
	int free = (int) txData.tail - txData.head;
 80089ce:	4b2e      	ldr	r3, [pc, #184]	; (8008a88 <_ZN7DbgUart5WriteEPKci+0xc4>)
 80089d0:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 80089d4:	461a      	mov	r2, r3
 80089d6:	4b2c      	ldr	r3, [pc, #176]	; (8008a88 <_ZN7DbgUart5WriteEPKci+0xc4>)
 80089d8:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	60fb      	str	r3, [r7, #12]
	if (free <= 0)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dc03      	bgt.n	80089ee <_ZN7DbgUart5WriteEPKci+0x2a>
		free += DBG_TX_BUF_SIZE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80089ec:	60fb      	str	r3, [r7, #12]
	if (len > free - 1)
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	dc01      	bgt.n	80089fa <_ZN7DbgUart5WriteEPKci+0x36>
		return false;
 80089f6:	2300      	movs	r3, #0
 80089f8:	e041      	b.n	8008a7e <_ZN7DbgUart5WriteEPKci+0xba>

	int n = DBG_TX_BUF_SIZE - txData.head;
 80089fa:	4b23      	ldr	r3, [pc, #140]	; (8008a88 <_ZN7DbgUart5WriteEPKci+0xc4>)
 80089fc:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8008a00:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008a04:	60bb      	str	r3, [r7, #8]
	if (n > len)
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	dd01      	ble.n	8008a12 <_ZN7DbgUart5WriteEPKci+0x4e>
		n = len;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	60bb      	str	r3, [r7, #8]

	memcpy(&txData.buf[txData.head], buf, n);
 8008a12:	4b1d      	ldr	r3, [pc, #116]	; (8008a88 <_ZN7DbgUart5WriteEPKci+0xc4>)
 8008a14:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4b1b      	ldr	r3, [pc, #108]	; (8008a88 <_ZN7DbgUart5WriteEPKci+0xc4>)
 8008a1c:	4413      	add	r3, r2
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	6879      	ldr	r1, [r7, #4]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fa2b 	bl	8008e7e <memcpy>

	txData.head += n;
 8008a28:	4b17      	ldr	r3, [pc, #92]	; (8008a88 <_ZN7DbgUart5WriteEPKci+0xc4>)
 8008a2a:	f8b3 2200 	ldrh.w	r2, [r3, #512]	; 0x200
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	4413      	add	r3, r2
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	4b14      	ldr	r3, [pc, #80]	; (8008a88 <_ZN7DbgUart5WriteEPKci+0xc4>)
 8008a38:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	if (txData.head >= DBG_TX_BUF_SIZE)
 8008a3c:	4b12      	ldr	r3, [pc, #72]	; (8008a88 <_ZN7DbgUart5WriteEPKci+0xc4>)
 8008a3e:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8008a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a46:	d303      	bcc.n	8008a50 <_ZN7DbgUart5WriteEPKci+0x8c>
		txData.head = 0;
 8008a48:	4b0f      	ldr	r3, [pc, #60]	; (8008a88 <_ZN7DbgUart5WriteEPKci+0xc4>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200

	len -= n;
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	603b      	str	r3, [r7, #0]
	if (len > 0) {
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	dd0c      	ble.n	8008a78 <_ZN7DbgUart5WriteEPKci+0xb4>
		memcpy(txData.buf, &buf[n], len);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	4413      	add	r3, r2
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	4619      	mov	r1, r3
 8008a68:	4807      	ldr	r0, [pc, #28]	; (8008a88 <_ZN7DbgUart5WriteEPKci+0xc4>)
 8008a6a:	f000 fa08 	bl	8008e7e <memcpy>
		txData.head = len;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <_ZN7DbgUart5WriteEPKci+0xc4>)
 8008a74:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}

	StartSend();
 8008a78:	f7ff fe62 	bl	8008740 <_ZN7DbgUart9StartSendEv>

	return true;
 8008a7c:	2301      	movs	r3, #1
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	20001564 	.word	0x20001564

08008a8c <DbgUart_IRQ>:
		rxData.tail = 0;
	}
	return true;
}

extern "C" void DbgUart_IRQ(void){
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
	DbgUart::IRQ();
 8008a90:	f7ff fe8a 	bl	80087a8 <_ZN7DbgUart3IRQEv>
}
 8008a94:	bf00      	nop
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <__errno>:
 8008a98:	4b01      	ldr	r3, [pc, #4]	; (8008aa0 <__errno+0x8>)
 8008a9a:	6818      	ldr	r0, [r3, #0]
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	2000017c 	.word	0x2000017c

08008aa4 <__sflush_r>:
 8008aa4:	898a      	ldrh	r2, [r1, #12]
 8008aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	0710      	lsls	r0, r2, #28
 8008aac:	460c      	mov	r4, r1
 8008aae:	d457      	bmi.n	8008b60 <__sflush_r+0xbc>
 8008ab0:	684b      	ldr	r3, [r1, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	dc04      	bgt.n	8008ac0 <__sflush_r+0x1c>
 8008ab6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	dc01      	bgt.n	8008ac0 <__sflush_r+0x1c>
 8008abc:	2000      	movs	r0, #0
 8008abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ac2:	2e00      	cmp	r6, #0
 8008ac4:	d0fa      	beq.n	8008abc <__sflush_r+0x18>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008acc:	682f      	ldr	r7, [r5, #0]
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	d032      	beq.n	8008b38 <__sflush_r+0x94>
 8008ad2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	075a      	lsls	r2, r3, #29
 8008ad8:	d505      	bpl.n	8008ae6 <__sflush_r+0x42>
 8008ada:	6863      	ldr	r3, [r4, #4]
 8008adc:	1ac0      	subs	r0, r0, r3
 8008ade:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ae0:	b10b      	cbz	r3, 8008ae6 <__sflush_r+0x42>
 8008ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ae4:	1ac0      	subs	r0, r0, r3
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	4602      	mov	r2, r0
 8008aea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aec:	4628      	mov	r0, r5
 8008aee:	6a21      	ldr	r1, [r4, #32]
 8008af0:	47b0      	blx	r6
 8008af2:	1c43      	adds	r3, r0, #1
 8008af4:	89a3      	ldrh	r3, [r4, #12]
 8008af6:	d106      	bne.n	8008b06 <__sflush_r+0x62>
 8008af8:	6829      	ldr	r1, [r5, #0]
 8008afa:	291d      	cmp	r1, #29
 8008afc:	d82c      	bhi.n	8008b58 <__sflush_r+0xb4>
 8008afe:	4a29      	ldr	r2, [pc, #164]	; (8008ba4 <__sflush_r+0x100>)
 8008b00:	40ca      	lsrs	r2, r1
 8008b02:	07d6      	lsls	r6, r2, #31
 8008b04:	d528      	bpl.n	8008b58 <__sflush_r+0xb4>
 8008b06:	2200      	movs	r2, #0
 8008b08:	6062      	str	r2, [r4, #4]
 8008b0a:	6922      	ldr	r2, [r4, #16]
 8008b0c:	04d9      	lsls	r1, r3, #19
 8008b0e:	6022      	str	r2, [r4, #0]
 8008b10:	d504      	bpl.n	8008b1c <__sflush_r+0x78>
 8008b12:	1c42      	adds	r2, r0, #1
 8008b14:	d101      	bne.n	8008b1a <__sflush_r+0x76>
 8008b16:	682b      	ldr	r3, [r5, #0]
 8008b18:	b903      	cbnz	r3, 8008b1c <__sflush_r+0x78>
 8008b1a:	6560      	str	r0, [r4, #84]	; 0x54
 8008b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b1e:	602f      	str	r7, [r5, #0]
 8008b20:	2900      	cmp	r1, #0
 8008b22:	d0cb      	beq.n	8008abc <__sflush_r+0x18>
 8008b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b28:	4299      	cmp	r1, r3
 8008b2a:	d002      	beq.n	8008b32 <__sflush_r+0x8e>
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	f000 f9bd 	bl	8008eac <_free_r>
 8008b32:	2000      	movs	r0, #0
 8008b34:	6360      	str	r0, [r4, #52]	; 0x34
 8008b36:	e7c2      	b.n	8008abe <__sflush_r+0x1a>
 8008b38:	6a21      	ldr	r1, [r4, #32]
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	47b0      	blx	r6
 8008b40:	1c41      	adds	r1, r0, #1
 8008b42:	d1c7      	bne.n	8008ad4 <__sflush_r+0x30>
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d0c4      	beq.n	8008ad4 <__sflush_r+0x30>
 8008b4a:	2b1d      	cmp	r3, #29
 8008b4c:	d001      	beq.n	8008b52 <__sflush_r+0xae>
 8008b4e:	2b16      	cmp	r3, #22
 8008b50:	d101      	bne.n	8008b56 <__sflush_r+0xb2>
 8008b52:	602f      	str	r7, [r5, #0]
 8008b54:	e7b2      	b.n	8008abc <__sflush_r+0x18>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b5c:	81a3      	strh	r3, [r4, #12]
 8008b5e:	e7ae      	b.n	8008abe <__sflush_r+0x1a>
 8008b60:	690f      	ldr	r7, [r1, #16]
 8008b62:	2f00      	cmp	r7, #0
 8008b64:	d0aa      	beq.n	8008abc <__sflush_r+0x18>
 8008b66:	0793      	lsls	r3, r2, #30
 8008b68:	bf18      	it	ne
 8008b6a:	2300      	movne	r3, #0
 8008b6c:	680e      	ldr	r6, [r1, #0]
 8008b6e:	bf08      	it	eq
 8008b70:	694b      	ldreq	r3, [r1, #20]
 8008b72:	1bf6      	subs	r6, r6, r7
 8008b74:	600f      	str	r7, [r1, #0]
 8008b76:	608b      	str	r3, [r1, #8]
 8008b78:	2e00      	cmp	r6, #0
 8008b7a:	dd9f      	ble.n	8008abc <__sflush_r+0x18>
 8008b7c:	4633      	mov	r3, r6
 8008b7e:	463a      	mov	r2, r7
 8008b80:	4628      	mov	r0, r5
 8008b82:	6a21      	ldr	r1, [r4, #32]
 8008b84:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008b88:	47e0      	blx	ip
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	dc06      	bgt.n	8008b9c <__sflush_r+0xf8>
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295
 8008b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b98:	81a3      	strh	r3, [r4, #12]
 8008b9a:	e790      	b.n	8008abe <__sflush_r+0x1a>
 8008b9c:	4407      	add	r7, r0
 8008b9e:	1a36      	subs	r6, r6, r0
 8008ba0:	e7ea      	b.n	8008b78 <__sflush_r+0xd4>
 8008ba2:	bf00      	nop
 8008ba4:	20400001 	.word	0x20400001

08008ba8 <_fflush_r>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	690b      	ldr	r3, [r1, #16]
 8008bac:	4605      	mov	r5, r0
 8008bae:	460c      	mov	r4, r1
 8008bb0:	b913      	cbnz	r3, 8008bb8 <_fflush_r+0x10>
 8008bb2:	2500      	movs	r5, #0
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	bd38      	pop	{r3, r4, r5, pc}
 8008bb8:	b118      	cbz	r0, 8008bc2 <_fflush_r+0x1a>
 8008bba:	6983      	ldr	r3, [r0, #24]
 8008bbc:	b90b      	cbnz	r3, 8008bc2 <_fflush_r+0x1a>
 8008bbe:	f000 f899 	bl	8008cf4 <__sinit>
 8008bc2:	4b14      	ldr	r3, [pc, #80]	; (8008c14 <_fflush_r+0x6c>)
 8008bc4:	429c      	cmp	r4, r3
 8008bc6:	d11b      	bne.n	8008c00 <_fflush_r+0x58>
 8008bc8:	686c      	ldr	r4, [r5, #4]
 8008bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d0ef      	beq.n	8008bb2 <_fflush_r+0xa>
 8008bd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bd4:	07d0      	lsls	r0, r2, #31
 8008bd6:	d404      	bmi.n	8008be2 <_fflush_r+0x3a>
 8008bd8:	0599      	lsls	r1, r3, #22
 8008bda:	d402      	bmi.n	8008be2 <_fflush_r+0x3a>
 8008bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bde:	f000 f94c 	bl	8008e7a <__retarget_lock_acquire_recursive>
 8008be2:	4628      	mov	r0, r5
 8008be4:	4621      	mov	r1, r4
 8008be6:	f7ff ff5d 	bl	8008aa4 <__sflush_r>
 8008bea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bec:	4605      	mov	r5, r0
 8008bee:	07da      	lsls	r2, r3, #31
 8008bf0:	d4e0      	bmi.n	8008bb4 <_fflush_r+0xc>
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	059b      	lsls	r3, r3, #22
 8008bf6:	d4dd      	bmi.n	8008bb4 <_fflush_r+0xc>
 8008bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bfa:	f000 f93f 	bl	8008e7c <__retarget_lock_release_recursive>
 8008bfe:	e7d9      	b.n	8008bb4 <_fflush_r+0xc>
 8008c00:	4b05      	ldr	r3, [pc, #20]	; (8008c18 <_fflush_r+0x70>)
 8008c02:	429c      	cmp	r4, r3
 8008c04:	d101      	bne.n	8008c0a <_fflush_r+0x62>
 8008c06:	68ac      	ldr	r4, [r5, #8]
 8008c08:	e7df      	b.n	8008bca <_fflush_r+0x22>
 8008c0a:	4b04      	ldr	r3, [pc, #16]	; (8008c1c <_fflush_r+0x74>)
 8008c0c:	429c      	cmp	r4, r3
 8008c0e:	bf08      	it	eq
 8008c10:	68ec      	ldreq	r4, [r5, #12]
 8008c12:	e7da      	b.n	8008bca <_fflush_r+0x22>
 8008c14:	0800a038 	.word	0x0800a038
 8008c18:	0800a058 	.word	0x0800a058
 8008c1c:	0800a018 	.word	0x0800a018

08008c20 <fflush>:
 8008c20:	4601      	mov	r1, r0
 8008c22:	b920      	cbnz	r0, 8008c2e <fflush+0xe>
 8008c24:	4b04      	ldr	r3, [pc, #16]	; (8008c38 <fflush+0x18>)
 8008c26:	4905      	ldr	r1, [pc, #20]	; (8008c3c <fflush+0x1c>)
 8008c28:	6818      	ldr	r0, [r3, #0]
 8008c2a:	f000 b8e1 	b.w	8008df0 <_fwalk_reent>
 8008c2e:	4b04      	ldr	r3, [pc, #16]	; (8008c40 <fflush+0x20>)
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	f7ff bfb9 	b.w	8008ba8 <_fflush_r>
 8008c36:	bf00      	nop
 8008c38:	0800a078 	.word	0x0800a078
 8008c3c:	08008ba9 	.word	0x08008ba9
 8008c40:	2000017c 	.word	0x2000017c

08008c44 <std>:
 8008c44:	2300      	movs	r3, #0
 8008c46:	b510      	push	{r4, lr}
 8008c48:	4604      	mov	r4, r0
 8008c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8008c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c52:	6083      	str	r3, [r0, #8]
 8008c54:	8181      	strh	r1, [r0, #12]
 8008c56:	6643      	str	r3, [r0, #100]	; 0x64
 8008c58:	81c2      	strh	r2, [r0, #14]
 8008c5a:	6183      	str	r3, [r0, #24]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	2208      	movs	r2, #8
 8008c60:	305c      	adds	r0, #92	; 0x5c
 8008c62:	f000 f91a 	bl	8008e9a <memset>
 8008c66:	4b05      	ldr	r3, [pc, #20]	; (8008c7c <std+0x38>)
 8008c68:	6224      	str	r4, [r4, #32]
 8008c6a:	6263      	str	r3, [r4, #36]	; 0x24
 8008c6c:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <std+0x3c>)
 8008c6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c70:	4b04      	ldr	r3, [pc, #16]	; (8008c84 <std+0x40>)
 8008c72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c74:	4b04      	ldr	r3, [pc, #16]	; (8008c88 <std+0x44>)
 8008c76:	6323      	str	r3, [r4, #48]	; 0x30
 8008c78:	bd10      	pop	{r4, pc}
 8008c7a:	bf00      	nop
 8008c7c:	08009209 	.word	0x08009209
 8008c80:	0800922b 	.word	0x0800922b
 8008c84:	08009263 	.word	0x08009263
 8008c88:	08009287 	.word	0x08009287

08008c8c <_cleanup_r>:
 8008c8c:	4901      	ldr	r1, [pc, #4]	; (8008c94 <_cleanup_r+0x8>)
 8008c8e:	f000 b8af 	b.w	8008df0 <_fwalk_reent>
 8008c92:	bf00      	nop
 8008c94:	08008ba9 	.word	0x08008ba9

08008c98 <__sfmoreglue>:
 8008c98:	2268      	movs	r2, #104	; 0x68
 8008c9a:	b570      	push	{r4, r5, r6, lr}
 8008c9c:	1e4d      	subs	r5, r1, #1
 8008c9e:	4355      	muls	r5, r2
 8008ca0:	460e      	mov	r6, r1
 8008ca2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ca6:	f000 f969 	bl	8008f7c <_malloc_r>
 8008caa:	4604      	mov	r4, r0
 8008cac:	b140      	cbz	r0, 8008cc0 <__sfmoreglue+0x28>
 8008cae:	2100      	movs	r1, #0
 8008cb0:	e9c0 1600 	strd	r1, r6, [r0]
 8008cb4:	300c      	adds	r0, #12
 8008cb6:	60a0      	str	r0, [r4, #8]
 8008cb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cbc:	f000 f8ed 	bl	8008e9a <memset>
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}

08008cc4 <__sfp_lock_acquire>:
 8008cc4:	4801      	ldr	r0, [pc, #4]	; (8008ccc <__sfp_lock_acquire+0x8>)
 8008cc6:	f000 b8d8 	b.w	8008e7a <__retarget_lock_acquire_recursive>
 8008cca:	bf00      	nop
 8008ccc:	2000176b 	.word	0x2000176b

08008cd0 <__sfp_lock_release>:
 8008cd0:	4801      	ldr	r0, [pc, #4]	; (8008cd8 <__sfp_lock_release+0x8>)
 8008cd2:	f000 b8d3 	b.w	8008e7c <__retarget_lock_release_recursive>
 8008cd6:	bf00      	nop
 8008cd8:	2000176b 	.word	0x2000176b

08008cdc <__sinit_lock_acquire>:
 8008cdc:	4801      	ldr	r0, [pc, #4]	; (8008ce4 <__sinit_lock_acquire+0x8>)
 8008cde:	f000 b8cc 	b.w	8008e7a <__retarget_lock_acquire_recursive>
 8008ce2:	bf00      	nop
 8008ce4:	2000176c 	.word	0x2000176c

08008ce8 <__sinit_lock_release>:
 8008ce8:	4801      	ldr	r0, [pc, #4]	; (8008cf0 <__sinit_lock_release+0x8>)
 8008cea:	f000 b8c7 	b.w	8008e7c <__retarget_lock_release_recursive>
 8008cee:	bf00      	nop
 8008cf0:	2000176c 	.word	0x2000176c

08008cf4 <__sinit>:
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	f7ff fff0 	bl	8008cdc <__sinit_lock_acquire>
 8008cfc:	69a3      	ldr	r3, [r4, #24]
 8008cfe:	b11b      	cbz	r3, 8008d08 <__sinit+0x14>
 8008d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d04:	f7ff bff0 	b.w	8008ce8 <__sinit_lock_release>
 8008d08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d0c:	6523      	str	r3, [r4, #80]	; 0x50
 8008d0e:	4b13      	ldr	r3, [pc, #76]	; (8008d5c <__sinit+0x68>)
 8008d10:	4a13      	ldr	r2, [pc, #76]	; (8008d60 <__sinit+0x6c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	bf08      	it	eq
 8008d1a:	2301      	moveq	r3, #1
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	bf08      	it	eq
 8008d20:	61a3      	streq	r3, [r4, #24]
 8008d22:	f000 f81f 	bl	8008d64 <__sfp>
 8008d26:	6060      	str	r0, [r4, #4]
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 f81b 	bl	8008d64 <__sfp>
 8008d2e:	60a0      	str	r0, [r4, #8]
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 f817 	bl	8008d64 <__sfp>
 8008d36:	2200      	movs	r2, #0
 8008d38:	2104      	movs	r1, #4
 8008d3a:	60e0      	str	r0, [r4, #12]
 8008d3c:	6860      	ldr	r0, [r4, #4]
 8008d3e:	f7ff ff81 	bl	8008c44 <std>
 8008d42:	2201      	movs	r2, #1
 8008d44:	2109      	movs	r1, #9
 8008d46:	68a0      	ldr	r0, [r4, #8]
 8008d48:	f7ff ff7c 	bl	8008c44 <std>
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	2112      	movs	r1, #18
 8008d50:	68e0      	ldr	r0, [r4, #12]
 8008d52:	f7ff ff77 	bl	8008c44 <std>
 8008d56:	2301      	movs	r3, #1
 8008d58:	61a3      	str	r3, [r4, #24]
 8008d5a:	e7d1      	b.n	8008d00 <__sinit+0xc>
 8008d5c:	0800a078 	.word	0x0800a078
 8008d60:	08008c8d 	.word	0x08008c8d

08008d64 <__sfp>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	4607      	mov	r7, r0
 8008d68:	f7ff ffac 	bl	8008cc4 <__sfp_lock_acquire>
 8008d6c:	4b1e      	ldr	r3, [pc, #120]	; (8008de8 <__sfp+0x84>)
 8008d6e:	681e      	ldr	r6, [r3, #0]
 8008d70:	69b3      	ldr	r3, [r6, #24]
 8008d72:	b913      	cbnz	r3, 8008d7a <__sfp+0x16>
 8008d74:	4630      	mov	r0, r6
 8008d76:	f7ff ffbd 	bl	8008cf4 <__sinit>
 8008d7a:	3648      	adds	r6, #72	; 0x48
 8008d7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	d503      	bpl.n	8008d8c <__sfp+0x28>
 8008d84:	6833      	ldr	r3, [r6, #0]
 8008d86:	b30b      	cbz	r3, 8008dcc <__sfp+0x68>
 8008d88:	6836      	ldr	r6, [r6, #0]
 8008d8a:	e7f7      	b.n	8008d7c <__sfp+0x18>
 8008d8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d90:	b9d5      	cbnz	r5, 8008dc8 <__sfp+0x64>
 8008d92:	4b16      	ldr	r3, [pc, #88]	; (8008dec <__sfp+0x88>)
 8008d94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d98:	60e3      	str	r3, [r4, #12]
 8008d9a:	6665      	str	r5, [r4, #100]	; 0x64
 8008d9c:	f000 f86c 	bl	8008e78 <__retarget_lock_init_recursive>
 8008da0:	f7ff ff96 	bl	8008cd0 <__sfp_lock_release>
 8008da4:	2208      	movs	r2, #8
 8008da6:	4629      	mov	r1, r5
 8008da8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008dac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008db0:	6025      	str	r5, [r4, #0]
 8008db2:	61a5      	str	r5, [r4, #24]
 8008db4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008db8:	f000 f86f 	bl	8008e9a <memset>
 8008dbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008dc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc8:	3468      	adds	r4, #104	; 0x68
 8008dca:	e7d9      	b.n	8008d80 <__sfp+0x1c>
 8008dcc:	2104      	movs	r1, #4
 8008dce:	4638      	mov	r0, r7
 8008dd0:	f7ff ff62 	bl	8008c98 <__sfmoreglue>
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	6030      	str	r0, [r6, #0]
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d1d5      	bne.n	8008d88 <__sfp+0x24>
 8008ddc:	f7ff ff78 	bl	8008cd0 <__sfp_lock_release>
 8008de0:	230c      	movs	r3, #12
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	e7ee      	b.n	8008dc4 <__sfp+0x60>
 8008de6:	bf00      	nop
 8008de8:	0800a078 	.word	0x0800a078
 8008dec:	ffff0001 	.word	0xffff0001

08008df0 <_fwalk_reent>:
 8008df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008df4:	4606      	mov	r6, r0
 8008df6:	4688      	mov	r8, r1
 8008df8:	2700      	movs	r7, #0
 8008dfa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e02:	f1b9 0901 	subs.w	r9, r9, #1
 8008e06:	d505      	bpl.n	8008e14 <_fwalk_reent+0x24>
 8008e08:	6824      	ldr	r4, [r4, #0]
 8008e0a:	2c00      	cmp	r4, #0
 8008e0c:	d1f7      	bne.n	8008dfe <_fwalk_reent+0xe>
 8008e0e:	4638      	mov	r0, r7
 8008e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e14:	89ab      	ldrh	r3, [r5, #12]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d907      	bls.n	8008e2a <_fwalk_reent+0x3a>
 8008e1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	d003      	beq.n	8008e2a <_fwalk_reent+0x3a>
 8008e22:	4629      	mov	r1, r5
 8008e24:	4630      	mov	r0, r6
 8008e26:	47c0      	blx	r8
 8008e28:	4307      	orrs	r7, r0
 8008e2a:	3568      	adds	r5, #104	; 0x68
 8008e2c:	e7e9      	b.n	8008e02 <_fwalk_reent+0x12>
	...

08008e30 <__libc_init_array>:
 8008e30:	b570      	push	{r4, r5, r6, lr}
 8008e32:	2600      	movs	r6, #0
 8008e34:	4d0c      	ldr	r5, [pc, #48]	; (8008e68 <__libc_init_array+0x38>)
 8008e36:	4c0d      	ldr	r4, [pc, #52]	; (8008e6c <__libc_init_array+0x3c>)
 8008e38:	1b64      	subs	r4, r4, r5
 8008e3a:	10a4      	asrs	r4, r4, #2
 8008e3c:	42a6      	cmp	r6, r4
 8008e3e:	d109      	bne.n	8008e54 <__libc_init_array+0x24>
 8008e40:	f001 f86a 	bl	8009f18 <_init>
 8008e44:	2600      	movs	r6, #0
 8008e46:	4d0a      	ldr	r5, [pc, #40]	; (8008e70 <__libc_init_array+0x40>)
 8008e48:	4c0a      	ldr	r4, [pc, #40]	; (8008e74 <__libc_init_array+0x44>)
 8008e4a:	1b64      	subs	r4, r4, r5
 8008e4c:	10a4      	asrs	r4, r4, #2
 8008e4e:	42a6      	cmp	r6, r4
 8008e50:	d105      	bne.n	8008e5e <__libc_init_array+0x2e>
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
 8008e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e58:	4798      	blx	r3
 8008e5a:	3601      	adds	r6, #1
 8008e5c:	e7ee      	b.n	8008e3c <__libc_init_array+0xc>
 8008e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e62:	4798      	blx	r3
 8008e64:	3601      	adds	r6, #1
 8008e66:	e7f2      	b.n	8008e4e <__libc_init_array+0x1e>
 8008e68:	0800a0b0 	.word	0x0800a0b0
 8008e6c:	0800a0b0 	.word	0x0800a0b0
 8008e70:	0800a0b0 	.word	0x0800a0b0
 8008e74:	0800a0b4 	.word	0x0800a0b4

08008e78 <__retarget_lock_init_recursive>:
 8008e78:	4770      	bx	lr

08008e7a <__retarget_lock_acquire_recursive>:
 8008e7a:	4770      	bx	lr

08008e7c <__retarget_lock_release_recursive>:
 8008e7c:	4770      	bx	lr

08008e7e <memcpy>:
 8008e7e:	440a      	add	r2, r1
 8008e80:	4291      	cmp	r1, r2
 8008e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e86:	d100      	bne.n	8008e8a <memcpy+0xc>
 8008e88:	4770      	bx	lr
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e90:	4291      	cmp	r1, r2
 8008e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e96:	d1f9      	bne.n	8008e8c <memcpy+0xe>
 8008e98:	bd10      	pop	{r4, pc}

08008e9a <memset>:
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	4402      	add	r2, r0
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d100      	bne.n	8008ea4 <memset+0xa>
 8008ea2:	4770      	bx	lr
 8008ea4:	f803 1b01 	strb.w	r1, [r3], #1
 8008ea8:	e7f9      	b.n	8008e9e <memset+0x4>
	...

08008eac <_free_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	4605      	mov	r5, r0
 8008eb0:	2900      	cmp	r1, #0
 8008eb2:	d040      	beq.n	8008f36 <_free_r+0x8a>
 8008eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eb8:	1f0c      	subs	r4, r1, #4
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	bfb8      	it	lt
 8008ebe:	18e4      	addlt	r4, r4, r3
 8008ec0:	f000 fb40 	bl	8009544 <__malloc_lock>
 8008ec4:	4a1c      	ldr	r2, [pc, #112]	; (8008f38 <_free_r+0x8c>)
 8008ec6:	6813      	ldr	r3, [r2, #0]
 8008ec8:	b933      	cbnz	r3, 8008ed8 <_free_r+0x2c>
 8008eca:	6063      	str	r3, [r4, #4]
 8008ecc:	6014      	str	r4, [r2, #0]
 8008ece:	4628      	mov	r0, r5
 8008ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ed4:	f000 bb3c 	b.w	8009550 <__malloc_unlock>
 8008ed8:	42a3      	cmp	r3, r4
 8008eda:	d908      	bls.n	8008eee <_free_r+0x42>
 8008edc:	6820      	ldr	r0, [r4, #0]
 8008ede:	1821      	adds	r1, r4, r0
 8008ee0:	428b      	cmp	r3, r1
 8008ee2:	bf01      	itttt	eq
 8008ee4:	6819      	ldreq	r1, [r3, #0]
 8008ee6:	685b      	ldreq	r3, [r3, #4]
 8008ee8:	1809      	addeq	r1, r1, r0
 8008eea:	6021      	streq	r1, [r4, #0]
 8008eec:	e7ed      	b.n	8008eca <_free_r+0x1e>
 8008eee:	461a      	mov	r2, r3
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	b10b      	cbz	r3, 8008ef8 <_free_r+0x4c>
 8008ef4:	42a3      	cmp	r3, r4
 8008ef6:	d9fa      	bls.n	8008eee <_free_r+0x42>
 8008ef8:	6811      	ldr	r1, [r2, #0]
 8008efa:	1850      	adds	r0, r2, r1
 8008efc:	42a0      	cmp	r0, r4
 8008efe:	d10b      	bne.n	8008f18 <_free_r+0x6c>
 8008f00:	6820      	ldr	r0, [r4, #0]
 8008f02:	4401      	add	r1, r0
 8008f04:	1850      	adds	r0, r2, r1
 8008f06:	4283      	cmp	r3, r0
 8008f08:	6011      	str	r1, [r2, #0]
 8008f0a:	d1e0      	bne.n	8008ece <_free_r+0x22>
 8008f0c:	6818      	ldr	r0, [r3, #0]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	4401      	add	r1, r0
 8008f12:	6011      	str	r1, [r2, #0]
 8008f14:	6053      	str	r3, [r2, #4]
 8008f16:	e7da      	b.n	8008ece <_free_r+0x22>
 8008f18:	d902      	bls.n	8008f20 <_free_r+0x74>
 8008f1a:	230c      	movs	r3, #12
 8008f1c:	602b      	str	r3, [r5, #0]
 8008f1e:	e7d6      	b.n	8008ece <_free_r+0x22>
 8008f20:	6820      	ldr	r0, [r4, #0]
 8008f22:	1821      	adds	r1, r4, r0
 8008f24:	428b      	cmp	r3, r1
 8008f26:	bf01      	itttt	eq
 8008f28:	6819      	ldreq	r1, [r3, #0]
 8008f2a:	685b      	ldreq	r3, [r3, #4]
 8008f2c:	1809      	addeq	r1, r1, r0
 8008f2e:	6021      	streq	r1, [r4, #0]
 8008f30:	6063      	str	r3, [r4, #4]
 8008f32:	6054      	str	r4, [r2, #4]
 8008f34:	e7cb      	b.n	8008ece <_free_r+0x22>
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	20001770 	.word	0x20001770

08008f3c <sbrk_aligned>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	4e0e      	ldr	r6, [pc, #56]	; (8008f78 <sbrk_aligned+0x3c>)
 8008f40:	460c      	mov	r4, r1
 8008f42:	6831      	ldr	r1, [r6, #0]
 8008f44:	4605      	mov	r5, r0
 8008f46:	b911      	cbnz	r1, 8008f4e <sbrk_aligned+0x12>
 8008f48:	f000 f91a 	bl	8009180 <_sbrk_r>
 8008f4c:	6030      	str	r0, [r6, #0]
 8008f4e:	4621      	mov	r1, r4
 8008f50:	4628      	mov	r0, r5
 8008f52:	f000 f915 	bl	8009180 <_sbrk_r>
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	d00a      	beq.n	8008f70 <sbrk_aligned+0x34>
 8008f5a:	1cc4      	adds	r4, r0, #3
 8008f5c:	f024 0403 	bic.w	r4, r4, #3
 8008f60:	42a0      	cmp	r0, r4
 8008f62:	d007      	beq.n	8008f74 <sbrk_aligned+0x38>
 8008f64:	1a21      	subs	r1, r4, r0
 8008f66:	4628      	mov	r0, r5
 8008f68:	f000 f90a 	bl	8009180 <_sbrk_r>
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d101      	bne.n	8008f74 <sbrk_aligned+0x38>
 8008f70:	f04f 34ff 	mov.w	r4, #4294967295
 8008f74:	4620      	mov	r0, r4
 8008f76:	bd70      	pop	{r4, r5, r6, pc}
 8008f78:	20001774 	.word	0x20001774

08008f7c <_malloc_r>:
 8008f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f80:	1ccd      	adds	r5, r1, #3
 8008f82:	f025 0503 	bic.w	r5, r5, #3
 8008f86:	3508      	adds	r5, #8
 8008f88:	2d0c      	cmp	r5, #12
 8008f8a:	bf38      	it	cc
 8008f8c:	250c      	movcc	r5, #12
 8008f8e:	2d00      	cmp	r5, #0
 8008f90:	4607      	mov	r7, r0
 8008f92:	db01      	blt.n	8008f98 <_malloc_r+0x1c>
 8008f94:	42a9      	cmp	r1, r5
 8008f96:	d905      	bls.n	8008fa4 <_malloc_r+0x28>
 8008f98:	230c      	movs	r3, #12
 8008f9a:	2600      	movs	r6, #0
 8008f9c:	603b      	str	r3, [r7, #0]
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa4:	4e2e      	ldr	r6, [pc, #184]	; (8009060 <_malloc_r+0xe4>)
 8008fa6:	f000 facd 	bl	8009544 <__malloc_lock>
 8008faa:	6833      	ldr	r3, [r6, #0]
 8008fac:	461c      	mov	r4, r3
 8008fae:	bb34      	cbnz	r4, 8008ffe <_malloc_r+0x82>
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	f7ff ffc2 	bl	8008f3c <sbrk_aligned>
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	4604      	mov	r4, r0
 8008fbc:	d14d      	bne.n	800905a <_malloc_r+0xde>
 8008fbe:	6834      	ldr	r4, [r6, #0]
 8008fc0:	4626      	mov	r6, r4
 8008fc2:	2e00      	cmp	r6, #0
 8008fc4:	d140      	bne.n	8009048 <_malloc_r+0xcc>
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	4631      	mov	r1, r6
 8008fca:	4638      	mov	r0, r7
 8008fcc:	eb04 0803 	add.w	r8, r4, r3
 8008fd0:	f000 f8d6 	bl	8009180 <_sbrk_r>
 8008fd4:	4580      	cmp	r8, r0
 8008fd6:	d13a      	bne.n	800904e <_malloc_r+0xd2>
 8008fd8:	6821      	ldr	r1, [r4, #0]
 8008fda:	3503      	adds	r5, #3
 8008fdc:	1a6d      	subs	r5, r5, r1
 8008fde:	f025 0503 	bic.w	r5, r5, #3
 8008fe2:	3508      	adds	r5, #8
 8008fe4:	2d0c      	cmp	r5, #12
 8008fe6:	bf38      	it	cc
 8008fe8:	250c      	movcc	r5, #12
 8008fea:	4638      	mov	r0, r7
 8008fec:	4629      	mov	r1, r5
 8008fee:	f7ff ffa5 	bl	8008f3c <sbrk_aligned>
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	d02b      	beq.n	800904e <_malloc_r+0xd2>
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	442b      	add	r3, r5
 8008ffa:	6023      	str	r3, [r4, #0]
 8008ffc:	e00e      	b.n	800901c <_malloc_r+0xa0>
 8008ffe:	6822      	ldr	r2, [r4, #0]
 8009000:	1b52      	subs	r2, r2, r5
 8009002:	d41e      	bmi.n	8009042 <_malloc_r+0xc6>
 8009004:	2a0b      	cmp	r2, #11
 8009006:	d916      	bls.n	8009036 <_malloc_r+0xba>
 8009008:	1961      	adds	r1, r4, r5
 800900a:	42a3      	cmp	r3, r4
 800900c:	6025      	str	r5, [r4, #0]
 800900e:	bf18      	it	ne
 8009010:	6059      	strne	r1, [r3, #4]
 8009012:	6863      	ldr	r3, [r4, #4]
 8009014:	bf08      	it	eq
 8009016:	6031      	streq	r1, [r6, #0]
 8009018:	5162      	str	r2, [r4, r5]
 800901a:	604b      	str	r3, [r1, #4]
 800901c:	4638      	mov	r0, r7
 800901e:	f104 060b 	add.w	r6, r4, #11
 8009022:	f000 fa95 	bl	8009550 <__malloc_unlock>
 8009026:	f026 0607 	bic.w	r6, r6, #7
 800902a:	1d23      	adds	r3, r4, #4
 800902c:	1af2      	subs	r2, r6, r3
 800902e:	d0b6      	beq.n	8008f9e <_malloc_r+0x22>
 8009030:	1b9b      	subs	r3, r3, r6
 8009032:	50a3      	str	r3, [r4, r2]
 8009034:	e7b3      	b.n	8008f9e <_malloc_r+0x22>
 8009036:	6862      	ldr	r2, [r4, #4]
 8009038:	42a3      	cmp	r3, r4
 800903a:	bf0c      	ite	eq
 800903c:	6032      	streq	r2, [r6, #0]
 800903e:	605a      	strne	r2, [r3, #4]
 8009040:	e7ec      	b.n	800901c <_malloc_r+0xa0>
 8009042:	4623      	mov	r3, r4
 8009044:	6864      	ldr	r4, [r4, #4]
 8009046:	e7b2      	b.n	8008fae <_malloc_r+0x32>
 8009048:	4634      	mov	r4, r6
 800904a:	6876      	ldr	r6, [r6, #4]
 800904c:	e7b9      	b.n	8008fc2 <_malloc_r+0x46>
 800904e:	230c      	movs	r3, #12
 8009050:	4638      	mov	r0, r7
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	f000 fa7c 	bl	8009550 <__malloc_unlock>
 8009058:	e7a1      	b.n	8008f9e <_malloc_r+0x22>
 800905a:	6025      	str	r5, [r4, #0]
 800905c:	e7de      	b.n	800901c <_malloc_r+0xa0>
 800905e:	bf00      	nop
 8009060:	20001770 	.word	0x20001770

08009064 <iprintf>:
 8009064:	b40f      	push	{r0, r1, r2, r3}
 8009066:	4b0a      	ldr	r3, [pc, #40]	; (8009090 <iprintf+0x2c>)
 8009068:	b513      	push	{r0, r1, r4, lr}
 800906a:	681c      	ldr	r4, [r3, #0]
 800906c:	b124      	cbz	r4, 8009078 <iprintf+0x14>
 800906e:	69a3      	ldr	r3, [r4, #24]
 8009070:	b913      	cbnz	r3, 8009078 <iprintf+0x14>
 8009072:	4620      	mov	r0, r4
 8009074:	f7ff fe3e 	bl	8008cf4 <__sinit>
 8009078:	ab05      	add	r3, sp, #20
 800907a:	4620      	mov	r0, r4
 800907c:	9a04      	ldr	r2, [sp, #16]
 800907e:	68a1      	ldr	r1, [r4, #8]
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	f000 fbef 	bl	8009864 <_vfiprintf_r>
 8009086:	b002      	add	sp, #8
 8009088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800908c:	b004      	add	sp, #16
 800908e:	4770      	bx	lr
 8009090:	2000017c 	.word	0x2000017c

08009094 <_puts_r>:
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	460e      	mov	r6, r1
 8009098:	4605      	mov	r5, r0
 800909a:	b118      	cbz	r0, 80090a4 <_puts_r+0x10>
 800909c:	6983      	ldr	r3, [r0, #24]
 800909e:	b90b      	cbnz	r3, 80090a4 <_puts_r+0x10>
 80090a0:	f7ff fe28 	bl	8008cf4 <__sinit>
 80090a4:	69ab      	ldr	r3, [r5, #24]
 80090a6:	68ac      	ldr	r4, [r5, #8]
 80090a8:	b913      	cbnz	r3, 80090b0 <_puts_r+0x1c>
 80090aa:	4628      	mov	r0, r5
 80090ac:	f7ff fe22 	bl	8008cf4 <__sinit>
 80090b0:	4b2c      	ldr	r3, [pc, #176]	; (8009164 <_puts_r+0xd0>)
 80090b2:	429c      	cmp	r4, r3
 80090b4:	d120      	bne.n	80090f8 <_puts_r+0x64>
 80090b6:	686c      	ldr	r4, [r5, #4]
 80090b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090ba:	07db      	lsls	r3, r3, #31
 80090bc:	d405      	bmi.n	80090ca <_puts_r+0x36>
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	0598      	lsls	r0, r3, #22
 80090c2:	d402      	bmi.n	80090ca <_puts_r+0x36>
 80090c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090c6:	f7ff fed8 	bl	8008e7a <__retarget_lock_acquire_recursive>
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	0719      	lsls	r1, r3, #28
 80090ce:	d51d      	bpl.n	800910c <_puts_r+0x78>
 80090d0:	6923      	ldr	r3, [r4, #16]
 80090d2:	b1db      	cbz	r3, 800910c <_puts_r+0x78>
 80090d4:	3e01      	subs	r6, #1
 80090d6:	68a3      	ldr	r3, [r4, #8]
 80090d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090dc:	3b01      	subs	r3, #1
 80090de:	60a3      	str	r3, [r4, #8]
 80090e0:	bb39      	cbnz	r1, 8009132 <_puts_r+0x9e>
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	da38      	bge.n	8009158 <_puts_r+0xc4>
 80090e6:	4622      	mov	r2, r4
 80090e8:	210a      	movs	r1, #10
 80090ea:	4628      	mov	r0, r5
 80090ec:	f000 f8d0 	bl	8009290 <__swbuf_r>
 80090f0:	3001      	adds	r0, #1
 80090f2:	d011      	beq.n	8009118 <_puts_r+0x84>
 80090f4:	250a      	movs	r5, #10
 80090f6:	e011      	b.n	800911c <_puts_r+0x88>
 80090f8:	4b1b      	ldr	r3, [pc, #108]	; (8009168 <_puts_r+0xd4>)
 80090fa:	429c      	cmp	r4, r3
 80090fc:	d101      	bne.n	8009102 <_puts_r+0x6e>
 80090fe:	68ac      	ldr	r4, [r5, #8]
 8009100:	e7da      	b.n	80090b8 <_puts_r+0x24>
 8009102:	4b1a      	ldr	r3, [pc, #104]	; (800916c <_puts_r+0xd8>)
 8009104:	429c      	cmp	r4, r3
 8009106:	bf08      	it	eq
 8009108:	68ec      	ldreq	r4, [r5, #12]
 800910a:	e7d5      	b.n	80090b8 <_puts_r+0x24>
 800910c:	4621      	mov	r1, r4
 800910e:	4628      	mov	r0, r5
 8009110:	f000 f922 	bl	8009358 <__swsetup_r>
 8009114:	2800      	cmp	r0, #0
 8009116:	d0dd      	beq.n	80090d4 <_puts_r+0x40>
 8009118:	f04f 35ff 	mov.w	r5, #4294967295
 800911c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800911e:	07da      	lsls	r2, r3, #31
 8009120:	d405      	bmi.n	800912e <_puts_r+0x9a>
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	059b      	lsls	r3, r3, #22
 8009126:	d402      	bmi.n	800912e <_puts_r+0x9a>
 8009128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800912a:	f7ff fea7 	bl	8008e7c <__retarget_lock_release_recursive>
 800912e:	4628      	mov	r0, r5
 8009130:	bd70      	pop	{r4, r5, r6, pc}
 8009132:	2b00      	cmp	r3, #0
 8009134:	da04      	bge.n	8009140 <_puts_r+0xac>
 8009136:	69a2      	ldr	r2, [r4, #24]
 8009138:	429a      	cmp	r2, r3
 800913a:	dc06      	bgt.n	800914a <_puts_r+0xb6>
 800913c:	290a      	cmp	r1, #10
 800913e:	d004      	beq.n	800914a <_puts_r+0xb6>
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	1c5a      	adds	r2, r3, #1
 8009144:	6022      	str	r2, [r4, #0]
 8009146:	7019      	strb	r1, [r3, #0]
 8009148:	e7c5      	b.n	80090d6 <_puts_r+0x42>
 800914a:	4622      	mov	r2, r4
 800914c:	4628      	mov	r0, r5
 800914e:	f000 f89f 	bl	8009290 <__swbuf_r>
 8009152:	3001      	adds	r0, #1
 8009154:	d1bf      	bne.n	80090d6 <_puts_r+0x42>
 8009156:	e7df      	b.n	8009118 <_puts_r+0x84>
 8009158:	250a      	movs	r5, #10
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	1c5a      	adds	r2, r3, #1
 800915e:	6022      	str	r2, [r4, #0]
 8009160:	701d      	strb	r5, [r3, #0]
 8009162:	e7db      	b.n	800911c <_puts_r+0x88>
 8009164:	0800a038 	.word	0x0800a038
 8009168:	0800a058 	.word	0x0800a058
 800916c:	0800a018 	.word	0x0800a018

08009170 <puts>:
 8009170:	4b02      	ldr	r3, [pc, #8]	; (800917c <puts+0xc>)
 8009172:	4601      	mov	r1, r0
 8009174:	6818      	ldr	r0, [r3, #0]
 8009176:	f7ff bf8d 	b.w	8009094 <_puts_r>
 800917a:	bf00      	nop
 800917c:	2000017c 	.word	0x2000017c

08009180 <_sbrk_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	2300      	movs	r3, #0
 8009184:	4d05      	ldr	r5, [pc, #20]	; (800919c <_sbrk_r+0x1c>)
 8009186:	4604      	mov	r4, r0
 8009188:	4608      	mov	r0, r1
 800918a:	602b      	str	r3, [r5, #0]
 800918c:	f7f7 fa72 	bl	8000674 <_sbrk>
 8009190:	1c43      	adds	r3, r0, #1
 8009192:	d102      	bne.n	800919a <_sbrk_r+0x1a>
 8009194:	682b      	ldr	r3, [r5, #0]
 8009196:	b103      	cbz	r3, 800919a <_sbrk_r+0x1a>
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	bd38      	pop	{r3, r4, r5, pc}
 800919c:	20001778 	.word	0x20001778

080091a0 <sniprintf>:
 80091a0:	b40c      	push	{r2, r3}
 80091a2:	b530      	push	{r4, r5, lr}
 80091a4:	4b17      	ldr	r3, [pc, #92]	; (8009204 <sniprintf+0x64>)
 80091a6:	1e0c      	subs	r4, r1, #0
 80091a8:	681d      	ldr	r5, [r3, #0]
 80091aa:	b09d      	sub	sp, #116	; 0x74
 80091ac:	da08      	bge.n	80091c0 <sniprintf+0x20>
 80091ae:	238b      	movs	r3, #139	; 0x8b
 80091b0:	f04f 30ff 	mov.w	r0, #4294967295
 80091b4:	602b      	str	r3, [r5, #0]
 80091b6:	b01d      	add	sp, #116	; 0x74
 80091b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091bc:	b002      	add	sp, #8
 80091be:	4770      	bx	lr
 80091c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80091c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80091c8:	bf0c      	ite	eq
 80091ca:	4623      	moveq	r3, r4
 80091cc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80091d0:	9304      	str	r3, [sp, #16]
 80091d2:	9307      	str	r3, [sp, #28]
 80091d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80091d8:	9002      	str	r0, [sp, #8]
 80091da:	9006      	str	r0, [sp, #24]
 80091dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80091e0:	4628      	mov	r0, r5
 80091e2:	ab21      	add	r3, sp, #132	; 0x84
 80091e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80091e6:	a902      	add	r1, sp, #8
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	f000 fa13 	bl	8009614 <_svfiprintf_r>
 80091ee:	1c43      	adds	r3, r0, #1
 80091f0:	bfbc      	itt	lt
 80091f2:	238b      	movlt	r3, #139	; 0x8b
 80091f4:	602b      	strlt	r3, [r5, #0]
 80091f6:	2c00      	cmp	r4, #0
 80091f8:	d0dd      	beq.n	80091b6 <sniprintf+0x16>
 80091fa:	2200      	movs	r2, #0
 80091fc:	9b02      	ldr	r3, [sp, #8]
 80091fe:	701a      	strb	r2, [r3, #0]
 8009200:	e7d9      	b.n	80091b6 <sniprintf+0x16>
 8009202:	bf00      	nop
 8009204:	2000017c 	.word	0x2000017c

08009208 <__sread>:
 8009208:	b510      	push	{r4, lr}
 800920a:	460c      	mov	r4, r1
 800920c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009210:	f000 fdee 	bl	8009df0 <_read_r>
 8009214:	2800      	cmp	r0, #0
 8009216:	bfab      	itete	ge
 8009218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800921a:	89a3      	ldrhlt	r3, [r4, #12]
 800921c:	181b      	addge	r3, r3, r0
 800921e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009222:	bfac      	ite	ge
 8009224:	6563      	strge	r3, [r4, #84]	; 0x54
 8009226:	81a3      	strhlt	r3, [r4, #12]
 8009228:	bd10      	pop	{r4, pc}

0800922a <__swrite>:
 800922a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800922e:	461f      	mov	r7, r3
 8009230:	898b      	ldrh	r3, [r1, #12]
 8009232:	4605      	mov	r5, r0
 8009234:	05db      	lsls	r3, r3, #23
 8009236:	460c      	mov	r4, r1
 8009238:	4616      	mov	r6, r2
 800923a:	d505      	bpl.n	8009248 <__swrite+0x1e>
 800923c:	2302      	movs	r3, #2
 800923e:	2200      	movs	r2, #0
 8009240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009244:	f000 f906 	bl	8009454 <_lseek_r>
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	4632      	mov	r2, r6
 800924c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009250:	81a3      	strh	r3, [r4, #12]
 8009252:	4628      	mov	r0, r5
 8009254:	463b      	mov	r3, r7
 8009256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800925a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800925e:	f000 b869 	b.w	8009334 <_write_r>

08009262 <__sseek>:
 8009262:	b510      	push	{r4, lr}
 8009264:	460c      	mov	r4, r1
 8009266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800926a:	f000 f8f3 	bl	8009454 <_lseek_r>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	89a3      	ldrh	r3, [r4, #12]
 8009272:	bf15      	itete	ne
 8009274:	6560      	strne	r0, [r4, #84]	; 0x54
 8009276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800927a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800927e:	81a3      	strheq	r3, [r4, #12]
 8009280:	bf18      	it	ne
 8009282:	81a3      	strhne	r3, [r4, #12]
 8009284:	bd10      	pop	{r4, pc}

08009286 <__sclose>:
 8009286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800928a:	f000 b8d3 	b.w	8009434 <_close_r>
	...

08009290 <__swbuf_r>:
 8009290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009292:	460e      	mov	r6, r1
 8009294:	4614      	mov	r4, r2
 8009296:	4605      	mov	r5, r0
 8009298:	b118      	cbz	r0, 80092a2 <__swbuf_r+0x12>
 800929a:	6983      	ldr	r3, [r0, #24]
 800929c:	b90b      	cbnz	r3, 80092a2 <__swbuf_r+0x12>
 800929e:	f7ff fd29 	bl	8008cf4 <__sinit>
 80092a2:	4b21      	ldr	r3, [pc, #132]	; (8009328 <__swbuf_r+0x98>)
 80092a4:	429c      	cmp	r4, r3
 80092a6:	d12b      	bne.n	8009300 <__swbuf_r+0x70>
 80092a8:	686c      	ldr	r4, [r5, #4]
 80092aa:	69a3      	ldr	r3, [r4, #24]
 80092ac:	60a3      	str	r3, [r4, #8]
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	071a      	lsls	r2, r3, #28
 80092b2:	d52f      	bpl.n	8009314 <__swbuf_r+0x84>
 80092b4:	6923      	ldr	r3, [r4, #16]
 80092b6:	b36b      	cbz	r3, 8009314 <__swbuf_r+0x84>
 80092b8:	6923      	ldr	r3, [r4, #16]
 80092ba:	6820      	ldr	r0, [r4, #0]
 80092bc:	b2f6      	uxtb	r6, r6
 80092be:	1ac0      	subs	r0, r0, r3
 80092c0:	6963      	ldr	r3, [r4, #20]
 80092c2:	4637      	mov	r7, r6
 80092c4:	4283      	cmp	r3, r0
 80092c6:	dc04      	bgt.n	80092d2 <__swbuf_r+0x42>
 80092c8:	4621      	mov	r1, r4
 80092ca:	4628      	mov	r0, r5
 80092cc:	f7ff fc6c 	bl	8008ba8 <_fflush_r>
 80092d0:	bb30      	cbnz	r0, 8009320 <__swbuf_r+0x90>
 80092d2:	68a3      	ldr	r3, [r4, #8]
 80092d4:	3001      	adds	r0, #1
 80092d6:	3b01      	subs	r3, #1
 80092d8:	60a3      	str	r3, [r4, #8]
 80092da:	6823      	ldr	r3, [r4, #0]
 80092dc:	1c5a      	adds	r2, r3, #1
 80092de:	6022      	str	r2, [r4, #0]
 80092e0:	701e      	strb	r6, [r3, #0]
 80092e2:	6963      	ldr	r3, [r4, #20]
 80092e4:	4283      	cmp	r3, r0
 80092e6:	d004      	beq.n	80092f2 <__swbuf_r+0x62>
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	07db      	lsls	r3, r3, #31
 80092ec:	d506      	bpl.n	80092fc <__swbuf_r+0x6c>
 80092ee:	2e0a      	cmp	r6, #10
 80092f0:	d104      	bne.n	80092fc <__swbuf_r+0x6c>
 80092f2:	4621      	mov	r1, r4
 80092f4:	4628      	mov	r0, r5
 80092f6:	f7ff fc57 	bl	8008ba8 <_fflush_r>
 80092fa:	b988      	cbnz	r0, 8009320 <__swbuf_r+0x90>
 80092fc:	4638      	mov	r0, r7
 80092fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009300:	4b0a      	ldr	r3, [pc, #40]	; (800932c <__swbuf_r+0x9c>)
 8009302:	429c      	cmp	r4, r3
 8009304:	d101      	bne.n	800930a <__swbuf_r+0x7a>
 8009306:	68ac      	ldr	r4, [r5, #8]
 8009308:	e7cf      	b.n	80092aa <__swbuf_r+0x1a>
 800930a:	4b09      	ldr	r3, [pc, #36]	; (8009330 <__swbuf_r+0xa0>)
 800930c:	429c      	cmp	r4, r3
 800930e:	bf08      	it	eq
 8009310:	68ec      	ldreq	r4, [r5, #12]
 8009312:	e7ca      	b.n	80092aa <__swbuf_r+0x1a>
 8009314:	4621      	mov	r1, r4
 8009316:	4628      	mov	r0, r5
 8009318:	f000 f81e 	bl	8009358 <__swsetup_r>
 800931c:	2800      	cmp	r0, #0
 800931e:	d0cb      	beq.n	80092b8 <__swbuf_r+0x28>
 8009320:	f04f 37ff 	mov.w	r7, #4294967295
 8009324:	e7ea      	b.n	80092fc <__swbuf_r+0x6c>
 8009326:	bf00      	nop
 8009328:	0800a038 	.word	0x0800a038
 800932c:	0800a058 	.word	0x0800a058
 8009330:	0800a018 	.word	0x0800a018

08009334 <_write_r>:
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	4611      	mov	r1, r2
 800933c:	2200      	movs	r2, #0
 800933e:	4d05      	ldr	r5, [pc, #20]	; (8009354 <_write_r+0x20>)
 8009340:	602a      	str	r2, [r5, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	f7ff f8b8 	bl	80084b8 <_write>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d102      	bne.n	8009352 <_write_r+0x1e>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	b103      	cbz	r3, 8009352 <_write_r+0x1e>
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	20001778 	.word	0x20001778

08009358 <__swsetup_r>:
 8009358:	4b32      	ldr	r3, [pc, #200]	; (8009424 <__swsetup_r+0xcc>)
 800935a:	b570      	push	{r4, r5, r6, lr}
 800935c:	681d      	ldr	r5, [r3, #0]
 800935e:	4606      	mov	r6, r0
 8009360:	460c      	mov	r4, r1
 8009362:	b125      	cbz	r5, 800936e <__swsetup_r+0x16>
 8009364:	69ab      	ldr	r3, [r5, #24]
 8009366:	b913      	cbnz	r3, 800936e <__swsetup_r+0x16>
 8009368:	4628      	mov	r0, r5
 800936a:	f7ff fcc3 	bl	8008cf4 <__sinit>
 800936e:	4b2e      	ldr	r3, [pc, #184]	; (8009428 <__swsetup_r+0xd0>)
 8009370:	429c      	cmp	r4, r3
 8009372:	d10f      	bne.n	8009394 <__swsetup_r+0x3c>
 8009374:	686c      	ldr	r4, [r5, #4]
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800937c:	0719      	lsls	r1, r3, #28
 800937e:	d42c      	bmi.n	80093da <__swsetup_r+0x82>
 8009380:	06dd      	lsls	r5, r3, #27
 8009382:	d411      	bmi.n	80093a8 <__swsetup_r+0x50>
 8009384:	2309      	movs	r3, #9
 8009386:	6033      	str	r3, [r6, #0]
 8009388:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800938c:	f04f 30ff 	mov.w	r0, #4294967295
 8009390:	81a3      	strh	r3, [r4, #12]
 8009392:	e03e      	b.n	8009412 <__swsetup_r+0xba>
 8009394:	4b25      	ldr	r3, [pc, #148]	; (800942c <__swsetup_r+0xd4>)
 8009396:	429c      	cmp	r4, r3
 8009398:	d101      	bne.n	800939e <__swsetup_r+0x46>
 800939a:	68ac      	ldr	r4, [r5, #8]
 800939c:	e7eb      	b.n	8009376 <__swsetup_r+0x1e>
 800939e:	4b24      	ldr	r3, [pc, #144]	; (8009430 <__swsetup_r+0xd8>)
 80093a0:	429c      	cmp	r4, r3
 80093a2:	bf08      	it	eq
 80093a4:	68ec      	ldreq	r4, [r5, #12]
 80093a6:	e7e6      	b.n	8009376 <__swsetup_r+0x1e>
 80093a8:	0758      	lsls	r0, r3, #29
 80093aa:	d512      	bpl.n	80093d2 <__swsetup_r+0x7a>
 80093ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093ae:	b141      	cbz	r1, 80093c2 <__swsetup_r+0x6a>
 80093b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093b4:	4299      	cmp	r1, r3
 80093b6:	d002      	beq.n	80093be <__swsetup_r+0x66>
 80093b8:	4630      	mov	r0, r6
 80093ba:	f7ff fd77 	bl	8008eac <_free_r>
 80093be:	2300      	movs	r3, #0
 80093c0:	6363      	str	r3, [r4, #52]	; 0x34
 80093c2:	89a3      	ldrh	r3, [r4, #12]
 80093c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093c8:	81a3      	strh	r3, [r4, #12]
 80093ca:	2300      	movs	r3, #0
 80093cc:	6063      	str	r3, [r4, #4]
 80093ce:	6923      	ldr	r3, [r4, #16]
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	89a3      	ldrh	r3, [r4, #12]
 80093d4:	f043 0308 	orr.w	r3, r3, #8
 80093d8:	81a3      	strh	r3, [r4, #12]
 80093da:	6923      	ldr	r3, [r4, #16]
 80093dc:	b94b      	cbnz	r3, 80093f2 <__swsetup_r+0x9a>
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093e8:	d003      	beq.n	80093f2 <__swsetup_r+0x9a>
 80093ea:	4621      	mov	r1, r4
 80093ec:	4630      	mov	r0, r6
 80093ee:	f000 f869 	bl	80094c4 <__smakebuf_r>
 80093f2:	89a0      	ldrh	r0, [r4, #12]
 80093f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093f8:	f010 0301 	ands.w	r3, r0, #1
 80093fc:	d00a      	beq.n	8009414 <__swsetup_r+0xbc>
 80093fe:	2300      	movs	r3, #0
 8009400:	60a3      	str	r3, [r4, #8]
 8009402:	6963      	ldr	r3, [r4, #20]
 8009404:	425b      	negs	r3, r3
 8009406:	61a3      	str	r3, [r4, #24]
 8009408:	6923      	ldr	r3, [r4, #16]
 800940a:	b943      	cbnz	r3, 800941e <__swsetup_r+0xc6>
 800940c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009410:	d1ba      	bne.n	8009388 <__swsetup_r+0x30>
 8009412:	bd70      	pop	{r4, r5, r6, pc}
 8009414:	0781      	lsls	r1, r0, #30
 8009416:	bf58      	it	pl
 8009418:	6963      	ldrpl	r3, [r4, #20]
 800941a:	60a3      	str	r3, [r4, #8]
 800941c:	e7f4      	b.n	8009408 <__swsetup_r+0xb0>
 800941e:	2000      	movs	r0, #0
 8009420:	e7f7      	b.n	8009412 <__swsetup_r+0xba>
 8009422:	bf00      	nop
 8009424:	2000017c 	.word	0x2000017c
 8009428:	0800a038 	.word	0x0800a038
 800942c:	0800a058 	.word	0x0800a058
 8009430:	0800a018 	.word	0x0800a018

08009434 <_close_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	2300      	movs	r3, #0
 8009438:	4d05      	ldr	r5, [pc, #20]	; (8009450 <_close_r+0x1c>)
 800943a:	4604      	mov	r4, r0
 800943c:	4608      	mov	r0, r1
 800943e:	602b      	str	r3, [r5, #0]
 8009440:	f7f7 f8e7 	bl	8000612 <_close>
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	d102      	bne.n	800944e <_close_r+0x1a>
 8009448:	682b      	ldr	r3, [r5, #0]
 800944a:	b103      	cbz	r3, 800944e <_close_r+0x1a>
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	bd38      	pop	{r3, r4, r5, pc}
 8009450:	20001778 	.word	0x20001778

08009454 <_lseek_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4604      	mov	r4, r0
 8009458:	4608      	mov	r0, r1
 800945a:	4611      	mov	r1, r2
 800945c:	2200      	movs	r2, #0
 800945e:	4d05      	ldr	r5, [pc, #20]	; (8009474 <_lseek_r+0x20>)
 8009460:	602a      	str	r2, [r5, #0]
 8009462:	461a      	mov	r2, r3
 8009464:	f7f7 f8f9 	bl	800065a <_lseek>
 8009468:	1c43      	adds	r3, r0, #1
 800946a:	d102      	bne.n	8009472 <_lseek_r+0x1e>
 800946c:	682b      	ldr	r3, [r5, #0]
 800946e:	b103      	cbz	r3, 8009472 <_lseek_r+0x1e>
 8009470:	6023      	str	r3, [r4, #0]
 8009472:	bd38      	pop	{r3, r4, r5, pc}
 8009474:	20001778 	.word	0x20001778

08009478 <__swhatbuf_r>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	460e      	mov	r6, r1
 800947c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009480:	4614      	mov	r4, r2
 8009482:	2900      	cmp	r1, #0
 8009484:	461d      	mov	r5, r3
 8009486:	b096      	sub	sp, #88	; 0x58
 8009488:	da08      	bge.n	800949c <__swhatbuf_r+0x24>
 800948a:	2200      	movs	r2, #0
 800948c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009490:	602a      	str	r2, [r5, #0]
 8009492:	061a      	lsls	r2, r3, #24
 8009494:	d410      	bmi.n	80094b8 <__swhatbuf_r+0x40>
 8009496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800949a:	e00e      	b.n	80094ba <__swhatbuf_r+0x42>
 800949c:	466a      	mov	r2, sp
 800949e:	f000 fcb9 	bl	8009e14 <_fstat_r>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	dbf1      	blt.n	800948a <__swhatbuf_r+0x12>
 80094a6:	9a01      	ldr	r2, [sp, #4]
 80094a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094b0:	425a      	negs	r2, r3
 80094b2:	415a      	adcs	r2, r3
 80094b4:	602a      	str	r2, [r5, #0]
 80094b6:	e7ee      	b.n	8009496 <__swhatbuf_r+0x1e>
 80094b8:	2340      	movs	r3, #64	; 0x40
 80094ba:	2000      	movs	r0, #0
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	b016      	add	sp, #88	; 0x58
 80094c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080094c4 <__smakebuf_r>:
 80094c4:	898b      	ldrh	r3, [r1, #12]
 80094c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094c8:	079d      	lsls	r5, r3, #30
 80094ca:	4606      	mov	r6, r0
 80094cc:	460c      	mov	r4, r1
 80094ce:	d507      	bpl.n	80094e0 <__smakebuf_r+0x1c>
 80094d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	6123      	str	r3, [r4, #16]
 80094d8:	2301      	movs	r3, #1
 80094da:	6163      	str	r3, [r4, #20]
 80094dc:	b002      	add	sp, #8
 80094de:	bd70      	pop	{r4, r5, r6, pc}
 80094e0:	466a      	mov	r2, sp
 80094e2:	ab01      	add	r3, sp, #4
 80094e4:	f7ff ffc8 	bl	8009478 <__swhatbuf_r>
 80094e8:	9900      	ldr	r1, [sp, #0]
 80094ea:	4605      	mov	r5, r0
 80094ec:	4630      	mov	r0, r6
 80094ee:	f7ff fd45 	bl	8008f7c <_malloc_r>
 80094f2:	b948      	cbnz	r0, 8009508 <__smakebuf_r+0x44>
 80094f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094f8:	059a      	lsls	r2, r3, #22
 80094fa:	d4ef      	bmi.n	80094dc <__smakebuf_r+0x18>
 80094fc:	f023 0303 	bic.w	r3, r3, #3
 8009500:	f043 0302 	orr.w	r3, r3, #2
 8009504:	81a3      	strh	r3, [r4, #12]
 8009506:	e7e3      	b.n	80094d0 <__smakebuf_r+0xc>
 8009508:	4b0d      	ldr	r3, [pc, #52]	; (8009540 <__smakebuf_r+0x7c>)
 800950a:	62b3      	str	r3, [r6, #40]	; 0x28
 800950c:	89a3      	ldrh	r3, [r4, #12]
 800950e:	6020      	str	r0, [r4, #0]
 8009510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009514:	81a3      	strh	r3, [r4, #12]
 8009516:	9b00      	ldr	r3, [sp, #0]
 8009518:	6120      	str	r0, [r4, #16]
 800951a:	6163      	str	r3, [r4, #20]
 800951c:	9b01      	ldr	r3, [sp, #4]
 800951e:	b15b      	cbz	r3, 8009538 <__smakebuf_r+0x74>
 8009520:	4630      	mov	r0, r6
 8009522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009526:	f000 fc87 	bl	8009e38 <_isatty_r>
 800952a:	b128      	cbz	r0, 8009538 <__smakebuf_r+0x74>
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	f023 0303 	bic.w	r3, r3, #3
 8009532:	f043 0301 	orr.w	r3, r3, #1
 8009536:	81a3      	strh	r3, [r4, #12]
 8009538:	89a0      	ldrh	r0, [r4, #12]
 800953a:	4305      	orrs	r5, r0
 800953c:	81a5      	strh	r5, [r4, #12]
 800953e:	e7cd      	b.n	80094dc <__smakebuf_r+0x18>
 8009540:	08008c8d 	.word	0x08008c8d

08009544 <__malloc_lock>:
 8009544:	4801      	ldr	r0, [pc, #4]	; (800954c <__malloc_lock+0x8>)
 8009546:	f7ff bc98 	b.w	8008e7a <__retarget_lock_acquire_recursive>
 800954a:	bf00      	nop
 800954c:	2000176a 	.word	0x2000176a

08009550 <__malloc_unlock>:
 8009550:	4801      	ldr	r0, [pc, #4]	; (8009558 <__malloc_unlock+0x8>)
 8009552:	f7ff bc93 	b.w	8008e7c <__retarget_lock_release_recursive>
 8009556:	bf00      	nop
 8009558:	2000176a 	.word	0x2000176a

0800955c <__ssputs_r>:
 800955c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009560:	688e      	ldr	r6, [r1, #8]
 8009562:	4682      	mov	sl, r0
 8009564:	429e      	cmp	r6, r3
 8009566:	460c      	mov	r4, r1
 8009568:	4690      	mov	r8, r2
 800956a:	461f      	mov	r7, r3
 800956c:	d838      	bhi.n	80095e0 <__ssputs_r+0x84>
 800956e:	898a      	ldrh	r2, [r1, #12]
 8009570:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009574:	d032      	beq.n	80095dc <__ssputs_r+0x80>
 8009576:	6825      	ldr	r5, [r4, #0]
 8009578:	6909      	ldr	r1, [r1, #16]
 800957a:	3301      	adds	r3, #1
 800957c:	eba5 0901 	sub.w	r9, r5, r1
 8009580:	6965      	ldr	r5, [r4, #20]
 8009582:	444b      	add	r3, r9
 8009584:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009588:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800958c:	106d      	asrs	r5, r5, #1
 800958e:	429d      	cmp	r5, r3
 8009590:	bf38      	it	cc
 8009592:	461d      	movcc	r5, r3
 8009594:	0553      	lsls	r3, r2, #21
 8009596:	d531      	bpl.n	80095fc <__ssputs_r+0xa0>
 8009598:	4629      	mov	r1, r5
 800959a:	f7ff fcef 	bl	8008f7c <_malloc_r>
 800959e:	4606      	mov	r6, r0
 80095a0:	b950      	cbnz	r0, 80095b8 <__ssputs_r+0x5c>
 80095a2:	230c      	movs	r3, #12
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	f8ca 3000 	str.w	r3, [sl]
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095b2:	81a3      	strh	r3, [r4, #12]
 80095b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b8:	464a      	mov	r2, r9
 80095ba:	6921      	ldr	r1, [r4, #16]
 80095bc:	f7ff fc5f 	bl	8008e7e <memcpy>
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ca:	81a3      	strh	r3, [r4, #12]
 80095cc:	6126      	str	r6, [r4, #16]
 80095ce:	444e      	add	r6, r9
 80095d0:	6026      	str	r6, [r4, #0]
 80095d2:	463e      	mov	r6, r7
 80095d4:	6165      	str	r5, [r4, #20]
 80095d6:	eba5 0509 	sub.w	r5, r5, r9
 80095da:	60a5      	str	r5, [r4, #8]
 80095dc:	42be      	cmp	r6, r7
 80095de:	d900      	bls.n	80095e2 <__ssputs_r+0x86>
 80095e0:	463e      	mov	r6, r7
 80095e2:	4632      	mov	r2, r6
 80095e4:	4641      	mov	r1, r8
 80095e6:	6820      	ldr	r0, [r4, #0]
 80095e8:	f000 fc44 	bl	8009e74 <memmove>
 80095ec:	68a3      	ldr	r3, [r4, #8]
 80095ee:	2000      	movs	r0, #0
 80095f0:	1b9b      	subs	r3, r3, r6
 80095f2:	60a3      	str	r3, [r4, #8]
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	4433      	add	r3, r6
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	e7db      	b.n	80095b4 <__ssputs_r+0x58>
 80095fc:	462a      	mov	r2, r5
 80095fe:	f000 fc53 	bl	8009ea8 <_realloc_r>
 8009602:	4606      	mov	r6, r0
 8009604:	2800      	cmp	r0, #0
 8009606:	d1e1      	bne.n	80095cc <__ssputs_r+0x70>
 8009608:	4650      	mov	r0, sl
 800960a:	6921      	ldr	r1, [r4, #16]
 800960c:	f7ff fc4e 	bl	8008eac <_free_r>
 8009610:	e7c7      	b.n	80095a2 <__ssputs_r+0x46>
	...

08009614 <_svfiprintf_r>:
 8009614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009618:	4698      	mov	r8, r3
 800961a:	898b      	ldrh	r3, [r1, #12]
 800961c:	4607      	mov	r7, r0
 800961e:	061b      	lsls	r3, r3, #24
 8009620:	460d      	mov	r5, r1
 8009622:	4614      	mov	r4, r2
 8009624:	b09d      	sub	sp, #116	; 0x74
 8009626:	d50e      	bpl.n	8009646 <_svfiprintf_r+0x32>
 8009628:	690b      	ldr	r3, [r1, #16]
 800962a:	b963      	cbnz	r3, 8009646 <_svfiprintf_r+0x32>
 800962c:	2140      	movs	r1, #64	; 0x40
 800962e:	f7ff fca5 	bl	8008f7c <_malloc_r>
 8009632:	6028      	str	r0, [r5, #0]
 8009634:	6128      	str	r0, [r5, #16]
 8009636:	b920      	cbnz	r0, 8009642 <_svfiprintf_r+0x2e>
 8009638:	230c      	movs	r3, #12
 800963a:	603b      	str	r3, [r7, #0]
 800963c:	f04f 30ff 	mov.w	r0, #4294967295
 8009640:	e0d1      	b.n	80097e6 <_svfiprintf_r+0x1d2>
 8009642:	2340      	movs	r3, #64	; 0x40
 8009644:	616b      	str	r3, [r5, #20]
 8009646:	2300      	movs	r3, #0
 8009648:	9309      	str	r3, [sp, #36]	; 0x24
 800964a:	2320      	movs	r3, #32
 800964c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009650:	2330      	movs	r3, #48	; 0x30
 8009652:	f04f 0901 	mov.w	r9, #1
 8009656:	f8cd 800c 	str.w	r8, [sp, #12]
 800965a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009800 <_svfiprintf_r+0x1ec>
 800965e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009662:	4623      	mov	r3, r4
 8009664:	469a      	mov	sl, r3
 8009666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800966a:	b10a      	cbz	r2, 8009670 <_svfiprintf_r+0x5c>
 800966c:	2a25      	cmp	r2, #37	; 0x25
 800966e:	d1f9      	bne.n	8009664 <_svfiprintf_r+0x50>
 8009670:	ebba 0b04 	subs.w	fp, sl, r4
 8009674:	d00b      	beq.n	800968e <_svfiprintf_r+0x7a>
 8009676:	465b      	mov	r3, fp
 8009678:	4622      	mov	r2, r4
 800967a:	4629      	mov	r1, r5
 800967c:	4638      	mov	r0, r7
 800967e:	f7ff ff6d 	bl	800955c <__ssputs_r>
 8009682:	3001      	adds	r0, #1
 8009684:	f000 80aa 	beq.w	80097dc <_svfiprintf_r+0x1c8>
 8009688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800968a:	445a      	add	r2, fp
 800968c:	9209      	str	r2, [sp, #36]	; 0x24
 800968e:	f89a 3000 	ldrb.w	r3, [sl]
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 80a2 	beq.w	80097dc <_svfiprintf_r+0x1c8>
 8009698:	2300      	movs	r3, #0
 800969a:	f04f 32ff 	mov.w	r2, #4294967295
 800969e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096a2:	f10a 0a01 	add.w	sl, sl, #1
 80096a6:	9304      	str	r3, [sp, #16]
 80096a8:	9307      	str	r3, [sp, #28]
 80096aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096ae:	931a      	str	r3, [sp, #104]	; 0x68
 80096b0:	4654      	mov	r4, sl
 80096b2:	2205      	movs	r2, #5
 80096b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b8:	4851      	ldr	r0, [pc, #324]	; (8009800 <_svfiprintf_r+0x1ec>)
 80096ba:	f000 fbcd 	bl	8009e58 <memchr>
 80096be:	9a04      	ldr	r2, [sp, #16]
 80096c0:	b9d8      	cbnz	r0, 80096fa <_svfiprintf_r+0xe6>
 80096c2:	06d0      	lsls	r0, r2, #27
 80096c4:	bf44      	itt	mi
 80096c6:	2320      	movmi	r3, #32
 80096c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096cc:	0711      	lsls	r1, r2, #28
 80096ce:	bf44      	itt	mi
 80096d0:	232b      	movmi	r3, #43	; 0x2b
 80096d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096d6:	f89a 3000 	ldrb.w	r3, [sl]
 80096da:	2b2a      	cmp	r3, #42	; 0x2a
 80096dc:	d015      	beq.n	800970a <_svfiprintf_r+0xf6>
 80096de:	4654      	mov	r4, sl
 80096e0:	2000      	movs	r0, #0
 80096e2:	f04f 0c0a 	mov.w	ip, #10
 80096e6:	9a07      	ldr	r2, [sp, #28]
 80096e8:	4621      	mov	r1, r4
 80096ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096ee:	3b30      	subs	r3, #48	; 0x30
 80096f0:	2b09      	cmp	r3, #9
 80096f2:	d94e      	bls.n	8009792 <_svfiprintf_r+0x17e>
 80096f4:	b1b0      	cbz	r0, 8009724 <_svfiprintf_r+0x110>
 80096f6:	9207      	str	r2, [sp, #28]
 80096f8:	e014      	b.n	8009724 <_svfiprintf_r+0x110>
 80096fa:	eba0 0308 	sub.w	r3, r0, r8
 80096fe:	fa09 f303 	lsl.w	r3, r9, r3
 8009702:	4313      	orrs	r3, r2
 8009704:	46a2      	mov	sl, r4
 8009706:	9304      	str	r3, [sp, #16]
 8009708:	e7d2      	b.n	80096b0 <_svfiprintf_r+0x9c>
 800970a:	9b03      	ldr	r3, [sp, #12]
 800970c:	1d19      	adds	r1, r3, #4
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	9103      	str	r1, [sp, #12]
 8009712:	2b00      	cmp	r3, #0
 8009714:	bfbb      	ittet	lt
 8009716:	425b      	neglt	r3, r3
 8009718:	f042 0202 	orrlt.w	r2, r2, #2
 800971c:	9307      	strge	r3, [sp, #28]
 800971e:	9307      	strlt	r3, [sp, #28]
 8009720:	bfb8      	it	lt
 8009722:	9204      	strlt	r2, [sp, #16]
 8009724:	7823      	ldrb	r3, [r4, #0]
 8009726:	2b2e      	cmp	r3, #46	; 0x2e
 8009728:	d10c      	bne.n	8009744 <_svfiprintf_r+0x130>
 800972a:	7863      	ldrb	r3, [r4, #1]
 800972c:	2b2a      	cmp	r3, #42	; 0x2a
 800972e:	d135      	bne.n	800979c <_svfiprintf_r+0x188>
 8009730:	9b03      	ldr	r3, [sp, #12]
 8009732:	3402      	adds	r4, #2
 8009734:	1d1a      	adds	r2, r3, #4
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	9203      	str	r2, [sp, #12]
 800973a:	2b00      	cmp	r3, #0
 800973c:	bfb8      	it	lt
 800973e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009742:	9305      	str	r3, [sp, #20]
 8009744:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009804 <_svfiprintf_r+0x1f0>
 8009748:	2203      	movs	r2, #3
 800974a:	4650      	mov	r0, sl
 800974c:	7821      	ldrb	r1, [r4, #0]
 800974e:	f000 fb83 	bl	8009e58 <memchr>
 8009752:	b140      	cbz	r0, 8009766 <_svfiprintf_r+0x152>
 8009754:	2340      	movs	r3, #64	; 0x40
 8009756:	eba0 000a 	sub.w	r0, r0, sl
 800975a:	fa03 f000 	lsl.w	r0, r3, r0
 800975e:	9b04      	ldr	r3, [sp, #16]
 8009760:	3401      	adds	r4, #1
 8009762:	4303      	orrs	r3, r0
 8009764:	9304      	str	r3, [sp, #16]
 8009766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800976a:	2206      	movs	r2, #6
 800976c:	4826      	ldr	r0, [pc, #152]	; (8009808 <_svfiprintf_r+0x1f4>)
 800976e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009772:	f000 fb71 	bl	8009e58 <memchr>
 8009776:	2800      	cmp	r0, #0
 8009778:	d038      	beq.n	80097ec <_svfiprintf_r+0x1d8>
 800977a:	4b24      	ldr	r3, [pc, #144]	; (800980c <_svfiprintf_r+0x1f8>)
 800977c:	bb1b      	cbnz	r3, 80097c6 <_svfiprintf_r+0x1b2>
 800977e:	9b03      	ldr	r3, [sp, #12]
 8009780:	3307      	adds	r3, #7
 8009782:	f023 0307 	bic.w	r3, r3, #7
 8009786:	3308      	adds	r3, #8
 8009788:	9303      	str	r3, [sp, #12]
 800978a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800978c:	4433      	add	r3, r6
 800978e:	9309      	str	r3, [sp, #36]	; 0x24
 8009790:	e767      	b.n	8009662 <_svfiprintf_r+0x4e>
 8009792:	460c      	mov	r4, r1
 8009794:	2001      	movs	r0, #1
 8009796:	fb0c 3202 	mla	r2, ip, r2, r3
 800979a:	e7a5      	b.n	80096e8 <_svfiprintf_r+0xd4>
 800979c:	2300      	movs	r3, #0
 800979e:	f04f 0c0a 	mov.w	ip, #10
 80097a2:	4619      	mov	r1, r3
 80097a4:	3401      	adds	r4, #1
 80097a6:	9305      	str	r3, [sp, #20]
 80097a8:	4620      	mov	r0, r4
 80097aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097ae:	3a30      	subs	r2, #48	; 0x30
 80097b0:	2a09      	cmp	r2, #9
 80097b2:	d903      	bls.n	80097bc <_svfiprintf_r+0x1a8>
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d0c5      	beq.n	8009744 <_svfiprintf_r+0x130>
 80097b8:	9105      	str	r1, [sp, #20]
 80097ba:	e7c3      	b.n	8009744 <_svfiprintf_r+0x130>
 80097bc:	4604      	mov	r4, r0
 80097be:	2301      	movs	r3, #1
 80097c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80097c4:	e7f0      	b.n	80097a8 <_svfiprintf_r+0x194>
 80097c6:	ab03      	add	r3, sp, #12
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	462a      	mov	r2, r5
 80097cc:	4638      	mov	r0, r7
 80097ce:	4b10      	ldr	r3, [pc, #64]	; (8009810 <_svfiprintf_r+0x1fc>)
 80097d0:	a904      	add	r1, sp, #16
 80097d2:	f3af 8000 	nop.w
 80097d6:	1c42      	adds	r2, r0, #1
 80097d8:	4606      	mov	r6, r0
 80097da:	d1d6      	bne.n	800978a <_svfiprintf_r+0x176>
 80097dc:	89ab      	ldrh	r3, [r5, #12]
 80097de:	065b      	lsls	r3, r3, #25
 80097e0:	f53f af2c 	bmi.w	800963c <_svfiprintf_r+0x28>
 80097e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097e6:	b01d      	add	sp, #116	; 0x74
 80097e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ec:	ab03      	add	r3, sp, #12
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	462a      	mov	r2, r5
 80097f2:	4638      	mov	r0, r7
 80097f4:	4b06      	ldr	r3, [pc, #24]	; (8009810 <_svfiprintf_r+0x1fc>)
 80097f6:	a904      	add	r1, sp, #16
 80097f8:	f000 f9d4 	bl	8009ba4 <_printf_i>
 80097fc:	e7eb      	b.n	80097d6 <_svfiprintf_r+0x1c2>
 80097fe:	bf00      	nop
 8009800:	0800a07c 	.word	0x0800a07c
 8009804:	0800a082 	.word	0x0800a082
 8009808:	0800a086 	.word	0x0800a086
 800980c:	00000000 	.word	0x00000000
 8009810:	0800955d 	.word	0x0800955d

08009814 <__sfputc_r>:
 8009814:	6893      	ldr	r3, [r2, #8]
 8009816:	b410      	push	{r4}
 8009818:	3b01      	subs	r3, #1
 800981a:	2b00      	cmp	r3, #0
 800981c:	6093      	str	r3, [r2, #8]
 800981e:	da07      	bge.n	8009830 <__sfputc_r+0x1c>
 8009820:	6994      	ldr	r4, [r2, #24]
 8009822:	42a3      	cmp	r3, r4
 8009824:	db01      	blt.n	800982a <__sfputc_r+0x16>
 8009826:	290a      	cmp	r1, #10
 8009828:	d102      	bne.n	8009830 <__sfputc_r+0x1c>
 800982a:	bc10      	pop	{r4}
 800982c:	f7ff bd30 	b.w	8009290 <__swbuf_r>
 8009830:	6813      	ldr	r3, [r2, #0]
 8009832:	1c58      	adds	r0, r3, #1
 8009834:	6010      	str	r0, [r2, #0]
 8009836:	7019      	strb	r1, [r3, #0]
 8009838:	4608      	mov	r0, r1
 800983a:	bc10      	pop	{r4}
 800983c:	4770      	bx	lr

0800983e <__sfputs_r>:
 800983e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009840:	4606      	mov	r6, r0
 8009842:	460f      	mov	r7, r1
 8009844:	4614      	mov	r4, r2
 8009846:	18d5      	adds	r5, r2, r3
 8009848:	42ac      	cmp	r4, r5
 800984a:	d101      	bne.n	8009850 <__sfputs_r+0x12>
 800984c:	2000      	movs	r0, #0
 800984e:	e007      	b.n	8009860 <__sfputs_r+0x22>
 8009850:	463a      	mov	r2, r7
 8009852:	4630      	mov	r0, r6
 8009854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009858:	f7ff ffdc 	bl	8009814 <__sfputc_r>
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	d1f3      	bne.n	8009848 <__sfputs_r+0xa>
 8009860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009864 <_vfiprintf_r>:
 8009864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009868:	460d      	mov	r5, r1
 800986a:	4614      	mov	r4, r2
 800986c:	4698      	mov	r8, r3
 800986e:	4606      	mov	r6, r0
 8009870:	b09d      	sub	sp, #116	; 0x74
 8009872:	b118      	cbz	r0, 800987c <_vfiprintf_r+0x18>
 8009874:	6983      	ldr	r3, [r0, #24]
 8009876:	b90b      	cbnz	r3, 800987c <_vfiprintf_r+0x18>
 8009878:	f7ff fa3c 	bl	8008cf4 <__sinit>
 800987c:	4b89      	ldr	r3, [pc, #548]	; (8009aa4 <_vfiprintf_r+0x240>)
 800987e:	429d      	cmp	r5, r3
 8009880:	d11b      	bne.n	80098ba <_vfiprintf_r+0x56>
 8009882:	6875      	ldr	r5, [r6, #4]
 8009884:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009886:	07d9      	lsls	r1, r3, #31
 8009888:	d405      	bmi.n	8009896 <_vfiprintf_r+0x32>
 800988a:	89ab      	ldrh	r3, [r5, #12]
 800988c:	059a      	lsls	r2, r3, #22
 800988e:	d402      	bmi.n	8009896 <_vfiprintf_r+0x32>
 8009890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009892:	f7ff faf2 	bl	8008e7a <__retarget_lock_acquire_recursive>
 8009896:	89ab      	ldrh	r3, [r5, #12]
 8009898:	071b      	lsls	r3, r3, #28
 800989a:	d501      	bpl.n	80098a0 <_vfiprintf_r+0x3c>
 800989c:	692b      	ldr	r3, [r5, #16]
 800989e:	b9eb      	cbnz	r3, 80098dc <_vfiprintf_r+0x78>
 80098a0:	4629      	mov	r1, r5
 80098a2:	4630      	mov	r0, r6
 80098a4:	f7ff fd58 	bl	8009358 <__swsetup_r>
 80098a8:	b1c0      	cbz	r0, 80098dc <_vfiprintf_r+0x78>
 80098aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098ac:	07dc      	lsls	r4, r3, #31
 80098ae:	d50e      	bpl.n	80098ce <_vfiprintf_r+0x6a>
 80098b0:	f04f 30ff 	mov.w	r0, #4294967295
 80098b4:	b01d      	add	sp, #116	; 0x74
 80098b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ba:	4b7b      	ldr	r3, [pc, #492]	; (8009aa8 <_vfiprintf_r+0x244>)
 80098bc:	429d      	cmp	r5, r3
 80098be:	d101      	bne.n	80098c4 <_vfiprintf_r+0x60>
 80098c0:	68b5      	ldr	r5, [r6, #8]
 80098c2:	e7df      	b.n	8009884 <_vfiprintf_r+0x20>
 80098c4:	4b79      	ldr	r3, [pc, #484]	; (8009aac <_vfiprintf_r+0x248>)
 80098c6:	429d      	cmp	r5, r3
 80098c8:	bf08      	it	eq
 80098ca:	68f5      	ldreq	r5, [r6, #12]
 80098cc:	e7da      	b.n	8009884 <_vfiprintf_r+0x20>
 80098ce:	89ab      	ldrh	r3, [r5, #12]
 80098d0:	0598      	lsls	r0, r3, #22
 80098d2:	d4ed      	bmi.n	80098b0 <_vfiprintf_r+0x4c>
 80098d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098d6:	f7ff fad1 	bl	8008e7c <__retarget_lock_release_recursive>
 80098da:	e7e9      	b.n	80098b0 <_vfiprintf_r+0x4c>
 80098dc:	2300      	movs	r3, #0
 80098de:	9309      	str	r3, [sp, #36]	; 0x24
 80098e0:	2320      	movs	r3, #32
 80098e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098e6:	2330      	movs	r3, #48	; 0x30
 80098e8:	f04f 0901 	mov.w	r9, #1
 80098ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80098f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009ab0 <_vfiprintf_r+0x24c>
 80098f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098f8:	4623      	mov	r3, r4
 80098fa:	469a      	mov	sl, r3
 80098fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009900:	b10a      	cbz	r2, 8009906 <_vfiprintf_r+0xa2>
 8009902:	2a25      	cmp	r2, #37	; 0x25
 8009904:	d1f9      	bne.n	80098fa <_vfiprintf_r+0x96>
 8009906:	ebba 0b04 	subs.w	fp, sl, r4
 800990a:	d00b      	beq.n	8009924 <_vfiprintf_r+0xc0>
 800990c:	465b      	mov	r3, fp
 800990e:	4622      	mov	r2, r4
 8009910:	4629      	mov	r1, r5
 8009912:	4630      	mov	r0, r6
 8009914:	f7ff ff93 	bl	800983e <__sfputs_r>
 8009918:	3001      	adds	r0, #1
 800991a:	f000 80aa 	beq.w	8009a72 <_vfiprintf_r+0x20e>
 800991e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009920:	445a      	add	r2, fp
 8009922:	9209      	str	r2, [sp, #36]	; 0x24
 8009924:	f89a 3000 	ldrb.w	r3, [sl]
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 80a2 	beq.w	8009a72 <_vfiprintf_r+0x20e>
 800992e:	2300      	movs	r3, #0
 8009930:	f04f 32ff 	mov.w	r2, #4294967295
 8009934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009938:	f10a 0a01 	add.w	sl, sl, #1
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	9307      	str	r3, [sp, #28]
 8009940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009944:	931a      	str	r3, [sp, #104]	; 0x68
 8009946:	4654      	mov	r4, sl
 8009948:	2205      	movs	r2, #5
 800994a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800994e:	4858      	ldr	r0, [pc, #352]	; (8009ab0 <_vfiprintf_r+0x24c>)
 8009950:	f000 fa82 	bl	8009e58 <memchr>
 8009954:	9a04      	ldr	r2, [sp, #16]
 8009956:	b9d8      	cbnz	r0, 8009990 <_vfiprintf_r+0x12c>
 8009958:	06d1      	lsls	r1, r2, #27
 800995a:	bf44      	itt	mi
 800995c:	2320      	movmi	r3, #32
 800995e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009962:	0713      	lsls	r3, r2, #28
 8009964:	bf44      	itt	mi
 8009966:	232b      	movmi	r3, #43	; 0x2b
 8009968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800996c:	f89a 3000 	ldrb.w	r3, [sl]
 8009970:	2b2a      	cmp	r3, #42	; 0x2a
 8009972:	d015      	beq.n	80099a0 <_vfiprintf_r+0x13c>
 8009974:	4654      	mov	r4, sl
 8009976:	2000      	movs	r0, #0
 8009978:	f04f 0c0a 	mov.w	ip, #10
 800997c:	9a07      	ldr	r2, [sp, #28]
 800997e:	4621      	mov	r1, r4
 8009980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009984:	3b30      	subs	r3, #48	; 0x30
 8009986:	2b09      	cmp	r3, #9
 8009988:	d94e      	bls.n	8009a28 <_vfiprintf_r+0x1c4>
 800998a:	b1b0      	cbz	r0, 80099ba <_vfiprintf_r+0x156>
 800998c:	9207      	str	r2, [sp, #28]
 800998e:	e014      	b.n	80099ba <_vfiprintf_r+0x156>
 8009990:	eba0 0308 	sub.w	r3, r0, r8
 8009994:	fa09 f303 	lsl.w	r3, r9, r3
 8009998:	4313      	orrs	r3, r2
 800999a:	46a2      	mov	sl, r4
 800999c:	9304      	str	r3, [sp, #16]
 800999e:	e7d2      	b.n	8009946 <_vfiprintf_r+0xe2>
 80099a0:	9b03      	ldr	r3, [sp, #12]
 80099a2:	1d19      	adds	r1, r3, #4
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	9103      	str	r1, [sp, #12]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	bfbb      	ittet	lt
 80099ac:	425b      	neglt	r3, r3
 80099ae:	f042 0202 	orrlt.w	r2, r2, #2
 80099b2:	9307      	strge	r3, [sp, #28]
 80099b4:	9307      	strlt	r3, [sp, #28]
 80099b6:	bfb8      	it	lt
 80099b8:	9204      	strlt	r2, [sp, #16]
 80099ba:	7823      	ldrb	r3, [r4, #0]
 80099bc:	2b2e      	cmp	r3, #46	; 0x2e
 80099be:	d10c      	bne.n	80099da <_vfiprintf_r+0x176>
 80099c0:	7863      	ldrb	r3, [r4, #1]
 80099c2:	2b2a      	cmp	r3, #42	; 0x2a
 80099c4:	d135      	bne.n	8009a32 <_vfiprintf_r+0x1ce>
 80099c6:	9b03      	ldr	r3, [sp, #12]
 80099c8:	3402      	adds	r4, #2
 80099ca:	1d1a      	adds	r2, r3, #4
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	9203      	str	r2, [sp, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	bfb8      	it	lt
 80099d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80099d8:	9305      	str	r3, [sp, #20]
 80099da:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009ab4 <_vfiprintf_r+0x250>
 80099de:	2203      	movs	r2, #3
 80099e0:	4650      	mov	r0, sl
 80099e2:	7821      	ldrb	r1, [r4, #0]
 80099e4:	f000 fa38 	bl	8009e58 <memchr>
 80099e8:	b140      	cbz	r0, 80099fc <_vfiprintf_r+0x198>
 80099ea:	2340      	movs	r3, #64	; 0x40
 80099ec:	eba0 000a 	sub.w	r0, r0, sl
 80099f0:	fa03 f000 	lsl.w	r0, r3, r0
 80099f4:	9b04      	ldr	r3, [sp, #16]
 80099f6:	3401      	adds	r4, #1
 80099f8:	4303      	orrs	r3, r0
 80099fa:	9304      	str	r3, [sp, #16]
 80099fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a00:	2206      	movs	r2, #6
 8009a02:	482d      	ldr	r0, [pc, #180]	; (8009ab8 <_vfiprintf_r+0x254>)
 8009a04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a08:	f000 fa26 	bl	8009e58 <memchr>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d03f      	beq.n	8009a90 <_vfiprintf_r+0x22c>
 8009a10:	4b2a      	ldr	r3, [pc, #168]	; (8009abc <_vfiprintf_r+0x258>)
 8009a12:	bb1b      	cbnz	r3, 8009a5c <_vfiprintf_r+0x1f8>
 8009a14:	9b03      	ldr	r3, [sp, #12]
 8009a16:	3307      	adds	r3, #7
 8009a18:	f023 0307 	bic.w	r3, r3, #7
 8009a1c:	3308      	adds	r3, #8
 8009a1e:	9303      	str	r3, [sp, #12]
 8009a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a22:	443b      	add	r3, r7
 8009a24:	9309      	str	r3, [sp, #36]	; 0x24
 8009a26:	e767      	b.n	80098f8 <_vfiprintf_r+0x94>
 8009a28:	460c      	mov	r4, r1
 8009a2a:	2001      	movs	r0, #1
 8009a2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a30:	e7a5      	b.n	800997e <_vfiprintf_r+0x11a>
 8009a32:	2300      	movs	r3, #0
 8009a34:	f04f 0c0a 	mov.w	ip, #10
 8009a38:	4619      	mov	r1, r3
 8009a3a:	3401      	adds	r4, #1
 8009a3c:	9305      	str	r3, [sp, #20]
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a44:	3a30      	subs	r2, #48	; 0x30
 8009a46:	2a09      	cmp	r2, #9
 8009a48:	d903      	bls.n	8009a52 <_vfiprintf_r+0x1ee>
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d0c5      	beq.n	80099da <_vfiprintf_r+0x176>
 8009a4e:	9105      	str	r1, [sp, #20]
 8009a50:	e7c3      	b.n	80099da <_vfiprintf_r+0x176>
 8009a52:	4604      	mov	r4, r0
 8009a54:	2301      	movs	r3, #1
 8009a56:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a5a:	e7f0      	b.n	8009a3e <_vfiprintf_r+0x1da>
 8009a5c:	ab03      	add	r3, sp, #12
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	462a      	mov	r2, r5
 8009a62:	4630      	mov	r0, r6
 8009a64:	4b16      	ldr	r3, [pc, #88]	; (8009ac0 <_vfiprintf_r+0x25c>)
 8009a66:	a904      	add	r1, sp, #16
 8009a68:	f3af 8000 	nop.w
 8009a6c:	4607      	mov	r7, r0
 8009a6e:	1c78      	adds	r0, r7, #1
 8009a70:	d1d6      	bne.n	8009a20 <_vfiprintf_r+0x1bc>
 8009a72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a74:	07d9      	lsls	r1, r3, #31
 8009a76:	d405      	bmi.n	8009a84 <_vfiprintf_r+0x220>
 8009a78:	89ab      	ldrh	r3, [r5, #12]
 8009a7a:	059a      	lsls	r2, r3, #22
 8009a7c:	d402      	bmi.n	8009a84 <_vfiprintf_r+0x220>
 8009a7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a80:	f7ff f9fc 	bl	8008e7c <__retarget_lock_release_recursive>
 8009a84:	89ab      	ldrh	r3, [r5, #12]
 8009a86:	065b      	lsls	r3, r3, #25
 8009a88:	f53f af12 	bmi.w	80098b0 <_vfiprintf_r+0x4c>
 8009a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a8e:	e711      	b.n	80098b4 <_vfiprintf_r+0x50>
 8009a90:	ab03      	add	r3, sp, #12
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	462a      	mov	r2, r5
 8009a96:	4630      	mov	r0, r6
 8009a98:	4b09      	ldr	r3, [pc, #36]	; (8009ac0 <_vfiprintf_r+0x25c>)
 8009a9a:	a904      	add	r1, sp, #16
 8009a9c:	f000 f882 	bl	8009ba4 <_printf_i>
 8009aa0:	e7e4      	b.n	8009a6c <_vfiprintf_r+0x208>
 8009aa2:	bf00      	nop
 8009aa4:	0800a038 	.word	0x0800a038
 8009aa8:	0800a058 	.word	0x0800a058
 8009aac:	0800a018 	.word	0x0800a018
 8009ab0:	0800a07c 	.word	0x0800a07c
 8009ab4:	0800a082 	.word	0x0800a082
 8009ab8:	0800a086 	.word	0x0800a086
 8009abc:	00000000 	.word	0x00000000
 8009ac0:	0800983f 	.word	0x0800983f

08009ac4 <_printf_common>:
 8009ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac8:	4616      	mov	r6, r2
 8009aca:	4699      	mov	r9, r3
 8009acc:	688a      	ldr	r2, [r1, #8]
 8009ace:	690b      	ldr	r3, [r1, #16]
 8009ad0:	4607      	mov	r7, r0
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	bfb8      	it	lt
 8009ad6:	4613      	movlt	r3, r2
 8009ad8:	6033      	str	r3, [r6, #0]
 8009ada:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ade:	460c      	mov	r4, r1
 8009ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ae4:	b10a      	cbz	r2, 8009aea <_printf_common+0x26>
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	6033      	str	r3, [r6, #0]
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	0699      	lsls	r1, r3, #26
 8009aee:	bf42      	ittt	mi
 8009af0:	6833      	ldrmi	r3, [r6, #0]
 8009af2:	3302      	addmi	r3, #2
 8009af4:	6033      	strmi	r3, [r6, #0]
 8009af6:	6825      	ldr	r5, [r4, #0]
 8009af8:	f015 0506 	ands.w	r5, r5, #6
 8009afc:	d106      	bne.n	8009b0c <_printf_common+0x48>
 8009afe:	f104 0a19 	add.w	sl, r4, #25
 8009b02:	68e3      	ldr	r3, [r4, #12]
 8009b04:	6832      	ldr	r2, [r6, #0]
 8009b06:	1a9b      	subs	r3, r3, r2
 8009b08:	42ab      	cmp	r3, r5
 8009b0a:	dc28      	bgt.n	8009b5e <_printf_common+0x9a>
 8009b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b10:	1e13      	subs	r3, r2, #0
 8009b12:	6822      	ldr	r2, [r4, #0]
 8009b14:	bf18      	it	ne
 8009b16:	2301      	movne	r3, #1
 8009b18:	0692      	lsls	r2, r2, #26
 8009b1a:	d42d      	bmi.n	8009b78 <_printf_common+0xb4>
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	4638      	mov	r0, r7
 8009b20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b24:	47c0      	blx	r8
 8009b26:	3001      	adds	r0, #1
 8009b28:	d020      	beq.n	8009b6c <_printf_common+0xa8>
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	68e5      	ldr	r5, [r4, #12]
 8009b2e:	f003 0306 	and.w	r3, r3, #6
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	bf18      	it	ne
 8009b36:	2500      	movne	r5, #0
 8009b38:	6832      	ldr	r2, [r6, #0]
 8009b3a:	f04f 0600 	mov.w	r6, #0
 8009b3e:	68a3      	ldr	r3, [r4, #8]
 8009b40:	bf08      	it	eq
 8009b42:	1aad      	subeq	r5, r5, r2
 8009b44:	6922      	ldr	r2, [r4, #16]
 8009b46:	bf08      	it	eq
 8009b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	bfc4      	itt	gt
 8009b50:	1a9b      	subgt	r3, r3, r2
 8009b52:	18ed      	addgt	r5, r5, r3
 8009b54:	341a      	adds	r4, #26
 8009b56:	42b5      	cmp	r5, r6
 8009b58:	d11a      	bne.n	8009b90 <_printf_common+0xcc>
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	e008      	b.n	8009b70 <_printf_common+0xac>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	4652      	mov	r2, sl
 8009b62:	4649      	mov	r1, r9
 8009b64:	4638      	mov	r0, r7
 8009b66:	47c0      	blx	r8
 8009b68:	3001      	adds	r0, #1
 8009b6a:	d103      	bne.n	8009b74 <_printf_common+0xb0>
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b74:	3501      	adds	r5, #1
 8009b76:	e7c4      	b.n	8009b02 <_printf_common+0x3e>
 8009b78:	2030      	movs	r0, #48	; 0x30
 8009b7a:	18e1      	adds	r1, r4, r3
 8009b7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b80:	1c5a      	adds	r2, r3, #1
 8009b82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b86:	4422      	add	r2, r4
 8009b88:	3302      	adds	r3, #2
 8009b8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b8e:	e7c5      	b.n	8009b1c <_printf_common+0x58>
 8009b90:	2301      	movs	r3, #1
 8009b92:	4622      	mov	r2, r4
 8009b94:	4649      	mov	r1, r9
 8009b96:	4638      	mov	r0, r7
 8009b98:	47c0      	blx	r8
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	d0e6      	beq.n	8009b6c <_printf_common+0xa8>
 8009b9e:	3601      	adds	r6, #1
 8009ba0:	e7d9      	b.n	8009b56 <_printf_common+0x92>
	...

08009ba4 <_printf_i>:
 8009ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba8:	7e0f      	ldrb	r7, [r1, #24]
 8009baa:	4691      	mov	r9, r2
 8009bac:	2f78      	cmp	r7, #120	; 0x78
 8009bae:	4680      	mov	r8, r0
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	469a      	mov	sl, r3
 8009bb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bba:	d807      	bhi.n	8009bcc <_printf_i+0x28>
 8009bbc:	2f62      	cmp	r7, #98	; 0x62
 8009bbe:	d80a      	bhi.n	8009bd6 <_printf_i+0x32>
 8009bc0:	2f00      	cmp	r7, #0
 8009bc2:	f000 80d9 	beq.w	8009d78 <_printf_i+0x1d4>
 8009bc6:	2f58      	cmp	r7, #88	; 0x58
 8009bc8:	f000 80a4 	beq.w	8009d14 <_printf_i+0x170>
 8009bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bd4:	e03a      	b.n	8009c4c <_printf_i+0xa8>
 8009bd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bda:	2b15      	cmp	r3, #21
 8009bdc:	d8f6      	bhi.n	8009bcc <_printf_i+0x28>
 8009bde:	a101      	add	r1, pc, #4	; (adr r1, 8009be4 <_printf_i+0x40>)
 8009be0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009be4:	08009c3d 	.word	0x08009c3d
 8009be8:	08009c51 	.word	0x08009c51
 8009bec:	08009bcd 	.word	0x08009bcd
 8009bf0:	08009bcd 	.word	0x08009bcd
 8009bf4:	08009bcd 	.word	0x08009bcd
 8009bf8:	08009bcd 	.word	0x08009bcd
 8009bfc:	08009c51 	.word	0x08009c51
 8009c00:	08009bcd 	.word	0x08009bcd
 8009c04:	08009bcd 	.word	0x08009bcd
 8009c08:	08009bcd 	.word	0x08009bcd
 8009c0c:	08009bcd 	.word	0x08009bcd
 8009c10:	08009d5f 	.word	0x08009d5f
 8009c14:	08009c81 	.word	0x08009c81
 8009c18:	08009d41 	.word	0x08009d41
 8009c1c:	08009bcd 	.word	0x08009bcd
 8009c20:	08009bcd 	.word	0x08009bcd
 8009c24:	08009d81 	.word	0x08009d81
 8009c28:	08009bcd 	.word	0x08009bcd
 8009c2c:	08009c81 	.word	0x08009c81
 8009c30:	08009bcd 	.word	0x08009bcd
 8009c34:	08009bcd 	.word	0x08009bcd
 8009c38:	08009d49 	.word	0x08009d49
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	1d1a      	adds	r2, r3, #4
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	602a      	str	r2, [r5, #0]
 8009c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e0a4      	b.n	8009d9a <_printf_i+0x1f6>
 8009c50:	6820      	ldr	r0, [r4, #0]
 8009c52:	6829      	ldr	r1, [r5, #0]
 8009c54:	0606      	lsls	r6, r0, #24
 8009c56:	f101 0304 	add.w	r3, r1, #4
 8009c5a:	d50a      	bpl.n	8009c72 <_printf_i+0xce>
 8009c5c:	680e      	ldr	r6, [r1, #0]
 8009c5e:	602b      	str	r3, [r5, #0]
 8009c60:	2e00      	cmp	r6, #0
 8009c62:	da03      	bge.n	8009c6c <_printf_i+0xc8>
 8009c64:	232d      	movs	r3, #45	; 0x2d
 8009c66:	4276      	negs	r6, r6
 8009c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c6c:	230a      	movs	r3, #10
 8009c6e:	485e      	ldr	r0, [pc, #376]	; (8009de8 <_printf_i+0x244>)
 8009c70:	e019      	b.n	8009ca6 <_printf_i+0x102>
 8009c72:	680e      	ldr	r6, [r1, #0]
 8009c74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c78:	602b      	str	r3, [r5, #0]
 8009c7a:	bf18      	it	ne
 8009c7c:	b236      	sxthne	r6, r6
 8009c7e:	e7ef      	b.n	8009c60 <_printf_i+0xbc>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	6820      	ldr	r0, [r4, #0]
 8009c84:	1d19      	adds	r1, r3, #4
 8009c86:	6029      	str	r1, [r5, #0]
 8009c88:	0601      	lsls	r1, r0, #24
 8009c8a:	d501      	bpl.n	8009c90 <_printf_i+0xec>
 8009c8c:	681e      	ldr	r6, [r3, #0]
 8009c8e:	e002      	b.n	8009c96 <_printf_i+0xf2>
 8009c90:	0646      	lsls	r6, r0, #25
 8009c92:	d5fb      	bpl.n	8009c8c <_printf_i+0xe8>
 8009c94:	881e      	ldrh	r6, [r3, #0]
 8009c96:	2f6f      	cmp	r7, #111	; 0x6f
 8009c98:	bf0c      	ite	eq
 8009c9a:	2308      	moveq	r3, #8
 8009c9c:	230a      	movne	r3, #10
 8009c9e:	4852      	ldr	r0, [pc, #328]	; (8009de8 <_printf_i+0x244>)
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ca6:	6865      	ldr	r5, [r4, #4]
 8009ca8:	2d00      	cmp	r5, #0
 8009caa:	bfa8      	it	ge
 8009cac:	6821      	ldrge	r1, [r4, #0]
 8009cae:	60a5      	str	r5, [r4, #8]
 8009cb0:	bfa4      	itt	ge
 8009cb2:	f021 0104 	bicge.w	r1, r1, #4
 8009cb6:	6021      	strge	r1, [r4, #0]
 8009cb8:	b90e      	cbnz	r6, 8009cbe <_printf_i+0x11a>
 8009cba:	2d00      	cmp	r5, #0
 8009cbc:	d04d      	beq.n	8009d5a <_printf_i+0x1b6>
 8009cbe:	4615      	mov	r5, r2
 8009cc0:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cc4:	fb03 6711 	mls	r7, r3, r1, r6
 8009cc8:	5dc7      	ldrb	r7, [r0, r7]
 8009cca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cce:	4637      	mov	r7, r6
 8009cd0:	42bb      	cmp	r3, r7
 8009cd2:	460e      	mov	r6, r1
 8009cd4:	d9f4      	bls.n	8009cc0 <_printf_i+0x11c>
 8009cd6:	2b08      	cmp	r3, #8
 8009cd8:	d10b      	bne.n	8009cf2 <_printf_i+0x14e>
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	07de      	lsls	r6, r3, #31
 8009cde:	d508      	bpl.n	8009cf2 <_printf_i+0x14e>
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	6861      	ldr	r1, [r4, #4]
 8009ce4:	4299      	cmp	r1, r3
 8009ce6:	bfde      	ittt	le
 8009ce8:	2330      	movle	r3, #48	; 0x30
 8009cea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cf2:	1b52      	subs	r2, r2, r5
 8009cf4:	6122      	str	r2, [r4, #16]
 8009cf6:	464b      	mov	r3, r9
 8009cf8:	4621      	mov	r1, r4
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	f8cd a000 	str.w	sl, [sp]
 8009d00:	aa03      	add	r2, sp, #12
 8009d02:	f7ff fedf 	bl	8009ac4 <_printf_common>
 8009d06:	3001      	adds	r0, #1
 8009d08:	d14c      	bne.n	8009da4 <_printf_i+0x200>
 8009d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0e:	b004      	add	sp, #16
 8009d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d14:	4834      	ldr	r0, [pc, #208]	; (8009de8 <_printf_i+0x244>)
 8009d16:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d1a:	6829      	ldr	r1, [r5, #0]
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d22:	6029      	str	r1, [r5, #0]
 8009d24:	061d      	lsls	r5, r3, #24
 8009d26:	d514      	bpl.n	8009d52 <_printf_i+0x1ae>
 8009d28:	07df      	lsls	r7, r3, #31
 8009d2a:	bf44      	itt	mi
 8009d2c:	f043 0320 	orrmi.w	r3, r3, #32
 8009d30:	6023      	strmi	r3, [r4, #0]
 8009d32:	b91e      	cbnz	r6, 8009d3c <_printf_i+0x198>
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	f023 0320 	bic.w	r3, r3, #32
 8009d3a:	6023      	str	r3, [r4, #0]
 8009d3c:	2310      	movs	r3, #16
 8009d3e:	e7af      	b.n	8009ca0 <_printf_i+0xfc>
 8009d40:	6823      	ldr	r3, [r4, #0]
 8009d42:	f043 0320 	orr.w	r3, r3, #32
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	2378      	movs	r3, #120	; 0x78
 8009d4a:	4828      	ldr	r0, [pc, #160]	; (8009dec <_printf_i+0x248>)
 8009d4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d50:	e7e3      	b.n	8009d1a <_printf_i+0x176>
 8009d52:	0659      	lsls	r1, r3, #25
 8009d54:	bf48      	it	mi
 8009d56:	b2b6      	uxthmi	r6, r6
 8009d58:	e7e6      	b.n	8009d28 <_printf_i+0x184>
 8009d5a:	4615      	mov	r5, r2
 8009d5c:	e7bb      	b.n	8009cd6 <_printf_i+0x132>
 8009d5e:	682b      	ldr	r3, [r5, #0]
 8009d60:	6826      	ldr	r6, [r4, #0]
 8009d62:	1d18      	adds	r0, r3, #4
 8009d64:	6961      	ldr	r1, [r4, #20]
 8009d66:	6028      	str	r0, [r5, #0]
 8009d68:	0635      	lsls	r5, r6, #24
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	d501      	bpl.n	8009d72 <_printf_i+0x1ce>
 8009d6e:	6019      	str	r1, [r3, #0]
 8009d70:	e002      	b.n	8009d78 <_printf_i+0x1d4>
 8009d72:	0670      	lsls	r0, r6, #25
 8009d74:	d5fb      	bpl.n	8009d6e <_printf_i+0x1ca>
 8009d76:	8019      	strh	r1, [r3, #0]
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4615      	mov	r5, r2
 8009d7c:	6123      	str	r3, [r4, #16]
 8009d7e:	e7ba      	b.n	8009cf6 <_printf_i+0x152>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	2100      	movs	r1, #0
 8009d84:	1d1a      	adds	r2, r3, #4
 8009d86:	602a      	str	r2, [r5, #0]
 8009d88:	681d      	ldr	r5, [r3, #0]
 8009d8a:	6862      	ldr	r2, [r4, #4]
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f000 f863 	bl	8009e58 <memchr>
 8009d92:	b108      	cbz	r0, 8009d98 <_printf_i+0x1f4>
 8009d94:	1b40      	subs	r0, r0, r5
 8009d96:	6060      	str	r0, [r4, #4]
 8009d98:	6863      	ldr	r3, [r4, #4]
 8009d9a:	6123      	str	r3, [r4, #16]
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009da2:	e7a8      	b.n	8009cf6 <_printf_i+0x152>
 8009da4:	462a      	mov	r2, r5
 8009da6:	4649      	mov	r1, r9
 8009da8:	4640      	mov	r0, r8
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	47d0      	blx	sl
 8009dae:	3001      	adds	r0, #1
 8009db0:	d0ab      	beq.n	8009d0a <_printf_i+0x166>
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	079b      	lsls	r3, r3, #30
 8009db6:	d413      	bmi.n	8009de0 <_printf_i+0x23c>
 8009db8:	68e0      	ldr	r0, [r4, #12]
 8009dba:	9b03      	ldr	r3, [sp, #12]
 8009dbc:	4298      	cmp	r0, r3
 8009dbe:	bfb8      	it	lt
 8009dc0:	4618      	movlt	r0, r3
 8009dc2:	e7a4      	b.n	8009d0e <_printf_i+0x16a>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	4632      	mov	r2, r6
 8009dc8:	4649      	mov	r1, r9
 8009dca:	4640      	mov	r0, r8
 8009dcc:	47d0      	blx	sl
 8009dce:	3001      	adds	r0, #1
 8009dd0:	d09b      	beq.n	8009d0a <_printf_i+0x166>
 8009dd2:	3501      	adds	r5, #1
 8009dd4:	68e3      	ldr	r3, [r4, #12]
 8009dd6:	9903      	ldr	r1, [sp, #12]
 8009dd8:	1a5b      	subs	r3, r3, r1
 8009dda:	42ab      	cmp	r3, r5
 8009ddc:	dcf2      	bgt.n	8009dc4 <_printf_i+0x220>
 8009dde:	e7eb      	b.n	8009db8 <_printf_i+0x214>
 8009de0:	2500      	movs	r5, #0
 8009de2:	f104 0619 	add.w	r6, r4, #25
 8009de6:	e7f5      	b.n	8009dd4 <_printf_i+0x230>
 8009de8:	0800a08d 	.word	0x0800a08d
 8009dec:	0800a09e 	.word	0x0800a09e

08009df0 <_read_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4604      	mov	r4, r0
 8009df4:	4608      	mov	r0, r1
 8009df6:	4611      	mov	r1, r2
 8009df8:	2200      	movs	r2, #0
 8009dfa:	4d05      	ldr	r5, [pc, #20]	; (8009e10 <_read_r+0x20>)
 8009dfc:	602a      	str	r2, [r5, #0]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	f7f6 fbea 	bl	80005d8 <_read>
 8009e04:	1c43      	adds	r3, r0, #1
 8009e06:	d102      	bne.n	8009e0e <_read_r+0x1e>
 8009e08:	682b      	ldr	r3, [r5, #0]
 8009e0a:	b103      	cbz	r3, 8009e0e <_read_r+0x1e>
 8009e0c:	6023      	str	r3, [r4, #0]
 8009e0e:	bd38      	pop	{r3, r4, r5, pc}
 8009e10:	20001778 	.word	0x20001778

08009e14 <_fstat_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	2300      	movs	r3, #0
 8009e18:	4d06      	ldr	r5, [pc, #24]	; (8009e34 <_fstat_r+0x20>)
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	4611      	mov	r1, r2
 8009e20:	602b      	str	r3, [r5, #0]
 8009e22:	f7f6 fc01 	bl	8000628 <_fstat>
 8009e26:	1c43      	adds	r3, r0, #1
 8009e28:	d102      	bne.n	8009e30 <_fstat_r+0x1c>
 8009e2a:	682b      	ldr	r3, [r5, #0]
 8009e2c:	b103      	cbz	r3, 8009e30 <_fstat_r+0x1c>
 8009e2e:	6023      	str	r3, [r4, #0]
 8009e30:	bd38      	pop	{r3, r4, r5, pc}
 8009e32:	bf00      	nop
 8009e34:	20001778 	.word	0x20001778

08009e38 <_isatty_r>:
 8009e38:	b538      	push	{r3, r4, r5, lr}
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	4d05      	ldr	r5, [pc, #20]	; (8009e54 <_isatty_r+0x1c>)
 8009e3e:	4604      	mov	r4, r0
 8009e40:	4608      	mov	r0, r1
 8009e42:	602b      	str	r3, [r5, #0]
 8009e44:	f7f6 fbff 	bl	8000646 <_isatty>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_isatty_r+0x1a>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_isatty_r+0x1a>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	20001778 	.word	0x20001778

08009e58 <memchr>:
 8009e58:	4603      	mov	r3, r0
 8009e5a:	b510      	push	{r4, lr}
 8009e5c:	b2c9      	uxtb	r1, r1
 8009e5e:	4402      	add	r2, r0
 8009e60:	4293      	cmp	r3, r2
 8009e62:	4618      	mov	r0, r3
 8009e64:	d101      	bne.n	8009e6a <memchr+0x12>
 8009e66:	2000      	movs	r0, #0
 8009e68:	e003      	b.n	8009e72 <memchr+0x1a>
 8009e6a:	7804      	ldrb	r4, [r0, #0]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	428c      	cmp	r4, r1
 8009e70:	d1f6      	bne.n	8009e60 <memchr+0x8>
 8009e72:	bd10      	pop	{r4, pc}

08009e74 <memmove>:
 8009e74:	4288      	cmp	r0, r1
 8009e76:	b510      	push	{r4, lr}
 8009e78:	eb01 0402 	add.w	r4, r1, r2
 8009e7c:	d902      	bls.n	8009e84 <memmove+0x10>
 8009e7e:	4284      	cmp	r4, r0
 8009e80:	4623      	mov	r3, r4
 8009e82:	d807      	bhi.n	8009e94 <memmove+0x20>
 8009e84:	1e43      	subs	r3, r0, #1
 8009e86:	42a1      	cmp	r1, r4
 8009e88:	d008      	beq.n	8009e9c <memmove+0x28>
 8009e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e92:	e7f8      	b.n	8009e86 <memmove+0x12>
 8009e94:	4601      	mov	r1, r0
 8009e96:	4402      	add	r2, r0
 8009e98:	428a      	cmp	r2, r1
 8009e9a:	d100      	bne.n	8009e9e <memmove+0x2a>
 8009e9c:	bd10      	pop	{r4, pc}
 8009e9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ea2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ea6:	e7f7      	b.n	8009e98 <memmove+0x24>

08009ea8 <_realloc_r>:
 8009ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eac:	4680      	mov	r8, r0
 8009eae:	4614      	mov	r4, r2
 8009eb0:	460e      	mov	r6, r1
 8009eb2:	b921      	cbnz	r1, 8009ebe <_realloc_r+0x16>
 8009eb4:	4611      	mov	r1, r2
 8009eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eba:	f7ff b85f 	b.w	8008f7c <_malloc_r>
 8009ebe:	b92a      	cbnz	r2, 8009ecc <_realloc_r+0x24>
 8009ec0:	f7fe fff4 	bl	8008eac <_free_r>
 8009ec4:	4625      	mov	r5, r4
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ecc:	f000 f81b 	bl	8009f06 <_malloc_usable_size_r>
 8009ed0:	4284      	cmp	r4, r0
 8009ed2:	4607      	mov	r7, r0
 8009ed4:	d802      	bhi.n	8009edc <_realloc_r+0x34>
 8009ed6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009eda:	d812      	bhi.n	8009f02 <_realloc_r+0x5a>
 8009edc:	4621      	mov	r1, r4
 8009ede:	4640      	mov	r0, r8
 8009ee0:	f7ff f84c 	bl	8008f7c <_malloc_r>
 8009ee4:	4605      	mov	r5, r0
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d0ed      	beq.n	8009ec6 <_realloc_r+0x1e>
 8009eea:	42bc      	cmp	r4, r7
 8009eec:	4622      	mov	r2, r4
 8009eee:	4631      	mov	r1, r6
 8009ef0:	bf28      	it	cs
 8009ef2:	463a      	movcs	r2, r7
 8009ef4:	f7fe ffc3 	bl	8008e7e <memcpy>
 8009ef8:	4631      	mov	r1, r6
 8009efa:	4640      	mov	r0, r8
 8009efc:	f7fe ffd6 	bl	8008eac <_free_r>
 8009f00:	e7e1      	b.n	8009ec6 <_realloc_r+0x1e>
 8009f02:	4635      	mov	r5, r6
 8009f04:	e7df      	b.n	8009ec6 <_realloc_r+0x1e>

08009f06 <_malloc_usable_size_r>:
 8009f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f0a:	1f18      	subs	r0, r3, #4
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	bfbc      	itt	lt
 8009f10:	580b      	ldrlt	r3, [r1, r0]
 8009f12:	18c0      	addlt	r0, r0, r3
 8009f14:	4770      	bx	lr
	...

08009f18 <_init>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	bf00      	nop
 8009f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f1e:	bc08      	pop	{r3}
 8009f20:	469e      	mov	lr, r3
 8009f22:	4770      	bx	lr

08009f24 <_fini>:
 8009f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f26:	bf00      	nop
 8009f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2a:	bc08      	pop	{r3}
 8009f2c:	469e      	mov	lr, r3
 8009f2e:	4770      	bx	lr
